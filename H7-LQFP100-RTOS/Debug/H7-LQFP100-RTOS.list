
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015870  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08015b10  08015b10  00025b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015fa4  08015fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015fac  08015fac  00025fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015fb0  08015fb0  00025fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08015fb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054d0  24000120  080160b8  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240055f0  080160b8  000355f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038855  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d1e  00000000  00000000  00068987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027b0  00000000  00000000  0006f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024d8  00000000  00000000  00071e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044570  00000000  00000000  00074330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b472  00000000  00000000  000b88a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194909  00000000  00000000  000f3d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028861b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad84  00000000  00000000  0028866c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015af8 	.word	0x08015af8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08015af8 	.word	0x08015af8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 f9bd 	bl	80039e8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fc28 	bl	8001ec8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 fad8 	bl	8004c38 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fc1b 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f003 fc1b 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fc02 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f003 fc0d 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fbf4 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f003 fbff 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fbe6 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f003 fbf1 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fbd8 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f003 fbe2 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fbc9 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f003 fbd3 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fbba 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f003 fbc4 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fbab 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f003 fbb5 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fb9c 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f003 fba6 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fb8d 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f003 fb97 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fb7e 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 fb88 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fb6f 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 f8a5 	bl	80039e8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fb10 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 fb10 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 faf7 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 fb02 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fae9 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 faf4 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fadb 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 fae6 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 facd 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f007 fd28 	bl	8008450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f007 fd1c 	bl	8008450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f007 fd10 	bl	8008450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f004 fea3 	bl	80057c0 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fa22 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f002 fd5e 	bl	80035a0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f002 fd58 	bl	80035a0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f004 fe43 	bl	80057c0 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 f9c2 	bl	8001ec8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f014 faad 	bl	80150ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 fa0b 	bl	8004fb4 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 f990 	bl	8001ec8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f004 fc26 	bl	8005414 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 f97b 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f007 fbfb 	bl	8008450 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f004 fd8e 	bl	80057c0 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 f90d 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 f950 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 f967 	bl	8004f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 f927 	bl	8004f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 f93e 	bl	8004f98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 f91f 	bl	8004f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 f936 	bl	8004f98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 f917 	bl	8004f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 f92e 	bl	8004f98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 f90f 	bl	8004f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 f926 	bl	8004f98 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000834 	.word	0x24000834

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f010 fe4d 	bl	8011a1c <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f010 fe45 	bl	8011a1c <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f010 fe3d 	bl	8011a1c <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f010 fe35 	bl	8011a1c <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f010 fe2d 	bl	8011a1c <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f010 fe25 	bl	8011a1c <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f010 fe1d 	bl	8011a1c <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f010 fe15 	bl	8011a1c <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f010 fe0d 	bl	8011a1c <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f010 fe05 	bl	8011a1c <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08015d50 	.word	0x08015d50
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000380 	.word	0x24000380
 8000e28:	08015d74 	.word	0x08015d74
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000384 	.word	0x24000384
 8000e34:	08015d98 	.word	0x08015d98
 8000e38:	08000ecd 	.word	0x08000ecd
 8000e3c:	24000388 	.word	0x24000388
 8000e40:	08015dbc 	.word	0x08015dbc
 8000e44:	08000edd 	.word	0x08000edd
 8000e48:	2400038c 	.word	0x2400038c
 8000e4c:	08015de0 	.word	0x08015de0
 8000e50:	08000f55 	.word	0x08000f55
 8000e54:	24000390 	.word	0x24000390
 8000e58:	08015e04 	.word	0x08015e04
 8000e5c:	08000fcd 	.word	0x08000fcd
 8000e60:	24000394 	.word	0x24000394
 8000e64:	08015e28 	.word	0x08015e28
 8000e68:	08001085 	.word	0x08001085
 8000e6c:	24000398 	.word	0x24000398
 8000e70:	08015e4c 	.word	0x08015e4c
 8000e74:	08001095 	.word	0x08001095
 8000e78:	2400039c 	.word	0x2400039c
 8000e7c:	08015e70 	.word	0x08015e70
 8000e80:	080010a5 	.word	0x080010a5
 8000e84:	240003a0 	.word	0x240003a0
 8000e88:	08015e94 	.word	0x08015e94
 8000e8c:	080010b5 	.word	0x080010b5
 8000e90:	240003a4 	.word	0x240003a4

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f010 ff08 	bl	8011cbc <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 f832 	bl	8001f14 <create_pmt_packet>

		osThreadYield();
 8000eb0:	f010 fe46 	bl	8011b40 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007e4 	.word	0x240007e4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f010 fe5b 	bl	8011b80 <osDelay>
 8000eca:	e7fb      	b.n	8000ec4 <ERPA_init+0x8>

08000ecc <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f010 fe53 	bl	8011b80 <osDelay>
 8000eda:	e7fb      	b.n	8000ed4 <HK_init+0x8>

08000edc <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <AUTOINIT_init+0x70>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	f010 fee4 	bl	8011cbc <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e012      	b.n	8000f20 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <AUTOINIT_init+0x74>)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <AUTOINIT_init+0x74>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	889b      	ldrh	r3, [r3, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f007 fc66 	bl	80087e0 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f14:	2064      	movs	r0, #100	; 0x64
 8000f16:	f010 fe33 	bl	8011b80 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	dde9      	ble.n	8000efa <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f26:	2308      	movs	r3, #8
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	e008      	b.n	8000f3e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2101      	movs	r1, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fa82 	bl	800343c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b0d      	cmp	r3, #13
 8000f42:	ddf3      	ble.n	8000f2c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f44:	f010 fdfc 	bl	8011b40 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f48:	e7cc      	b.n	8000ee4 <AUTOINIT_init+0x8>
 8000f4a:	bf00      	nop
 8000f4c:	240007e8 	.word	0x240007e8
 8000f50:	08015eb8 	.word	0x08015eb8

08000f54 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <AUTODEINIT_init+0x70>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	f010 fea8 	bl	8011cbc <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f6c:	230d      	movs	r3, #13
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e008      	b.n	8000f84 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fa5f 	bl	800343c <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	dcf3      	bgt.n	8000f72 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	e012      	b.n	8000fb6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <AUTODEINIT_init+0x74>)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <AUTODEINIT_init+0x74>)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 fc1b 	bl	80087e0 <HAL_GPIO_WritePin>
			osDelay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f010 fde8 	bl	8011b80 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dae9      	bge.n	8000f90 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fbc:	f010 fdc0 	bl	8011b40 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fc0:	e7cc      	b.n	8000f5c <AUTODEINIT_init+0x8>
 8000fc2:	bf00      	nop
 8000fc4:	240007e8 	.word	0x240007e8
 8000fc8:	08015eb8 	.word	0x08015eb8

08000fcc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <UART_TX_init+0xa8>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 0108 	add.w	r1, r7, #8
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f010 ffa1 	bl	8011f30 <osMessageQueueGet>
 8000fee:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11c      	bne.n	8001030 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8000ff6:	89bb      	ldrh	r3, [r7, #12]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001002:	d215      	bcs.n	8001030 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <UART_TX_init+0xac>)
 8001008:	4413      	add	r3, r2
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	89ba      	ldrh	r2, [r7, #12]
 800100e:	4618      	mov	r0, r3
 8001010:	f014 f85e 	bl	80150d0 <memcpy>
					free(msg.array);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4618      	mov	r0, r3
 8001018:	f014 f852 	bl	80150c0 <free>
					total_size += msg.size;
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	461a      	mov	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f240 32b1 	movw	r2, #945	; 0x3b1
 800102c:	4293      	cmp	r3, r2
 800102e:	d808      	bhi.n	8001042 <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <UART_TX_init+0xa8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f010 ffd9 	bl	8011fec <osMessageQueueGetCount>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1cd      	bne.n	8000fdc <UART_TX_init+0x10>
 8001040:	e000      	b.n	8001044 <UART_TX_init+0x78>
						break;
 8001042:	bf00      	nop

		if (total_size > 0) {
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	b29b      	uxth	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4909      	ldr	r1, [pc, #36]	; (8001078 <UART_TX_init+0xac>)
 8001052:	480a      	ldr	r0, [pc, #40]	; (800107c <UART_TX_init+0xb0>)
 8001054:	f00d ff40 	bl	800eed8 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001058:	e001      	b.n	800105e <UART_TX_init+0x92>
				osThreadYield();
 800105a:	f010 fd71 	bl	8011b40 <osThreadYield>
			while (tx_flag == 0) {
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <UART_TX_init+0xb4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f8      	beq.n	800105a <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <UART_TX_init+0xb4>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 800106e:	f010 fd67 	bl	8011b40 <osThreadYield>
		total_size = 0;
 8001072:	e7b1      	b.n	8000fd8 <UART_TX_init+0xc>
 8001074:	240007ec 	.word	0x240007ec
 8001078:	240003a8 	.word	0x240003a8
 800107c:	24000acc 	.word	0x24000acc
 8001080:	24000088 	.word	0x24000088

08001084 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f010 fd77 	bl	8011b80 <osDelay>
 8001092:	e7fb      	b.n	800108c <Voltage_Monitor_init+0x8>

08001094 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f010 fd6f 	bl	8011b80 <osDelay>
 80010a2:	e7fb      	b.n	800109c <STOP_init+0x8>

080010a4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f010 fd67 	bl	8011b80 <osDelay>
 80010b2:	e7fb      	b.n	80010ac <Science_init+0x8>

080010b4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f010 fd5f 	bl	8011b80 <osDelay>
 80010c2:	e7fb      	b.n	80010bc <Idle_init+0x8>

080010c4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <MX_GPIO_Init+0xe8>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a32      	ldr	r2, [pc, #200]	; (80011ac <MX_GPIO_Init+0xe8>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <MX_GPIO_Init+0xe8>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_GPIO_Init+0xe8>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <MX_GPIO_Init+0xe8>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <MX_GPIO_Init+0xe8>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_GPIO_Init+0xe8>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <MX_GPIO_Init+0xe8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_GPIO_Init+0xe8>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_GPIO_Init+0xe8>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_GPIO_Init+0xe8>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_GPIO_Init+0xe8>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_GPIO_Init+0xec>)
 800115a:	f007 fb41 	bl	80087e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2164      	movs	r1, #100	; 0x64
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_GPIO_Init+0xf0>)
 8001164:	f007 fb3c 	bl	80087e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001168:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 800116c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0xec>)
 8001182:	f007 f965 	bl	8008450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118e:	2302      	movs	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_GPIO_Init+0xf0>)
 800119e:	f007 f957 	bl	8008450 <HAL_GPIO_Init>

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020800 	.word	0x58020800
 80011b4:	58020400 	.word	0x58020400

080011b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_I2C1_Init+0x78>)
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <MX_I2C1_Init+0x7c>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x78>)
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_I2C1_Init+0x80>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_I2C1_Init+0x78>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x78>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_I2C1_Init+0x78>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x78>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_I2C1_Init+0x78>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x78>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_I2C1_Init+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <MX_I2C1_Init+0x78>)
 80011f4:	f007 fb0e 	bl	8008814 <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 fe63 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <MX_I2C1_Init+0x78>)
 8001206:	f007 fba1 	bl	800894c <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 fe5a 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_I2C1_Init+0x78>)
 8001218:	f007 fbe3 	bl	80089e2 <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fe51 	bl	8001ec8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001226:	2001      	movs	r0, #1
 8001228:	f007 fc28 	bl	8008a7c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	24000790 	.word	0x24000790
 8001234:	40005400 	.word	0x40005400
 8001238:	0020081f 	.word	0x0020081f

0800123c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ba      	sub	sp, #232	; 0xe8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	22c0      	movs	r2, #192	; 0xc0
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f013 ff45 	bl	80150ec <memset>
  if(i2cHandle->Instance==I2C1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a27      	ldr	r2, [pc, #156]	; (8001304 <HAL_I2C_MspInit+0xc8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d146      	bne.n	80012fa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800126c:	f04f 0208 	mov.w	r2, #8
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f008 fc80 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800128e:	f000 fe1b 	bl	8001ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <HAL_I2C_MspInit+0xd0>)
 80012d8:	f007 f8ba 	bl	8008450 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 80012de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_I2C_MspInit+0xcc>)
 80012ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012fa:	bf00      	nop
 80012fc:	37e8      	adds	r7, #232	; 0xe8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40005400 	.word	0x40005400
 8001308:	58024400 	.word	0x58024400
 800130c:	58020400 	.word	0x58020400

08001310 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d105      	bne.n	800132c <HAL_TIM_OC_DelayElapsedCallback+0x1c>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f010 fc84 	bl	8011c34 <osEventFlagsSet>
	}
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240009e8 	.word	0x240009e8
 8001338:	240007e4 	.word	0x240007e4

0800133c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	49f2      	ldr	r1, [pc, #968]	; (8001710 <HAL_UART_RxCpltCallback+0x3d4>)
 8001348:	48f2      	ldr	r0, [pc, #968]	; (8001714 <HAL_UART_RxCpltCallback+0x3d8>)
 800134a:	f00d fd79 	bl	800ee40 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800134e:	4bf0      	ldr	r3, [pc, #960]	; (8001710 <HAL_UART_RxCpltCallback+0x3d4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2be0      	cmp	r3, #224	; 0xe0
 8001358:	f200 840b 	bhi.w	8001b72 <HAL_UART_RxCpltCallback+0x836>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <HAL_UART_RxCpltCallback+0x28>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	080016fd 	.word	0x080016fd
 8001368:	08001741 	.word	0x08001741
 800136c:	080017b1 	.word	0x080017b1
 8001370:	080017eb 	.word	0x080017eb
 8001374:	08001823 	.word	0x08001823
 8001378:	0800185d 	.word	0x0800185d
 800137c:	08001899 	.word	0x08001899
 8001380:	080018d5 	.word	0x080018d5
 8001384:	0800190f 	.word	0x0800190f
 8001388:	08001943 	.word	0x08001943
 800138c:	0800196f 	.word	0x0800196f
 8001390:	0800199b 	.word	0x0800199b
 8001394:	080019c5 	.word	0x080019c5
 8001398:	08001aa1 	.word	0x08001aa1
 800139c:	08001b09 	.word	0x08001b09
 80013a0:	08001b31 	.word	0x08001b31
 80013a4:	080016e9 	.word	0x080016e9
 80013a8:	08001725 	.word	0x08001725
 80013ac:	08001793 	.word	0x08001793
 80013b0:	080017cf 	.word	0x080017cf
 80013b4:	08001807 	.word	0x08001807
 80013b8:	0800183f 	.word	0x0800183f
 80013bc:	0800187b 	.word	0x0800187b
 80013c0:	080018b7 	.word	0x080018b7
 80013c4:	080018f3 	.word	0x080018f3
 80013c8:	0800192b 	.word	0x0800192b
 80013cc:	08001953 	.word	0x08001953
 80013d0:	0800197f 	.word	0x0800197f
 80013d4:	080019ab 	.word	0x080019ab
 80013d8:	080019d3 	.word	0x080019d3
 80013dc:	08001ae1 	.word	0x08001ae1
 80013e0:	08001b73 	.word	0x08001b73
 80013e4:	08001b73 	.word	0x08001b73
 80013e8:	08001b73 	.word	0x08001b73
 80013ec:	08001b73 	.word	0x08001b73
 80013f0:	08001b73 	.word	0x08001b73
 80013f4:	08001b73 	.word	0x08001b73
 80013f8:	08001b73 	.word	0x08001b73
 80013fc:	08001b73 	.word	0x08001b73
 8001400:	08001b73 	.word	0x08001b73
 8001404:	08001b73 	.word	0x08001b73
 8001408:	08001b73 	.word	0x08001b73
 800140c:	08001b73 	.word	0x08001b73
 8001410:	08001b73 	.word	0x08001b73
 8001414:	08001b73 	.word	0x08001b73
 8001418:	08001b73 	.word	0x08001b73
 800141c:	08001b73 	.word	0x08001b73
 8001420:	08001b73 	.word	0x08001b73
 8001424:	08001b73 	.word	0x08001b73
 8001428:	08001b73 	.word	0x08001b73
 800142c:	08001b73 	.word	0x08001b73
 8001430:	08001b73 	.word	0x08001b73
 8001434:	08001b73 	.word	0x08001b73
 8001438:	08001b73 	.word	0x08001b73
 800143c:	08001b73 	.word	0x08001b73
 8001440:	08001b73 	.word	0x08001b73
 8001444:	08001b73 	.word	0x08001b73
 8001448:	08001b73 	.word	0x08001b73
 800144c:	08001b73 	.word	0x08001b73
 8001450:	08001b73 	.word	0x08001b73
 8001454:	08001b73 	.word	0x08001b73
 8001458:	08001b73 	.word	0x08001b73
 800145c:	08001b73 	.word	0x08001b73
 8001460:	08001b73 	.word	0x08001b73
 8001464:	08001b73 	.word	0x08001b73
 8001468:	08001b73 	.word	0x08001b73
 800146c:	08001b73 	.word	0x08001b73
 8001470:	08001b73 	.word	0x08001b73
 8001474:	08001b73 	.word	0x08001b73
 8001478:	08001b73 	.word	0x08001b73
 800147c:	08001b73 	.word	0x08001b73
 8001480:	08001b73 	.word	0x08001b73
 8001484:	08001b73 	.word	0x08001b73
 8001488:	08001b73 	.word	0x08001b73
 800148c:	08001b73 	.word	0x08001b73
 8001490:	08001b73 	.word	0x08001b73
 8001494:	08001b73 	.word	0x08001b73
 8001498:	08001b73 	.word	0x08001b73
 800149c:	08001b73 	.word	0x08001b73
 80014a0:	08001b73 	.word	0x08001b73
 80014a4:	08001b73 	.word	0x08001b73
 80014a8:	08001b73 	.word	0x08001b73
 80014ac:	08001b73 	.word	0x08001b73
 80014b0:	08001b73 	.word	0x08001b73
 80014b4:	08001b73 	.word	0x08001b73
 80014b8:	08001b73 	.word	0x08001b73
 80014bc:	08001b73 	.word	0x08001b73
 80014c0:	08001b73 	.word	0x08001b73
 80014c4:	08001b73 	.word	0x08001b73
 80014c8:	08001b73 	.word	0x08001b73
 80014cc:	08001b73 	.word	0x08001b73
 80014d0:	08001b73 	.word	0x08001b73
 80014d4:	08001b73 	.word	0x08001b73
 80014d8:	08001b73 	.word	0x08001b73
 80014dc:	08001b73 	.word	0x08001b73
 80014e0:	08001b73 	.word	0x08001b73
 80014e4:	08001b73 	.word	0x08001b73
 80014e8:	08001b73 	.word	0x08001b73
 80014ec:	08001b73 	.word	0x08001b73
 80014f0:	08001b73 	.word	0x08001b73
 80014f4:	08001b73 	.word	0x08001b73
 80014f8:	08001b73 	.word	0x08001b73
 80014fc:	08001b73 	.word	0x08001b73
 8001500:	08001b73 	.word	0x08001b73
 8001504:	08001b73 	.word	0x08001b73
 8001508:	08001b73 	.word	0x08001b73
 800150c:	08001b73 	.word	0x08001b73
 8001510:	08001b73 	.word	0x08001b73
 8001514:	08001b73 	.word	0x08001b73
 8001518:	08001b73 	.word	0x08001b73
 800151c:	08001b73 	.word	0x08001b73
 8001520:	08001b73 	.word	0x08001b73
 8001524:	08001b73 	.word	0x08001b73
 8001528:	08001b73 	.word	0x08001b73
 800152c:	08001b73 	.word	0x08001b73
 8001530:	08001b73 	.word	0x08001b73
 8001534:	08001b73 	.word	0x08001b73
 8001538:	08001b73 	.word	0x08001b73
 800153c:	08001b73 	.word	0x08001b73
 8001540:	08001b73 	.word	0x08001b73
 8001544:	08001b73 	.word	0x08001b73
 8001548:	08001b73 	.word	0x08001b73
 800154c:	08001b73 	.word	0x08001b73
 8001550:	08001b73 	.word	0x08001b73
 8001554:	08001b73 	.word	0x08001b73
 8001558:	08001b73 	.word	0x08001b73
 800155c:	08001b73 	.word	0x08001b73
 8001560:	08001b73 	.word	0x08001b73
 8001564:	08001b73 	.word	0x08001b73
 8001568:	08001b73 	.word	0x08001b73
 800156c:	08001b73 	.word	0x08001b73
 8001570:	08001b73 	.word	0x08001b73
 8001574:	08001b73 	.word	0x08001b73
 8001578:	08001b73 	.word	0x08001b73
 800157c:	08001b73 	.word	0x08001b73
 8001580:	08001b73 	.word	0x08001b73
 8001584:	08001b73 	.word	0x08001b73
 8001588:	08001b73 	.word	0x08001b73
 800158c:	08001b73 	.word	0x08001b73
 8001590:	08001b73 	.word	0x08001b73
 8001594:	08001b73 	.word	0x08001b73
 8001598:	08001b73 	.word	0x08001b73
 800159c:	08001b73 	.word	0x08001b73
 80015a0:	08001b73 	.word	0x08001b73
 80015a4:	08001b73 	.word	0x08001b73
 80015a8:	08001b73 	.word	0x08001b73
 80015ac:	08001b73 	.word	0x08001b73
 80015b0:	08001b73 	.word	0x08001b73
 80015b4:	08001b73 	.word	0x08001b73
 80015b8:	08001b73 	.word	0x08001b73
 80015bc:	08001b73 	.word	0x08001b73
 80015c0:	08001b73 	.word	0x08001b73
 80015c4:	08001b73 	.word	0x08001b73
 80015c8:	08001b73 	.word	0x08001b73
 80015cc:	08001b73 	.word	0x08001b73
 80015d0:	08001b73 	.word	0x08001b73
 80015d4:	08001b73 	.word	0x08001b73
 80015d8:	08001b73 	.word	0x08001b73
 80015dc:	08001b73 	.word	0x08001b73
 80015e0:	08001b73 	.word	0x08001b73
 80015e4:	08001b73 	.word	0x08001b73
 80015e8:	08001b73 	.word	0x08001b73
 80015ec:	08001b73 	.word	0x08001b73
 80015f0:	08001b73 	.word	0x08001b73
 80015f4:	08001b73 	.word	0x08001b73
 80015f8:	08001b73 	.word	0x08001b73
 80015fc:	08001b73 	.word	0x08001b73
 8001600:	08001b73 	.word	0x08001b73
 8001604:	08001b73 	.word	0x08001b73
 8001608:	08001b73 	.word	0x08001b73
 800160c:	08001b73 	.word	0x08001b73
 8001610:	08001b73 	.word	0x08001b73
 8001614:	08001b73 	.word	0x08001b73
 8001618:	08001b73 	.word	0x08001b73
 800161c:	08001b73 	.word	0x08001b73
 8001620:	08001b6d 	.word	0x08001b6d
 8001624:	08001b73 	.word	0x08001b73
 8001628:	08001b73 	.word	0x08001b73
 800162c:	08001b73 	.word	0x08001b73
 8001630:	08001b73 	.word	0x08001b73
 8001634:	08001b73 	.word	0x08001b73
 8001638:	08001b73 	.word	0x08001b73
 800163c:	08001b73 	.word	0x08001b73
 8001640:	08001b73 	.word	0x08001b73
 8001644:	08001b73 	.word	0x08001b73
 8001648:	08001b73 	.word	0x08001b73
 800164c:	08001b73 	.word	0x08001b73
 8001650:	08001b73 	.word	0x08001b73
 8001654:	08001b73 	.word	0x08001b73
 8001658:	08001b73 	.word	0x08001b73
 800165c:	08001b73 	.word	0x08001b73
 8001660:	08001b7b 	.word	0x08001b7b
 8001664:	08001b73 	.word	0x08001b73
 8001668:	08001b73 	.word	0x08001b73
 800166c:	08001b73 	.word	0x08001b73
 8001670:	08001b73 	.word	0x08001b73
 8001674:	08001b73 	.word	0x08001b73
 8001678:	08001b73 	.word	0x08001b73
 800167c:	08001b73 	.word	0x08001b73
 8001680:	08001b73 	.word	0x08001b73
 8001684:	08001b73 	.word	0x08001b73
 8001688:	08001b73 	.word	0x08001b73
 800168c:	08001b73 	.word	0x08001b73
 8001690:	08001b73 	.word	0x08001b73
 8001694:	08001b73 	.word	0x08001b73
 8001698:	08001b73 	.word	0x08001b73
 800169c:	08001b73 	.word	0x08001b73
 80016a0:	08001b7b 	.word	0x08001b7b
 80016a4:	08001b59 	.word	0x08001b59
 80016a8:	08001b73 	.word	0x08001b73
 80016ac:	08001b73 	.word	0x08001b73
 80016b0:	08001b73 	.word	0x08001b73
 80016b4:	08001b73 	.word	0x08001b73
 80016b8:	08001b73 	.word	0x08001b73
 80016bc:	08001b73 	.word	0x08001b73
 80016c0:	08001b73 	.word	0x08001b73
 80016c4:	08001b73 	.word	0x08001b73
 80016c8:	08001b73 	.word	0x08001b73
 80016cc:	08001b73 	.word	0x08001b73
 80016d0:	08001b73 	.word	0x08001b73
 80016d4:	08001b73 	.word	0x08001b73
 80016d8:	08001b73 	.word	0x08001b73
 80016dc:	08001b73 	.word	0x08001b73
 80016e0:	08001b73 	.word	0x08001b73
 80016e4:	08001b45 	.word	0x08001b45
	case 0x10: {
		printf("SDN1 ON\n");
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <HAL_UART_RxCpltCallback+0x3dc>)
 80016ea:	f013 fe55 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_UART_RxCpltCallback+0x3e0>)
 80016f0:	2104      	movs	r1, #4
 80016f2:	2201      	movs	r2, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 f873 	bl	80087e0 <HAL_GPIO_WritePin>
		break;
 80016fa:	e247      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <HAL_UART_RxCpltCallback+0x3e4>)
 80016fe:	f013 fe4b 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_UART_RxCpltCallback+0x3e0>)
 8001704:	2104      	movs	r1, #4
 8001706:	2200      	movs	r2, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f007 f869 	bl	80087e0 <HAL_GPIO_WritePin>
		break;
 800170e:	e23d      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
 8001710:	240007f0 	.word	0x240007f0
 8001714:	24000acc 	.word	0x24000acc
 8001718:	08015b98 	.word	0x08015b98
 800171c:	58020400 	.word	0x58020400
 8001720:	08015ba0 	.word	0x08015ba0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001724:	48bb      	ldr	r0, [pc, #748]	; (8001a14 <HAL_UART_RxCpltCallback+0x6d8>)
 8001726:	f013 fe37 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800172a:	4bbb      	ldr	r3, [pc, #748]	; (8001a18 <HAL_UART_RxCpltCallback+0x6dc>)
 800172c:	2120      	movs	r1, #32
 800172e:	2201      	movs	r2, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f007 f855 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001736:	2101      	movs	r1, #1
 8001738:	2008      	movs	r0, #8
 800173a:	f001 fe7f 	bl	800343c <set_rail_monitor_enable>
		break;
 800173e:	e225      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001740:	48b6      	ldr	r0, [pc, #728]	; (8001a1c <HAL_UART_RxCpltCallback+0x6e0>)
 8001742:	f013 fe29 	bl	8015398 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001746:	2308      	movs	r3, #8
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e00f      	b.n	800176c <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800174c:	4ab4      	ldr	r2, [pc, #720]	; (8001a20 <HAL_UART_RxCpltCallback+0x6e4>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001754:	4ab2      	ldr	r2, [pc, #712]	; (8001a20 <HAL_UART_RxCpltCallback+0x6e4>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	4619      	mov	r1, r3
 8001762:	f007 f83d 	bl	80087e0 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3b01      	subs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	dcec      	bgt.n	800174c <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001772:	2310      	movs	r3, #16
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e008      	b.n	800178a <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fe5c 	bl	800343c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3b01      	subs	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b07      	cmp	r3, #7
 800178e:	dcf3      	bgt.n	8001778 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001790:	e1fc      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001792:	48a4      	ldr	r0, [pc, #656]	; (8001a24 <HAL_UART_RxCpltCallback+0x6e8>)
 8001794:	f013 fe00 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8001798:	4ba3      	ldr	r3, [pc, #652]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	2201      	movs	r2, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 f81d 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80017a6:	2101      	movs	r1, #1
 80017a8:	2009      	movs	r0, #9
 80017aa:	f001 fe47 	bl	800343c <set_rail_monitor_enable>

		break;
 80017ae:	e1ed      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80017b0:	489e      	ldr	r0, [pc, #632]	; (8001a2c <HAL_UART_RxCpltCallback+0x6f0>)
 80017b2:	f013 fdf1 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80017b6:	4b9c      	ldr	r3, [pc, #624]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 80017b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017bc:	2200      	movs	r2, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f007 f80e 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2009      	movs	r0, #9
 80017c8:	f001 fe38 	bl	800343c <set_rail_monitor_enable>
		break;
 80017cc:	e1de      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80017ce:	4898      	ldr	r0, [pc, #608]	; (8001a30 <HAL_UART_RxCpltCallback+0x6f4>)
 80017d0:	f013 fde2 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80017d4:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	2201      	movs	r2, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f007 f800 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80017e0:	2101      	movs	r1, #1
 80017e2:	200a      	movs	r0, #10
 80017e4:	f001 fe2a 	bl	800343c <set_rail_monitor_enable>

		break;
 80017e8:	e1d0      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80017ea:	4892      	ldr	r0, [pc, #584]	; (8001a34 <HAL_UART_RxCpltCallback+0x6f8>)
 80017ec:	f013 fdd4 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80017f0:	4b8d      	ldr	r3, [pc, #564]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	2200      	movs	r2, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fff2 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 80017fc:	2100      	movs	r1, #0
 80017fe:	200a      	movs	r0, #10
 8001800:	f001 fe1c 	bl	800343c <set_rail_monitor_enable>
		break;
 8001804:	e1c2      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001806:	488c      	ldr	r0, [pc, #560]	; (8001a38 <HAL_UART_RxCpltCallback+0x6fc>)
 8001808:	f013 fdc6 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 800180c:	4b86      	ldr	r3, [pc, #536]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	2201      	movs	r2, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f006 ffe4 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001818:	2101      	movs	r1, #1
 800181a:	200b      	movs	r0, #11
 800181c:	f001 fe0e 	bl	800343c <set_rail_monitor_enable>

		break;
 8001820:	e1b4      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001822:	4886      	ldr	r0, [pc, #536]	; (8001a3c <HAL_UART_RxCpltCallback+0x700>)
 8001824:	f013 fdb8 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001828:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	2200      	movs	r2, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f006 ffd6 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001834:	2100      	movs	r1, #0
 8001836:	200b      	movs	r0, #11
 8001838:	f001 fe00 	bl	800343c <set_rail_monitor_enable>
		break;
 800183c:	e1a6      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800183e:	4880      	ldr	r0, [pc, #512]	; (8001a40 <HAL_UART_RxCpltCallback+0x704>)
 8001840:	f013 fdaa 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001844:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 8001846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184a:	2201      	movs	r2, #1
 800184c:	4618      	mov	r0, r3
 800184e:	f006 ffc7 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001852:	2101      	movs	r1, #1
 8001854:	200c      	movs	r0, #12
 8001856:	f001 fdf1 	bl	800343c <set_rail_monitor_enable>

		break;
 800185a:	e197      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 800185c:	4879      	ldr	r0, [pc, #484]	; (8001a44 <HAL_UART_RxCpltCallback+0x708>)
 800185e:	f013 fd9b 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001862:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 8001864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001868:	2200      	movs	r2, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f006 ffb8 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	200c      	movs	r0, #12
 8001874:	f001 fde2 	bl	800343c <set_rail_monitor_enable>
		break;
 8001878:	e188      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800187a:	4873      	ldr	r0, [pc, #460]	; (8001a48 <HAL_UART_RxCpltCallback+0x70c>)
 800187c:	f013 fd8c 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	2201      	movs	r2, #1
 8001888:	4618      	mov	r0, r3
 800188a:	f006 ffa9 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800188e:	2101      	movs	r1, #1
 8001890:	200d      	movs	r0, #13
 8001892:	f001 fdd3 	bl	800343c <set_rail_monitor_enable>

		break;
 8001896:	e179      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001898:	486c      	ldr	r0, [pc, #432]	; (8001a4c <HAL_UART_RxCpltCallback+0x710>)
 800189a:	f013 fd7d 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800189e:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 80018a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a4:	2200      	movs	r2, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 ff9a 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80018ac:	2100      	movs	r1, #0
 80018ae:	200d      	movs	r0, #13
 80018b0:	f001 fdc4 	bl	800343c <set_rail_monitor_enable>
		break;
 80018b4:	e16a      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80018b6:	4866      	ldr	r0, [pc, #408]	; (8001a50 <HAL_UART_RxCpltCallback+0x714>)
 80018b8:	f013 fd6e 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80018bc:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	2201      	movs	r2, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 ff8b 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80018ca:	2101      	movs	r1, #1
 80018cc:	200f      	movs	r0, #15
 80018ce:	f001 fdb5 	bl	800343c <set_rail_monitor_enable>

		break;
 80018d2:	e15b      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 80018d4:	485f      	ldr	r0, [pc, #380]	; (8001a54 <HAL_UART_RxCpltCallback+0x718>)
 80018d6:	f013 fd5f 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 80018da:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_UART_RxCpltCallback+0x6ec>)
 80018dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e0:	2200      	movs	r2, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f006 ff7c 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	200f      	movs	r0, #15
 80018ec:	f001 fda6 	bl	800343c <set_rail_monitor_enable>
		break;
 80018f0:	e14c      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 80018f2:	4859      	ldr	r0, [pc, #356]	; (8001a58 <HAL_UART_RxCpltCallback+0x71c>)
 80018f4:	f013 fd50 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_UART_RxCpltCallback+0x6dc>)
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	2201      	movs	r2, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 ff6e 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001904:	2101      	movs	r1, #1
 8001906:	2010      	movs	r0, #16
 8001908:	f001 fd98 	bl	800343c <set_rail_monitor_enable>

		break;
 800190c:	e13e      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 800190e:	4853      	ldr	r0, [pc, #332]	; (8001a5c <HAL_UART_RxCpltCallback+0x720>)
 8001910:	f013 fd42 	bl	8015398 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <HAL_UART_RxCpltCallback+0x6dc>)
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	2200      	movs	r2, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f006 ff60 	bl	80087e0 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001920:	2100      	movs	r1, #0
 8001922:	2010      	movs	r0, #16
 8001924:	f001 fd8a 	bl	800343c <set_rail_monitor_enable>
		break;
 8001928:	e130      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800192a:	484d      	ldr	r0, [pc, #308]	; (8001a60 <HAL_UART_RxCpltCallback+0x724>)
 800192c:	f013 fd34 	bl	8015398 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2320      	movs	r3, #32
 8001936:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_UART_RxCpltCallback+0x728>)
 8001938:	2100      	movs	r1, #0
 800193a:	484b      	ldr	r0, [pc, #300]	; (8001a68 <HAL_UART_RxCpltCallback+0x72c>)
 800193c:	f003 fbb4 	bl	80050a8 <HAL_DAC_Start_DMA>
		break;
 8001940:	e124      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001942:	484a      	ldr	r0, [pc, #296]	; (8001a6c <HAL_UART_RxCpltCallback+0x730>)
 8001944:	f013 fd28 	bl	8015398 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001948:	2100      	movs	r1, #0
 800194a:	4847      	ldr	r0, [pc, #284]	; (8001a68 <HAL_UART_RxCpltCallback+0x72c>)
 800194c:	f003 fc6c 	bl	8005228 <HAL_DAC_Stop_DMA>
		break;
 8001950:	e11c      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001952:	4847      	ldr	r0, [pc, #284]	; (8001a70 <HAL_UART_RxCpltCallback+0x734>)
 8001954:	f013 fd20 	bl	8015398 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001958:	210c      	movs	r1, #12
 800195a:	4846      	ldr	r0, [pc, #280]	; (8001a74 <HAL_UART_RxCpltCallback+0x738>)
 800195c:	f00b fd90 	bl	800d480 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001960:	4b45      	ldr	r3, [pc, #276]	; (8001a78 <HAL_UART_RxCpltCallback+0x73c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2102      	movs	r1, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f010 f964 	bl	8011c34 <osEventFlagsSet>
		break;
 800196c:	e10e      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 800196e:	4843      	ldr	r0, [pc, #268]	; (8001a7c <HAL_UART_RxCpltCallback+0x740>)
 8001970:	f013 fd12 	bl	8015398 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001974:	210c      	movs	r1, #12
 8001976:	483f      	ldr	r0, [pc, #252]	; (8001a74 <HAL_UART_RxCpltCallback+0x738>)
 8001978:	f00b fedc 	bl	800d734 <HAL_TIM_OC_Stop_IT>
		break;
 800197c:	e106      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800197e:	4840      	ldr	r0, [pc, #256]	; (8001a80 <HAL_UART_RxCpltCallback+0x744>)
 8001980:	f013 fd0a 	bl	8015398 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	483f      	ldr	r0, [pc, #252]	; (8001a84 <HAL_UART_RxCpltCallback+0x748>)
 8001988:	f00b fd7a 	bl	800d480 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800198c:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <HAL_UART_RxCpltCallback+0x73c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f010 f94e 	bl	8011c34 <osEventFlagsSet>
		break;
 8001998:	e0f8      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 800199a:	483b      	ldr	r0, [pc, #236]	; (8001a88 <HAL_UART_RxCpltCallback+0x74c>)
 800199c:	f013 fcfc 	bl	8015398 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80019a0:	2100      	movs	r1, #0
 80019a2:	4838      	ldr	r0, [pc, #224]	; (8001a84 <HAL_UART_RxCpltCallback+0x748>)
 80019a4:	f00b fec6 	bl	800d734 <HAL_TIM_OC_Stop_IT>
		break;
 80019a8:	e0f0      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1C: {
		printf("HK ON \n");
 80019aa:	4838      	ldr	r0, [pc, #224]	; (8001a8c <HAL_UART_RxCpltCallback+0x750>)
 80019ac:	f013 fcf4 	bl	8015398 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_UART_RxCpltCallback+0x73c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2104      	movs	r1, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f010 f93c 	bl	8011c34 <osEventFlagsSet>
		HK_ENABLED = 1;
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_UART_RxCpltCallback+0x754>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
		break;
 80019c2:	e0e3      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80019c4:	4833      	ldr	r0, [pc, #204]	; (8001a94 <HAL_UART_RxCpltCallback+0x758>)
 80019c6:	f013 fce7 	bl	8015398 <puts>
		HK_ENABLED = 0;
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_UART_RxCpltCallback+0x754>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
		break;
 80019d0:	e0dc      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1D: {
		printf("Step Up\n");
 80019d2:	4831      	ldr	r0, [pc, #196]	; (8001a98 <HAL_UART_RxCpltCallback+0x75c>)
 80019d4:	f013 fce0 	bl	8015398 <puts>
		if (step < 17) {
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_UART_RxCpltCallback+0x760>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b10      	cmp	r3, #16
 80019e0:	f200 80cd 	bhi.w	8001b7e <HAL_UART_RxCpltCallback+0x842>
			step += 2;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_UART_RxCpltCallback+0x760>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3302      	adds	r3, #2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_UART_RxCpltCallback+0x760>)
 80019f0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_UART_RxCpltCallback+0x760>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_UART_RxCpltCallback+0x728>)
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <HAL_UART_RxCpltCallback+0x72c>)
 8001a06:	f003 fcb2 	bl	800536e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <HAL_UART_RxCpltCallback+0x72c>)
 8001a0e:	f003 faf3 	bl	8004ff8 <HAL_DAC_Start>
		}
		break;
 8001a12:	e0b4      	b.n	8001b7e <HAL_UART_RxCpltCallback+0x842>
 8001a14:	08015bac 	.word	0x08015bac
 8001a18:	58020400 	.word	0x58020400
 8001a1c:	08015bb8 	.word	0x08015bb8
 8001a20:	08015eb8 	.word	0x08015eb8
 8001a24:	08015bc4 	.word	0x08015bc4
 8001a28:	58020800 	.word	0x58020800
 8001a2c:	08015bd0 	.word	0x08015bd0
 8001a30:	08015be0 	.word	0x08015be0
 8001a34:	08015bec 	.word	0x08015bec
 8001a38:	08015bf8 	.word	0x08015bf8
 8001a3c:	08015c04 	.word	0x08015c04
 8001a40:	08015c14 	.word	0x08015c14
 8001a44:	08015c20 	.word	0x08015c20
 8001a48:	08015c2c 	.word	0x08015c2c
 8001a4c:	08015c38 	.word	0x08015c38
 8001a50:	08015c44 	.word	0x08015c44
 8001a54:	08015c54 	.word	0x08015c54
 8001a58:	08015c64 	.word	0x08015c64
 8001a5c:	08015c70 	.word	0x08015c70
 8001a60:	08015c80 	.word	0x08015c80
 8001a64:	24000000 	.word	0x24000000
 8001a68:	240002f4 	.word	0x240002f4
 8001a6c:	08015c90 	.word	0x08015c90
 8001a70:	08015ca0 	.word	0x08015ca0
 8001a74:	24000a34 	.word	0x24000a34
 8001a78:	240007e4 	.word	0x240007e4
 8001a7c:	08015ca8 	.word	0x08015ca8
 8001a80:	08015cb4 	.word	0x08015cb4
 8001a84:	240009e8 	.word	0x240009e8
 8001a88:	08015cbc 	.word	0x08015cbc
 8001a8c:	08015cc4 	.word	0x08015cc4
 8001a90:	24000830 	.word	0x24000830
 8001a94:	08015ccc 	.word	0x08015ccc
 8001a98:	08015cd4 	.word	0x08015cd4
 8001a9c:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 8001aa0:	483c      	ldr	r0, [pc, #240]	; (8001b94 <HAL_UART_RxCpltCallback+0x858>)
 8001aa2:	f013 fc79 	bl	8015398 <puts>
		if (step > 3) {
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_UART_RxCpltCallback+0x85c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d968      	bls.n	8001b82 <HAL_UART_RxCpltCallback+0x846>
			step -= 2;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_UART_RxCpltCallback+0x85c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3b02      	subs	r3, #2
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_UART_RxCpltCallback+0x85c>)
 8001abc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_UART_RxCpltCallback+0x85c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_UART_RxCpltCallback+0x860>)
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4833      	ldr	r0, [pc, #204]	; (8001ba0 <HAL_UART_RxCpltCallback+0x864>)
 8001ad2:	f003 fc4c 	bl	800536e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4831      	ldr	r0, [pc, #196]	; (8001ba0 <HAL_UART_RxCpltCallback+0x864>)
 8001ada:	f003 fa8d 	bl	8004ff8 <HAL_DAC_Start>
		}
		break;
 8001ade:	e050      	b.n	8001b82 <HAL_UART_RxCpltCallback+0x846>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001ae0:	4830      	ldr	r0, [pc, #192]	; (8001ba4 <HAL_UART_RxCpltCallback+0x868>)
 8001ae2:	f013 fc59 	bl	8015398 <puts>
		if (cadence <= 50000) {
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d849      	bhi.n	8001b86 <HAL_UART_RxCpltCallback+0x84a>
			cadence *= 2;
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001afa:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001b06:	e03e      	b.n	8001b86 <HAL_UART_RxCpltCallback+0x84a>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001b08:	4828      	ldr	r0, [pc, #160]	; (8001bac <HAL_UART_RxCpltCallback+0x870>)
 8001b0a:	f013 fc45 	bl	8015398 <puts>
		if (cadence >= 6250) {
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f641 0269 	movw	r2, #6249	; 0x1869
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d937      	bls.n	8001b8a <HAL_UART_RxCpltCallback+0x84e>
			cadence /= 2;
 8001b1a:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001b22:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_UART_RxCpltCallback+0x86c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001b2e:	e02c      	b.n	8001b8a <HAL_UART_RxCpltCallback+0x84e>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001b30:	481f      	ldr	r0, [pc, #124]	; (8001bb0 <HAL_UART_RxCpltCallback+0x874>)
 8001b32:	f013 fc31 	bl	8015398 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_UART_RxCpltCallback+0x878>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f010 f879 	bl	8011c34 <osEventFlagsSet>
		break;
 8001b42:	e023      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <HAL_UART_RxCpltCallback+0x87c>)
 8001b46:	f013 fc27 	bl	8015398 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_UART_RxCpltCallback+0x878>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f010 f86f 	bl	8011c34 <osEventFlagsSet>
		break;
 8001b56:	e019      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001b58:	4818      	ldr	r0, [pc, #96]	; (8001bbc <HAL_UART_RxCpltCallback+0x880>)
 8001b5a:	f013 fc1d 	bl	8015398 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_UART_RxCpltCallback+0x878>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2108      	movs	r1, #8
 8001b64:	4618      	mov	r0, r3
 8001b66:	f010 f865 	bl	8011c34 <osEventFlagsSet>
		break;
 8001b6a:	e00f      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xAF: {
		sync();
 8001b6c:	f000 f964 	bl	8001e38 <sync>
		break;
 8001b70:	e00c      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 8001b72:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <HAL_UART_RxCpltCallback+0x884>)
 8001b74:	f013 fc10 	bl	8015398 <puts>
		break;
 8001b78:	e008      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
		break;
 8001b7a:	bf00      	nop
 8001b7c:	e006      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
		break;
 8001b7e:	bf00      	nop
 8001b80:	e004      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
		break;
 8001b82:	bf00      	nop
 8001b84:	e002      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
		break;
 8001b86:	bf00      	nop
 8001b88:	e000      	b.n	8001b8c <HAL_UART_RxCpltCallback+0x850>
		break;
 8001b8a:	bf00      	nop
	}
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	08015cdc 	.word	0x08015cdc
 8001b98:	24000080 	.word	0x24000080
 8001b9c:	24000000 	.word	0x24000000
 8001ba0:	240002f4 	.word	0x240002f4
 8001ba4:	08015ce8 	.word	0x08015ce8
 8001ba8:	24000084 	.word	0x24000084
 8001bac:	08015cf4 	.word	0x08015cf4
 8001bb0:	08015d00 	.word	0x08015d00
 8001bb4:	240007e8 	.word	0x240007e8
 8001bb8:	08015d10 	.word	0x08015d10
 8001bbc:	08015d1c 	.word	0x08015d1c
 8001bc0:	08015d28 	.word	0x08015d28

08001bc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_UART_TxCpltCallback+0x1c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	24000088 	.word	0x24000088

08001be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be8:	f001 fc72 	bl	80034d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bec:	f000 f826 	bl	8001c3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bf0:	f000 f8a4 	bl	8001d3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf4:	f7ff fa66 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bf8:	f7ff f876 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001bfc:	f000 fffa 	bl	8002bf4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001c00:	f001 f970 	bl	8002ee4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001c04:	f7ff fad8 	bl	80011b8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001c08:	f000 fb4c 	bl	80022a4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c0c:	f000 ff7c 	bl	8002b08 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c10:	f000 fecc 	bl	80029ac <MX_TIM1_Init>
  MX_ADC3_Init();
 8001c14:	f7fe fe08 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001c18:	f7fe fce4 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001c1c:	f7fe ffb0 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001c20:	f000 fae8 	bl	80021f4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001c24:	f000 f9f0 	bl	8002008 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001c28:	f000 f8b8 	bl	8001d9c <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c2c:	f00f feac 	bl	8011988 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c30:	f7ff f8a0 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c34:	f00f fecc 	bl	80119d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001c38:	e7fe      	b.n	8001c38 <main+0x54>
	...

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b09c      	sub	sp, #112	; 0x70
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	224c      	movs	r2, #76	; 0x4c
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f013 fa4e 	bl	80150ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2220      	movs	r2, #32
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f013 fa48 	bl	80150ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f006 ff31 	bl	8008ac4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <SystemClock_Config+0xf8>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <SystemClock_Config+0xf8>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <SystemClock_Config+0xf8>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <SystemClock_Config+0xfc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c84:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <SystemClock_Config+0xfc>)
 8001c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <SystemClock_Config+0xfc>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c98:	bf00      	nop
 8001c9a:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <SystemClock_Config+0xfc>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca6:	d1f8      	bne.n	8001c9a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f006 ff26 	bl	8008b38 <HAL_RCC_OscConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001cf2:	f000 f8e9 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf6:	233f      	movs	r3, #63	; 0x3f
 8001cf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f007 fb66 	bl	80093ec <HAL_RCC_ClockConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001d26:	f000 f8cf 	bl	8001ec8 <Error_Handler>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3770      	adds	r7, #112	; 0x70
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	58000400 	.word	0x58000400
 8001d38:	58024800 	.word	0x58024800

08001d3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0b0      	sub	sp, #192	; 0xc0
 8001d40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	22c0      	movs	r2, #192	; 0xc0
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f013 f9cf 	bl	80150ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001d62:	2308      	movs	r3, #8
 8001d64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001d66:	2304      	movs	r3, #4
 8001d68:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d80:	463b      	mov	r3, r7
 8001d82:	4618      	mov	r0, r3
 8001d84:	f007 ff00 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001d8e:	f000 f89b 	bl	8001ec8 <Error_Handler>
  }
}
 8001d92:	bf00      	nop
 8001d94:	37c0      	adds	r7, #192	; 0xc0
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f00f ff08 	bl	8011bb6 <osEventFlagsNew>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <system_setup+0x84>)
 8001daa:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <system_setup+0x84>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d100      	bne.n	8001db6 <system_setup+0x1a>
        while (1);
 8001db4:	e7fe      	b.n	8001db4 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f00f fefd 	bl	8011bb6 <osEventFlagsNew>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <system_setup+0x88>)
 8001dc0:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <system_setup+0x88>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d100      	bne.n	8001dcc <system_setup+0x30>
        while (1);
 8001dca:	e7fe      	b.n	8001dca <system_setup+0x2e>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2108      	movs	r1, #8
 8001dd0:	2080      	movs	r0, #128	; 0x80
 8001dd2:	f00f ffd9 	bl	8011d88 <osMessageQueueNew>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <system_setup+0x8c>)
 8001dda:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <system_setup+0x8c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d100      	bne.n	8001de6 <system_setup+0x4a>
		while (1);
 8001de4:	e7fe      	b.n	8001de4 <system_setup+0x48>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001de6:	f001 f96b 	bl	80030c0 <voltage_monitor_init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d100      	bne.n	8001df2 <system_setup+0x56>
		while (1);
 8001df0:	e7fe      	b.n	8001df0 <system_setup+0x54>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001df2:	2100      	movs	r1, #0
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <system_setup+0x90>)
 8001df6:	f00b fb43 	bl	800d480 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dfe:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001e04:	f000 f992 	bl	800212c <init_adc_dma>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d100      	bne.n	8001e10 <system_setup+0x74>
		while (1);
 8001e0e:	e7fe      	b.n	8001e0e <system_setup+0x72>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001e10:	2201      	movs	r2, #1
 8001e12:	4907      	ldr	r1, [pc, #28]	; (8001e30 <system_setup+0x94>)
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <system_setup+0x98>)
 8001e16:	f00d f813 	bl	800ee40 <HAL_UART_Receive_IT>

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	240007e4 	.word	0x240007e4
 8001e24:	240007e8 	.word	0x240007e8
 8001e28:	240007ec 	.word	0x240007ec
 8001e2c:	24000a80 	.word	0x24000a80
 8001e30:	240007f0 	.word	0x240007f0
 8001e34:	24000acc 	.word	0x24000acc

08001e38 <sync>:

void sync() {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	send_ACK();
 8001e3e:	f000 f81f 	bl	8001e80 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <sync+0x40>)
 8001e44:	f00d f8c8 	bl	800efd8 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8001e48:	2364      	movs	r3, #100	; 0x64
 8001e4a:	2209      	movs	r2, #9
 8001e4c:	490b      	ldr	r1, [pc, #44]	; (8001e7c <sync+0x44>)
 8001e4e:	480a      	ldr	r0, [pc, #40]	; (8001e78 <sync+0x40>)
 8001e50:	f00c ff2e 	bl	800ecb0 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <sync+0x44>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2bff      	cmp	r3, #255	; 0xff
 8001e5e:	d1f3      	bne.n	8001e48 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4906      	ldr	r1, [pc, #24]	; (8001e7c <sync+0x44>)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <sync+0x40>)
 8001e66:	f00c ffeb 	bl	800ee40 <HAL_UART_Receive_IT>

	send_ACK();
 8001e6a:	f000 f809 	bl	8001e80 <send_ACK>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	24000acc 	.word	0x24000acc
 8001e7c:	240007f0 	.word	0x240007f0

08001e80 <send_ACK>:

void send_ACK() {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <send_ACK+0x1c>)
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8001e8a:	2364      	movs	r3, #100	; 0x64
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4903      	ldr	r1, [pc, #12]	; (8001e9c <send_ACK+0x1c>)
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <send_ACK+0x20>)
 8001e92:	f00c fe7f 	bl	800eb94 <HAL_UART_Transmit>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24000838 	.word	0x24000838
 8001ea0:	24000acc 	.word	0x24000acc

08001ea4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eb6:	f001 fb47 	bl	8003548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40001000 	.word	0x40001000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>

08001ed2 <packetize>:

#include "packet_creation.h"

uint16_t pmt_seq = 0;

packet_t packetize(const uint8_t *data, uint16_t size) {
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	4613      	mov	r3, r2
 8001ede:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f013 f8e4 	bl	80150b0 <malloc>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f013 f8ec 	bl	80150d0 <memcpy>
	packet.size = size;
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f08:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <create_pmt_packet>:

void create_pmt_packet() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001f1a:	bf00      	nop
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	4836      	ldr	r0, [pc, #216]	; (8001ffc <create_pmt_packet+0xe8>)
 8001f22:	f006 fc45 	bl	80087b0 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f7      	bne.n	8001f1c <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8001f2c:	200a      	movs	r0, #10
 8001f2e:	f013 f8bf 	bl	80150b0 <malloc>
 8001f32:	4603      	mov	r3, r0
 8001f34:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8001f36:	2002      	movs	r0, #2
 8001f38:	f013 f8ba 	bl	80150b0 <malloc>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8001f40:	2004      	movs	r0, #4
 8001f42:	f013 f8b5 	bl	80150b0 <malloc>
 8001f46:	4603      	mov	r3, r0
 8001f48:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 ff80 	bl	8002e50 <get_uptime>

	sample_pmt_spi(pmt_spi);
 8001f50:	6938      	ldr	r0, [r7, #16]
 8001f52:	f000 f92b 	bl	80021ac <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	22bb      	movs	r2, #187	; 0xbb
 8001f5a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	22bb      	movs	r2, #187	; 0xbb
 8001f62:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <create_pmt_packet+0xec>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3302      	adds	r3, #2
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <create_pmt_packet+0xec>)
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3303      	adds	r3, #3
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3304      	adds	r3, #4
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3305      	adds	r3, #5
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	7852      	ldrb	r2, [r2, #1]
 8001f92:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3306      	adds	r3, #6
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	7812      	ldrb	r2, [r2, #0]
 8001f9c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	7852      	ldrb	r2, [r2, #1]
 8001fa6:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3308      	adds	r3, #8
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	7892      	ldrb	r2, [r2, #2]
 8001fb0:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3309      	adds	r3, #9
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	78d2      	ldrb	r2, [r2, #3]
 8001fba:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	220a      	movs	r2, #10
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff85 	bl	8001ed2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <create_pmt_packet+0xf0>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	1d39      	adds	r1, r7, #4
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f00f ff4d 	bl	8011e70 <osMessageQueuePut>
	pmt_seq++;
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <create_pmt_packet+0xec>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <create_pmt_packet+0xec>)
 8001fe0:	801a      	strh	r2, [r3, #0]
	free(buffer);
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f013 f86c 	bl	80150c0 <free>
	free(pmt_spi);
 8001fe8:	6938      	ldr	r0, [r7, #16]
 8001fea:	f013 f869 	bl	80150c0 <free>
	free(uptime);
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f013 f866 	bl	80150c0 <free>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	58020000 	.word	0x58020000
 8002000:	2400083a 	.word	0x2400083a
 8002004:	240007ec 	.word	0x240007ec

08002008 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800201c:	2300      	movs	r3, #0
 800201e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <MX_RTC_Init+0xb4>)
 8002022:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <MX_RTC_Init+0xb8>)
 8002024:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <MX_RTC_Init+0xb4>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MX_RTC_Init+0xb4>)
 800202e:	2263      	movs	r2, #99	; 0x63
 8002030:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_RTC_Init+0xb4>)
 8002034:	f242 720f 	movw	r2, #9999	; 0x270f
 8002038:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_RTC_Init+0xb4>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_RTC_Init+0xb4>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <MX_RTC_Init+0xb4>)
 8002048:	2200      	movs	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_RTC_Init+0xb4>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002052:	481a      	ldr	r0, [pc, #104]	; (80020bc <MX_RTC_Init+0xb4>)
 8002054:	f00a fa96 	bl	800c584 <HAL_RTC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800205e:	f7ff ff33 	bl	8001ec8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002062:	2300      	movs	r3, #0
 8002064:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002066:	2300      	movs	r3, #0
 8002068:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800206a:	2300      	movs	r3, #0
 800206c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2201      	movs	r2, #1
 800207a:	4619      	mov	r1, r3
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <MX_RTC_Init+0xb4>)
 800207e:	f00a fb03 	bl	800c688 <HAL_RTC_SetTime>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002088:	f7ff ff1e 	bl	8001ec8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800208c:	2301      	movs	r3, #1
 800208e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002090:	2301      	movs	r3, #1
 8002092:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002094:	2301      	movs	r3, #1
 8002096:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002098:	2300      	movs	r3, #0
 800209a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	2201      	movs	r2, #1
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <MX_RTC_Init+0xb4>)
 80020a4:	f00a fb8e 	bl	800c7c4 <HAL_RTC_SetDate>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80020ae:	f7ff ff0b 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2400083c 	.word	0x2400083c
 80020c0:	58004000 	.word	0x58004000

080020c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0b2      	sub	sp, #200	; 0xc8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	22c0      	movs	r2, #192	; 0xc0
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f013 f809 	bl	80150ec <memset>
  if(rtcHandle->Instance==RTC)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_RTC_MspInit+0x5c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d118      	bne.n	8002116 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RTC_MspInit+0x60>)
 80020f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	4618      	mov	r0, r3
 80020fc:	f007 fd44 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8002106:	f7ff fedf 	bl	8001ec8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_RTC_MspInit+0x64>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_RTC_MspInit+0x64>)
 8002110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002116:	bf00      	nop
 8002118:	37c8      	adds	r7, #200	; 0xc8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	58004000 	.word	0x58004000
 8002124:	00019300 	.word	0x00019300
 8002128:	58024400 	.word	0x58024400

0800212c <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002136:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800213a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800213e:	4817      	ldr	r0, [pc, #92]	; (800219c <init_adc_dma+0x70>)
 8002140:	f002 fd16 	bl	8004b70 <HAL_ADCEx_Calibration_Start>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800214a:	f7ff febd 	bl	8001ec8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800214e:	220b      	movs	r2, #11
 8002150:	4913      	ldr	r1, [pc, #76]	; (80021a0 <init_adc_dma+0x74>)
 8002152:	4812      	ldr	r0, [pc, #72]	; (800219c <init_adc_dma+0x70>)
 8002154:	f001 fdea 	bl	8003d2c <HAL_ADC_Start_DMA>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800215e:	f7ff feb3 	bl	8001ec8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002162:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <init_adc_dma+0x78>)
 800216c:	f002 fd00 	bl	8004b70 <HAL_ADCEx_Calibration_Start>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002176:	f7ff fea7 	bl	8001ec8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800217a:	2204      	movs	r2, #4
 800217c:	490a      	ldr	r1, [pc, #40]	; (80021a8 <init_adc_dma+0x7c>)
 800217e:	4809      	ldr	r0, [pc, #36]	; (80021a4 <init_adc_dma+0x78>)
 8002180:	f001 fdd4 	bl	8003d2c <HAL_ADC_Start_DMA>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800218a:	f7ff fe9d 	bl	8001ec8 <Error_Handler>
	}
	status = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	71fb      	strb	r3, [r7, #7]

	return status;
 8002192:	79fb      	ldrb	r3, [r7, #7]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2400013c 	.word	0x2400013c
 80021a0:	24000860 	.word	0x24000860
 80021a4:	240001a0 	.word	0x240001a0
 80021a8:	24000880 	.word	0x24000880

080021ac <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 80021b4:	f107 010c 	add.w	r1, r7, #12
 80021b8:	2301      	movs	r3, #1
 80021ba:	2201      	movs	r2, #1
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <sample_pmt_spi+0x44>)
 80021be:	f00a fd63 	bl	800cc88 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <sample_pmt_spi+0x44>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <sample_pmt_spi+0x44>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7bba      	ldrb	r2, [r7, #14]
 80021de:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3301      	adds	r3, #1
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	24000888 	.word	0x24000888

080021f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <MX_SPI1_Init+0xa8>)
 80021fa:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <MX_SPI1_Init+0xac>)
 80021fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021fe:	4b27      	ldr	r3, [pc, #156]	; (800229c <MX_SPI1_Init+0xa8>)
 8002200:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <MX_SPI1_Init+0xa8>)
 8002208:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800220c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <MX_SPI1_Init+0xa8>)
 8002210:	220f      	movs	r2, #15
 8002212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <MX_SPI1_Init+0xa8>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <MX_SPI1_Init+0xa8>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <MX_SPI1_Init+0xa8>)
 8002222:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <MX_SPI1_Init+0xa8>)
 800222a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800222e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_SPI1_Init+0xa8>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <MX_SPI1_Init+0xa8>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_SPI1_Init+0xa8>)
 800223e:	2200      	movs	r2, #0
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_SPI1_Init+0xa8>)
 8002244:	2200      	movs	r2, #0
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_SPI1_Init+0xa8>)
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_SPI1_Init+0xa8>)
 8002252:	2200      	movs	r2, #0
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_SPI1_Init+0xa8>)
 8002258:	2200      	movs	r2, #0
 800225a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_SPI1_Init+0xa8>)
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_SPI1_Init+0xa8>)
 8002264:	2200      	movs	r2, #0
 8002266:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_SPI1_Init+0xa8>)
 800226a:	2200      	movs	r2, #0
 800226c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_SPI1_Init+0xa8>)
 8002270:	2200      	movs	r2, #0
 8002272:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_SPI1_Init+0xa8>)
 8002276:	2200      	movs	r2, #0
 8002278:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_SPI1_Init+0xa8>)
 800227c:	2200      	movs	r2, #0
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_SPI1_Init+0xa8>)
 8002282:	2200      	movs	r2, #0
 8002284:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_SPI1_Init+0xa8>)
 8002288:	f00a fbda 	bl	800ca40 <HAL_SPI_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002292:	f7ff fe19 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	24000888 	.word	0x24000888
 80022a0:	40013000 	.word	0x40013000

080022a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <MX_SPI2_Init+0xa8>)
 80022aa:	4a29      	ldr	r2, [pc, #164]	; (8002350 <MX_SPI2_Init+0xac>)
 80022ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <MX_SPI2_Init+0xa8>)
 80022b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <MX_SPI2_Init+0xa8>)
 80022b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <MX_SPI2_Init+0xa8>)
 80022c0:	220f      	movs	r2, #15
 80022c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <MX_SPI2_Init+0xa8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <MX_SPI2_Init+0xa8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <MX_SPI2_Init+0xa8>)
 80022d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <MX_SPI2_Init+0xa8>)
 80022da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80022de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_SPI2_Init+0xa8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <MX_SPI2_Init+0xa8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_SPI2_Init+0xa8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_SPI2_Init+0xa8>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_SPI2_Init+0xa8>)
 80022fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_SPI2_Init+0xa8>)
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_SPI2_Init+0xa8>)
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_SPI2_Init+0xa8>)
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_SPI2_Init+0xa8>)
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_SPI2_Init+0xa8>)
 800231a:	2200      	movs	r2, #0
 800231c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_SPI2_Init+0xa8>)
 8002320:	2200      	movs	r2, #0
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_SPI2_Init+0xa8>)
 8002326:	2200      	movs	r2, #0
 8002328:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_SPI2_Init+0xa8>)
 800232c:	2200      	movs	r2, #0
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_SPI2_Init+0xa8>)
 8002332:	2200      	movs	r2, #0
 8002334:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_SPI2_Init+0xa8>)
 8002338:	f00a fb82 	bl	800ca40 <HAL_SPI_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002342:	f7ff fdc1 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000910 	.word	0x24000910
 8002350:	40003800 	.word	0x40003800

08002354 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0bc      	sub	sp, #240	; 0xf0
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	22c0      	movs	r2, #192	; 0xc0
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f012 feb9 	bl	80150ec <memset>
  if(spiHandle->Instance==SPI1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_SPI_MspInit+0x15c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d145      	bne.n	8002410 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002390:	2300      	movs	r3, #0
 8002392:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fbf5 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80023a4:	f7ff fd90 	bl	8001ec8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 80023aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ae:	4a41      	ldr	r2, [pc, #260]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 80023ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80023e4:	2318      	movs	r3, #24
 80023e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023fc:	2305      	movs	r3, #5
 80023fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002406:	4619      	mov	r1, r3
 8002408:	482b      	ldr	r0, [pc, #172]	; (80024b8 <HAL_SPI_MspInit+0x164>)
 800240a:	f006 f821 	bl	8008450 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800240e:	e04a      	b.n	80024a6 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_SPI_MspInit+0x168>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d145      	bne.n	80024a6 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800241a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002426:	2300      	movs	r3, #0
 8002428:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	4618      	mov	r0, r3
 8002430:	f007 fbaa 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800243a:	f7ff fd45 	bl	8001ec8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 8002450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_SPI_MspInit+0x160>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800247a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800247e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002494:	2305      	movs	r3, #5
 8002496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800249e:	4619      	mov	r1, r3
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <HAL_SPI_MspInit+0x164>)
 80024a2:	f005 ffd5 	bl	8008450 <HAL_GPIO_Init>
}
 80024a6:	bf00      	nop
 80024a8:	37f0      	adds	r7, #240	; 0xf0
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40013000 	.word	0x40013000
 80024b4:	58024400 	.word	0x58024400
 80024b8:	58020400 	.word	0x58020400
 80024bc:	40003800 	.word	0x40003800

080024c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_MspInit+0x38>)
 80024c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_MspInit+0x38>)
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_MspInit+0x38>)
 80024d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	210f      	movs	r1, #15
 80024e8:	f06f 0001 	mvn.w	r0, #1
 80024ec:	f002 fd3a 	bl	8004f64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400

080024fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b090      	sub	sp, #64	; 0x40
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d827      	bhi.n	800255a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800250a:	2200      	movs	r2, #0
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	2036      	movs	r0, #54	; 0x36
 8002510:	f002 fd28 	bl	8004f64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002514:	2036      	movs	r0, #54	; 0x36
 8002516:	f002 fd3f 	bl	8004f98 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <HAL_InitTick+0xc4>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_InitTick+0xc8>)
 8002522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_InitTick+0xc8>)
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_InitTick+0xc8>)
 8002532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800253e:	f107 0210 	add.w	r2, r7, #16
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f007 fadb 	bl	8009b04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <HAL_InitTick+0x6a>
 8002558:	e001      	b.n	800255e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e02b      	b.n	80025b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800255e:	f007 faa5 	bl	8009aac <HAL_RCC_GetPCLK1Freq>
 8002562:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002564:	e004      	b.n	8002570 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002566:	f007 faa1 	bl	8009aac <HAL_RCC_GetPCLK1Freq>
 800256a:	4603      	mov	r3, r0
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <HAL_InitTick+0xcc>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	3b01      	subs	r3, #1
 800257c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_InitTick+0xd0>)
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_InitTick+0xd4>)
 8002582:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_InitTick+0xd0>)
 8002586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_InitTick+0xd0>)
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_InitTick+0xd0>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_InitTick+0xd0>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <HAL_InitTick+0xd0>)
 80025a0:	f00a fe9f 	bl	800d2e2 <HAL_TIM_Base_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d104      	bne.n	80025b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <HAL_InitTick+0xd0>)
 80025ac:	f00a fef0 	bl	800d390 <HAL_TIM_Base_Start_IT>
 80025b0:	4603      	mov	r3, r0
 80025b2:	e000      	b.n	80025b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3740      	adds	r7, #64	; 0x40
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000094 	.word	0x24000094
 80025c4:	58024400 	.word	0x58024400
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	24000998 	.word	0x24000998
 80025d0:	40001000 	.word	0x40001000

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80025d8:	e7fe      	b.n	80025d8 <NMI_Handler+0x4>

080025da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler+0x4>

080025e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <MemManage_Handler+0x4>

080025e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <UsageFault_Handler+0x4>

080025f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <DMA1_Stream0_IRQHandler+0x10>)
 8002606:	f004 fc05 	bl	8006e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	24000204 	.word	0x24000204

08002614 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMA1_Stream1_IRQHandler+0x10>)
 800261a:	f004 fbfb 	bl	8006e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2400027c 	.word	0x2400027c

08002628 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMA1_Stream2_IRQHandler+0x10>)
 800262e:	f004 fbf1 	bl	8006e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	24000b60 	.word	0x24000b60

0800263c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Stream5_IRQHandler+0x10>)
 8002642:	f004 fbe7 	bl	8006e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	24000308 	.word	0x24000308

08002650 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <TIM1_BRK_IRQHandler+0x10>)
 8002656:	f00b f9b2 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	240009e8 	.word	0x240009e8

08002664 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM1_UP_IRQHandler+0x10>)
 800266a:	f00b f9a8 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	240009e8 	.word	0x240009e8

08002678 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM1_TRG_COM_IRQHandler+0x10>)
 800267e:	f00b f99e 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	240009e8 	.word	0x240009e8

0800268c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM1_CC_IRQHandler+0x10>)
 8002692:	f00b f994 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	240009e8 	.word	0x240009e8

080026a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <TIM2_IRQHandler+0x10>)
 80026a6:	f00b f98a 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	24000a34 	.word	0x24000a34

080026b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <TIM3_IRQHandler+0x10>)
 80026ba:	f00b f980 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	24000a80 	.word	0x24000a80

080026c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <USART1_IRQHandler+0x10>)
 80026ce:	f00c fd39 	bl	800f144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	24000acc 	.word	0x24000acc

080026dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <TIM6_DAC_IRQHandler+0x20>)
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80026ea:	4804      	ldr	r0, [pc, #16]	; (80026fc <TIM6_DAC_IRQHandler+0x20>)
 80026ec:	f002 fde9 	bl	80052c2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <TIM6_DAC_IRQHandler+0x24>)
 80026f2:	f00b f964 	bl	800d9be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	240002f4 	.word	0x240002f4
 8002700:	24000998 	.word	0x24000998

08002704 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <ITM_SendChar+0x48>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <ITM_SendChar+0x48>)
 8002714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002718:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <ITM_SendChar+0x4c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <ITM_SendChar+0x4c>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002726:	bf00      	nop
 8002728:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f8      	beq.n	8002728 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002736:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	6013      	str	r3, [r2, #0]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000edfc 	.word	0xe000edfc
 8002750:	e0000e00 	.word	0xe0000e00

08002754 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e00a      	b.n	800277c <_read+0x28>
		*ptr++ = __io_getchar();
 8002766:	f3af 8000 	nop.w
 800276a:	4601      	mov	r1, r0
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf0      	blt.n	8002766 <_read+0x12>
	}

	return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e009      	b.n	80027b4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	60ba      	str	r2, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ffab 	bl	8002704 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbf1      	blt.n	80027a0 <_write+0x12>
	}
	return len;
 80027bc:	687b      	ldr	r3, [r7, #4]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_close>:

int _close(int file) {
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <_fstat>:

int _fstat(int file, struct stat *st) {
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ee:	605a      	str	r2, [r3, #4]
	return 0;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <_isatty>:

int _isatty(int file) {
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <_sbrk+0x64>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <_sbrk+0x68>)
 8002850:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	429a      	cmp	r2, r3
 800285e:	d207      	bcs.n	8002870 <_sbrk+0x40>
		errno = ENOMEM;
 8002860:	f012 fbfc 	bl	801505c <__errno>
 8002864:	4603      	mov	r3, r0
 8002866:	220c      	movs	r2, #12
 8002868:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800286e:	e009      	b.n	8002884 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <_sbrk+0x64>)
 8002880:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	24080000 	.word	0x24080000
 8002890:	00000400 	.word	0x00000400
 8002894:	240009e4 	.word	0x240009e4
 8002898:	240055f0 	.word	0x240055f0

0800289c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80028a0:	4b37      	ldr	r3, [pc, #220]	; (8002980 <SystemInit+0xe4>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	4a36      	ldr	r2, [pc, #216]	; (8002980 <SystemInit+0xe4>)
 80028a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <SystemInit+0xe8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d807      	bhi.n	80028cc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80028bc:	4b31      	ldr	r3, [pc, #196]	; (8002984 <SystemInit+0xe8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <SystemInit+0xe8>)
 80028c6:	f043 0307 	orr.w	r3, r3, #7
 80028ca:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <SystemInit+0xec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <SystemInit+0xec>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <SystemInit+0xec>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <SystemInit+0xec>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4929      	ldr	r1, [pc, #164]	; (8002988 <SystemInit+0xec>)
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <SystemInit+0xf0>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <SystemInit+0xe8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <SystemInit+0xe8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <SystemInit+0xe8>)
 8002900:	f043 0307 	orr.w	r3, r3, #7
 8002904:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <SystemInit+0xec>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <SystemInit+0xec>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <SystemInit+0xec>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <SystemInit+0xec>)
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <SystemInit+0xf4>)
 800291c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <SystemInit+0xec>)
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <SystemInit+0xf8>)
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <SystemInit+0xec>)
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <SystemInit+0xfc>)
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <SystemInit+0xec>)
 800292c:	2200      	movs	r2, #0
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <SystemInit+0xec>)
 8002932:	4a19      	ldr	r2, [pc, #100]	; (8002998 <SystemInit+0xfc>)
 8002934:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <SystemInit+0xec>)
 8002938:	2200      	movs	r2, #0
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <SystemInit+0xec>)
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <SystemInit+0xfc>)
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <SystemInit+0xec>)
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <SystemInit+0xec>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <SystemInit+0xec>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <SystemInit+0xec>)
 8002956:	2200      	movs	r2, #0
 8002958:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <SystemInit+0x100>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <SystemInit+0x104>)
 8002960:	4013      	ands	r3, r2
 8002962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002966:	d202      	bcs.n	800296e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <SystemInit+0x108>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <SystemInit+0x10c>)
 8002970:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002974:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00
 8002984:	52002000 	.word	0x52002000
 8002988:	58024400 	.word	0x58024400
 800298c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002990:	02020200 	.word	0x02020200
 8002994:	01ff0000 	.word	0x01ff0000
 8002998:	01010280 	.word	0x01010280
 800299c:	5c001000 	.word	0x5c001000
 80029a0:	ffff0000 	.word	0xffff0000
 80029a4:	51008108 	.word	0x51008108
 80029a8:	52004000 	.word	0x52004000

080029ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09a      	sub	sp, #104	; 0x68
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	615a      	str	r2, [r3, #20]
 80029de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	222c      	movs	r2, #44	; 0x2c
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f012 fb80 	bl	80150ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029ec:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <MX_TIM1_Init+0x154>)
 80029ee:	4a45      	ldr	r2, [pc, #276]	; (8002b04 <MX_TIM1_Init+0x158>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <MX_TIM1_Init+0x154>)
 80029f4:	2231      	movs	r2, #49	; 0x31
 80029f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <MX_TIM1_Init+0x154>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80029fe:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a00:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a18:	4839      	ldr	r0, [pc, #228]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a1a:	f00a fc62 	bl	800d2e2 <HAL_TIM_Base_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a24:	f7ff fa50 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a32:	4619      	mov	r1, r3
 8002a34:	4832      	ldr	r0, [pc, #200]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a36:	f00b f9dd 	bl	800ddf4 <HAL_TIM_ConfigClockSource>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a40:	f7ff fa42 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a44:	482e      	ldr	r0, [pc, #184]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a46:	f00a ff59 	bl	800d8fc <HAL_TIM_PWM_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002a50:	f7ff fa3a 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a64:	4619      	mov	r1, r3
 8002a66:	4826      	ldr	r0, [pc, #152]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a68:	f00b ff1a 	bl	800e8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002a72:	f7ff fa29 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a76:	2360      	movs	r3, #96	; 0x60
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8002a7a:	f240 13df 	movw	r3, #479	; 0x1df
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4818      	ldr	r0, [pc, #96]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002a9e:	f00b f895 	bl	800dbcc <HAL_TIM_PWM_ConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002aa8:	f7ff fa0e 	bl	8001ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4807      	ldr	r0, [pc, #28]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002ae2:	f00b ff6b 	bl	800e9bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002aec:	f7ff f9ec 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002af0:	4803      	ldr	r0, [pc, #12]	; (8002b00 <MX_TIM1_Init+0x154>)
 8002af2:	f000 f949 	bl	8002d88 <HAL_TIM_MspPostInit>

}
 8002af6:	bf00      	nop
 8002af8:	3768      	adds	r7, #104	; 0x68
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	240009e8 	.word	0x240009e8
 8002b04:	40010000 	.word	0x40010000

08002b08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08e      	sub	sp, #56	; 0x38
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b28:	463b      	mov	r3, r7
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	615a      	str	r2, [r3, #20]
 8002b38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b44:	2231      	movs	r2, #49	; 0x31
 8002b46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b50:	f640 4234 	movw	r2, #3124	; 0xc34
 8002b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b62:	4823      	ldr	r0, [pc, #140]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b64:	f00a fbbd 	bl	800d2e2 <HAL_TIM_Base_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002b6e:	f7ff f9ab 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481c      	ldr	r0, [pc, #112]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b80:	f00b f938 	bl	800ddf4 <HAL_TIM_ConfigClockSource>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002b8a:	f7ff f99d 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b8e:	4818      	ldr	r0, [pc, #96]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002b90:	f00a feb4 	bl	800d8fc <HAL_TIM_PWM_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002b9a:	f7ff f995 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002bae:	f00b fe77 	bl	800e8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002bb8:	f7ff f986 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbc:	2360      	movs	r3, #96	; 0x60
 8002bbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bcc:	463b      	mov	r3, r7
 8002bce:	220c      	movs	r2, #12
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002bd4:	f00a fffa 	bl	800dbcc <HAL_TIM_PWM_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002bde:	f7ff f973 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <MX_TIM2_Init+0xe8>)
 8002be4:	f000 f8d0 	bl	8002d88 <HAL_TIM_MspPostInit>

}
 8002be8:	bf00      	nop
 8002bea:	3738      	adds	r7, #56	; 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	24000a34 	.word	0x24000a34

08002bf4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfa:	f107 0310 	add.w	r3, r7, #16
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <MX_TIM3_Init+0x98>)
 8002c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c1a:	2263      	movs	r2, #99	; 0x63
 8002c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c26:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c38:	4813      	ldr	r0, [pc, #76]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c3a:	f00a fb52 	bl	800d2e2 <HAL_TIM_Base_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002c44:	f7ff f940 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c4e:	f107 0310 	add.w	r3, r7, #16
 8002c52:	4619      	mov	r1, r3
 8002c54:	480c      	ldr	r0, [pc, #48]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c56:	f00b f8cd 	bl	800ddf4 <HAL_TIM_ConfigClockSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c60:	f7ff f932 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_TIM3_Init+0x94>)
 8002c72:	f00b fe15 	bl	800e8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c7c:	f7ff f924 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	24000a80 	.word	0x24000a80
 8002c8c:	40000400 	.word	0x40000400

08002c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a37      	ldr	r2, [pc, #220]	; (8002d7c <HAL_TIM_Base_MspInit+0xec>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12f      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca8:	4a35      	ldr	r2, [pc, #212]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cb2:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2105      	movs	r1, #5
 8002cc4:	2018      	movs	r0, #24
 8002cc6:	f002 f94d 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002cca:	2018      	movs	r0, #24
 8002ccc:	f002 f964 	bl	8004f98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	2019      	movs	r0, #25
 8002cd6:	f002 f945 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002cda:	2019      	movs	r0, #25
 8002cdc:	f002 f95c 	bl	8004f98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2105      	movs	r1, #5
 8002ce4:	201a      	movs	r0, #26
 8002ce6:	f002 f93d 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002cea:	201a      	movs	r0, #26
 8002cec:	f002 f954 	bl	8004f98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2105      	movs	r1, #5
 8002cf4:	201b      	movs	r0, #27
 8002cf6:	f002 f935 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002cfa:	201b      	movs	r0, #27
 8002cfc:	f002 f94c 	bl	8004f98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d00:	e038      	b.n	8002d74 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d117      	bne.n	8002d3c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	201c      	movs	r0, #28
 8002d30:	f002 f918 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d34:	201c      	movs	r0, #28
 8002d36:	f002 f92f 	bl	8004f98 <HAL_NVIC_EnableIRQ>
}
 8002d3a:	e01b      	b.n	8002d74 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_TIM_Base_MspInit+0xf4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d116      	bne.n	8002d74 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_TIM_Base_MspInit+0xf0>)
 8002d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	201d      	movs	r0, #29
 8002d6a:	f002 f8fb 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d6e:	201d      	movs	r0, #29
 8002d70:	f002 f912 	bl	8004f98 <HAL_NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	58024400 	.word	0x58024400
 8002d84:	40000400 	.word	0x40000400

08002d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <HAL_TIM_MspPostInit+0xb8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d120      	bne.n	8002dec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_TIM_MspPostInit+0xbc>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <HAL_TIM_MspPostInit+0xbc>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_TIM_MspPostInit+0xbc>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	4818      	ldr	r0, [pc, #96]	; (8002e48 <HAL_TIM_MspPostInit+0xc0>)
 8002de6:	f005 fb33 	bl	8008450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dea:	e024      	b.n	8002e36 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d11f      	bne.n	8002e36 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_TIM_MspPostInit+0xbc>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_TIM_MspPostInit+0xbc>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_TIM_MspPostInit+0xbc>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4806      	ldr	r0, [pc, #24]	; (8002e4c <HAL_TIM_MspPostInit+0xc4>)
 8002e32:	f005 fb0d 	bl	8008450 <HAL_GPIO_Init>
}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	; 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	58024400 	.word	0x58024400
 8002e48:	58020000 	.word	0x58020000
 8002e4c:	58020400 	.word	0x58020400

08002e50 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <get_uptime+0x88>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <get_uptime+0x8c>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <get_uptime+0x88>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d005      	beq.n	8002e7e <get_uptime+0x2e>
		ms = uptime_millis;
 8002e72:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <get_uptime+0x88>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <get_uptime+0x8c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e84:	fb03 f202 	mul.w	r2, r3, r2
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <get_uptime+0x8c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <get_uptime+0x90>)
 8002e90:	fba1 1303 	umull	r1, r3, r1, r3
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	6939      	ldr	r1, [r7, #16]
 8002e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0e1b      	lsrs	r3, r3, #24
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	0c1a      	lsrs	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0a1a      	lsrs	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3303      	adds	r3, #3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	24000834 	.word	0x24000834
 8002edc:	e000e010 	.word	0xe000e010
 8002ee0:	10624dd3 	.word	0x10624dd3

08002ee4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002eea:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <MX_USART1_UART_Init+0x94>)
 8002eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002ef0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f2c:	4811      	ldr	r0, [pc, #68]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f2e:	f00b fde1 	bl	800eaf4 <HAL_UART_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f38:	f7fe ffc6 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f40:	f00e fc13 	bl	801176a <HAL_UARTEx_SetTxFifoThreshold>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f4a:	f7fe ffbd 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4808      	ldr	r0, [pc, #32]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f52:	f00e fc48 	bl	80117e6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f5c:	f7fe ffb4 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <MX_USART1_UART_Init+0x90>)
 8002f62:	f00e fbc9 	bl	80116f8 <HAL_UARTEx_DisableFifoMode>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f6c:	f7fe ffac 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	24000acc 	.word	0x24000acc
 8002f78:	40011000 	.word	0x40011000

08002f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0ba      	sub	sp, #232	; 0xe8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	22c0      	movs	r2, #192	; 0xc0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f012 f8a5 	bl	80150ec <memset>
  if(uartHandle->Instance==USART1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a41      	ldr	r2, [pc, #260]	; (80030ac <HAL_UART_MspInit+0x130>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d17b      	bne.n	80030a4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fac:	f04f 0201 	mov.w	r2, #1
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002fb8:	2318      	movs	r3, #24
 8002fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f006 fde0 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fce:	f7fe ff7b 	bl	8001ec8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_UART_MspInit+0x134>)
 8002fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd8:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <HAL_UART_MspInit+0x134>)
 8002fda:	f043 0310 	orr.w	r3, r3, #16
 8002fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_UART_MspInit+0x134>)
 8002fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_UART_MspInit+0x134>)
 8002ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff6:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <HAL_UART_MspInit+0x134>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_UART_MspInit+0x134>)
 8003002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800300e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003028:	2307      	movs	r3, #7
 800302a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003032:	4619      	mov	r1, r3
 8003034:	481f      	ldr	r0, [pc, #124]	; (80030b4 <HAL_UART_MspInit+0x138>)
 8003036:	f005 fa0b 	bl	8008450 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_UART_MspInit+0x140>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003042:	222a      	movs	r2, #42	; 0x2a
 8003044:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003058:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003068:	2200      	movs	r2, #0
 800306a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 800306e:	2200      	movs	r2, #0
 8003070:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003074:	2200      	movs	r2, #0
 8003076:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003078:	480f      	ldr	r0, [pc, #60]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 800307a:	f002 fba1 	bl	80057c0 <HAL_DMA_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003084:	f7fe ff20 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 800308c:	67da      	str	r2, [r3, #124]	; 0x7c
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_UART_MspInit+0x13c>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2105      	movs	r1, #5
 8003098:	2025      	movs	r0, #37	; 0x25
 800309a:	f001 ff63 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800309e:	2025      	movs	r0, #37	; 0x25
 80030a0:	f001 ff7a 	bl	8004f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030a4:	bf00      	nop
 80030a6:	37e8      	adds	r7, #232	; 0xe8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40011000 	.word	0x40011000
 80030b0:	58024400 	.word	0x58024400
 80030b4:	58020000 	.word	0x58020000
 80030b8:	24000b60 	.word	0x24000b60
 80030bc:	40020040 	.word	0x40020040

080030c0 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80030ca:	4bc2      	ldr	r3, [pc, #776]	; (80033d4 <voltage_monitor_init+0x314>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80030d0:	4bc0      	ldr	r3, [pc, #768]	; (80033d4 <voltage_monitor_init+0x314>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80030d6:	4bbf      	ldr	r3, [pc, #764]	; (80033d4 <voltage_monitor_init+0x314>)
 80030d8:	2201      	movs	r2, #1
 80030da:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80030dc:	4bbd      	ldr	r3, [pc, #756]	; (80033d4 <voltage_monitor_init+0x314>)
 80030de:	2200      	movs	r2, #0
 80030e0:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80030e2:	4bbc      	ldr	r3, [pc, #752]	; (80033d4 <voltage_monitor_init+0x314>)
 80030e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80030e8:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80030ea:	4bba      	ldr	r3, [pc, #744]	; (80033d4 <voltage_monitor_init+0x314>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80030f0:	4bb8      	ldr	r3, [pc, #736]	; (80033d4 <voltage_monitor_init+0x314>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80030f6:	4bb7      	ldr	r3, [pc, #732]	; (80033d4 <voltage_monitor_init+0x314>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80030fc:	4bb5      	ldr	r3, [pc, #724]	; (80033d4 <voltage_monitor_init+0x314>)
 80030fe:	2201      	movs	r2, #1
 8003100:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003102:	4bb4      	ldr	r3, [pc, #720]	; (80033d4 <voltage_monitor_init+0x314>)
 8003104:	2200      	movs	r2, #0
 8003106:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003108:	4bb2      	ldr	r3, [pc, #712]	; (80033d4 <voltage_monitor_init+0x314>)
 800310a:	f242 7210 	movw	r2, #10000	; 0x2710
 800310e:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003110:	4bb0      	ldr	r3, [pc, #704]	; (80033d4 <voltage_monitor_init+0x314>)
 8003112:	2200      	movs	r2, #0
 8003114:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003116:	4baf      	ldr	r3, [pc, #700]	; (80033d4 <voltage_monitor_init+0x314>)
 8003118:	2202      	movs	r2, #2
 800311a:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 800311c:	4bad      	ldr	r3, [pc, #692]	; (80033d4 <voltage_monitor_init+0x314>)
 800311e:	2200      	movs	r2, #0
 8003120:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003122:	4bac      	ldr	r3, [pc, #688]	; (80033d4 <voltage_monitor_init+0x314>)
 8003124:	2201      	movs	r2, #1
 8003126:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003128:	4baa      	ldr	r3, [pc, #680]	; (80033d4 <voltage_monitor_init+0x314>)
 800312a:	2200      	movs	r2, #0
 800312c:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 800312e:	4ba9      	ldr	r3, [pc, #676]	; (80033d4 <voltage_monitor_init+0x314>)
 8003130:	f242 7210 	movw	r2, #10000	; 0x2710
 8003134:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003136:	4ba7      	ldr	r3, [pc, #668]	; (80033d4 <voltage_monitor_init+0x314>)
 8003138:	2200      	movs	r2, #0
 800313a:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 800313c:	4ba5      	ldr	r3, [pc, #660]	; (80033d4 <voltage_monitor_init+0x314>)
 800313e:	2203      	movs	r2, #3
 8003140:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003142:	4ba4      	ldr	r3, [pc, #656]	; (80033d4 <voltage_monitor_init+0x314>)
 8003144:	2200      	movs	r2, #0
 8003146:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003148:	4ba2      	ldr	r3, [pc, #648]	; (80033d4 <voltage_monitor_init+0x314>)
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003150:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <voltage_monitor_init+0x314>)
 8003152:	2200      	movs	r2, #0
 8003154:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003156:	4b9f      	ldr	r3, [pc, #636]	; (80033d4 <voltage_monitor_init+0x314>)
 8003158:	f242 7210 	movw	r2, #10000	; 0x2710
 800315c:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 800315e:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <voltage_monitor_init+0x314>)
 8003160:	2200      	movs	r2, #0
 8003162:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003164:	4b9b      	ldr	r3, [pc, #620]	; (80033d4 <voltage_monitor_init+0x314>)
 8003166:	2204      	movs	r2, #4
 8003168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 800316c:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <voltage_monitor_init+0x314>)
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003174:	4b97      	ldr	r3, [pc, #604]	; (80033d4 <voltage_monitor_init+0x314>)
 8003176:	2201      	movs	r2, #1
 8003178:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 800317c:	4b95      	ldr	r3, [pc, #596]	; (80033d4 <voltage_monitor_init+0x314>)
 800317e:	2200      	movs	r2, #0
 8003180:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003182:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <voltage_monitor_init+0x314>)
 8003184:	f242 7210 	movw	r2, #10000	; 0x2710
 8003188:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 800318a:	4b92      	ldr	r3, [pc, #584]	; (80033d4 <voltage_monitor_init+0x314>)
 800318c:	2200      	movs	r2, #0
 800318e:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003190:	4b90      	ldr	r3, [pc, #576]	; (80033d4 <voltage_monitor_init+0x314>)
 8003192:	2205      	movs	r2, #5
 8003194:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003198:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <voltage_monitor_init+0x314>)
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80031a0:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <voltage_monitor_init+0x314>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80031a8:	4b8a      	ldr	r3, [pc, #552]	; (80033d4 <voltage_monitor_init+0x314>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80031ae:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <voltage_monitor_init+0x314>)
 80031b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80031b4:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80031b6:	4b87      	ldr	r3, [pc, #540]	; (80033d4 <voltage_monitor_init+0x314>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80031bc:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <voltage_monitor_init+0x314>)
 80031be:	2206      	movs	r2, #6
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80031c4:	4b83      	ldr	r3, [pc, #524]	; (80033d4 <voltage_monitor_init+0x314>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <voltage_monitor_init+0x314>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80031d4:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <voltage_monitor_init+0x314>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80031dc:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <voltage_monitor_init+0x314>)
 80031de:	f242 7210 	movw	r2, #10000	; 0x2710
 80031e2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <voltage_monitor_init+0x314>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80031ee:	4b79      	ldr	r3, [pc, #484]	; (80033d4 <voltage_monitor_init+0x314>)
 80031f0:	2207      	movs	r2, #7
 80031f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80031f6:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <voltage_monitor_init+0x314>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80031fe:	4b75      	ldr	r3, [pc, #468]	; (80033d4 <voltage_monitor_init+0x314>)
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <voltage_monitor_init+0x314>)
 8003208:	2200      	movs	r2, #0
 800320a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800320e:	4b71      	ldr	r3, [pc, #452]	; (80033d4 <voltage_monitor_init+0x314>)
 8003210:	f242 7210 	movw	r2, #10000	; 0x2710
 8003214:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003218:	4b6e      	ldr	r3, [pc, #440]	; (80033d4 <voltage_monitor_init+0x314>)
 800321a:	2200      	movs	r2, #0
 800321c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003220:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <voltage_monitor_init+0x314>)
 8003222:	2208      	movs	r2, #8
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003228:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <voltage_monitor_init+0x314>)
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <voltage_monitor_init+0x314>)
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003238:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <voltage_monitor_init+0x314>)
 800323a:	2200      	movs	r2, #0
 800323c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003240:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <voltage_monitor_init+0x314>)
 8003242:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003246:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <voltage_monitor_init+0x314>)
 800324c:	f640 3283 	movw	r2, #2947	; 0xb83
 8003250:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003254:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <voltage_monitor_init+0x314>)
 8003256:	2209      	movs	r2, #9
 8003258:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 800325c:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <voltage_monitor_init+0x314>)
 800325e:	2200      	movs	r2, #0
 8003260:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003264:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <voltage_monitor_init+0x314>)
 8003266:	2200      	movs	r2, #0
 8003268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <voltage_monitor_init+0x314>)
 800326e:	2200      	movs	r2, #0
 8003270:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003274:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <voltage_monitor_init+0x314>)
 8003276:	f640 7245 	movw	r2, #3909	; 0xf45
 800327a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 800327e:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <voltage_monitor_init+0x314>)
 8003280:	2200      	movs	r2, #0
 8003282:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003286:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <voltage_monitor_init+0x314>)
 8003288:	220a      	movs	r2, #10
 800328a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800328e:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <voltage_monitor_init+0x314>)
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003296:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <voltage_monitor_init+0x314>)
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800329e:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <voltage_monitor_init+0x314>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80032a6:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <voltage_monitor_init+0x314>)
 80032a8:	f640 7245 	movw	r2, #3909	; 0xf45
 80032ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 80032b0:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <voltage_monitor_init+0x314>)
 80032b2:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80032b6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80032ba:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <voltage_monitor_init+0x314>)
 80032bc:	220b      	movs	r2, #11
 80032be:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80032c2:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <voltage_monitor_init+0x314>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80032ca:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <voltage_monitor_init+0x314>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <voltage_monitor_init+0x314>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <voltage_monitor_init+0x314>)
 80032dc:	f640 72fb 	movw	r2, #4091	; 0xffb
 80032e0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <voltage_monitor_init+0x314>)
 80032e6:	f640 6276 	movw	r2, #3702	; 0xe76
 80032ea:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <voltage_monitor_init+0x314>)
 80032f0:	220c      	movs	r2, #12
 80032f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <voltage_monitor_init+0x314>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80032fe:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <voltage_monitor_init+0x314>)
 8003300:	2200      	movs	r2, #0
 8003302:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003306:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <voltage_monitor_init+0x314>)
 8003308:	2200      	movs	r2, #0
 800330a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <voltage_monitor_init+0x314>)
 8003310:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003314:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <voltage_monitor_init+0x314>)
 800331a:	2200      	movs	r2, #0
 800331c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <voltage_monitor_init+0x314>)
 8003322:	220d      	movs	r2, #13
 8003324:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <voltage_monitor_init+0x314>)
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <voltage_monitor_init+0x314>)
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <voltage_monitor_init+0x314>)
 800333a:	2200      	movs	r2, #0
 800333c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <voltage_monitor_init+0x314>)
 8003342:	f640 7238 	movw	r2, #3896	; 0xf38
 8003346:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <voltage_monitor_init+0x314>)
 800334c:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003350:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <voltage_monitor_init+0x314>)
 8003356:	220e      	movs	r2, #14
 8003358:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <voltage_monitor_init+0x314>)
 800335e:	2200      	movs	r2, #0
 8003360:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <voltage_monitor_init+0x314>)
 8003366:	2200      	movs	r2, #0
 8003368:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <voltage_monitor_init+0x314>)
 800336e:	2200      	movs	r2, #0
 8003370:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <voltage_monitor_init+0x314>)
 8003376:	f640 7245 	movw	r2, #3909	; 0xf45
 800337a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <voltage_monitor_init+0x314>)
 8003380:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003384:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <voltage_monitor_init+0x314>)
 800338a:	220f      	movs	r2, #15
 800338c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <voltage_monitor_init+0x314>)
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <voltage_monitor_init+0x314>)
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <voltage_monitor_init+0x314>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <voltage_monitor_init+0x314>)
 80033aa:	f241 0264 	movw	r2, #4196	; 0x1064
 80033ae:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <voltage_monitor_init+0x314>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <voltage_monitor_init+0x314>)
 80033bc:	2210      	movs	r2, #16
 80033be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <voltage_monitor_init+0x314>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80033ca:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <voltage_monitor_init+0x314>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80033d2:	e001      	b.n	80033d8 <voltage_monitor_init+0x318>
 80033d4:	24000bd8 	.word	0x24000bd8
	rail_monitor[RAIL_n800v].data = 0;
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <voltage_monitor_init+0x378>)
 80033da:	2200      	movs	r2, #0
 80033dc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <voltage_monitor_init+0x378>)
 80033e2:	f640 5208 	movw	r2, #3336	; 0xd08
 80033e6:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <voltage_monitor_init+0x378>)
 80033ec:	f640 32ca 	movw	r2, #3018	; 0xbca
 80033f0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <voltage_monitor_init+0x378>)
 80033f6:	2211      	movs	r2, #17
 80033f8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <voltage_monitor_init+0x378>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <voltage_monitor_init+0x378>)
 8003406:	2201      	movs	r2, #1
 8003408:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <voltage_monitor_init+0x378>)
 800340e:	2200      	movs	r2, #0
 8003410:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <voltage_monitor_init+0x378>)
 8003416:	f242 7210 	movw	r2, #10000	; 0x2710
 800341a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <voltage_monitor_init+0x378>)
 8003420:	2200      	movs	r2, #0
 8003422:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	71fb      	strb	r3, [r7, #7]

	return status;
 800342a:	79fb      	ldrb	r3, [r7, #7]
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	24000bd8 	.word	0x24000bd8

0800343c <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	460a      	mov	r2, r1
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	4613      	mov	r3, r2
 800344a:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003450:	79fa      	ldrb	r2, [r7, #7]
 8003452:	4909      	ldr	r1, [pc, #36]	; (8003478 <set_rail_monitor_enable+0x3c>)
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	3302      	adds	r3, #2
 8003460:	79ba      	ldrb	r2, [r7, #6]
 8003462:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]

	return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	24000bd8 	.word	0x24000bd8

0800347c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800347c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003480:	f7ff fa0c 	bl	800289c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003484:	480c      	ldr	r0, [pc, #48]	; (80034b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003486:	490d      	ldr	r1, [pc, #52]	; (80034bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800348c:	e002      	b.n	8003494 <LoopCopyDataInit>

0800348e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003492:	3304      	adds	r3, #4

08003494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003498:	d3f9      	bcc.n	800348e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800349c:	4c0a      	ldr	r4, [pc, #40]	; (80034c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800349e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a0:	e001      	b.n	80034a6 <LoopFillZerobss>

080034a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a4:	3204      	adds	r2, #4

080034a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a8:	d3fb      	bcc.n	80034a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034aa:	f011 fddd 	bl	8015068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ae:	f7fe fb99 	bl	8001be4 <main>
  bx  lr
 80034b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80034b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034bc:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 80034c0:	08015fb4 	.word	0x08015fb4
  ldr r2, =_sbss
 80034c4:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80034c8:	240055f0 	.word	0x240055f0

080034cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC3_IRQHandler>
	...

080034d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d6:	2003      	movs	r0, #3
 80034d8:	f001 fd39 	bl	8004f4e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034dc:	f006 f93c 	bl	8009758 <HAL_RCC_GetSysClockFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_Init+0x68>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	4913      	ldr	r1, [pc, #76]	; (800353c <HAL_Init+0x6c>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
 80034f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_Init+0x68>)
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <HAL_Init+0x6c>)
 8003504:	5cd3      	ldrb	r3, [r2, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <HAL_Init+0x70>)
 8003512:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003514:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <HAL_Init+0x74>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800351a:	2005      	movs	r0, #5
 800351c:	f7fe ffee 	bl	80024fc <HAL_InitTick>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e002      	b.n	8003530 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800352a:	f7fe ffc9 	bl	80024c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	58024400 	.word	0x58024400
 800353c:	08015f00 	.word	0x08015f00
 8003540:	24000090 	.word	0x24000090
 8003544:	2400008c 	.word	0x2400008c

08003548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_IncTick+0x20>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x24>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_IncTick+0x24>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	24000098 	.word	0x24000098
 800356c:	24000c8c 	.word	0x24000c8c

08003570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return uwTick;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_GetTick+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	24000c8c 	.word	0x24000c8c

08003588 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_GetREVID+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0c1b      	lsrs	r3, r3, #16
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	5c001000 	.word	0x5c001000

080035a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	401a      	ands	r2, r3
 80035b4:	4904      	ldr	r1, [pc, #16]	; (80035c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	58000400 	.word	0x58000400

080035cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3360      	adds	r3, #96	; 0x60
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	430b      	orrs	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	611a      	str	r2, [r3, #16]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b087      	sub	sp, #28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3360      	adds	r3, #96	; 0x60
 80036b6:	461a      	mov	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	601a      	str	r2, [r3, #0]
  }
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3330      	adds	r3, #48	; 0x30
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	4413      	add	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	211f      	movs	r1, #31
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	401a      	ands	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	f003 011f 	and.w	r1, r3, #31
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	431a      	orrs	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f023 0203 	bic.w	r2, r3, #3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3314      	adds	r3, #20
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	0e5b      	lsrs	r3, r3, #25
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	0d1b      	lsrs	r3, r3, #20
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2107      	movs	r1, #7
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	401a      	ands	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	0d1b      	lsrs	r3, r3, #20
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f0:	43db      	mvns	r3, r3
 80037f2:	401a      	ands	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0318 	and.w	r3, r3, #24
 80037fa:	4908      	ldr	r1, [pc, #32]	; (800381c <LL_ADC_SetChannelSingleDiff+0x44>)
 80037fc:	40d9      	lsrs	r1, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	400b      	ands	r3, r1
 8003802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	000fffff 	.word	0x000fffff

08003820 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 031f 	and.w	r3, r3, #31
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <LL_ADC_DisableDeepPowerDown+0x20>)
 800384a:	4013      	ands	r3, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6093      	str	r3, [r2, #8]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	5fffffc0 	.word	0x5fffffc0

08003860 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003874:	d101      	bne.n	800387a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <LL_ADC_EnableInternalRegulator+0x24>)
 8003896:	4013      	ands	r3, r2
 8003898:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	6fffffc0 	.word	0x6fffffc0

080038b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c4:	d101      	bne.n	80038ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <LL_ADC_Enable+0x24>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	7fffffc0 	.word	0x7fffffc0

08003900 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <LL_ADC_Disable+0x24>)
 800390e:	4013      	ands	r3, r2
 8003910:	f043 0202 	orr.w	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	7fffffc0 	.word	0x7fffffc0

08003928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <LL_ADC_IsEnabled+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <LL_ADC_IsEnabled+0x1a>
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d101      	bne.n	8003966 <LL_ADC_IsDisableOngoing+0x18>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_ADC_IsDisableOngoing+0x1a>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <LL_ADC_REG_StartConversion+0x24>)
 8003982:	4013      	ands	r3, r2
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	7fffffc0 	.word	0x7fffffc0

0800399c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d101      	bne.n	80039b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d101      	bne.n	80039da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e18f      	b.n	8003d22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fc ff9b 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff19 	bl	8003860 <LL_ADC_IsDeepPowerDownEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff feff 	bl	800383c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff34 	bl	80038b0 <LL_ADC_IsInternalRegulatorEnabled>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d114      	bne.n	8003a78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff18 	bl	8003888 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a58:	4b87      	ldr	r3, [pc, #540]	; (8003c78 <HAL_ADC_Init+0x290>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	4a87      	ldr	r2, [pc, #540]	; (8003c7c <HAL_ADC_Init+0x294>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	3301      	adds	r3, #1
 8003a68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a6a:	e002      	b.n	8003a72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff17 	bl	80038b0 <LL_ADC_IsInternalRegulatorEnabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	f043 0210 	orr.w	r2, r3, #16
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f043 0201 	orr.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff77 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003aae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 8129 	bne.w	8003d10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 8125 	bne.w	8003d10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff24 	bl	8003928 <LL_ADC_IsEnabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d136      	bne.n	8003b54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_ADC_Init+0x298>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_ADC_Init+0x112>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a63      	ldr	r2, [pc, #396]	; (8003c84 <HAL_ADC_Init+0x29c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10e      	bne.n	8003b18 <HAL_ADC_Init+0x130>
 8003afa:	4861      	ldr	r0, [pc, #388]	; (8003c80 <HAL_ADC_Init+0x298>)
 8003afc:	f7ff ff14 	bl	8003928 <LL_ADC_IsEnabled>
 8003b00:	4604      	mov	r4, r0
 8003b02:	4860      	ldr	r0, [pc, #384]	; (8003c84 <HAL_ADC_Init+0x29c>)
 8003b04:	f7ff ff10 	bl	8003928 <LL_ADC_IsEnabled>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4323      	orrs	r3, r4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e008      	b.n	8003b2a <HAL_ADC_Init+0x142>
 8003b18:	485b      	ldr	r0, [pc, #364]	; (8003c88 <HAL_ADC_Init+0x2a0>)
 8003b1a:	f7ff ff05 	bl	8003928 <LL_ADC_IsEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a53      	ldr	r2, [pc, #332]	; (8003c80 <HAL_ADC_Init+0x298>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_ADC_Init+0x15a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a51      	ldr	r2, [pc, #324]	; (8003c84 <HAL_ADC_Init+0x29c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_Init+0x15e>
 8003b42:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_ADC_Init+0x2a4>)
 8003b44:	e000      	b.n	8003b48 <HAL_ADC_Init+0x160>
 8003b46:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_ADC_Init+0x2a8>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7ff fd3c 	bl	80035cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003b54:	f7ff fd18 	bl	8003588 <HAL_GetREVID>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d914      	bls.n	8003b8c <HAL_ADC_Init+0x1a4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d110      	bne.n	8003b8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7d5b      	ldrb	r3, [r3, #21]
 8003b6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7f1b      	ldrb	r3, [r3, #28]
 8003b80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b84:	f043 030c 	orr.w	r3, r3, #12
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e00d      	b.n	8003ba8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7d5b      	ldrb	r3, [r3, #21]
 8003b90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7f1b      	ldrb	r3, [r3, #28]
 8003ba2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7f1b      	ldrb	r3, [r3, #28]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d106      	bne.n	8003bbe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	045b      	lsls	r3, r3, #17
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_ADC_Init+0x2ac>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	430b      	orrs	r3, r1
 8003bec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fed2 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003bf8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fedf 	bl	80039c2 <LL_ADC_INJ_IsConversionOngoing>
 8003c04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d15f      	bne.n	8003ccc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d15c      	bne.n	8003ccc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7d1b      	ldrb	r3, [r3, #20]
 8003c16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_ADC_Init+0x2b0>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d130      	bne.n	8003ca0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <HAL_ADC_Init+0x2b4>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c52:	3a01      	subs	r2, #1
 8003c54:	0411      	lsls	r1, r2, #16
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c66:	430a      	orrs	r2, r1
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	611a      	str	r2, [r3, #16]
 8003c74:	e01c      	b.n	8003cb0 <HAL_ADC_Init+0x2c8>
 8003c76:	bf00      	nop
 8003c78:	2400008c 	.word	0x2400008c
 8003c7c:	053e2d63 	.word	0x053e2d63
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40022100 	.word	0x40022100
 8003c88:	58026000 	.word	0x58026000
 8003c8c:	40022300 	.word	0x40022300
 8003c90:	58026300 	.word	0x58026300
 8003c94:	fff0c003 	.word	0xfff0c003
 8003c98:	ffffbffc 	.word	0xffffbffc
 8003c9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fdec 	bl	80048a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d10c      	bne.n	8003cee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f023 010f 	bic.w	r1, r3, #15
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	1e5a      	subs	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
 8003cec:	e007      	b.n	8003cfe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 020f 	bic.w	r2, r2, #15
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
 8003d0e:	e007      	b.n	8003d20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f043 0210 	orr.w	r2, r3, #16
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd90      	pop	{r4, r7, pc}
 8003d2a:	bf00      	nop

08003d2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a55      	ldr	r2, [pc, #340]	; (8003e94 <HAL_ADC_Start_DMA+0x168>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_ADC_Start_DMA+0x20>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_ADC_Start_DMA+0x16c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_Start_DMA+0x24>
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_ADC_Start_DMA+0x170>)
 8003d4e:	e000      	b.n	8003d52 <HAL_ADC_Start_DMA+0x26>
 8003d50:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_ADC_Start_DMA+0x174>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fd64 	bl	8003820 <LL_ADC_GetMultimode>
 8003d58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fe1c 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 808c 	bne.w	8003e84 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Start_DMA+0x4e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e087      	b.n	8003e8a <HAL_ADC_Start_DMA+0x15e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d002      	beq.n	8003d94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	d170      	bne.n	8003e76 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fc07 	bl	80045a8 <ADC_Enable>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d163      	bne.n	8003e6c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_ADC_Start_DMA+0x178>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a37      	ldr	r2, [pc, #220]	; (8003e98 <HAL_ADC_Start_DMA+0x16c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d002      	beq.n	8003dc4 <HAL_ADC_Start_DMA+0x98>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	e000      	b.n	8003dc6 <HAL_ADC_Start_DMA+0x9a>
 8003dc4:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <HAL_ADC_Start_DMA+0x168>)
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d002      	beq.n	8003dd4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f023 0206 	bic.w	r2, r3, #6
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
 8003df8:	e002      	b.n	8003e00 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e04:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_ADC_Start_DMA+0x17c>)
 8003e06:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_ADC_Start_DMA+0x180>)
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <HAL_ADC_Start_DMA+0x184>)
 8003e16:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	221c      	movs	r2, #28
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0210 	orr.w	r2, r2, #16
 8003e36:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f7ff fc89 	bl	800375a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3340      	adds	r3, #64	; 0x40
 8003e52:	4619      	mov	r1, r3
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f002 f80e 	bl	8005e78 <HAL_DMA_Start_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fd85 	bl	8003974 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003e6a:	e00d      	b.n	8003e88 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003e74:	e008      	b.n	8003e88 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e82:	e001      	b.n	8003e88 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40022000 	.word	0x40022000
 8003e98:	40022100 	.word	0x40022100
 8003e9c:	40022300 	.word	0x40022300
 8003ea0:	58026300 	.word	0x58026300
 8003ea4:	fffff0fe 	.word	0xfffff0fe
 8003ea8:	0800477b 	.word	0x0800477b
 8003eac:	08004853 	.word	0x08004853
 8003eb0:	0800486f 	.word	0x0800486f

08003eb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b0a1      	sub	sp, #132	; 0x84
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_ADC_ConfigChannel+0x1b0>)
 8003f0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x2a>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e32e      	b.n	8004578 <HAL_ADC_ConfigChannel+0x688>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fd38 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8313 	bne.w	800455a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db2c      	blt.n	8003f96 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x6a>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0e9b      	lsrs	r3, r3, #26
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	e016      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x98>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f6a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e003      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	69d1      	ldr	r1, [r2, #28]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	430b      	orrs	r3, r1
 8003f94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f7ff fbad 	bl	8003702 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fcf5 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003fb2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fd02 	bl	80039c2 <LL_ADC_INJ_IsConversionOngoing>
 8003fbe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 80b8 	bne.w	8004138 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 80b4 	bne.w	8004138 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f7ff fbcf 	bl	8003780 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fe2:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_ADC_ConfigChannel+0x1b4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fee:	d10b      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x118>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	e01d      	b.n	8004044 <HAL_ADC_ConfigChannel+0x154>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <HAL_ADC_ConfigChannel+0x13e>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	e00a      	b.n	8004044 <HAL_ADC_ConfigChannel+0x154>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d02c      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6919      	ldr	r1, [r3, #16]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405c:	f7ff faea 	bl	8003634 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6919      	ldr	r1, [r3, #16]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7e5b      	ldrb	r3, [r3, #25]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x186>
 8004070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004074:	e000      	b.n	8004078 <HAL_ADC_ConfigChannel+0x188>
 8004076:	2300      	movs	r3, #0
 8004078:	461a      	mov	r2, r3
 800407a:	f7ff fb14 	bl	80036a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	7e1b      	ldrb	r3, [r3, #24]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x1a4>
 800408e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004092:	e000      	b.n	8004096 <HAL_ADC_ConfigChannel+0x1a6>
 8004094:	2300      	movs	r3, #0
 8004096:	461a      	mov	r2, r3
 8004098:	f7ff faec 	bl	8003674 <LL_ADC_SetDataRightShift>
 800409c:	e04c      	b.n	8004138 <HAL_ADC_ConfigChannel+0x248>
 800409e:	bf00      	nop
 80040a0:	47ff0000 	.word	0x47ff0000
 80040a4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	069b      	lsls	r3, r3, #26
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	069b      	lsls	r3, r3, #26
 80040dc:	429a      	cmp	r2, r3
 80040de:	d107      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	069b      	lsls	r3, r3, #26
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004112:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	429a      	cmp	r2, r3
 8004126:	d107      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fbf3 	bl	8003928 <LL_ADC_IsEnabled>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	f040 8211 	bne.w	800456c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f7ff fb3e 	bl	80037d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4aa1      	ldr	r2, [pc, #644]	; (80043e8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	f040 812e 	bne.w	80043c4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x2a0>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0e9b      	lsrs	r3, r3, #26
 800417e:	3301      	adds	r3, #1
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2b09      	cmp	r3, #9
 8004186:	bf94      	ite	ls
 8004188:	2301      	movls	r3, #1
 800418a:	2300      	movhi	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e019      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x2d4>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80041ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2b09      	cmp	r3, #9
 80041bc:	bf94      	ite	ls
 80041be:	2301      	movls	r3, #1
 80041c0:	2300      	movhi	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d079      	beq.n	80042bc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x2f4>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0e9b      	lsrs	r3, r3, #26
 80041da:	3301      	adds	r3, #1
 80041dc:	069b      	lsls	r3, r3, #26
 80041de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e2:	e015      	b.n	8004210 <HAL_ADC_ConfigChannel+0x320>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80041fc:	2320      	movs	r3, #32
 80041fe:	e003      	b.n	8004208 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3301      	adds	r3, #1
 800420a:	069b      	lsls	r3, r3, #26
 800420c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x340>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	0e9b      	lsrs	r3, r3, #26
 8004222:	3301      	adds	r3, #1
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	e017      	b.n	8004260 <HAL_ADC_ConfigChannel+0x370>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800423e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e003      	b.n	8004254 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	3301      	adds	r3, #1
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	ea42 0103 	orr.w	r1, r2, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x396>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	3301      	adds	r3, #1
 8004278:	f003 021f 	and.w	r2, r3, #31
 800427c:	4613      	mov	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	051b      	lsls	r3, r3, #20
 8004284:	e018      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x3c8>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800429e:	2320      	movs	r3, #32
 80042a0:	e003      	b.n	80042aa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	fab3 f383 	clz	r3, r3
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b8:	430b      	orrs	r3, r1
 80042ba:	e07e      	b.n	80043ba <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d107      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x3e8>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	3301      	adds	r3, #1
 80042d0:	069b      	lsls	r3, r3, #26
 80042d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d6:	e015      	b.n	8004304 <HAL_ADC_ConfigChannel+0x414>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80042f0:	2320      	movs	r3, #32
 80042f2:	e003      	b.n	80042fc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	069b      	lsls	r3, r3, #26
 8004300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x434>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	3301      	adds	r3, #1
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2101      	movs	r1, #1
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	e017      	b.n	8004354 <HAL_ADC_ConfigChannel+0x464>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	61bb      	str	r3, [r7, #24]
  return result;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800433c:	2320      	movs	r3, #32
 800433e:	e003      	b.n	8004348 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	ea42 0103 	orr.w	r1, r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x490>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0e9b      	lsrs	r3, r3, #26
 800436a:	3301      	adds	r3, #1
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	3b1e      	subs	r3, #30
 8004378:	051b      	lsls	r3, r3, #20
 800437a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800437e:	e01b      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x4c8>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	60fb      	str	r3, [r7, #12]
  return result;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e003      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f003 021f 	and.w	r2, r3, #31
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	3b1e      	subs	r3, #30
 80043b2:	051b      	lsls	r3, r3, #20
 80043b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b8:	430b      	orrs	r3, r1
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	6892      	ldr	r2, [r2, #8]
 80043be:	4619      	mov	r1, r3
 80043c0:	f7ff f9de 	bl	8003780 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f280 80cf 	bge.w	800456c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a06      	ldr	r2, [pc, #24]	; (80043ec <HAL_ADC_ConfigChannel+0x4fc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_ADC_ConfigChannel+0x4f2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_ADC_ConfigChannel+0x500>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10a      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x508>
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <HAL_ADC_ConfigChannel+0x504>)
 80043e4:	e009      	b.n	80043fa <HAL_ADC_ConfigChannel+0x50a>
 80043e6:	bf00      	nop
 80043e8:	47ff0000 	.word	0x47ff0000
 80043ec:	40022000 	.word	0x40022000
 80043f0:	40022100 	.word	0x40022100
 80043f4:	40022300 	.word	0x40022300
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_ADC_ConfigChannel+0x690>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f90c 	bl	8003618 <LL_ADC_GetCommonPathInternalCh>
 8004400:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5f      	ldr	r2, [pc, #380]	; (8004584 <HAL_ADC_ConfigChannel+0x694>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_ADC_ConfigChannel+0x526>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5d      	ldr	r2, [pc, #372]	; (8004588 <HAL_ADC_ConfigChannel+0x698>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10e      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x544>
 8004416:	485b      	ldr	r0, [pc, #364]	; (8004584 <HAL_ADC_ConfigChannel+0x694>)
 8004418:	f7ff fa86 	bl	8003928 <LL_ADC_IsEnabled>
 800441c:	4604      	mov	r4, r0
 800441e:	485a      	ldr	r0, [pc, #360]	; (8004588 <HAL_ADC_ConfigChannel+0x698>)
 8004420:	f7ff fa82 	bl	8003928 <LL_ADC_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	4323      	orrs	r3, r4
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_ADC_ConfigChannel+0x556>
 8004434:	4855      	ldr	r0, [pc, #340]	; (800458c <HAL_ADC_ConfigChannel+0x69c>)
 8004436:	f7ff fa77 	bl	8003928 <LL_ADC_IsEnabled>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d07d      	beq.n	8004546 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a50      	ldr	r2, [pc, #320]	; (8004590 <HAL_ADC_ConfigChannel+0x6a0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d130      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x5c6>
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12b      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4a      	ldr	r2, [pc, #296]	; (800458c <HAL_ADC_ConfigChannel+0x69c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	f040 8081 	bne.w	800456c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a45      	ldr	r2, [pc, #276]	; (8004584 <HAL_ADC_ConfigChannel+0x694>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_ADC_ConfigChannel+0x58e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a43      	ldr	r2, [pc, #268]	; (8004588 <HAL_ADC_ConfigChannel+0x698>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x592>
 800447e:	4a45      	ldr	r2, [pc, #276]	; (8004594 <HAL_ADC_ConfigChannel+0x6a4>)
 8004480:	e000      	b.n	8004484 <HAL_ADC_ConfigChannel+0x594>
 8004482:	4a3f      	ldr	r2, [pc, #252]	; (8004580 <HAL_ADC_ConfigChannel+0x690>)
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7ff f8b0 	bl	80035f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_ADC_ConfigChannel+0x6a8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a40      	ldr	r2, [pc, #256]	; (800459c <HAL_ADC_ConfigChannel+0x6ac>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	3301      	adds	r3, #1
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044a6:	e002      	b.n	80044ae <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f9      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b4:	e05a      	b.n	800456c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a39      	ldr	r2, [pc, #228]	; (80045a0 <HAL_ADC_ConfigChannel+0x6b0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d11e      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x60e>
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d119      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2f      	ldr	r2, [pc, #188]	; (800458c <HAL_ADC_ConfigChannel+0x69c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d14b      	bne.n	800456c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_ADC_ConfigChannel+0x694>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_ADC_ConfigChannel+0x5f8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_ADC_ConfigChannel+0x698>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x5fc>
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_ADC_ConfigChannel+0x6a4>)
 80044ea:	e000      	b.n	80044ee <HAL_ADC_ConfigChannel+0x5fe>
 80044ec:	4a24      	ldr	r2, [pc, #144]	; (8004580 <HAL_ADC_ConfigChannel+0x690>)
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7ff f87b 	bl	80035f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044fc:	e036      	b.n	800456c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d131      	bne.n	800456c <HAL_ADC_ConfigChannel+0x67c>
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d12c      	bne.n	800456c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_ADC_ConfigChannel+0x69c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d127      	bne.n	800456c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_ADC_ConfigChannel+0x694>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_ADC_ConfigChannel+0x640>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <HAL_ADC_ConfigChannel+0x698>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x644>
 8004530:	4a18      	ldr	r2, [pc, #96]	; (8004594 <HAL_ADC_ConfigChannel+0x6a4>)
 8004532:	e000      	b.n	8004536 <HAL_ADC_ConfigChannel+0x646>
 8004534:	4a12      	ldr	r2, [pc, #72]	; (8004580 <HAL_ADC_ConfigChannel+0x690>)
 8004536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7ff f857 	bl	80035f2 <LL_ADC_SetCommonPathInternalCh>
 8004544:	e012      	b.n	800456c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004558:	e008      	b.n	800456c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004574:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004578:	4618      	mov	r0, r3
 800457a:	3784      	adds	r7, #132	; 0x84
 800457c:	46bd      	mov	sp, r7
 800457e:	bd90      	pop	{r4, r7, pc}
 8004580:	58026300 	.word	0x58026300
 8004584:	40022000 	.word	0x40022000
 8004588:	40022100 	.word	0x40022100
 800458c:	58026000 	.word	0x58026000
 8004590:	cb840000 	.word	0xcb840000
 8004594:	40022300 	.word	0x40022300
 8004598:	2400008c 	.word	0x2400008c
 800459c:	053e2d63 	.word	0x053e2d63
 80045a0:	c7520000 	.word	0xc7520000
 80045a4:	cfb80000 	.word	0xcfb80000

080045a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff f9b7 	bl	8003928 <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d16e      	bne.n	800469e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <ADC_Enable+0x100>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e05a      	b.n	80046a0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff f972 	bl	80038d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045f4:	f7fe ffbc 	bl	8003570 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <ADC_Enable+0x104>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <ADC_Enable+0x66>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <ADC_Enable+0x108>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d101      	bne.n	8004612 <ADC_Enable+0x6a>
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <ADC_Enable+0x10c>)
 8004610:	e000      	b.n	8004614 <ADC_Enable+0x6c>
 8004612:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <ADC_Enable+0x110>)
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff f903 	bl	8003820 <LL_ADC_GetMultimode>
 800461a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <ADC_Enable+0x108>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d002      	beq.n	800462c <ADC_Enable+0x84>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	e000      	b.n	800462e <ADC_Enable+0x86>
 800462c:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <ADC_Enable+0x104>)
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	4293      	cmp	r3, r2
 8004634:	d02c      	beq.n	8004690 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d130      	bne.n	800469e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800463c:	e028      	b.n	8004690 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f970 	bl	8003928 <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f940 	bl	80038d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004658:	f7fe ff8a 	bl	8003570 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d914      	bls.n	8004690 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d00d      	beq.n	8004690 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f043 0210 	orr.w	r2, r3, #16
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	f043 0201 	orr.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e007      	b.n	80046a0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d1cf      	bne.n	800463e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	8000003f 	.word	0x8000003f
 80046ac:	40022000 	.word	0x40022000
 80046b0:	40022100 	.word	0x40022100
 80046b4:	40022300 	.word	0x40022300
 80046b8:	58026300 	.word	0x58026300

080046bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff f940 	bl	800394e <LL_ADC_IsDisableOngoing>
 80046ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff f927 	bl	8003928 <LL_ADC_IsEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d047      	beq.n	8004770 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d144      	bne.n	8004770 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030d 	and.w	r3, r3, #13
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10c      	bne.n	800470e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f901 	bl	8003900 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2203      	movs	r2, #3
 8004704:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004706:	f7fe ff33 	bl	8003570 <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800470c:	e029      	b.n	8004762 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f043 0210 	orr.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e023      	b.n	8004772 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800472a:	f7fe ff21 	bl	8003570 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d914      	bls.n	8004762 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 0210 	orr.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	f043 0201 	orr.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e007      	b.n	8004772 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1dc      	bne.n	800472a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004790:	2b00      	cmp	r3, #0
 8004792:	d14b      	bne.n	800482c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d021      	beq.n	80047f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ff92 	bl	80036dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d032      	beq.n	8004824 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d12b      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11f      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
 80047f0:	e018      	b.n	8004824 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d111      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff fb45 	bl	8003eb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800482a:	e00e      	b.n	800484a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fb4f 	bl	8003edc <HAL_ADC_ErrorCallback>
}
 800483e:	e004      	b.n	800484a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff fb31 	bl	8003ec8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff fb21 	bl	8003edc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7a      	ldr	r2, [pc, #488]	; (8004a9c <ADC_ConfigureBoostMode+0x1f8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <ADC_ConfigureBoostMode+0x1c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a79      	ldr	r2, [pc, #484]	; (8004aa0 <ADC_ConfigureBoostMode+0x1fc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d109      	bne.n	80048d4 <ADC_ConfigureBoostMode+0x30>
 80048c0:	4b78      	ldr	r3, [pc, #480]	; (8004aa4 <ADC_ConfigureBoostMode+0x200>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e008      	b.n	80048e6 <ADC_ConfigureBoostMode+0x42>
 80048d4:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <ADC_ConfigureBoostMode+0x204>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01c      	beq.n	8004924 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80048ea:	f005 f8af 	bl	8009a4c <HAL_RCC_GetHCLKFreq>
 80048ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048f8:	d010      	beq.n	800491c <ADC_ConfigureBoostMode+0x78>
 80048fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048fe:	d873      	bhi.n	80049e8 <ADC_ConfigureBoostMode+0x144>
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d002      	beq.n	800490c <ADC_ConfigureBoostMode+0x68>
 8004906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490a:	d16d      	bne.n	80049e8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	60fb      	str	r3, [r7, #12]
        break;
 800491a:	e068      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	60fb      	str	r3, [r7, #12]
        break;
 8004922:	e064      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004924:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004928:	f04f 0100 	mov.w	r1, #0
 800492c:	f006 fb36 	bl	800af9c <HAL_RCCEx_GetPeriphCLKFreq>
 8004930:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800493a:	d051      	beq.n	80049e0 <ADC_ConfigureBoostMode+0x13c>
 800493c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004940:	d854      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 8004942:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004946:	d047      	beq.n	80049d8 <ADC_ConfigureBoostMode+0x134>
 8004948:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800494c:	d84e      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 800494e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004952:	d03d      	beq.n	80049d0 <ADC_ConfigureBoostMode+0x12c>
 8004954:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004958:	d848      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 800495a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495e:	d033      	beq.n	80049c8 <ADC_ConfigureBoostMode+0x124>
 8004960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004964:	d842      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 8004966:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800496a:	d029      	beq.n	80049c0 <ADC_ConfigureBoostMode+0x11c>
 800496c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004970:	d83c      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 8004972:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004976:	d01a      	beq.n	80049ae <ADC_ConfigureBoostMode+0x10a>
 8004978:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800497c:	d836      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 800497e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004982:	d014      	beq.n	80049ae <ADC_ConfigureBoostMode+0x10a>
 8004984:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004988:	d830      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498e:	d00e      	beq.n	80049ae <ADC_ConfigureBoostMode+0x10a>
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d82a      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 8004996:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800499a:	d008      	beq.n	80049ae <ADC_ConfigureBoostMode+0x10a>
 800499c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049a0:	d824      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x148>
 80049a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049a6:	d002      	beq.n	80049ae <ADC_ConfigureBoostMode+0x10a>
 80049a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049ac:	d11e      	bne.n	80049ec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	0c9b      	lsrs	r3, r3, #18
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]
        break;
 80049be:	e016      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	60fb      	str	r3, [r7, #12]
        break;
 80049c6:	e012      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	60fb      	str	r3, [r7, #12]
        break;
 80049ce:	e00e      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	60fb      	str	r3, [r7, #12]
        break;
 80049d6:	e00a      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	09db      	lsrs	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
        break;
 80049de:	e006      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	60fb      	str	r3, [r7, #12]
        break;
 80049e6:	e002      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
        break;
 80049e8:	bf00      	nop
 80049ea:	e000      	b.n	80049ee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80049ec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80049ee:	f7fe fdcb 	bl	8003588 <HAL_GetREVID>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d815      	bhi.n	8004a28 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <ADC_ConfigureBoostMode+0x208>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d908      	bls.n	8004a16 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a14:	e03e      	b.n	8004a94 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a24:	609a      	str	r2, [r3, #8]
}
 8004a26:	e035      	b.n	8004a94 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <ADC_ConfigureBoostMode+0x20c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d808      	bhi.n	8004a48 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a44:	609a      	str	r2, [r3, #8]
}
 8004a46:	e025      	b.n	8004a94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <ADC_ConfigureBoostMode+0x210>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d80a      	bhi.n	8004a66 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	e016      	b.n	8004a94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <ADC_ConfigureBoostMode+0x214>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d80a      	bhi.n	8004a84 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	609a      	str	r2, [r3, #8]
}
 8004a82:	e007      	b.n	8004a94 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40022100 	.word	0x40022100
 8004aa4:	40022300 	.word	0x40022300
 8004aa8:	58026300 	.word	0x58026300
 8004aac:	01312d00 	.word	0x01312d00
 8004ab0:	005f5e10 	.word	0x005f5e10
 8004ab4:	00bebc20 	.word	0x00bebc20
 8004ab8:	017d7840 	.word	0x017d7840

08004abc <LL_ADC_IsEnabled>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <LL_ADC_IsEnabled+0x18>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <LL_ADC_IsEnabled+0x1a>
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <LL_ADC_StartCalibration>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <LL_ADC_StartCalibration+0x38>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b04:	430a      	orrs	r2, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	3ffeffc0 	.word	0x3ffeffc0

08004b20 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d101      	bne.n	8004b60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_ADCEx_Calibration_Start+0x1e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e04c      	b.n	8004c28 <HAL_ADCEx_Calibration_Start+0xb8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fd90 	bl	80046bc <ADC_Disable>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d135      	bne.n	8004c12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004baa:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ff90 	bl	8004ae4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bc4:	e014      	b.n	8004bf0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d30d      	bcc.n	8004bf0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	f023 0312 	bic.w	r3, r3, #18
 8004bdc:	f043 0210 	orr.w	r2, r3, #16
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e01b      	b.n	8004c28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff93 	bl	8004b20 <LL_ADC_IsCalibrationOnGoing>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e2      	bne.n	8004bc6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	f023 0303 	bic.w	r3, r3, #3
 8004c08:	f043 0201 	orr.w	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
 8004c10:	e005      	b.n	8004c1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	ffffeefd 	.word	0xffffeefd
 8004c34:	25c3f800 	.word	0x25c3f800

08004c38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b09f      	sub	sp, #124	; 0x7c
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0be      	b.n	8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5c      	ldr	r2, [pc, #368]	; (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d102      	bne.n	8004c76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c70:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	e001      	b.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e09d      	b.n	8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ff54 	bl	8004b48 <LL_ADC_REG_IsConversionOngoing>
 8004ca0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff4e 	bl	8004b48 <LL_ADC_REG_IsConversionOngoing>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d17f      	bne.n	8004db2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d17c      	bne.n	8004db2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a46      	ldr	r2, [pc, #280]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004ccc:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cce:	e000      	b.n	8004cd2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d039      	beq.n	8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3a      	ldr	r2, [pc, #232]	; (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10e      	bne.n	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d02:	4836      	ldr	r0, [pc, #216]	; (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d04:	f7ff feda 	bl	8004abc <LL_ADC_IsEnabled>
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4835      	ldr	r0, [pc, #212]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d0c:	f7ff fed6 	bl	8004abc <LL_ADC_IsEnabled>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4323      	orrs	r3, r4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e008      	b.n	8004d32 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004d20:	4832      	ldr	r0, [pc, #200]	; (8004dec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d22:	f7ff fecb 	bl	8004abc <LL_ADC_IsEnabled>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d047      	beq.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	6811      	ldr	r1, [r2, #0]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	6892      	ldr	r2, [r2, #8]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d4e:	e03a      	b.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d10e      	bne.n	8004d8e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004d70:	481a      	ldr	r0, [pc, #104]	; (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d72:	f7ff fea3 	bl	8004abc <LL_ADC_IsEnabled>
 8004d76:	4604      	mov	r4, r0
 8004d78:	4819      	ldr	r0, [pc, #100]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d7a:	f7ff fe9f 	bl	8004abc <LL_ADC_IsEnabled>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4323      	orrs	r3, r4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	e008      	b.n	8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004d8e:	4817      	ldr	r0, [pc, #92]	; (8004dec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d90:	f7ff fe94 	bl	8004abc <LL_ADC_IsEnabled>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004db0:	e009      	b.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004dc4:	e000      	b.n	8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dc6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004dd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	377c      	adds	r7, #124	; 0x7c
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd90      	pop	{r4, r7, pc}
 8004ddc:	40022000 	.word	0x40022000
 8004de0:	40022100 	.word	0x40022100
 8004de4:	40022300 	.word	0x40022300
 8004de8:	58026300 	.word	0x58026300
 8004dec:	58026000 	.word	0x58026000
 8004df0:	fffff0e0 	.word	0xfffff0e0

08004df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <__NVIC_SetPriorityGrouping+0x40>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e10:	4013      	ands	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <__NVIC_SetPriorityGrouping+0x44>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e22:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <__NVIC_SetPriorityGrouping+0x40>)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	60d3      	str	r3, [r2, #12]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000ed00 	.word	0xe000ed00
 8004e38:	05fa0000 	.word	0x05fa0000

08004e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <__NVIC_GetPriorityGrouping+0x18>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	f003 0307 	and.w	r3, r3, #7
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	db0b      	blt.n	8004e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	f003 021f 	and.w	r2, r3, #31
 8004e70:	4907      	ldr	r1, [pc, #28]	; (8004e90 <__NVIC_EnableIRQ+0x38>)
 8004e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2001      	movs	r0, #1
 8004e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000e100 	.word	0xe000e100

08004e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	db0a      	blt.n	8004ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <__NVIC_SetPriority+0x4c>)
 8004eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ebc:	e00a      	b.n	8004ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4908      	ldr	r1, [pc, #32]	; (8004ee4 <__NVIC_SetPriority+0x50>)
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	3b04      	subs	r3, #4
 8004ecc:	0112      	lsls	r2, r2, #4
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	761a      	strb	r2, [r3, #24]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	e000e100 	.word	0xe000e100
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	; 0x24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f1c3 0307 	rsb	r3, r3, #7
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	bf28      	it	cs
 8004f06:	2304      	movcs	r3, #4
 8004f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2b06      	cmp	r3, #6
 8004f10:	d902      	bls.n	8004f18 <NVIC_EncodePriority+0x30>
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3b03      	subs	r3, #3
 8004f16:	e000      	b.n	8004f1a <NVIC_EncodePriority+0x32>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43da      	mvns	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	43d9      	mvns	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f40:	4313      	orrs	r3, r2
         );
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3724      	adds	r7, #36	; 0x24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff4c 	bl	8004df4 <__NVIC_SetPriorityGrouping>
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f72:	f7ff ff63 	bl	8004e3c <__NVIC_GetPriorityGrouping>
 8004f76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	6978      	ldr	r0, [r7, #20]
 8004f7e:	f7ff ffb3 	bl	8004ee8 <NVIC_EncodePriority>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ff82 	bl	8004e94 <__NVIC_SetPriority>
}
 8004f90:	bf00      	nop
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff ff56 	bl	8004e58 <__NVIC_EnableIRQ>
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e014      	b.n	8004ff0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fb fe04 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e046      	b.n	800509a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	795b      	ldrb	r3, [r3, #5]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_DAC_Start+0x20>
 8005014:	2302      	movs	r3, #2
 8005016:	e040      	b.n	800509a <HAL_DAC_Start+0xa2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2201      	movs	r2, #1
 8005032:	409a      	lsls	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800504c:	2b02      	cmp	r3, #2
 800504e:	d11d      	bne.n	800508c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	605a      	str	r2, [r3, #4]
 8005060:	e014      	b.n	800508c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2102      	movs	r1, #2
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0202 	orr.w	r2, r2, #2
 800508a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0a2      	b.n	8005206 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	795b      	ldrb	r3, [r3, #5]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_DAC_Start_DMA+0x24>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e09c      	b.n	8005206 <HAL_DAC_Start_DMA+0x15e>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2202      	movs	r2, #2
 80050d6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d129      	bne.n	8005132 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a4b      	ldr	r2, [pc, #300]	; (8005210 <HAL_DAC_Start_DMA+0x168>)
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4a4a      	ldr	r2, [pc, #296]	; (8005214 <HAL_DAC_Start_DMA+0x16c>)
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	4a49      	ldr	r2, [pc, #292]	; (8005218 <HAL_DAC_Start_DMA+0x170>)
 80050f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005104:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_DAC_Start_DMA+0x6c>
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d005      	beq.n	800511e <HAL_DAC_Start_DMA+0x76>
 8005112:	e009      	b.n	8005128 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	613b      	str	r3, [r7, #16]
        break;
 800511c:	e033      	b.n	8005186 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	613b      	str	r3, [r7, #16]
        break;
 8005126:	e02e      	b.n	8005186 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3310      	adds	r3, #16
 800512e:	613b      	str	r3, [r7, #16]
        break;
 8005130:	e029      	b.n	8005186 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	4a39      	ldr	r2, [pc, #228]	; (800521c <HAL_DAC_Start_DMA+0x174>)
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <HAL_DAC_Start_DMA+0x178>)
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4a37      	ldr	r2, [pc, #220]	; (8005224 <HAL_DAC_Start_DMA+0x17c>)
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005158:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_DAC_Start_DMA+0xc0>
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d005      	beq.n	8005172 <HAL_DAC_Start_DMA+0xca>
 8005166:	e009      	b.n	800517c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	613b      	str	r3, [r7, #16]
        break;
 8005170:	e009      	b.n	8005186 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3318      	adds	r3, #24
 8005178:	613b      	str	r3, [r7, #16]
        break;
 800517a:	e004      	b.n	8005186 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	331c      	adds	r3, #28
 8005182:	613b      	str	r3, [r7, #16]
        break;
 8005184:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d111      	bne.n	80051b0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6898      	ldr	r0, [r3, #8]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	f000 fe67 	bl	8005e78 <HAL_DMA_Start_IT>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
 80051ae:	e010      	b.n	80051d2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68d8      	ldr	r0, [r3, #12]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	f000 fe55 	bl	8005e78 <HAL_DMA_Start_IT>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10c      	bne.n	80051f8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2201      	movs	r2, #1
 80051ec:	409a      	lsls	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e005      	b.n	8005204 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f043 0204 	orr.w	r2, r3, #4
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	08005699 	.word	0x08005699
 8005214:	080056bb 	.word	0x080056bb
 8005218:	080056d7 	.word	0x080056d7
 800521c:	08005755 	.word	0x08005755
 8005220:	08005777 	.word	0x08005777
 8005224:	08005793 	.word	0x08005793

08005228 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e03e      	b.n	80052ba <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43da      	mvns	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	400a      	ands	r2, r1
 8005258:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2201      	movs	r2, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43da      	mvns	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	400a      	ands	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10d      	bne.n	8005298 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f863 	bl	800634c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e00c      	b.n	80052b2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f855 	bl	800634c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80052b0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01d      	beq.n	8005320 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005318:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f86f 	bl	80053fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01d      	beq.n	8005366 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d018      	beq.n	8005366 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2204      	movs	r2, #4
 8005338:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800534e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9ed 	bl	8005740 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800536e:	b480      	push	{r7}
 8005370:	b087      	sub	sp, #28
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e015      	b.n	80053b6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	3308      	adds	r3, #8
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e004      	b.n	80053ac <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	3314      	adds	r3, #20
 80053aa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	461a      	mov	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_DAC_ConfigChannel+0x1e>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e12a      	b.n	800568c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	795b      	ldrb	r3, [r3, #5]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_DAC_ConfigChannel+0x2e>
 800543e:	2302      	movs	r3, #2
 8005440:	e124      	b.n	800568c <HAL_DAC_ConfigChannel+0x278>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2202      	movs	r2, #2
 800544c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d17a      	bne.n	800554c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005456:	f7fe f88b 	bl	8003570 <HAL_GetTick>
 800545a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d13d      	bne.n	80054de <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005462:	e018      	b.n	8005496 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005464:	f7fe f884 	bl	8003570 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d911      	bls.n	8005496 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005478:	4b86      	ldr	r3, [pc, #536]	; (8005694 <HAL_DAC_ConfigChannel+0x280>)
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f043 0208 	orr.w	r2, r3, #8
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2203      	movs	r2, #3
 8005490:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e0fa      	b.n	800568c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549c:	4b7d      	ldr	r3, [pc, #500]	; (8005694 <HAL_DAC_ConfigChannel+0x280>)
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1df      	bne.n	8005464 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	6992      	ldr	r2, [r2, #24]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
 80054ae:	e020      	b.n	80054f2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054b0:	f7fe f85e 	bl	8003570 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d90f      	bls.n	80054de <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	da0a      	bge.n	80054de <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f043 0208 	orr.w	r2, r3, #8
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2203      	movs	r2, #3
 80054d8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0d6      	b.n	800568c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	dbe3      	blt.n	80054b0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	6992      	ldr	r2, [r2, #24]
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	ea02 0103 	and.w	r1, r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	21ff      	movs	r1, #255	; 0xff
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	ea02 0103 	and.w	r1, r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	409a      	lsls	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d11d      	bne.n	8005590 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	221f      	movs	r2, #31
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2207      	movs	r2, #7
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
 80055b8:	e00f      	b.n	80055da <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d102      	bne.n	80055c8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80055c2:	2301      	movs	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	e008      	b.n	80055da <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
 80055d4:	e001      	b.n	80055da <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43da      	mvns	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	400a      	ands	r2, r1
 8005620:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	22c0      	movs	r2, #192	; 0xc0
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43da      	mvns	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	400a      	ands	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800568c:	4618      	mov	r0, r3
 800568e:	3728      	adds	r7, #40	; 0x28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20008000 	.word	0x20008000

08005698 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fe8b 	bl	80053c2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	711a      	strb	r2, [r3, #4]
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fe84 	bl	80053d6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff fe7a 	bl	80053ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	711a      	strb	r2, [r3, #4]
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ffce 	bl	8005704 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	711a      	strb	r2, [r3, #4]
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff ffc7 	bl	8005718 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f043 0204 	orr.w	r2, r3, #4
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7ff ffbd 	bl	800572c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	711a      	strb	r2, [r3, #4]
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057c8:	f7fd fed2 	bl	8003570 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e316      	b.n	8005e06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a66      	ldr	r2, [pc, #408]	; (8005978 <HAL_DMA_Init+0x1b8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04a      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a65      	ldr	r2, [pc, #404]	; (800597c <HAL_DMA_Init+0x1bc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d045      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a63      	ldr	r2, [pc, #396]	; (8005980 <HAL_DMA_Init+0x1c0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d040      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a62      	ldr	r2, [pc, #392]	; (8005984 <HAL_DMA_Init+0x1c4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d03b      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a60      	ldr	r2, [pc, #384]	; (8005988 <HAL_DMA_Init+0x1c8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d036      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a5f      	ldr	r2, [pc, #380]	; (800598c <HAL_DMA_Init+0x1cc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d031      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a5d      	ldr	r2, [pc, #372]	; (8005990 <HAL_DMA_Init+0x1d0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02c      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a5c      	ldr	r2, [pc, #368]	; (8005994 <HAL_DMA_Init+0x1d4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d027      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a5a      	ldr	r2, [pc, #360]	; (8005998 <HAL_DMA_Init+0x1d8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a59      	ldr	r2, [pc, #356]	; (800599c <HAL_DMA_Init+0x1dc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a57      	ldr	r2, [pc, #348]	; (80059a0 <HAL_DMA_Init+0x1e0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a56      	ldr	r2, [pc, #344]	; (80059a4 <HAL_DMA_Init+0x1e4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a54      	ldr	r2, [pc, #336]	; (80059a8 <HAL_DMA_Init+0x1e8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a53      	ldr	r2, [pc, #332]	; (80059ac <HAL_DMA_Init+0x1ec>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a51      	ldr	r2, [pc, #324]	; (80059b0 <HAL_DMA_Init+0x1f0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_Init+0xb8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a50      	ldr	r2, [pc, #320]	; (80059b4 <HAL_DMA_Init+0x1f4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_DMA_Init+0xbc>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_DMA_Init+0xbe>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 813b 	beq.w	8005afa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a37      	ldr	r2, [pc, #220]	; (8005978 <HAL_DMA_Init+0x1b8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d04a      	beq.n	8005934 <HAL_DMA_Init+0x174>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a36      	ldr	r2, [pc, #216]	; (800597c <HAL_DMA_Init+0x1bc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d045      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a34      	ldr	r2, [pc, #208]	; (8005980 <HAL_DMA_Init+0x1c0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d040      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a33      	ldr	r2, [pc, #204]	; (8005984 <HAL_DMA_Init+0x1c4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d03b      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a31      	ldr	r2, [pc, #196]	; (8005988 <HAL_DMA_Init+0x1c8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d036      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a30      	ldr	r2, [pc, #192]	; (800598c <HAL_DMA_Init+0x1cc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d031      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2e      	ldr	r2, [pc, #184]	; (8005990 <HAL_DMA_Init+0x1d0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02c      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2d      	ldr	r2, [pc, #180]	; (8005994 <HAL_DMA_Init+0x1d4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d027      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <HAL_DMA_Init+0x1d8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d022      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2a      	ldr	r2, [pc, #168]	; (800599c <HAL_DMA_Init+0x1dc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d01d      	beq.n	8005934 <HAL_DMA_Init+0x174>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a28      	ldr	r2, [pc, #160]	; (80059a0 <HAL_DMA_Init+0x1e0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <HAL_DMA_Init+0x174>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <HAL_DMA_Init+0x1e4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <HAL_DMA_Init+0x174>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <HAL_DMA_Init+0x1e8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <HAL_DMA_Init+0x174>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a24      	ldr	r2, [pc, #144]	; (80059ac <HAL_DMA_Init+0x1ec>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_DMA_Init+0x174>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <HAL_DMA_Init+0x1f0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_DMA_Init+0x174>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <HAL_DMA_Init+0x1f4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <HAL_DMA_Init+0x186>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e007      	b.n	8005956 <HAL_DMA_Init+0x196>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005956:	e02f      	b.n	80059b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005958:	f7fd fe0a 	bl	8003570 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b05      	cmp	r3, #5
 8005964:	d928      	bls.n	80059b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2203      	movs	r2, #3
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e246      	b.n	8005e06 <HAL_DMA_Init+0x646>
 8005978:	40020010 	.word	0x40020010
 800597c:	40020028 	.word	0x40020028
 8005980:	40020040 	.word	0x40020040
 8005984:	40020058 	.word	0x40020058
 8005988:	40020070 	.word	0x40020070
 800598c:	40020088 	.word	0x40020088
 8005990:	400200a0 	.word	0x400200a0
 8005994:	400200b8 	.word	0x400200b8
 8005998:	40020410 	.word	0x40020410
 800599c:	40020428 	.word	0x40020428
 80059a0:	40020440 	.word	0x40020440
 80059a4:	40020458 	.word	0x40020458
 80059a8:	40020470 	.word	0x40020470
 80059ac:	40020488 	.word	0x40020488
 80059b0:	400204a0 	.word	0x400204a0
 80059b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1c8      	bne.n	8005958 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4b83      	ldr	r3, [pc, #524]	; (8005be0 <HAL_DMA_Init+0x420>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d107      	bne.n	8005a1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	4313      	orrs	r3, r2
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a1c:	4b71      	ldr	r3, [pc, #452]	; (8005be4 <HAL_DMA_Init+0x424>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4b71      	ldr	r3, [pc, #452]	; (8005be8 <HAL_DMA_Init+0x428>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a28:	d328      	bcc.n	8005a7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b28      	cmp	r3, #40	; 0x28
 8005a30:	d903      	bls.n	8005a3a <HAL_DMA_Init+0x27a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b2e      	cmp	r3, #46	; 0x2e
 8005a38:	d917      	bls.n	8005a6a <HAL_DMA_Init+0x2aa>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a40:	d903      	bls.n	8005a4a <HAL_DMA_Init+0x28a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b42      	cmp	r3, #66	; 0x42
 8005a48:	d90f      	bls.n	8005a6a <HAL_DMA_Init+0x2aa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b46      	cmp	r3, #70	; 0x46
 8005a50:	d903      	bls.n	8005a5a <HAL_DMA_Init+0x29a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b48      	cmp	r3, #72	; 0x48
 8005a58:	d907      	bls.n	8005a6a <HAL_DMA_Init+0x2aa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b4e      	cmp	r3, #78	; 0x4e
 8005a60:	d905      	bls.n	8005a6e <HAL_DMA_Init+0x2ae>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b52      	cmp	r3, #82	; 0x52
 8005a68:	d801      	bhi.n	8005a6e <HAL_DMA_Init+0x2ae>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_DMA_Init+0x2b0>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0307 	bic.w	r3, r3, #7
 8005a92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d117      	bne.n	8005ad6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 fb3f 	bl	800813c <DMA_CheckFifoParam>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e197      	b.n	8005e06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 fa7a 	bl	8007fd8 <DMA_CalcBaseAndBitshift>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	223f      	movs	r2, #63	; 0x3f
 8005af2:	409a      	lsls	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	e0cd      	b.n	8005c96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a3b      	ldr	r2, [pc, #236]	; (8005bec <HAL_DMA_Init+0x42c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <HAL_DMA_Init+0x430>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01d      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <HAL_DMA_Init+0x434>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a36      	ldr	r2, [pc, #216]	; (8005bf8 <HAL_DMA_Init+0x438>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a35      	ldr	r2, [pc, #212]	; (8005bfc <HAL_DMA_Init+0x43c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <HAL_DMA_Init+0x440>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <HAL_DMA_Init+0x444>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_DMA_Init+0x38a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_DMA_Init+0x448>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d101      	bne.n	8005b4e <HAL_DMA_Init+0x38e>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <HAL_DMA_Init+0x390>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8097 	beq.w	8005c84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a24      	ldr	r2, [pc, #144]	; (8005bec <HAL_DMA_Init+0x42c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d021      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <HAL_DMA_Init+0x430>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01c      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_DMA_Init+0x434>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d017      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <HAL_DMA_Init+0x438>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d012      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <HAL_DMA_Init+0x43c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00d      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1c      	ldr	r2, [pc, #112]	; (8005c00 <HAL_DMA_Init+0x440>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d008      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1b      	ldr	r2, [pc, #108]	; (8005c04 <HAL_DMA_Init+0x444>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <HAL_DMA_Init+0x3e4>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_DMA_Init+0x448>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <HAL_DMA_Init+0x44c>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d020      	beq.n	8005c10 <HAL_DMA_Init+0x450>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d102      	bne.n	8005bdc <HAL_DMA_Init+0x41c>
 8005bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bda:	e01a      	b.n	8005c12 <HAL_DMA_Init+0x452>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e018      	b.n	8005c12 <HAL_DMA_Init+0x452>
 8005be0:	fe10803f 	.word	0xfe10803f
 8005be4:	5c001000 	.word	0x5c001000
 8005be8:	ffff0000 	.word	0xffff0000
 8005bec:	58025408 	.word	0x58025408
 8005bf0:	5802541c 	.word	0x5802541c
 8005bf4:	58025430 	.word	0x58025430
 8005bf8:	58025444 	.word	0x58025444
 8005bfc:	58025458 	.word	0x58025458
 8005c00:	5802546c 	.word	0x5802546c
 8005c04:	58025480 	.word	0x58025480
 8005c08:	58025494 	.word	0x58025494
 8005c0c:	fffe000f 	.word	0xfffe000f
 8005c10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68d2      	ldr	r2, [r2, #12]
 8005c16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b6e      	ldr	r3, [pc, #440]	; (8005e10 <HAL_DMA_Init+0x650>)
 8005c58:	4413      	add	r3, r2
 8005c5a:	4a6e      	ldr	r2, [pc, #440]	; (8005e14 <HAL_DMA_Init+0x654>)
 8005c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	009a      	lsls	r2, r3, #2
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f002 f9b5 	bl	8007fd8 <DMA_CalcBaseAndBitshift>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e008      	b.n	8005c96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0b7      	b.n	8005e06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a5f      	ldr	r2, [pc, #380]	; (8005e18 <HAL_DMA_Init+0x658>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d072      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a5d      	ldr	r2, [pc, #372]	; (8005e1c <HAL_DMA_Init+0x65c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d06d      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a5c      	ldr	r2, [pc, #368]	; (8005e20 <HAL_DMA_Init+0x660>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d068      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a5a      	ldr	r2, [pc, #360]	; (8005e24 <HAL_DMA_Init+0x664>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d063      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a59      	ldr	r2, [pc, #356]	; (8005e28 <HAL_DMA_Init+0x668>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d05e      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a57      	ldr	r2, [pc, #348]	; (8005e2c <HAL_DMA_Init+0x66c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d059      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a56      	ldr	r2, [pc, #344]	; (8005e30 <HAL_DMA_Init+0x670>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d054      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a54      	ldr	r2, [pc, #336]	; (8005e34 <HAL_DMA_Init+0x674>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d04f      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a53      	ldr	r2, [pc, #332]	; (8005e38 <HAL_DMA_Init+0x678>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04a      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a51      	ldr	r2, [pc, #324]	; (8005e3c <HAL_DMA_Init+0x67c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d045      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a50      	ldr	r2, [pc, #320]	; (8005e40 <HAL_DMA_Init+0x680>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d040      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a4e      	ldr	r2, [pc, #312]	; (8005e44 <HAL_DMA_Init+0x684>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d03b      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a4d      	ldr	r2, [pc, #308]	; (8005e48 <HAL_DMA_Init+0x688>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d036      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a4b      	ldr	r2, [pc, #300]	; (8005e4c <HAL_DMA_Init+0x68c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a4a      	ldr	r2, [pc, #296]	; (8005e50 <HAL_DMA_Init+0x690>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02c      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a48      	ldr	r2, [pc, #288]	; (8005e54 <HAL_DMA_Init+0x694>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a47      	ldr	r2, [pc, #284]	; (8005e58 <HAL_DMA_Init+0x698>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a45      	ldr	r2, [pc, #276]	; (8005e5c <HAL_DMA_Init+0x69c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a44      	ldr	r2, [pc, #272]	; (8005e60 <HAL_DMA_Init+0x6a0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a42      	ldr	r2, [pc, #264]	; (8005e64 <HAL_DMA_Init+0x6a4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a41      	ldr	r2, [pc, #260]	; (8005e68 <HAL_DMA_Init+0x6a8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a3f      	ldr	r2, [pc, #252]	; (8005e6c <HAL_DMA_Init+0x6ac>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a3e      	ldr	r2, [pc, #248]	; (8005e70 <HAL_DMA_Init+0x6b0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_DMA_Init+0x5c6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3c      	ldr	r2, [pc, #240]	; (8005e74 <HAL_DMA_Init+0x6b4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <HAL_DMA_Init+0x5ca>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <HAL_DMA_Init+0x5cc>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d032      	beq.n	8005df6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f002 fa4f 	bl	8008234 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d102      	bne.n	8005da4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005db8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <HAL_DMA_Init+0x624>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d80c      	bhi.n	8005de4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f002 facc 	bl	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	e008      	b.n	8005df6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	a7fdabf8 	.word	0xa7fdabf8
 8005e14:	cccccccd 	.word	0xcccccccd
 8005e18:	40020010 	.word	0x40020010
 8005e1c:	40020028 	.word	0x40020028
 8005e20:	40020040 	.word	0x40020040
 8005e24:	40020058 	.word	0x40020058
 8005e28:	40020070 	.word	0x40020070
 8005e2c:	40020088 	.word	0x40020088
 8005e30:	400200a0 	.word	0x400200a0
 8005e34:	400200b8 	.word	0x400200b8
 8005e38:	40020410 	.word	0x40020410
 8005e3c:	40020428 	.word	0x40020428
 8005e40:	40020440 	.word	0x40020440
 8005e44:	40020458 	.word	0x40020458
 8005e48:	40020470 	.word	0x40020470
 8005e4c:	40020488 	.word	0x40020488
 8005e50:	400204a0 	.word	0x400204a0
 8005e54:	400204b8 	.word	0x400204b8
 8005e58:	58025408 	.word	0x58025408
 8005e5c:	5802541c 	.word	0x5802541c
 8005e60:	58025430 	.word	0x58025430
 8005e64:	58025444 	.word	0x58025444
 8005e68:	58025458 	.word	0x58025458
 8005e6c:	5802546c 	.word	0x5802546c
 8005e70:	58025480 	.word	0x58025480
 8005e74:	58025494 	.word	0x58025494

08005e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e226      	b.n	80062e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_DMA_Start_IT+0x2a>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e21f      	b.n	80062e2 <HAL_DMA_Start_IT+0x46a>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	f040 820a 	bne.w	80062cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a68      	ldr	r2, [pc, #416]	; (800606c <HAL_DMA_Start_IT+0x1f4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d04a      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a66      	ldr	r2, [pc, #408]	; (8006070 <HAL_DMA_Start_IT+0x1f8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d045      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a65      	ldr	r2, [pc, #404]	; (8006074 <HAL_DMA_Start_IT+0x1fc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d040      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a63      	ldr	r2, [pc, #396]	; (8006078 <HAL_DMA_Start_IT+0x200>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d03b      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a62      	ldr	r2, [pc, #392]	; (800607c <HAL_DMA_Start_IT+0x204>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d036      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a60      	ldr	r2, [pc, #384]	; (8006080 <HAL_DMA_Start_IT+0x208>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d031      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5f      	ldr	r2, [pc, #380]	; (8006084 <HAL_DMA_Start_IT+0x20c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d02c      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_DMA_Start_IT+0x210>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d027      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5c      	ldr	r2, [pc, #368]	; (800608c <HAL_DMA_Start_IT+0x214>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d022      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5a      	ldr	r2, [pc, #360]	; (8006090 <HAL_DMA_Start_IT+0x218>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01d      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a59      	ldr	r2, [pc, #356]	; (8006094 <HAL_DMA_Start_IT+0x21c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a57      	ldr	r2, [pc, #348]	; (8006098 <HAL_DMA_Start_IT+0x220>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a56      	ldr	r2, [pc, #344]	; (800609c <HAL_DMA_Start_IT+0x224>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a54      	ldr	r2, [pc, #336]	; (80060a0 <HAL_DMA_Start_IT+0x228>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a53      	ldr	r2, [pc, #332]	; (80060a4 <HAL_DMA_Start_IT+0x22c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a51      	ldr	r2, [pc, #324]	; (80060a8 <HAL_DMA_Start_IT+0x230>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d108      	bne.n	8005f78 <HAL_DMA_Start_IT+0x100>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e007      	b.n	8005f88 <HAL_DMA_Start_IT+0x110>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fe76 	bl	8007c80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a34      	ldr	r2, [pc, #208]	; (800606c <HAL_DMA_Start_IT+0x1f4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04a      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a33      	ldr	r2, [pc, #204]	; (8006070 <HAL_DMA_Start_IT+0x1f8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d045      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a31      	ldr	r2, [pc, #196]	; (8006074 <HAL_DMA_Start_IT+0x1fc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d040      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a30      	ldr	r2, [pc, #192]	; (8006078 <HAL_DMA_Start_IT+0x200>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d03b      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a2e      	ldr	r2, [pc, #184]	; (800607c <HAL_DMA_Start_IT+0x204>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d036      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a2d      	ldr	r2, [pc, #180]	; (8006080 <HAL_DMA_Start_IT+0x208>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	; (8006084 <HAL_DMA_Start_IT+0x20c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02c      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <HAL_DMA_Start_IT+0x210>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a28      	ldr	r2, [pc, #160]	; (800608c <HAL_DMA_Start_IT+0x214>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a27      	ldr	r2, [pc, #156]	; (8006090 <HAL_DMA_Start_IT+0x218>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a25      	ldr	r2, [pc, #148]	; (8006094 <HAL_DMA_Start_IT+0x21c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a24      	ldr	r2, [pc, #144]	; (8006098 <HAL_DMA_Start_IT+0x220>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a22      	ldr	r2, [pc, #136]	; (800609c <HAL_DMA_Start_IT+0x224>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <HAL_DMA_Start_IT+0x228>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <HAL_DMA_Start_IT+0x22c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_DMA_Start_IT+0x230>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d101      	bne.n	8006038 <HAL_DMA_Start_IT+0x1c0>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_DMA_Start_IT+0x1c2>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 021e 	bic.w	r2, r3, #30
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0216 	orr.w	r2, r2, #22
 8006050:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d03e      	beq.n	80060d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0208 	orr.w	r2, r2, #8
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e035      	b.n	80060d8 <HAL_DMA_Start_IT+0x260>
 800606c:	40020010 	.word	0x40020010
 8006070:	40020028 	.word	0x40020028
 8006074:	40020040 	.word	0x40020040
 8006078:	40020058 	.word	0x40020058
 800607c:	40020070 	.word	0x40020070
 8006080:	40020088 	.word	0x40020088
 8006084:	400200a0 	.word	0x400200a0
 8006088:	400200b8 	.word	0x400200b8
 800608c:	40020410 	.word	0x40020410
 8006090:	40020428 	.word	0x40020428
 8006094:	40020440 	.word	0x40020440
 8006098:	40020458 	.word	0x40020458
 800609c:	40020470 	.word	0x40020470
 80060a0:	40020488 	.word	0x40020488
 80060a4:	400204a0 	.word	0x400204a0
 80060a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 020e 	bic.w	r2, r3, #14
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 020a 	orr.w	r2, r2, #10
 80060be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0204 	orr.w	r2, r2, #4
 80060d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a83      	ldr	r2, [pc, #524]	; (80062ec <HAL_DMA_Start_IT+0x474>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d072      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a82      	ldr	r2, [pc, #520]	; (80062f0 <HAL_DMA_Start_IT+0x478>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d06d      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a80      	ldr	r2, [pc, #512]	; (80062f4 <HAL_DMA_Start_IT+0x47c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d068      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a7f      	ldr	r2, [pc, #508]	; (80062f8 <HAL_DMA_Start_IT+0x480>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d063      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a7d      	ldr	r2, [pc, #500]	; (80062fc <HAL_DMA_Start_IT+0x484>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d05e      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a7c      	ldr	r2, [pc, #496]	; (8006300 <HAL_DMA_Start_IT+0x488>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d059      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a7a      	ldr	r2, [pc, #488]	; (8006304 <HAL_DMA_Start_IT+0x48c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d054      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a79      	ldr	r2, [pc, #484]	; (8006308 <HAL_DMA_Start_IT+0x490>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d04f      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a77      	ldr	r2, [pc, #476]	; (800630c <HAL_DMA_Start_IT+0x494>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d04a      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a76      	ldr	r2, [pc, #472]	; (8006310 <HAL_DMA_Start_IT+0x498>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d045      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a74      	ldr	r2, [pc, #464]	; (8006314 <HAL_DMA_Start_IT+0x49c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d040      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a73      	ldr	r2, [pc, #460]	; (8006318 <HAL_DMA_Start_IT+0x4a0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d03b      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a71      	ldr	r2, [pc, #452]	; (800631c <HAL_DMA_Start_IT+0x4a4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d036      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a70      	ldr	r2, [pc, #448]	; (8006320 <HAL_DMA_Start_IT+0x4a8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d031      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a6e      	ldr	r2, [pc, #440]	; (8006324 <HAL_DMA_Start_IT+0x4ac>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d02c      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6d      	ldr	r2, [pc, #436]	; (8006328 <HAL_DMA_Start_IT+0x4b0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d027      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6b      	ldr	r2, [pc, #428]	; (800632c <HAL_DMA_Start_IT+0x4b4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d022      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6a      	ldr	r2, [pc, #424]	; (8006330 <HAL_DMA_Start_IT+0x4b8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01d      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a68      	ldr	r2, [pc, #416]	; (8006334 <HAL_DMA_Start_IT+0x4bc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a67      	ldr	r2, [pc, #412]	; (8006338 <HAL_DMA_Start_IT+0x4c0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a65      	ldr	r2, [pc, #404]	; (800633c <HAL_DMA_Start_IT+0x4c4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a64      	ldr	r2, [pc, #400]	; (8006340 <HAL_DMA_Start_IT+0x4c8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a62      	ldr	r2, [pc, #392]	; (8006344 <HAL_DMA_Start_IT+0x4cc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a61      	ldr	r2, [pc, #388]	; (8006348 <HAL_DMA_Start_IT+0x4d0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_DMA_Start_IT+0x354>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_DMA_Start_IT+0x356>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006206:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a37      	ldr	r2, [pc, #220]	; (80062ec <HAL_DMA_Start_IT+0x474>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d04a      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a36      	ldr	r2, [pc, #216]	; (80062f0 <HAL_DMA_Start_IT+0x478>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d045      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a34      	ldr	r2, [pc, #208]	; (80062f4 <HAL_DMA_Start_IT+0x47c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d040      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a33      	ldr	r2, [pc, #204]	; (80062f8 <HAL_DMA_Start_IT+0x480>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d03b      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a31      	ldr	r2, [pc, #196]	; (80062fc <HAL_DMA_Start_IT+0x484>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d036      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a30      	ldr	r2, [pc, #192]	; (8006300 <HAL_DMA_Start_IT+0x488>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d031      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2e      	ldr	r2, [pc, #184]	; (8006304 <HAL_DMA_Start_IT+0x48c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d02c      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2d      	ldr	r2, [pc, #180]	; (8006308 <HAL_DMA_Start_IT+0x490>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d027      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2b      	ldr	r2, [pc, #172]	; (800630c <HAL_DMA_Start_IT+0x494>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <HAL_DMA_Start_IT+0x498>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d01d      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <HAL_DMA_Start_IT+0x49c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <HAL_DMA_Start_IT+0x4a0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <HAL_DMA_Start_IT+0x4a4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a24      	ldr	r2, [pc, #144]	; (8006320 <HAL_DMA_Start_IT+0x4a8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a22      	ldr	r2, [pc, #136]	; (8006324 <HAL_DMA_Start_IT+0x4ac>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <HAL_DMA_Start_IT+0x4b0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <HAL_DMA_Start_IT+0x442>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e012      	b.n	80062e0 <HAL_DMA_Start_IT+0x468>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e009      	b.n	80062e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40020010 	.word	0x40020010
 80062f0:	40020028 	.word	0x40020028
 80062f4:	40020040 	.word	0x40020040
 80062f8:	40020058 	.word	0x40020058
 80062fc:	40020070 	.word	0x40020070
 8006300:	40020088 	.word	0x40020088
 8006304:	400200a0 	.word	0x400200a0
 8006308:	400200b8 	.word	0x400200b8
 800630c:	40020410 	.word	0x40020410
 8006310:	40020428 	.word	0x40020428
 8006314:	40020440 	.word	0x40020440
 8006318:	40020458 	.word	0x40020458
 800631c:	40020470 	.word	0x40020470
 8006320:	40020488 	.word	0x40020488
 8006324:	400204a0 	.word	0x400204a0
 8006328:	400204b8 	.word	0x400204b8
 800632c:	58025408 	.word	0x58025408
 8006330:	5802541c 	.word	0x5802541c
 8006334:	58025430 	.word	0x58025430
 8006338:	58025444 	.word	0x58025444
 800633c:	58025458 	.word	0x58025458
 8006340:	5802546c 	.word	0x5802546c
 8006344:	58025480 	.word	0x58025480
 8006348:	58025494 	.word	0x58025494

0800634c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006354:	f7fd f90c 	bl	8003570 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e2dc      	b.n	800691e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d008      	beq.n	8006382 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2280      	movs	r2, #128	; 0x80
 8006374:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e2cd      	b.n	800691e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a76      	ldr	r2, [pc, #472]	; (8006560 <HAL_DMA_Abort+0x214>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d04a      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a74      	ldr	r2, [pc, #464]	; (8006564 <HAL_DMA_Abort+0x218>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d045      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a73      	ldr	r2, [pc, #460]	; (8006568 <HAL_DMA_Abort+0x21c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d040      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a71      	ldr	r2, [pc, #452]	; (800656c <HAL_DMA_Abort+0x220>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d03b      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a70      	ldr	r2, [pc, #448]	; (8006570 <HAL_DMA_Abort+0x224>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d036      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6e      	ldr	r2, [pc, #440]	; (8006574 <HAL_DMA_Abort+0x228>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d031      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a6d      	ldr	r2, [pc, #436]	; (8006578 <HAL_DMA_Abort+0x22c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d02c      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6b      	ldr	r2, [pc, #428]	; (800657c <HAL_DMA_Abort+0x230>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d027      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_DMA_Abort+0x234>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d022      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a68      	ldr	r2, [pc, #416]	; (8006584 <HAL_DMA_Abort+0x238>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01d      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a67      	ldr	r2, [pc, #412]	; (8006588 <HAL_DMA_Abort+0x23c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d018      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a65      	ldr	r2, [pc, #404]	; (800658c <HAL_DMA_Abort+0x240>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a64      	ldr	r2, [pc, #400]	; (8006590 <HAL_DMA_Abort+0x244>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a62      	ldr	r2, [pc, #392]	; (8006594 <HAL_DMA_Abort+0x248>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a61      	ldr	r2, [pc, #388]	; (8006598 <HAL_DMA_Abort+0x24c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5f      	ldr	r2, [pc, #380]	; (800659c <HAL_DMA_Abort+0x250>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d101      	bne.n	8006426 <HAL_DMA_Abort+0xda>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <HAL_DMA_Abort+0xdc>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d013      	beq.n	8006454 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 021e 	bic.w	r2, r2, #30
 800643a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800644a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e00a      	b.n	800646a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 020e 	bic.w	r2, r2, #14
 8006462:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a3c      	ldr	r2, [pc, #240]	; (8006560 <HAL_DMA_Abort+0x214>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d072      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a3a      	ldr	r2, [pc, #232]	; (8006564 <HAL_DMA_Abort+0x218>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d06d      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a39      	ldr	r2, [pc, #228]	; (8006568 <HAL_DMA_Abort+0x21c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d068      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_DMA_Abort+0x220>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d063      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a36      	ldr	r2, [pc, #216]	; (8006570 <HAL_DMA_Abort+0x224>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d05e      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a34      	ldr	r2, [pc, #208]	; (8006574 <HAL_DMA_Abort+0x228>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d059      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a33      	ldr	r2, [pc, #204]	; (8006578 <HAL_DMA_Abort+0x22c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d054      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a31      	ldr	r2, [pc, #196]	; (800657c <HAL_DMA_Abort+0x230>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04f      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a30      	ldr	r2, [pc, #192]	; (8006580 <HAL_DMA_Abort+0x234>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d04a      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2e      	ldr	r2, [pc, #184]	; (8006584 <HAL_DMA_Abort+0x238>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d045      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2d      	ldr	r2, [pc, #180]	; (8006588 <HAL_DMA_Abort+0x23c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d040      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2b      	ldr	r2, [pc, #172]	; (800658c <HAL_DMA_Abort+0x240>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d03b      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2a      	ldr	r2, [pc, #168]	; (8006590 <HAL_DMA_Abort+0x244>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d036      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a28      	ldr	r2, [pc, #160]	; (8006594 <HAL_DMA_Abort+0x248>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d031      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a27      	ldr	r2, [pc, #156]	; (8006598 <HAL_DMA_Abort+0x24c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d02c      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a25      	ldr	r2, [pc, #148]	; (800659c <HAL_DMA_Abort+0x250>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d027      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a24      	ldr	r2, [pc, #144]	; (80065a0 <HAL_DMA_Abort+0x254>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <HAL_DMA_Abort+0x258>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01d      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <HAL_DMA_Abort+0x25c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <HAL_DMA_Abort+0x260>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <HAL_DMA_Abort+0x264>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <HAL_DMA_Abort+0x268>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <HAL_DMA_Abort+0x26c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a19      	ldr	r2, [pc, #100]	; (80065bc <HAL_DMA_Abort+0x270>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d132      	bne.n	80065c0 <HAL_DMA_Abort+0x274>
 800655a:	2301      	movs	r3, #1
 800655c:	e031      	b.n	80065c2 <HAL_DMA_Abort+0x276>
 800655e:	bf00      	nop
 8006560:	40020010 	.word	0x40020010
 8006564:	40020028 	.word	0x40020028
 8006568:	40020040 	.word	0x40020040
 800656c:	40020058 	.word	0x40020058
 8006570:	40020070 	.word	0x40020070
 8006574:	40020088 	.word	0x40020088
 8006578:	400200a0 	.word	0x400200a0
 800657c:	400200b8 	.word	0x400200b8
 8006580:	40020410 	.word	0x40020410
 8006584:	40020428 	.word	0x40020428
 8006588:	40020440 	.word	0x40020440
 800658c:	40020458 	.word	0x40020458
 8006590:	40020470 	.word	0x40020470
 8006594:	40020488 	.word	0x40020488
 8006598:	400204a0 	.word	0x400204a0
 800659c:	400204b8 	.word	0x400204b8
 80065a0:	58025408 	.word	0x58025408
 80065a4:	5802541c 	.word	0x5802541c
 80065a8:	58025430 	.word	0x58025430
 80065ac:	58025444 	.word	0x58025444
 80065b0:	58025458 	.word	0x58025458
 80065b4:	5802546c 	.word	0x5802546c
 80065b8:	58025480 	.word	0x58025480
 80065bc:	58025494 	.word	0x58025494
 80065c0:	2300      	movs	r3, #0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a6d      	ldr	r2, [pc, #436]	; (8006790 <HAL_DMA_Abort+0x444>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d04a      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a6b      	ldr	r2, [pc, #428]	; (8006794 <HAL_DMA_Abort+0x448>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d045      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6a      	ldr	r2, [pc, #424]	; (8006798 <HAL_DMA_Abort+0x44c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d040      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a68      	ldr	r2, [pc, #416]	; (800679c <HAL_DMA_Abort+0x450>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d03b      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a67      	ldr	r2, [pc, #412]	; (80067a0 <HAL_DMA_Abort+0x454>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d036      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a65      	ldr	r2, [pc, #404]	; (80067a4 <HAL_DMA_Abort+0x458>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d031      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a64      	ldr	r2, [pc, #400]	; (80067a8 <HAL_DMA_Abort+0x45c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d02c      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a62      	ldr	r2, [pc, #392]	; (80067ac <HAL_DMA_Abort+0x460>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d027      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a61      	ldr	r2, [pc, #388]	; (80067b0 <HAL_DMA_Abort+0x464>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a5f      	ldr	r2, [pc, #380]	; (80067b4 <HAL_DMA_Abort+0x468>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01d      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a5e      	ldr	r2, [pc, #376]	; (80067b8 <HAL_DMA_Abort+0x46c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a5c      	ldr	r2, [pc, #368]	; (80067bc <HAL_DMA_Abort+0x470>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5b      	ldr	r2, [pc, #364]	; (80067c0 <HAL_DMA_Abort+0x474>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a59      	ldr	r2, [pc, #356]	; (80067c4 <HAL_DMA_Abort+0x478>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a58      	ldr	r2, [pc, #352]	; (80067c8 <HAL_DMA_Abort+0x47c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a56      	ldr	r2, [pc, #344]	; (80067cc <HAL_DMA_Abort+0x480>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d108      	bne.n	8006688 <HAL_DMA_Abort+0x33c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e007      	b.n	8006698 <HAL_DMA_Abort+0x34c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006698:	e013      	b.n	80066c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800669a:	f7fc ff69 	bl	8003570 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	d90c      	bls.n	80066c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2203      	movs	r2, #3
 80066b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e12d      	b.n	800691e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2f      	ldr	r2, [pc, #188]	; (8006790 <HAL_DMA_Abort+0x444>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04a      	beq.n	800676e <HAL_DMA_Abort+0x422>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_DMA_Abort+0x448>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d045      	beq.n	800676e <HAL_DMA_Abort+0x422>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a2c      	ldr	r2, [pc, #176]	; (8006798 <HAL_DMA_Abort+0x44c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d040      	beq.n	800676e <HAL_DMA_Abort+0x422>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	; (800679c <HAL_DMA_Abort+0x450>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d03b      	beq.n	800676e <HAL_DMA_Abort+0x422>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <HAL_DMA_Abort+0x454>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d036      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <HAL_DMA_Abort+0x458>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d031      	beq.n	800676e <HAL_DMA_Abort+0x422>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <HAL_DMA_Abort+0x45c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d02c      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a24      	ldr	r2, [pc, #144]	; (80067ac <HAL_DMA_Abort+0x460>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d027      	beq.n	800676e <HAL_DMA_Abort+0x422>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a23      	ldr	r2, [pc, #140]	; (80067b0 <HAL_DMA_Abort+0x464>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <HAL_DMA_Abort+0x468>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <HAL_DMA_Abort+0x46c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_DMA_Abort+0x422>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1e      	ldr	r2, [pc, #120]	; (80067bc <HAL_DMA_Abort+0x470>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <HAL_DMA_Abort+0x474>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <HAL_DMA_Abort+0x478>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <HAL_DMA_Abort+0x47c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	; (80067cc <HAL_DMA_Abort+0x480>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <HAL_DMA_Abort+0x426>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <HAL_DMA_Abort+0x428>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d02b      	beq.n	80067d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	223f      	movs	r2, #63	; 0x3f
 8006788:	409a      	lsls	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
 800678e:	e02a      	b.n	80067e6 <HAL_DMA_Abort+0x49a>
 8006790:	40020010 	.word	0x40020010
 8006794:	40020028 	.word	0x40020028
 8006798:	40020040 	.word	0x40020040
 800679c:	40020058 	.word	0x40020058
 80067a0:	40020070 	.word	0x40020070
 80067a4:	40020088 	.word	0x40020088
 80067a8:	400200a0 	.word	0x400200a0
 80067ac:	400200b8 	.word	0x400200b8
 80067b0:	40020410 	.word	0x40020410
 80067b4:	40020428 	.word	0x40020428
 80067b8:	40020440 	.word	0x40020440
 80067bc:	40020458 	.word	0x40020458
 80067c0:	40020470 	.word	0x40020470
 80067c4:	40020488 	.word	0x40020488
 80067c8:	400204a0 	.word	0x400204a0
 80067cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	2201      	movs	r2, #1
 80067e0:	409a      	lsls	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a4f      	ldr	r2, [pc, #316]	; (8006928 <HAL_DMA_Abort+0x5dc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d072      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a4d      	ldr	r2, [pc, #308]	; (800692c <HAL_DMA_Abort+0x5e0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d06d      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a4c      	ldr	r2, [pc, #304]	; (8006930 <HAL_DMA_Abort+0x5e4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d068      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a4a      	ldr	r2, [pc, #296]	; (8006934 <HAL_DMA_Abort+0x5e8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d063      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a49      	ldr	r2, [pc, #292]	; (8006938 <HAL_DMA_Abort+0x5ec>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d05e      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a47      	ldr	r2, [pc, #284]	; (800693c <HAL_DMA_Abort+0x5f0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d059      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a46      	ldr	r2, [pc, #280]	; (8006940 <HAL_DMA_Abort+0x5f4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d054      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a44      	ldr	r2, [pc, #272]	; (8006944 <HAL_DMA_Abort+0x5f8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d04f      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a43      	ldr	r2, [pc, #268]	; (8006948 <HAL_DMA_Abort+0x5fc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a41      	ldr	r2, [pc, #260]	; (800694c <HAL_DMA_Abort+0x600>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a40      	ldr	r2, [pc, #256]	; (8006950 <HAL_DMA_Abort+0x604>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a3e      	ldr	r2, [pc, #248]	; (8006954 <HAL_DMA_Abort+0x608>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3d      	ldr	r2, [pc, #244]	; (8006958 <HAL_DMA_Abort+0x60c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a3b      	ldr	r2, [pc, #236]	; (800695c <HAL_DMA_Abort+0x610>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <HAL_DMA_Abort+0x614>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a38      	ldr	r2, [pc, #224]	; (8006964 <HAL_DMA_Abort+0x618>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a37      	ldr	r2, [pc, #220]	; (8006968 <HAL_DMA_Abort+0x61c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a35      	ldr	r2, [pc, #212]	; (800696c <HAL_DMA_Abort+0x620>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a34      	ldr	r2, [pc, #208]	; (8006970 <HAL_DMA_Abort+0x624>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a32      	ldr	r2, [pc, #200]	; (8006974 <HAL_DMA_Abort+0x628>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a31      	ldr	r2, [pc, #196]	; (8006978 <HAL_DMA_Abort+0x62c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a2f      	ldr	r2, [pc, #188]	; (800697c <HAL_DMA_Abort+0x630>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2e      	ldr	r2, [pc, #184]	; (8006980 <HAL_DMA_Abort+0x634>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <HAL_DMA_Abort+0x638>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_DMA_Abort+0x58e>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <HAL_DMA_Abort+0x590>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00c      	beq.n	800690c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006900:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800690a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40020010 	.word	0x40020010
 800692c:	40020028 	.word	0x40020028
 8006930:	40020040 	.word	0x40020040
 8006934:	40020058 	.word	0x40020058
 8006938:	40020070 	.word	0x40020070
 800693c:	40020088 	.word	0x40020088
 8006940:	400200a0 	.word	0x400200a0
 8006944:	400200b8 	.word	0x400200b8
 8006948:	40020410 	.word	0x40020410
 800694c:	40020428 	.word	0x40020428
 8006950:	40020440 	.word	0x40020440
 8006954:	40020458 	.word	0x40020458
 8006958:	40020470 	.word	0x40020470
 800695c:	40020488 	.word	0x40020488
 8006960:	400204a0 	.word	0x400204a0
 8006964:	400204b8 	.word	0x400204b8
 8006968:	58025408 	.word	0x58025408
 800696c:	5802541c 	.word	0x5802541c
 8006970:	58025430 	.word	0x58025430
 8006974:	58025444 	.word	0x58025444
 8006978:	58025458 	.word	0x58025458
 800697c:	5802546c 	.word	0x5802546c
 8006980:	58025480 	.word	0x58025480
 8006984:	58025494 	.word	0x58025494

08006988 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e237      	b.n	8006e0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d004      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e22c      	b.n	8006e0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a5c      	ldr	r2, [pc, #368]	; (8006b28 <HAL_DMA_Abort_IT+0x1a0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d04a      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a5b      	ldr	r2, [pc, #364]	; (8006b2c <HAL_DMA_Abort_IT+0x1a4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d045      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a59      	ldr	r2, [pc, #356]	; (8006b30 <HAL_DMA_Abort_IT+0x1a8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d040      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a58      	ldr	r2, [pc, #352]	; (8006b34 <HAL_DMA_Abort_IT+0x1ac>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d03b      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a56      	ldr	r2, [pc, #344]	; (8006b38 <HAL_DMA_Abort_IT+0x1b0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d036      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a55      	ldr	r2, [pc, #340]	; (8006b3c <HAL_DMA_Abort_IT+0x1b4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d031      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a53      	ldr	r2, [pc, #332]	; (8006b40 <HAL_DMA_Abort_IT+0x1b8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d02c      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a52      	ldr	r2, [pc, #328]	; (8006b44 <HAL_DMA_Abort_IT+0x1bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d027      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a50      	ldr	r2, [pc, #320]	; (8006b48 <HAL_DMA_Abort_IT+0x1c0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a4f      	ldr	r2, [pc, #316]	; (8006b4c <HAL_DMA_Abort_IT+0x1c4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d01d      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a4d      	ldr	r2, [pc, #308]	; (8006b50 <HAL_DMA_Abort_IT+0x1c8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a4c      	ldr	r2, [pc, #304]	; (8006b54 <HAL_DMA_Abort_IT+0x1cc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a4a      	ldr	r2, [pc, #296]	; (8006b58 <HAL_DMA_Abort_IT+0x1d0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a49      	ldr	r2, [pc, #292]	; (8006b5c <HAL_DMA_Abort_IT+0x1d4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a47      	ldr	r2, [pc, #284]	; (8006b60 <HAL_DMA_Abort_IT+0x1d8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a46      	ldr	r2, [pc, #280]	; (8006b64 <HAL_DMA_Abort_IT+0x1dc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_DMA_Abort_IT+0xcc>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_DMA_Abort_IT+0xce>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8086 	beq.w	8006b68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2f      	ldr	r2, [pc, #188]	; (8006b28 <HAL_DMA_Abort_IT+0x1a0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d04a      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a2e      	ldr	r2, [pc, #184]	; (8006b2c <HAL_DMA_Abort_IT+0x1a4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d045      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a2c      	ldr	r2, [pc, #176]	; (8006b30 <HAL_DMA_Abort_IT+0x1a8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d040      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <HAL_DMA_Abort_IT+0x1ac>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d03b      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a29      	ldr	r2, [pc, #164]	; (8006b38 <HAL_DMA_Abort_IT+0x1b0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d036      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a28      	ldr	r2, [pc, #160]	; (8006b3c <HAL_DMA_Abort_IT+0x1b4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d031      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a26      	ldr	r2, [pc, #152]	; (8006b40 <HAL_DMA_Abort_IT+0x1b8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d02c      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a25      	ldr	r2, [pc, #148]	; (8006b44 <HAL_DMA_Abort_IT+0x1bc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d027      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a23      	ldr	r2, [pc, #140]	; (8006b48 <HAL_DMA_Abort_IT+0x1c0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d022      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <HAL_DMA_Abort_IT+0x1c4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d01d      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a20      	ldr	r2, [pc, #128]	; (8006b50 <HAL_DMA_Abort_IT+0x1c8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <HAL_DMA_Abort_IT+0x1cc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d013      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <HAL_DMA_Abort_IT+0x1d0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <HAL_DMA_Abort_IT+0x1d4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1a      	ldr	r2, [pc, #104]	; (8006b60 <HAL_DMA_Abort_IT+0x1d8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_DMA_Abort_IT+0x17c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <HAL_DMA_Abort_IT+0x1dc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d108      	bne.n	8006b16 <HAL_DMA_Abort_IT+0x18e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0201 	bic.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e178      	b.n	8006e08 <HAL_DMA_Abort_IT+0x480>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0201 	bic.w	r2, r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e16f      	b.n	8006e08 <HAL_DMA_Abort_IT+0x480>
 8006b28:	40020010 	.word	0x40020010
 8006b2c:	40020028 	.word	0x40020028
 8006b30:	40020040 	.word	0x40020040
 8006b34:	40020058 	.word	0x40020058
 8006b38:	40020070 	.word	0x40020070
 8006b3c:	40020088 	.word	0x40020088
 8006b40:	400200a0 	.word	0x400200a0
 8006b44:	400200b8 	.word	0x400200b8
 8006b48:	40020410 	.word	0x40020410
 8006b4c:	40020428 	.word	0x40020428
 8006b50:	40020440 	.word	0x40020440
 8006b54:	40020458 	.word	0x40020458
 8006b58:	40020470 	.word	0x40020470
 8006b5c:	40020488 	.word	0x40020488
 8006b60:	400204a0 	.word	0x400204a0
 8006b64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 020e 	bic.w	r2, r2, #14
 8006b76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6c      	ldr	r2, [pc, #432]	; (8006d30 <HAL_DMA_Abort_IT+0x3a8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d04a      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6b      	ldr	r2, [pc, #428]	; (8006d34 <HAL_DMA_Abort_IT+0x3ac>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d045      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a69      	ldr	r2, [pc, #420]	; (8006d38 <HAL_DMA_Abort_IT+0x3b0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d040      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a68      	ldr	r2, [pc, #416]	; (8006d3c <HAL_DMA_Abort_IT+0x3b4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d03b      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a66      	ldr	r2, [pc, #408]	; (8006d40 <HAL_DMA_Abort_IT+0x3b8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d036      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a65      	ldr	r2, [pc, #404]	; (8006d44 <HAL_DMA_Abort_IT+0x3bc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d031      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a63      	ldr	r2, [pc, #396]	; (8006d48 <HAL_DMA_Abort_IT+0x3c0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02c      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a62      	ldr	r2, [pc, #392]	; (8006d4c <HAL_DMA_Abort_IT+0x3c4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d027      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a60      	ldr	r2, [pc, #384]	; (8006d50 <HAL_DMA_Abort_IT+0x3c8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d022      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a5f      	ldr	r2, [pc, #380]	; (8006d54 <HAL_DMA_Abort_IT+0x3cc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d01d      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a5d      	ldr	r2, [pc, #372]	; (8006d58 <HAL_DMA_Abort_IT+0x3d0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d018      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a5c      	ldr	r2, [pc, #368]	; (8006d5c <HAL_DMA_Abort_IT+0x3d4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a5a      	ldr	r2, [pc, #360]	; (8006d60 <HAL_DMA_Abort_IT+0x3d8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00e      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a59      	ldr	r2, [pc, #356]	; (8006d64 <HAL_DMA_Abort_IT+0x3dc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a57      	ldr	r2, [pc, #348]	; (8006d68 <HAL_DMA_Abort_IT+0x3e0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <HAL_DMA_Abort_IT+0x290>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a56      	ldr	r2, [pc, #344]	; (8006d6c <HAL_DMA_Abort_IT+0x3e4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d108      	bne.n	8006c2a <HAL_DMA_Abort_IT+0x2a2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e007      	b.n	8006c3a <HAL_DMA_Abort_IT+0x2b2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a3c      	ldr	r2, [pc, #240]	; (8006d30 <HAL_DMA_Abort_IT+0x3a8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d072      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a3a      	ldr	r2, [pc, #232]	; (8006d34 <HAL_DMA_Abort_IT+0x3ac>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d06d      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a39      	ldr	r2, [pc, #228]	; (8006d38 <HAL_DMA_Abort_IT+0x3b0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d068      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a37      	ldr	r2, [pc, #220]	; (8006d3c <HAL_DMA_Abort_IT+0x3b4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d063      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a36      	ldr	r2, [pc, #216]	; (8006d40 <HAL_DMA_Abort_IT+0x3b8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d05e      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a34      	ldr	r2, [pc, #208]	; (8006d44 <HAL_DMA_Abort_IT+0x3bc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d059      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a33      	ldr	r2, [pc, #204]	; (8006d48 <HAL_DMA_Abort_IT+0x3c0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d054      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a31      	ldr	r2, [pc, #196]	; (8006d4c <HAL_DMA_Abort_IT+0x3c4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d04f      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a30      	ldr	r2, [pc, #192]	; (8006d50 <HAL_DMA_Abort_IT+0x3c8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2e      	ldr	r2, [pc, #184]	; (8006d54 <HAL_DMA_Abort_IT+0x3cc>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2d      	ldr	r2, [pc, #180]	; (8006d58 <HAL_DMA_Abort_IT+0x3d0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2b      	ldr	r2, [pc, #172]	; (8006d5c <HAL_DMA_Abort_IT+0x3d4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2a      	ldr	r2, [pc, #168]	; (8006d60 <HAL_DMA_Abort_IT+0x3d8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a28      	ldr	r2, [pc, #160]	; (8006d64 <HAL_DMA_Abort_IT+0x3dc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a27      	ldr	r2, [pc, #156]	; (8006d68 <HAL_DMA_Abort_IT+0x3e0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a25      	ldr	r2, [pc, #148]	; (8006d6c <HAL_DMA_Abort_IT+0x3e4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a24      	ldr	r2, [pc, #144]	; (8006d70 <HAL_DMA_Abort_IT+0x3e8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a22      	ldr	r2, [pc, #136]	; (8006d74 <HAL_DMA_Abort_IT+0x3ec>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a21      	ldr	r2, [pc, #132]	; (8006d78 <HAL_DMA_Abort_IT+0x3f0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <HAL_DMA_Abort_IT+0x3f4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <HAL_DMA_Abort_IT+0x3f8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <HAL_DMA_Abort_IT+0x3fc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	; (8006d88 <HAL_DMA_Abort_IT+0x400>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x3a2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <HAL_DMA_Abort_IT+0x404>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d132      	bne.n	8006d90 <HAL_DMA_Abort_IT+0x408>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e031      	b.n	8006d92 <HAL_DMA_Abort_IT+0x40a>
 8006d2e:	bf00      	nop
 8006d30:	40020010 	.word	0x40020010
 8006d34:	40020028 	.word	0x40020028
 8006d38:	40020040 	.word	0x40020040
 8006d3c:	40020058 	.word	0x40020058
 8006d40:	40020070 	.word	0x40020070
 8006d44:	40020088 	.word	0x40020088
 8006d48:	400200a0 	.word	0x400200a0
 8006d4c:	400200b8 	.word	0x400200b8
 8006d50:	40020410 	.word	0x40020410
 8006d54:	40020428 	.word	0x40020428
 8006d58:	40020440 	.word	0x40020440
 8006d5c:	40020458 	.word	0x40020458
 8006d60:	40020470 	.word	0x40020470
 8006d64:	40020488 	.word	0x40020488
 8006d68:	400204a0 	.word	0x400204a0
 8006d6c:	400204b8 	.word	0x400204b8
 8006d70:	58025408 	.word	0x58025408
 8006d74:	5802541c 	.word	0x5802541c
 8006d78:	58025430 	.word	0x58025430
 8006d7c:	58025444 	.word	0x58025444
 8006d80:	58025458 	.word	0x58025458
 8006d84:	5802546c 	.word	0x5802546c
 8006d88:	58025480 	.word	0x58025480
 8006d8c:	58025494 	.word	0x58025494
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d028      	beq.n	8006de8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006da4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	2201      	movs	r2, #1
 8006db6:	409a      	lsls	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ddc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006de6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop

08006e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e20:	4b67      	ldr	r3, [pc, #412]	; (8006fc0 <HAL_DMA_IRQHandler+0x1ac>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a67      	ldr	r2, [pc, #412]	; (8006fc4 <HAL_DMA_IRQHandler+0x1b0>)
 8006e26:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2a:	0a9b      	lsrs	r3, r3, #10
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a5f      	ldr	r2, [pc, #380]	; (8006fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a5d      	ldr	r2, [pc, #372]	; (8006fcc <HAL_DMA_IRQHandler+0x1b8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a5c      	ldr	r2, [pc, #368]	; (8006fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5a      	ldr	r2, [pc, #360]	; (8006fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a59      	ldr	r2, [pc, #356]	; (8006fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a57      	ldr	r2, [pc, #348]	; (8006fdc <HAL_DMA_IRQHandler+0x1c8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a56      	ldr	r2, [pc, #344]	; (8006fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a54      	ldr	r2, [pc, #336]	; (8006fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a53      	ldr	r2, [pc, #332]	; (8006fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a51      	ldr	r2, [pc, #324]	; (8006fec <HAL_DMA_IRQHandler+0x1d8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a50      	ldr	r2, [pc, #320]	; (8006ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a4e      	ldr	r2, [pc, #312]	; (8006ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a4d      	ldr	r2, [pc, #308]	; (8006ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a4b      	ldr	r2, [pc, #300]	; (8006ffc <HAL_DMA_IRQHandler+0x1e8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4a      	ldr	r2, [pc, #296]	; (8007000 <HAL_DMA_IRQHandler+0x1ec>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a48      	ldr	r2, [pc, #288]	; (8007004 <HAL_DMA_IRQHandler+0x1f0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <HAL_DMA_IRQHandler+0xd6>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <HAL_DMA_IRQHandler+0xd8>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 842b 	beq.w	8007748 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	2208      	movs	r2, #8
 8006efc:	409a      	lsls	r2, r3
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80a2 	beq.w	800704c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a2e      	ldr	r2, [pc, #184]	; (8006fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d04a      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2d      	ldr	r2, [pc, #180]	; (8006fcc <HAL_DMA_IRQHandler+0x1b8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d045      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2b      	ldr	r2, [pc, #172]	; (8006fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d040      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d03b      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a28      	ldr	r2, [pc, #160]	; (8006fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d036      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <HAL_DMA_IRQHandler+0x1c8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d031      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a25      	ldr	r2, [pc, #148]	; (8006fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d02c      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a24      	ldr	r2, [pc, #144]	; (8006fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d027      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a22      	ldr	r2, [pc, #136]	; (8006fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a21      	ldr	r2, [pc, #132]	; (8006fec <HAL_DMA_IRQHandler+0x1d8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1c      	ldr	r2, [pc, #112]	; (8006ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1b      	ldr	r2, [pc, #108]	; (8006ffc <HAL_DMA_IRQHandler+0x1e8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a19      	ldr	r2, [pc, #100]	; (8007000 <HAL_DMA_IRQHandler+0x1ec>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x194>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a18      	ldr	r2, [pc, #96]	; (8007004 <HAL_DMA_IRQHandler+0x1f0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d12f      	bne.n	8007008 <HAL_DMA_IRQHandler+0x1f4>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bf14      	ite	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	2300      	moveq	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	e02e      	b.n	800701c <HAL_DMA_IRQHandler+0x208>
 8006fbe:	bf00      	nop
 8006fc0:	2400008c 	.word	0x2400008c
 8006fc4:	1b4e81b5 	.word	0x1b4e81b5
 8006fc8:	40020010 	.word	0x40020010
 8006fcc:	40020028 	.word	0x40020028
 8006fd0:	40020040 	.word	0x40020040
 8006fd4:	40020058 	.word	0x40020058
 8006fd8:	40020070 	.word	0x40020070
 8006fdc:	40020088 	.word	0x40020088
 8006fe0:	400200a0 	.word	0x400200a0
 8006fe4:	400200b8 	.word	0x400200b8
 8006fe8:	40020410 	.word	0x40020410
 8006fec:	40020428 	.word	0x40020428
 8006ff0:	40020440 	.word	0x40020440
 8006ff4:	40020458 	.word	0x40020458
 8006ff8:	40020470 	.word	0x40020470
 8006ffc:	40020488 	.word	0x40020488
 8007000:	400204a0 	.word	0x400204a0
 8007004:	400204b8 	.word	0x400204b8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf14      	ite	ne
 8007016:	2301      	movne	r3, #1
 8007018:	2300      	moveq	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d015      	beq.n	800704c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0204 	bic.w	r2, r2, #4
 800702e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2208      	movs	r2, #8
 800703a:	409a      	lsls	r2, r3
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007044:	f043 0201 	orr.w	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d06e      	beq.n	8007140 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a69      	ldr	r2, [pc, #420]	; (800720c <HAL_DMA_IRQHandler+0x3f8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d04a      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a67      	ldr	r2, [pc, #412]	; (8007210 <HAL_DMA_IRQHandler+0x3fc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d045      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a66      	ldr	r2, [pc, #408]	; (8007214 <HAL_DMA_IRQHandler+0x400>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d040      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a64      	ldr	r2, [pc, #400]	; (8007218 <HAL_DMA_IRQHandler+0x404>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d03b      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a63      	ldr	r2, [pc, #396]	; (800721c <HAL_DMA_IRQHandler+0x408>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d036      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a61      	ldr	r2, [pc, #388]	; (8007220 <HAL_DMA_IRQHandler+0x40c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d031      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a60      	ldr	r2, [pc, #384]	; (8007224 <HAL_DMA_IRQHandler+0x410>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d02c      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a5e      	ldr	r2, [pc, #376]	; (8007228 <HAL_DMA_IRQHandler+0x414>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d027      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a5d      	ldr	r2, [pc, #372]	; (800722c <HAL_DMA_IRQHandler+0x418>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d022      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a5b      	ldr	r2, [pc, #364]	; (8007230 <HAL_DMA_IRQHandler+0x41c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01d      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a5a      	ldr	r2, [pc, #360]	; (8007234 <HAL_DMA_IRQHandler+0x420>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d018      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a58      	ldr	r2, [pc, #352]	; (8007238 <HAL_DMA_IRQHandler+0x424>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a57      	ldr	r2, [pc, #348]	; (800723c <HAL_DMA_IRQHandler+0x428>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a55      	ldr	r2, [pc, #340]	; (8007240 <HAL_DMA_IRQHandler+0x42c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a54      	ldr	r2, [pc, #336]	; (8007244 <HAL_DMA_IRQHandler+0x430>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_IRQHandler+0x2ee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a52      	ldr	r2, [pc, #328]	; (8007248 <HAL_DMA_IRQHandler+0x434>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10a      	bne.n	8007118 <HAL_DMA_IRQHandler+0x304>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	e003      	b.n	8007120 <HAL_DMA_IRQHandler+0x30c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2300      	movs	r3, #0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	2201      	movs	r2, #1
 800712e:	409a      	lsls	r2, r3
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	f043 0202 	orr.w	r2, r3, #2
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007144:	f003 031f 	and.w	r3, r3, #31
 8007148:	2204      	movs	r2, #4
 800714a:	409a      	lsls	r2, r3
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 808f 	beq.w	8007274 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a2c      	ldr	r2, [pc, #176]	; (800720c <HAL_DMA_IRQHandler+0x3f8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d04a      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <HAL_DMA_IRQHandler+0x3fc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d045      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a29      	ldr	r2, [pc, #164]	; (8007214 <HAL_DMA_IRQHandler+0x400>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d040      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a27      	ldr	r2, [pc, #156]	; (8007218 <HAL_DMA_IRQHandler+0x404>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d03b      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a26      	ldr	r2, [pc, #152]	; (800721c <HAL_DMA_IRQHandler+0x408>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d036      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a24      	ldr	r2, [pc, #144]	; (8007220 <HAL_DMA_IRQHandler+0x40c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d031      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a23      	ldr	r2, [pc, #140]	; (8007224 <HAL_DMA_IRQHandler+0x410>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d02c      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a21      	ldr	r2, [pc, #132]	; (8007228 <HAL_DMA_IRQHandler+0x414>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d027      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a20      	ldr	r2, [pc, #128]	; (800722c <HAL_DMA_IRQHandler+0x418>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d022      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <HAL_DMA_IRQHandler+0x41c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01d      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <HAL_DMA_IRQHandler+0x420>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1b      	ldr	r2, [pc, #108]	; (8007238 <HAL_DMA_IRQHandler+0x424>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1a      	ldr	r2, [pc, #104]	; (800723c <HAL_DMA_IRQHandler+0x428>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a18      	ldr	r2, [pc, #96]	; (8007240 <HAL_DMA_IRQHandler+0x42c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a17      	ldr	r2, [pc, #92]	; (8007244 <HAL_DMA_IRQHandler+0x430>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x3e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a15      	ldr	r2, [pc, #84]	; (8007248 <HAL_DMA_IRQHandler+0x434>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12a      	bne.n	800724c <HAL_DMA_IRQHandler+0x438>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	e023      	b.n	8007254 <HAL_DMA_IRQHandler+0x440>
 800720c:	40020010 	.word	0x40020010
 8007210:	40020028 	.word	0x40020028
 8007214:	40020040 	.word	0x40020040
 8007218:	40020058 	.word	0x40020058
 800721c:	40020070 	.word	0x40020070
 8007220:	40020088 	.word	0x40020088
 8007224:	400200a0 	.word	0x400200a0
 8007228:	400200b8 	.word	0x400200b8
 800722c:	40020410 	.word	0x40020410
 8007230:	40020428 	.word	0x40020428
 8007234:	40020440 	.word	0x40020440
 8007238:	40020458 	.word	0x40020458
 800723c:	40020470 	.word	0x40020470
 8007240:	40020488 	.word	0x40020488
 8007244:	400204a0 	.word	0x400204a0
 8007248:	400204b8 	.word	0x400204b8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2300      	movs	r3, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00d      	beq.n	8007274 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2204      	movs	r2, #4
 8007262:	409a      	lsls	r2, r3
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	f043 0204 	orr.w	r2, r3, #4
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2210      	movs	r2, #16
 800727e:	409a      	lsls	r2, r3
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	4013      	ands	r3, r2
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80a6 	beq.w	80073d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a85      	ldr	r2, [pc, #532]	; (80074a4 <HAL_DMA_IRQHandler+0x690>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d04a      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a83      	ldr	r2, [pc, #524]	; (80074a8 <HAL_DMA_IRQHandler+0x694>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d045      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a82      	ldr	r2, [pc, #520]	; (80074ac <HAL_DMA_IRQHandler+0x698>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d040      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a80      	ldr	r2, [pc, #512]	; (80074b0 <HAL_DMA_IRQHandler+0x69c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d03b      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a7f      	ldr	r2, [pc, #508]	; (80074b4 <HAL_DMA_IRQHandler+0x6a0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d036      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a7d      	ldr	r2, [pc, #500]	; (80074b8 <HAL_DMA_IRQHandler+0x6a4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d031      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7c      	ldr	r2, [pc, #496]	; (80074bc <HAL_DMA_IRQHandler+0x6a8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d02c      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a7a      	ldr	r2, [pc, #488]	; (80074c0 <HAL_DMA_IRQHandler+0x6ac>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d027      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a79      	ldr	r2, [pc, #484]	; (80074c4 <HAL_DMA_IRQHandler+0x6b0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a77      	ldr	r2, [pc, #476]	; (80074c8 <HAL_DMA_IRQHandler+0x6b4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a76      	ldr	r2, [pc, #472]	; (80074cc <HAL_DMA_IRQHandler+0x6b8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a74      	ldr	r2, [pc, #464]	; (80074d0 <HAL_DMA_IRQHandler+0x6bc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a73      	ldr	r2, [pc, #460]	; (80074d4 <HAL_DMA_IRQHandler+0x6c0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a71      	ldr	r2, [pc, #452]	; (80074d8 <HAL_DMA_IRQHandler+0x6c4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a70      	ldr	r2, [pc, #448]	; (80074dc <HAL_DMA_IRQHandler+0x6c8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_DMA_IRQHandler+0x516>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a6e      	ldr	r2, [pc, #440]	; (80074e0 <HAL_DMA_IRQHandler+0x6cc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d10a      	bne.n	8007340 <HAL_DMA_IRQHandler+0x52c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e009      	b.n	8007354 <HAL_DMA_IRQHandler+0x540>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	bf14      	ite	ne
 800734e:	2301      	movne	r3, #1
 8007350:	2300      	moveq	r3, #0
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d03e      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2210      	movs	r2, #16
 8007362:	409a      	lsls	r2, r3
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d018      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d108      	bne.n	8007396 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d024      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
 8007394:	e01f      	b.n	80073d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01b      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
 80073a6:	e016      	b.n	80073d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0208 	bic.w	r2, r2, #8
 80073c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	2220      	movs	r2, #32
 80073e0:	409a      	lsls	r2, r3
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8110 	beq.w	800760c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2c      	ldr	r2, [pc, #176]	; (80074a4 <HAL_DMA_IRQHandler+0x690>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d04a      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <HAL_DMA_IRQHandler+0x694>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d045      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a29      	ldr	r2, [pc, #164]	; (80074ac <HAL_DMA_IRQHandler+0x698>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d040      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <HAL_DMA_IRQHandler+0x69c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d03b      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a26      	ldr	r2, [pc, #152]	; (80074b4 <HAL_DMA_IRQHandler+0x6a0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d036      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a25      	ldr	r2, [pc, #148]	; (80074b8 <HAL_DMA_IRQHandler+0x6a4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d031      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a23      	ldr	r2, [pc, #140]	; (80074bc <HAL_DMA_IRQHandler+0x6a8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d02c      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <HAL_DMA_IRQHandler+0x6ac>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d027      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a20      	ldr	r2, [pc, #128]	; (80074c4 <HAL_DMA_IRQHandler+0x6b0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d022      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <HAL_DMA_IRQHandler+0x6b4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d01d      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <HAL_DMA_IRQHandler+0x6b8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d018      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <HAL_DMA_IRQHandler+0x6bc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <HAL_DMA_IRQHandler+0x6c0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00e      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <HAL_DMA_IRQHandler+0x6c4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d009      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a17      	ldr	r2, [pc, #92]	; (80074dc <HAL_DMA_IRQHandler+0x6c8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_DMA_IRQHandler+0x678>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <HAL_DMA_IRQHandler+0x6cc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d12b      	bne.n	80074e4 <HAL_DMA_IRQHandler+0x6d0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf14      	ite	ne
 800749a:	2301      	movne	r3, #1
 800749c:	2300      	moveq	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	e02a      	b.n	80074f8 <HAL_DMA_IRQHandler+0x6e4>
 80074a2:	bf00      	nop
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bf14      	ite	ne
 80074f2:	2301      	movne	r3, #1
 80074f4:	2300      	moveq	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8087 	beq.w	800760c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2220      	movs	r2, #32
 8007508:	409a      	lsls	r2, r3
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b04      	cmp	r3, #4
 8007518:	d139      	bne.n	800758e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0216 	bic.w	r2, r2, #22
 8007528:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695a      	ldr	r2, [r3, #20]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007538:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <HAL_DMA_IRQHandler+0x736>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0208 	bic.w	r2, r2, #8
 8007558:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	223f      	movs	r2, #63	; 0x3f
 8007564:	409a      	lsls	r2, r3
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 834a 	beq.w	8007c18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
          }
          return;
 800758c:	e344      	b.n	8007c18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d018      	beq.n	80075ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d108      	bne.n	80075bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02c      	beq.n	800760c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
 80075ba:	e027      	b.n	800760c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d023      	beq.n	800760c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
 80075cc:	e01e      	b.n	800760c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0210 	bic.w	r2, r2, #16
 80075ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8306 	beq.w	8007c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8088 	beq.w	8007734 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2204      	movs	r2, #4
 8007628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a7a      	ldr	r2, [pc, #488]	; (800781c <HAL_DMA_IRQHandler+0xa08>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d04a      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a79      	ldr	r2, [pc, #484]	; (8007820 <HAL_DMA_IRQHandler+0xa0c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d045      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a77      	ldr	r2, [pc, #476]	; (8007824 <HAL_DMA_IRQHandler+0xa10>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d040      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a76      	ldr	r2, [pc, #472]	; (8007828 <HAL_DMA_IRQHandler+0xa14>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d03b      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a74      	ldr	r2, [pc, #464]	; (800782c <HAL_DMA_IRQHandler+0xa18>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d036      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a73      	ldr	r2, [pc, #460]	; (8007830 <HAL_DMA_IRQHandler+0xa1c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d031      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a71      	ldr	r2, [pc, #452]	; (8007834 <HAL_DMA_IRQHandler+0xa20>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d02c      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a70      	ldr	r2, [pc, #448]	; (8007838 <HAL_DMA_IRQHandler+0xa24>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d027      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a6e      	ldr	r2, [pc, #440]	; (800783c <HAL_DMA_IRQHandler+0xa28>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d022      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a6d      	ldr	r2, [pc, #436]	; (8007840 <HAL_DMA_IRQHandler+0xa2c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d01d      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a6b      	ldr	r2, [pc, #428]	; (8007844 <HAL_DMA_IRQHandler+0xa30>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d018      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a6a      	ldr	r2, [pc, #424]	; (8007848 <HAL_DMA_IRQHandler+0xa34>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a68      	ldr	r2, [pc, #416]	; (800784c <HAL_DMA_IRQHandler+0xa38>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a67      	ldr	r2, [pc, #412]	; (8007850 <HAL_DMA_IRQHandler+0xa3c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a65      	ldr	r2, [pc, #404]	; (8007854 <HAL_DMA_IRQHandler+0xa40>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_DMA_IRQHandler+0x8b8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a64      	ldr	r2, [pc, #400]	; (8007858 <HAL_DMA_IRQHandler+0xa44>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d108      	bne.n	80076de <HAL_DMA_IRQHandler+0x8ca>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	e007      	b.n	80076ee <HAL_DMA_IRQHandler+0x8da>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d307      	bcc.n	800770a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f2      	bne.n	80076ee <HAL_DMA_IRQHandler+0x8da>
 8007708:	e000      	b.n	800770c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800770a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2203      	movs	r2, #3
 800771e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007722:	e003      	b.n	800772c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8272 	beq.w	8007c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	e26c      	b.n	8007c22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a43      	ldr	r2, [pc, #268]	; (800785c <HAL_DMA_IRQHandler+0xa48>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d022      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a42      	ldr	r2, [pc, #264]	; (8007860 <HAL_DMA_IRQHandler+0xa4c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d01d      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a40      	ldr	r2, [pc, #256]	; (8007864 <HAL_DMA_IRQHandler+0xa50>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d018      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a3f      	ldr	r2, [pc, #252]	; (8007868 <HAL_DMA_IRQHandler+0xa54>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d013      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a3d      	ldr	r2, [pc, #244]	; (800786c <HAL_DMA_IRQHandler+0xa58>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00e      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a3c      	ldr	r2, [pc, #240]	; (8007870 <HAL_DMA_IRQHandler+0xa5c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d009      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a3a      	ldr	r2, [pc, #232]	; (8007874 <HAL_DMA_IRQHandler+0xa60>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <HAL_DMA_IRQHandler+0x984>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a39      	ldr	r2, [pc, #228]	; (8007878 <HAL_DMA_IRQHandler+0xa64>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d101      	bne.n	800779c <HAL_DMA_IRQHandler+0x988>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <HAL_DMA_IRQHandler+0x98a>
 800779c:	2300      	movs	r3, #0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 823f 	beq.w	8007c22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2204      	movs	r2, #4
 80077b6:	409a      	lsls	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	4013      	ands	r3, r2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80cd 	beq.w	800795c <HAL_DMA_IRQHandler+0xb48>
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80c7 	beq.w	800795c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2204      	movs	r2, #4
 80077d8:	409a      	lsls	r2, r3
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d049      	beq.n	800787c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8210 	beq.w	8007c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007804:	e20a      	b.n	8007c1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8206 	beq.w	8007c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007818:	e200      	b.n	8007c1c <HAL_DMA_IRQHandler+0xe08>
 800781a:	bf00      	nop
 800781c:	40020010 	.word	0x40020010
 8007820:	40020028 	.word	0x40020028
 8007824:	40020040 	.word	0x40020040
 8007828:	40020058 	.word	0x40020058
 800782c:	40020070 	.word	0x40020070
 8007830:	40020088 	.word	0x40020088
 8007834:	400200a0 	.word	0x400200a0
 8007838:	400200b8 	.word	0x400200b8
 800783c:	40020410 	.word	0x40020410
 8007840:	40020428 	.word	0x40020428
 8007844:	40020440 	.word	0x40020440
 8007848:	40020458 	.word	0x40020458
 800784c:	40020470 	.word	0x40020470
 8007850:	40020488 	.word	0x40020488
 8007854:	400204a0 	.word	0x400204a0
 8007858:	400204b8 	.word	0x400204b8
 800785c:	58025408 	.word	0x58025408
 8007860:	5802541c 	.word	0x5802541c
 8007864:	58025430 	.word	0x58025430
 8007868:	58025444 	.word	0x58025444
 800786c:	58025458 	.word	0x58025458
 8007870:	5802546c 	.word	0x5802546c
 8007874:	58025480 	.word	0x58025480
 8007878:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d160      	bne.n	8007948 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a7f      	ldr	r2, [pc, #508]	; (8007a88 <HAL_DMA_IRQHandler+0xc74>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d04a      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a7d      	ldr	r2, [pc, #500]	; (8007a8c <HAL_DMA_IRQHandler+0xc78>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d045      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a7c      	ldr	r2, [pc, #496]	; (8007a90 <HAL_DMA_IRQHandler+0xc7c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d040      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a7a      	ldr	r2, [pc, #488]	; (8007a94 <HAL_DMA_IRQHandler+0xc80>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d03b      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a79      	ldr	r2, [pc, #484]	; (8007a98 <HAL_DMA_IRQHandler+0xc84>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d036      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a77      	ldr	r2, [pc, #476]	; (8007a9c <HAL_DMA_IRQHandler+0xc88>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d031      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a76      	ldr	r2, [pc, #472]	; (8007aa0 <HAL_DMA_IRQHandler+0xc8c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d02c      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a74      	ldr	r2, [pc, #464]	; (8007aa4 <HAL_DMA_IRQHandler+0xc90>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d027      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a73      	ldr	r2, [pc, #460]	; (8007aa8 <HAL_DMA_IRQHandler+0xc94>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d022      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a71      	ldr	r2, [pc, #452]	; (8007aac <HAL_DMA_IRQHandler+0xc98>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01d      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a70      	ldr	r2, [pc, #448]	; (8007ab0 <HAL_DMA_IRQHandler+0xc9c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d018      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a6e      	ldr	r2, [pc, #440]	; (8007ab4 <HAL_DMA_IRQHandler+0xca0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a6d      	ldr	r2, [pc, #436]	; (8007ab8 <HAL_DMA_IRQHandler+0xca4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00e      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a6b      	ldr	r2, [pc, #428]	; (8007abc <HAL_DMA_IRQHandler+0xca8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d009      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a6a      	ldr	r2, [pc, #424]	; (8007ac0 <HAL_DMA_IRQHandler+0xcac>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <HAL_DMA_IRQHandler+0xb12>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a68      	ldr	r2, [pc, #416]	; (8007ac4 <HAL_DMA_IRQHandler+0xcb0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d108      	bne.n	8007938 <HAL_DMA_IRQHandler+0xb24>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0208 	bic.w	r2, r2, #8
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	e007      	b.n	8007948 <HAL_DMA_IRQHandler+0xb34>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0204 	bic.w	r2, r2, #4
 8007946:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8165 	beq.w	8007c1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800795a:	e15f      	b.n	8007c1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	2202      	movs	r2, #2
 8007966:	409a      	lsls	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	4013      	ands	r3, r2
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80c5 	beq.w	8007afc <HAL_DMA_IRQHandler+0xce8>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80bf 	beq.w	8007afc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	2202      	movs	r2, #2
 8007988:	409a      	lsls	r2, r3
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d018      	beq.n	80079ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 813a 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b4:	e134      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8130 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079c8:	e12a      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f040 8089 	bne.w	8007ae8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <HAL_DMA_IRQHandler+0xc74>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d04a      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a29      	ldr	r2, [pc, #164]	; (8007a8c <HAL_DMA_IRQHandler+0xc78>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d045      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <HAL_DMA_IRQHandler+0xc7c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d040      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <HAL_DMA_IRQHandler+0xc80>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d03b      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a25      	ldr	r2, [pc, #148]	; (8007a98 <HAL_DMA_IRQHandler+0xc84>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d036      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a23      	ldr	r2, [pc, #140]	; (8007a9c <HAL_DMA_IRQHandler+0xc88>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d031      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <HAL_DMA_IRQHandler+0xc8c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d02c      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <HAL_DMA_IRQHandler+0xc90>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d027      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1f      	ldr	r2, [pc, #124]	; (8007aa8 <HAL_DMA_IRQHandler+0xc94>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d022      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1d      	ldr	r2, [pc, #116]	; (8007aac <HAL_DMA_IRQHandler+0xc98>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01d      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <HAL_DMA_IRQHandler+0xc9c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <HAL_DMA_IRQHandler+0xca0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <HAL_DMA_IRQHandler+0xca4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_DMA_IRQHandler+0xca8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a16      	ldr	r2, [pc, #88]	; (8007ac0 <HAL_DMA_IRQHandler+0xcac>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_DMA_IRQHandler+0xc62>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <HAL_DMA_IRQHandler+0xcb0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d128      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0xcb4>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0214 	bic.w	r2, r2, #20
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e027      	b.n	8007ad8 <HAL_DMA_IRQHandler+0xcc4>
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 020a 	bic.w	r2, r2, #10
 8007ad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8097 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007afa:	e091      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2208      	movs	r2, #8
 8007b06:	409a      	lsls	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8088 	beq.w	8007c22 <HAL_DMA_IRQHandler+0xe0e>
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8082 	beq.w	8007c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a41      	ldr	r2, [pc, #260]	; (8007c28 <HAL_DMA_IRQHandler+0xe14>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d04a      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a3f      	ldr	r2, [pc, #252]	; (8007c2c <HAL_DMA_IRQHandler+0xe18>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d045      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a3e      	ldr	r2, [pc, #248]	; (8007c30 <HAL_DMA_IRQHandler+0xe1c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d040      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a3c      	ldr	r2, [pc, #240]	; (8007c34 <HAL_DMA_IRQHandler+0xe20>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d03b      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a3b      	ldr	r2, [pc, #236]	; (8007c38 <HAL_DMA_IRQHandler+0xe24>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d036      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a39      	ldr	r2, [pc, #228]	; (8007c3c <HAL_DMA_IRQHandler+0xe28>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d031      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a38      	ldr	r2, [pc, #224]	; (8007c40 <HAL_DMA_IRQHandler+0xe2c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d02c      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a36      	ldr	r2, [pc, #216]	; (8007c44 <HAL_DMA_IRQHandler+0xe30>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d027      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a35      	ldr	r2, [pc, #212]	; (8007c48 <HAL_DMA_IRQHandler+0xe34>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d022      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a33      	ldr	r2, [pc, #204]	; (8007c4c <HAL_DMA_IRQHandler+0xe38>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01d      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a32      	ldr	r2, [pc, #200]	; (8007c50 <HAL_DMA_IRQHandler+0xe3c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d018      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a30      	ldr	r2, [pc, #192]	; (8007c54 <HAL_DMA_IRQHandler+0xe40>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2f      	ldr	r2, [pc, #188]	; (8007c58 <HAL_DMA_IRQHandler+0xe44>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2d      	ldr	r2, [pc, #180]	; (8007c5c <HAL_DMA_IRQHandler+0xe48>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d009      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2c      	ldr	r2, [pc, #176]	; (8007c60 <HAL_DMA_IRQHandler+0xe4c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_DMA_IRQHandler+0xdaa>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <HAL_DMA_IRQHandler+0xe50>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d108      	bne.n	8007bd0 <HAL_DMA_IRQHandler+0xdbc>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 021c 	bic.w	r2, r2, #28
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e007      	b.n	8007be0 <HAL_DMA_IRQHandler+0xdcc>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 020e 	bic.w	r2, r2, #14
 8007bde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	2201      	movs	r2, #1
 8007bea:	409a      	lsls	r2, r3
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
 8007c16:	e004      	b.n	8007c22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c22:	3728      	adds	r7, #40	; 0x28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40020010 	.word	0x40020010
 8007c2c:	40020028 	.word	0x40020028
 8007c30:	40020040 	.word	0x40020040
 8007c34:	40020058 	.word	0x40020058
 8007c38:	40020070 	.word	0x40020070
 8007c3c:	40020088 	.word	0x40020088
 8007c40:	400200a0 	.word	0x400200a0
 8007c44:	400200b8 	.word	0x400200b8
 8007c48:	40020410 	.word	0x40020410
 8007c4c:	40020428 	.word	0x40020428
 8007c50:	40020440 	.word	0x40020440
 8007c54:	40020458 	.word	0x40020458
 8007c58:	40020470 	.word	0x40020470
 8007c5c:	40020488 	.word	0x40020488
 8007c60:	400204a0 	.word	0x400204a0
 8007c64:	400204b8 	.word	0x400204b8

08007c68 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a7f      	ldr	r2, [pc, #508]	; (8007e9c <DMA_SetConfig+0x21c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d072      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a7d      	ldr	r2, [pc, #500]	; (8007ea0 <DMA_SetConfig+0x220>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d06d      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a7c      	ldr	r2, [pc, #496]	; (8007ea4 <DMA_SetConfig+0x224>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d068      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a7a      	ldr	r2, [pc, #488]	; (8007ea8 <DMA_SetConfig+0x228>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d063      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a79      	ldr	r2, [pc, #484]	; (8007eac <DMA_SetConfig+0x22c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d05e      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a77      	ldr	r2, [pc, #476]	; (8007eb0 <DMA_SetConfig+0x230>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d059      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a76      	ldr	r2, [pc, #472]	; (8007eb4 <DMA_SetConfig+0x234>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d054      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a74      	ldr	r2, [pc, #464]	; (8007eb8 <DMA_SetConfig+0x238>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d04f      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a73      	ldr	r2, [pc, #460]	; (8007ebc <DMA_SetConfig+0x23c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d04a      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a71      	ldr	r2, [pc, #452]	; (8007ec0 <DMA_SetConfig+0x240>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d045      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a70      	ldr	r2, [pc, #448]	; (8007ec4 <DMA_SetConfig+0x244>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d040      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a6e      	ldr	r2, [pc, #440]	; (8007ec8 <DMA_SetConfig+0x248>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d03b      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6d      	ldr	r2, [pc, #436]	; (8007ecc <DMA_SetConfig+0x24c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d036      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a6b      	ldr	r2, [pc, #428]	; (8007ed0 <DMA_SetConfig+0x250>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d031      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a6a      	ldr	r2, [pc, #424]	; (8007ed4 <DMA_SetConfig+0x254>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d02c      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a68      	ldr	r2, [pc, #416]	; (8007ed8 <DMA_SetConfig+0x258>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d027      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a67      	ldr	r2, [pc, #412]	; (8007edc <DMA_SetConfig+0x25c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d022      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a65      	ldr	r2, [pc, #404]	; (8007ee0 <DMA_SetConfig+0x260>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01d      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a64      	ldr	r2, [pc, #400]	; (8007ee4 <DMA_SetConfig+0x264>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d018      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a62      	ldr	r2, [pc, #392]	; (8007ee8 <DMA_SetConfig+0x268>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a61      	ldr	r2, [pc, #388]	; (8007eec <DMA_SetConfig+0x26c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a5f      	ldr	r2, [pc, #380]	; (8007ef0 <DMA_SetConfig+0x270>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a5e      	ldr	r2, [pc, #376]	; (8007ef4 <DMA_SetConfig+0x274>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <DMA_SetConfig+0x10a>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a5c      	ldr	r2, [pc, #368]	; (8007ef8 <DMA_SetConfig+0x278>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d101      	bne.n	8007d8e <DMA_SetConfig+0x10e>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <DMA_SetConfig+0x110>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a39      	ldr	r2, [pc, #228]	; (8007e9c <DMA_SetConfig+0x21c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d04a      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a38      	ldr	r2, [pc, #224]	; (8007ea0 <DMA_SetConfig+0x220>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d045      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a36      	ldr	r2, [pc, #216]	; (8007ea4 <DMA_SetConfig+0x224>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d040      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a35      	ldr	r2, [pc, #212]	; (8007ea8 <DMA_SetConfig+0x228>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d03b      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a33      	ldr	r2, [pc, #204]	; (8007eac <DMA_SetConfig+0x22c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d036      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a32      	ldr	r2, [pc, #200]	; (8007eb0 <DMA_SetConfig+0x230>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d031      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a30      	ldr	r2, [pc, #192]	; (8007eb4 <DMA_SetConfig+0x234>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d02c      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2f      	ldr	r2, [pc, #188]	; (8007eb8 <DMA_SetConfig+0x238>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d027      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2d      	ldr	r2, [pc, #180]	; (8007ebc <DMA_SetConfig+0x23c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d022      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a2c      	ldr	r2, [pc, #176]	; (8007ec0 <DMA_SetConfig+0x240>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d01d      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a2a      	ldr	r2, [pc, #168]	; (8007ec4 <DMA_SetConfig+0x244>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d018      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a29      	ldr	r2, [pc, #164]	; (8007ec8 <DMA_SetConfig+0x248>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d013      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a27      	ldr	r2, [pc, #156]	; (8007ecc <DMA_SetConfig+0x24c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00e      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <DMA_SetConfig+0x250>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d009      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a24      	ldr	r2, [pc, #144]	; (8007ed4 <DMA_SetConfig+0x254>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <DMA_SetConfig+0x1d0>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a23      	ldr	r2, [pc, #140]	; (8007ed8 <DMA_SetConfig+0x258>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <DMA_SetConfig+0x1d4>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <DMA_SetConfig+0x1d6>
 8007e54:	2300      	movs	r3, #0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d059      	beq.n	8007f0e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	f003 031f 	and.w	r3, r3, #31
 8007e62:	223f      	movs	r2, #63	; 0x3f
 8007e64:	409a      	lsls	r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e78:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d138      	bne.n	8007efc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e9a:	e086      	b.n	8007faa <DMA_SetConfig+0x32a>
 8007e9c:	40020010 	.word	0x40020010
 8007ea0:	40020028 	.word	0x40020028
 8007ea4:	40020040 	.word	0x40020040
 8007ea8:	40020058 	.word	0x40020058
 8007eac:	40020070 	.word	0x40020070
 8007eb0:	40020088 	.word	0x40020088
 8007eb4:	400200a0 	.word	0x400200a0
 8007eb8:	400200b8 	.word	0x400200b8
 8007ebc:	40020410 	.word	0x40020410
 8007ec0:	40020428 	.word	0x40020428
 8007ec4:	40020440 	.word	0x40020440
 8007ec8:	40020458 	.word	0x40020458
 8007ecc:	40020470 	.word	0x40020470
 8007ed0:	40020488 	.word	0x40020488
 8007ed4:	400204a0 	.word	0x400204a0
 8007ed8:	400204b8 	.word	0x400204b8
 8007edc:	58025408 	.word	0x58025408
 8007ee0:	5802541c 	.word	0x5802541c
 8007ee4:	58025430 	.word	0x58025430
 8007ee8:	58025444 	.word	0x58025444
 8007eec:	58025458 	.word	0x58025458
 8007ef0:	5802546c 	.word	0x5802546c
 8007ef4:	58025480 	.word	0x58025480
 8007ef8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	60da      	str	r2, [r3, #12]
}
 8007f0c:	e04d      	b.n	8007faa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <DMA_SetConfig+0x338>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d022      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a27      	ldr	r2, [pc, #156]	; (8007fbc <DMA_SetConfig+0x33c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01d      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <DMA_SetConfig+0x340>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d018      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a24      	ldr	r2, [pc, #144]	; (8007fc4 <DMA_SetConfig+0x344>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a23      	ldr	r2, [pc, #140]	; (8007fc8 <DMA_SetConfig+0x348>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00e      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <DMA_SetConfig+0x34c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d009      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <DMA_SetConfig+0x350>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d004      	beq.n	8007f5e <DMA_SetConfig+0x2de>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1e      	ldr	r2, [pc, #120]	; (8007fd4 <DMA_SetConfig+0x354>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d101      	bne.n	8007f62 <DMA_SetConfig+0x2e2>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <DMA_SetConfig+0x2e4>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d020      	beq.n	8007faa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	2201      	movs	r2, #1
 8007f72:	409a      	lsls	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d108      	bne.n	8007f9a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	60da      	str	r2, [r3, #12]
}
 8007f98:	e007      	b.n	8007faa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	60da      	str	r2, [r3, #12]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	58025408 	.word	0x58025408
 8007fbc:	5802541c 	.word	0x5802541c
 8007fc0:	58025430 	.word	0x58025430
 8007fc4:	58025444 	.word	0x58025444
 8007fc8:	58025458 	.word	0x58025458
 8007fcc:	5802546c 	.word	0x5802546c
 8007fd0:	58025480 	.word	0x58025480
 8007fd4:	58025494 	.word	0x58025494

08007fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a42      	ldr	r2, [pc, #264]	; (80080f0 <DMA_CalcBaseAndBitshift+0x118>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d04a      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <DMA_CalcBaseAndBitshift+0x11c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d045      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a3f      	ldr	r2, [pc, #252]	; (80080f8 <DMA_CalcBaseAndBitshift+0x120>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d040      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a3e      	ldr	r2, [pc, #248]	; (80080fc <DMA_CalcBaseAndBitshift+0x124>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d03b      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a3c      	ldr	r2, [pc, #240]	; (8008100 <DMA_CalcBaseAndBitshift+0x128>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d036      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a3b      	ldr	r2, [pc, #236]	; (8008104 <DMA_CalcBaseAndBitshift+0x12c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d031      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a39      	ldr	r2, [pc, #228]	; (8008108 <DMA_CalcBaseAndBitshift+0x130>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d02c      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a38      	ldr	r2, [pc, #224]	; (800810c <DMA_CalcBaseAndBitshift+0x134>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d027      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a36      	ldr	r2, [pc, #216]	; (8008110 <DMA_CalcBaseAndBitshift+0x138>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d022      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a35      	ldr	r2, [pc, #212]	; (8008114 <DMA_CalcBaseAndBitshift+0x13c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d01d      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a33      	ldr	r2, [pc, #204]	; (8008118 <DMA_CalcBaseAndBitshift+0x140>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a32      	ldr	r2, [pc, #200]	; (800811c <DMA_CalcBaseAndBitshift+0x144>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a30      	ldr	r2, [pc, #192]	; (8008120 <DMA_CalcBaseAndBitshift+0x148>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2f      	ldr	r2, [pc, #188]	; (8008124 <DMA_CalcBaseAndBitshift+0x14c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2d      	ldr	r2, [pc, #180]	; (8008128 <DMA_CalcBaseAndBitshift+0x150>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <DMA_CalcBaseAndBitshift+0xa8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2c      	ldr	r2, [pc, #176]	; (800812c <DMA_CalcBaseAndBitshift+0x154>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <DMA_CalcBaseAndBitshift+0xac>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <DMA_CalcBaseAndBitshift+0xae>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d024      	beq.n	80080d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	3b10      	subs	r3, #16
 8008092:	4a27      	ldr	r2, [pc, #156]	; (8008130 <DMA_CalcBaseAndBitshift+0x158>)
 8008094:	fba2 2303 	umull	r2, r3, r2, r3
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	4a24      	ldr	r2, [pc, #144]	; (8008134 <DMA_CalcBaseAndBitshift+0x15c>)
 80080a4:	5cd3      	ldrb	r3, [r2, r3]
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d908      	bls.n	80080c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	4b1f      	ldr	r3, [pc, #124]	; (8008138 <DMA_CalcBaseAndBitshift+0x160>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	1d1a      	adds	r2, r3, #4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	659a      	str	r2, [r3, #88]	; 0x58
 80080c2:	e00d      	b.n	80080e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	4b1b      	ldr	r3, [pc, #108]	; (8008138 <DMA_CalcBaseAndBitshift+0x160>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6593      	str	r3, [r2, #88]	; 0x58
 80080d2:	e005      	b.n	80080e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	40020010 	.word	0x40020010
 80080f4:	40020028 	.word	0x40020028
 80080f8:	40020040 	.word	0x40020040
 80080fc:	40020058 	.word	0x40020058
 8008100:	40020070 	.word	0x40020070
 8008104:	40020088 	.word	0x40020088
 8008108:	400200a0 	.word	0x400200a0
 800810c:	400200b8 	.word	0x400200b8
 8008110:	40020410 	.word	0x40020410
 8008114:	40020428 	.word	0x40020428
 8008118:	40020440 	.word	0x40020440
 800811c:	40020458 	.word	0x40020458
 8008120:	40020470 	.word	0x40020470
 8008124:	40020488 	.word	0x40020488
 8008128:	400204a0 	.word	0x400204a0
 800812c:	400204b8 	.word	0x400204b8
 8008130:	aaaaaaab 	.word	0xaaaaaaab
 8008134:	08015f10 	.word	0x08015f10
 8008138:	fffffc00 	.word	0xfffffc00

0800813c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d120      	bne.n	8008192 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	2b03      	cmp	r3, #3
 8008156:	d858      	bhi.n	800820a <DMA_CheckFifoParam+0xce>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <DMA_CheckFifoParam+0x24>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008171 	.word	0x08008171
 8008164:	08008183 	.word	0x08008183
 8008168:	08008171 	.word	0x08008171
 800816c:	0800820b 	.word	0x0800820b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d048      	beq.n	800820e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008180:	e045      	b.n	800820e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800818a:	d142      	bne.n	8008212 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008190:	e03f      	b.n	8008212 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819a:	d123      	bne.n	80081e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d838      	bhi.n	8008216 <DMA_CheckFifoParam+0xda>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <DMA_CheckFifoParam+0x70>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081c3 	.word	0x080081c3
 80081b4:	080081bd 	.word	0x080081bd
 80081b8:	080081d5 	.word	0x080081d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]
        break;
 80081c0:	e030      	b.n	8008224 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d025      	beq.n	800821a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081d2:	e022      	b.n	800821a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081dc:	d11f      	bne.n	800821e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081e2:	e01c      	b.n	800821e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d902      	bls.n	80081f2 <DMA_CheckFifoParam+0xb6>
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d003      	beq.n	80081f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80081f0:	e018      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
        break;
 80081f6:	e015      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00e      	beq.n	8008222 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
    break;
 8008208:	e00b      	b.n	8008222 <DMA_CheckFifoParam+0xe6>
        break;
 800820a:	bf00      	nop
 800820c:	e00a      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        break;
 800820e:	bf00      	nop
 8008210:	e008      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        break;
 8008212:	bf00      	nop
 8008214:	e006      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        break;
 8008216:	bf00      	nop
 8008218:	e004      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        break;
 800821a:	bf00      	nop
 800821c:	e002      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
        break;
 800821e:	bf00      	nop
 8008220:	e000      	b.n	8008224 <DMA_CheckFifoParam+0xe8>
    break;
 8008222:	bf00      	nop
    }
  }

  return status;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop

08008234 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a38      	ldr	r2, [pc, #224]	; (8008328 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d022      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a36      	ldr	r2, [pc, #216]	; (800832c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01d      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a35      	ldr	r2, [pc, #212]	; (8008330 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a33      	ldr	r2, [pc, #204]	; (8008334 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a32      	ldr	r2, [pc, #200]	; (8008338 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a30      	ldr	r2, [pc, #192]	; (800833c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a2f      	ldr	r2, [pc, #188]	; (8008340 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a2d      	ldr	r2, [pc, #180]	; (8008344 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d101      	bne.n	8008296 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008296:	2300      	movs	r3, #0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01a      	beq.n	80082d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	3b08      	subs	r3, #8
 80082a4:	4a28      	ldr	r2, [pc, #160]	; (8008348 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	091b      	lsrs	r3, r3, #4
 80082ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4b26      	ldr	r3, [pc, #152]	; (800834c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a24      	ldr	r2, [pc, #144]	; (8008350 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	2201      	movs	r2, #1
 80082ca:	409a      	lsls	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80082d0:	e024      	b.n	800831c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3b10      	subs	r3, #16
 80082da:	4a1e      	ldr	r2, [pc, #120]	; (8008354 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80082dc:	fba2 2303 	umull	r2, r3, r2, r3
 80082e0:	091b      	lsrs	r3, r3, #4
 80082e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d806      	bhi.n	80082fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4a1b      	ldr	r2, [pc, #108]	; (800835c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d902      	bls.n	80082fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3308      	adds	r3, #8
 80082f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4b18      	ldr	r3, [pc, #96]	; (8008360 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a16      	ldr	r2, [pc, #88]	; (8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800830c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	2201      	movs	r2, #1
 8008316:	409a      	lsls	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	58025408 	.word	0x58025408
 800832c:	5802541c 	.word	0x5802541c
 8008330:	58025430 	.word	0x58025430
 8008334:	58025444 	.word	0x58025444
 8008338:	58025458 	.word	0x58025458
 800833c:	5802546c 	.word	0x5802546c
 8008340:	58025480 	.word	0x58025480
 8008344:	58025494 	.word	0x58025494
 8008348:	cccccccd 	.word	0xcccccccd
 800834c:	16009600 	.word	0x16009600
 8008350:	58025880 	.word	0x58025880
 8008354:	aaaaaaab 	.word	0xaaaaaaab
 8008358:	400204b8 	.word	0x400204b8
 800835c:	4002040f 	.word	0x4002040f
 8008360:	10008200 	.word	0x10008200
 8008364:	40020880 	.word	0x40020880

08008368 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d04a      	beq.n	8008414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b08      	cmp	r3, #8
 8008382:	d847      	bhi.n	8008414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a25      	ldr	r2, [pc, #148]	; (8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d022      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a24      	ldr	r2, [pc, #144]	; (8008424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d01d      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a22      	ldr	r2, [pc, #136]	; (8008428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d018      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a21      	ldr	r2, [pc, #132]	; (800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d013      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00e      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1e      	ldr	r2, [pc, #120]	; (8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d009      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d004      	beq.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1b      	ldr	r2, [pc, #108]	; (800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d101      	bne.n	80083d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80083d8:	2300      	movs	r3, #0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4b17      	ldr	r3, [pc, #92]	; (8008440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a15      	ldr	r2, [pc, #84]	; (8008444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80083f0:	671a      	str	r2, [r3, #112]	; 0x70
 80083f2:	e009      	b.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	461a      	mov	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a11      	ldr	r2, [pc, #68]	; (800844c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008406:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3b01      	subs	r3, #1
 800840c:	2201      	movs	r2, #1
 800840e:	409a      	lsls	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008414:	bf00      	nop
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	58025408 	.word	0x58025408
 8008424:	5802541c 	.word	0x5802541c
 8008428:	58025430 	.word	0x58025430
 800842c:	58025444 	.word	0x58025444
 8008430:	58025458 	.word	0x58025458
 8008434:	5802546c 	.word	0x5802546c
 8008438:	58025480 	.word	0x58025480
 800843c:	58025494 	.word	0x58025494
 8008440:	1600963f 	.word	0x1600963f
 8008444:	58025940 	.word	0x58025940
 8008448:	1000823f 	.word	0x1000823f
 800844c:	40020940 	.word	0x40020940

08008450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008450:	b480      	push	{r7}
 8008452:	b089      	sub	sp, #36	; 0x24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800845e:	4b89      	ldr	r3, [pc, #548]	; (8008684 <HAL_GPIO_Init+0x234>)
 8008460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008462:	e194      	b.n	800878e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	2101      	movs	r1, #1
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	fa01 f303 	lsl.w	r3, r1, r3
 8008470:	4013      	ands	r3, r2
 8008472:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 8186 	beq.w	8008788 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d005      	beq.n	8008494 <HAL_GPIO_Init+0x44>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f003 0303 	and.w	r3, r3, #3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d130      	bne.n	80084f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	2203      	movs	r2, #3
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	43db      	mvns	r3, r3
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	4013      	ands	r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	fa02 f303 	lsl.w	r3, r2, r3
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084ca:	2201      	movs	r2, #1
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	fa02 f303 	lsl.w	r3, r2, r3
 80084d2:	43db      	mvns	r3, r3
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	4013      	ands	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	091b      	lsrs	r3, r3, #4
 80084e0:	f003 0201 	and.w	r2, r3, #1
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d017      	beq.n	8008532 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	2203      	movs	r2, #3
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	43db      	mvns	r3, r3
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	4013      	ands	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	fa02 f303 	lsl.w	r3, r2, r3
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	4313      	orrs	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d123      	bne.n	8008586 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	08da      	lsrs	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3208      	adds	r2, #8
 8008546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	220f      	movs	r2, #15
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	43db      	mvns	r3, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4013      	ands	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	4313      	orrs	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	08da      	lsrs	r2, r3, #3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3208      	adds	r2, #8
 8008580:	69b9      	ldr	r1, [r7, #24]
 8008582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	2203      	movs	r2, #3
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	43db      	mvns	r3, r3
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	4013      	ands	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f003 0203 	and.w	r2, r3, #3
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80e0 	beq.w	8008788 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c8:	4b2f      	ldr	r3, [pc, #188]	; (8008688 <HAL_GPIO_Init+0x238>)
 80085ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ce:	4a2e      	ldr	r2, [pc, #184]	; (8008688 <HAL_GPIO_Init+0x238>)
 80085d0:	f043 0302 	orr.w	r3, r3, #2
 80085d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085d8:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <HAL_GPIO_Init+0x238>)
 80085da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085e6:	4a29      	ldr	r2, [pc, #164]	; (800868c <HAL_GPIO_Init+0x23c>)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	089b      	lsrs	r3, r3, #2
 80085ec:	3302      	adds	r3, #2
 80085ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	220f      	movs	r2, #15
 80085fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008602:	43db      	mvns	r3, r3
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	4013      	ands	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a20      	ldr	r2, [pc, #128]	; (8008690 <HAL_GPIO_Init+0x240>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d052      	beq.n	80086b8 <HAL_GPIO_Init+0x268>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <HAL_GPIO_Init+0x244>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d031      	beq.n	800867e <HAL_GPIO_Init+0x22e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <HAL_GPIO_Init+0x248>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d02b      	beq.n	800867a <HAL_GPIO_Init+0x22a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a1d      	ldr	r2, [pc, #116]	; (800869c <HAL_GPIO_Init+0x24c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d025      	beq.n	8008676 <HAL_GPIO_Init+0x226>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <HAL_GPIO_Init+0x250>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01f      	beq.n	8008672 <HAL_GPIO_Init+0x222>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a1b      	ldr	r2, [pc, #108]	; (80086a4 <HAL_GPIO_Init+0x254>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d019      	beq.n	800866e <HAL_GPIO_Init+0x21e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a1a      	ldr	r2, [pc, #104]	; (80086a8 <HAL_GPIO_Init+0x258>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d013      	beq.n	800866a <HAL_GPIO_Init+0x21a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a19      	ldr	r2, [pc, #100]	; (80086ac <HAL_GPIO_Init+0x25c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00d      	beq.n	8008666 <HAL_GPIO_Init+0x216>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <HAL_GPIO_Init+0x260>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d007      	beq.n	8008662 <HAL_GPIO_Init+0x212>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a17      	ldr	r2, [pc, #92]	; (80086b4 <HAL_GPIO_Init+0x264>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d101      	bne.n	800865e <HAL_GPIO_Init+0x20e>
 800865a:	2309      	movs	r3, #9
 800865c:	e02d      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 800865e:	230a      	movs	r3, #10
 8008660:	e02b      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 8008662:	2308      	movs	r3, #8
 8008664:	e029      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 8008666:	2307      	movs	r3, #7
 8008668:	e027      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 800866a:	2306      	movs	r3, #6
 800866c:	e025      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 800866e:	2305      	movs	r3, #5
 8008670:	e023      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 8008672:	2304      	movs	r3, #4
 8008674:	e021      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 8008676:	2303      	movs	r3, #3
 8008678:	e01f      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 800867a:	2302      	movs	r3, #2
 800867c:	e01d      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 800867e:	2301      	movs	r3, #1
 8008680:	e01b      	b.n	80086ba <HAL_GPIO_Init+0x26a>
 8008682:	bf00      	nop
 8008684:	58000080 	.word	0x58000080
 8008688:	58024400 	.word	0x58024400
 800868c:	58000400 	.word	0x58000400
 8008690:	58020000 	.word	0x58020000
 8008694:	58020400 	.word	0x58020400
 8008698:	58020800 	.word	0x58020800
 800869c:	58020c00 	.word	0x58020c00
 80086a0:	58021000 	.word	0x58021000
 80086a4:	58021400 	.word	0x58021400
 80086a8:	58021800 	.word	0x58021800
 80086ac:	58021c00 	.word	0x58021c00
 80086b0:	58022000 	.word	0x58022000
 80086b4:	58022400 	.word	0x58022400
 80086b8:	2300      	movs	r3, #0
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	f002 0203 	and.w	r2, r2, #3
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	4093      	lsls	r3, r2
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ca:	4938      	ldr	r1, [pc, #224]	; (80087ac <HAL_GPIO_Init+0x35c>)
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	3302      	adds	r3, #2
 80086d2:	69ba      	ldr	r2, [r7, #24]
 80086d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80086d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80086fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	43db      	mvns	r3, r3
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	4013      	ands	r3, r2
 8008716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800872c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	43db      	mvns	r3, r3
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	4013      	ands	r3, r2
 8008742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	43db      	mvns	r3, r3
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	4013      	ands	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	3301      	adds	r3, #1
 800878c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	f47f ae63 	bne.w	8008464 <HAL_GPIO_Init+0x14>
  }
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	3724      	adds	r7, #36	; 0x24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	58000400 	.word	0x58000400

080087b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	887b      	ldrh	r3, [r7, #2]
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
 80087cc:	e001      	b.n	80087d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	807b      	strh	r3, [r7, #2]
 80087ec:	4613      	mov	r3, r2
 80087ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087f0:	787b      	ldrb	r3, [r7, #1]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087f6:	887a      	ldrh	r2, [r7, #2]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80087fc:	e003      	b.n	8008806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80087fe:	887b      	ldrh	r3, [r7, #2]
 8008800:	041a      	lsls	r2, r3, #16
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	619a      	str	r2, [r3, #24]
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e08b      	b.n	800893e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7f8 fcfe 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2224      	movs	r2, #36	; 0x24
 8008844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0201 	bic.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008864:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008874:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d107      	bne.n	800888e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800888a:	609a      	str	r2, [r3, #8]
 800888c:	e006      	b.n	800889c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800889a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d108      	bne.n	80088b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088b2:	605a      	str	r2, [r3, #4]
 80088b4:	e007      	b.n	80088c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6859      	ldr	r1, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <HAL_I2C_Init+0x134>)
 80088d2:	430b      	orrs	r3, r1
 80088d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69d9      	ldr	r1, [r3, #28]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1a      	ldr	r2, [r3, #32]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	02008000 	.word	0x02008000

0800894c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b20      	cmp	r3, #32
 8008960:	d138      	bne.n	80089d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008968:	2b01      	cmp	r3, #1
 800896a:	d101      	bne.n	8008970 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800896c:	2302      	movs	r3, #2
 800896e:	e032      	b.n	80089d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2224      	movs	r2, #36	; 0x24
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0201 	bic.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800899e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6819      	ldr	r1, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	e000      	b.n	80089d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
  }
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d139      	bne.n	8008a6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e033      	b.n	8008a6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2224      	movs	r2, #36	; 0x24
 8008a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 0201 	bic.w	r2, r2, #1
 8008a24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e000      	b.n	8008a6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a6c:	2302      	movs	r3, #2
  }
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a84:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a8a:	4a0c      	ldr	r2, [pc, #48]	; (8008abc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a94:	4b09      	ldr	r3, [pc, #36]	; (8008abc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	4906      	ldr	r1, [pc, #24]	; (8008ac0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	604b      	str	r3, [r1, #4]
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	58000400 	.word	0x58000400

08008ac4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008acc:	4b19      	ldr	r3, [pc, #100]	; (8008b34 <HAL_PWREx_ConfigSupply+0x70>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d00a      	beq.n	8008aee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ad8:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <HAL_PWREx_ConfigSupply+0x70>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d001      	beq.n	8008aea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e01f      	b.n	8008b2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e01d      	b.n	8008b2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008aee:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <HAL_PWREx_ConfigSupply+0x70>)
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f023 0207 	bic.w	r2, r3, #7
 8008af6:	490f      	ldr	r1, [pc, #60]	; (8008b34 <HAL_PWREx_ConfigSupply+0x70>)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008afe:	f7fa fd37 	bl	8003570 <HAL_GetTick>
 8008b02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b04:	e009      	b.n	8008b1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b06:	f7fa fd33 	bl	8003570 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b14:	d901      	bls.n	8008b1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e007      	b.n	8008b2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <HAL_PWREx_ConfigSupply+0x70>)
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b26:	d1ee      	bne.n	8008b06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	58024800 	.word	0x58024800

08008b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f000 bc48 	b.w	80093dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8088 	beq.w	8008c6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b5a:	4b99      	ldr	r3, [pc, #612]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b64:	4b96      	ldr	r3, [pc, #600]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	d007      	beq.n	8008b80 <HAL_RCC_OscConfig+0x48>
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	2b18      	cmp	r3, #24
 8008b74:	d111      	bne.n	8008b9a <HAL_RCC_OscConfig+0x62>
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d10c      	bne.n	8008b9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b80:	4b8f      	ldr	r3, [pc, #572]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d06d      	beq.n	8008c68 <HAL_RCC_OscConfig+0x130>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d169      	bne.n	8008c68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f000 bc21 	b.w	80093dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba2:	d106      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x7a>
 8008ba4:	4b86      	ldr	r3, [pc, #536]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a85      	ldr	r2, [pc, #532]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e02e      	b.n	8008c10 <HAL_RCC_OscConfig+0xd8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x9c>
 8008bba:	4b81      	ldr	r3, [pc, #516]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a80      	ldr	r2, [pc, #512]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	4b7e      	ldr	r3, [pc, #504]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a7d      	ldr	r2, [pc, #500]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e01d      	b.n	8008c10 <HAL_RCC_OscConfig+0xd8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bdc:	d10c      	bne.n	8008bf8 <HAL_RCC_OscConfig+0xc0>
 8008bde:	4b78      	ldr	r3, [pc, #480]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a77      	ldr	r2, [pc, #476]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	4b75      	ldr	r3, [pc, #468]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a74      	ldr	r2, [pc, #464]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	e00b      	b.n	8008c10 <HAL_RCC_OscConfig+0xd8>
 8008bf8:	4b71      	ldr	r3, [pc, #452]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a70      	ldr	r2, [pc, #448]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	4b6e      	ldr	r3, [pc, #440]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a6d      	ldr	r2, [pc, #436]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d013      	beq.n	8008c40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c18:	f7fa fcaa 	bl	8003570 <HAL_GetTick>
 8008c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c1e:	e008      	b.n	8008c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c20:	f7fa fca6 	bl	8003570 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b64      	cmp	r3, #100	; 0x64
 8008c2c:	d901      	bls.n	8008c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e3d4      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c32:	4b63      	ldr	r3, [pc, #396]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0f0      	beq.n	8008c20 <HAL_RCC_OscConfig+0xe8>
 8008c3e:	e014      	b.n	8008c6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c40:	f7fa fc96 	bl	8003570 <HAL_GetTick>
 8008c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fa fc92 	bl	8003570 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	; 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e3c0      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c5a:	4b59      	ldr	r3, [pc, #356]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1f0      	bne.n	8008c48 <HAL_RCC_OscConfig+0x110>
 8008c66:	e000      	b.n	8008c6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80ca 	beq.w	8008e0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c78:	4b51      	ldr	r3, [pc, #324]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c82:	4b4f      	ldr	r3, [pc, #316]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <HAL_RCC_OscConfig+0x166>
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	2b18      	cmp	r3, #24
 8008c92:	d156      	bne.n	8008d42 <HAL_RCC_OscConfig+0x20a>
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d151      	bne.n	8008d42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c9e:	4b48      	ldr	r3, [pc, #288]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x17e>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e392      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cb6:	4b42      	ldr	r3, [pc, #264]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f023 0219 	bic.w	r2, r3, #25
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	493f      	ldr	r1, [pc, #252]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc8:	f7fa fc52 	bl	8003570 <HAL_GetTick>
 8008ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd0:	f7fa fc4e 	bl	8003570 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e37c      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ce2:	4b37      	ldr	r3, [pc, #220]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cee:	f7fa fc4b 	bl	8003588 <HAL_GetREVID>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d817      	bhi.n	8008d2c <HAL_RCC_OscConfig+0x1f4>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b40      	cmp	r3, #64	; 0x40
 8008d02:	d108      	bne.n	8008d16 <HAL_RCC_OscConfig+0x1de>
 8008d04:	4b2e      	ldr	r3, [pc, #184]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d0c:	4a2c      	ldr	r2, [pc, #176]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d14:	e07a      	b.n	8008e0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d16:	4b2a      	ldr	r3, [pc, #168]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	031b      	lsls	r3, r3, #12
 8008d24:	4926      	ldr	r1, [pc, #152]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d2a:	e06f      	b.n	8008e0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d2c:	4b24      	ldr	r3, [pc, #144]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	4921      	ldr	r1, [pc, #132]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d40:	e064      	b.n	8008e0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d047      	beq.n	8008dda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f023 0219 	bic.w	r2, r3, #25
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	491a      	ldr	r1, [pc, #104]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5c:	f7fa fc08 	bl	8003570 <HAL_GetTick>
 8008d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d64:	f7fa fc04 	bl	8003570 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e332      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d76:	4b12      	ldr	r3, [pc, #72]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0304 	and.w	r3, r3, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d82:	f7fa fc01 	bl	8003588 <HAL_GetREVID>
 8008d86:	4603      	mov	r3, r0
 8008d88:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d819      	bhi.n	8008dc4 <HAL_RCC_OscConfig+0x28c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d108      	bne.n	8008daa <HAL_RCC_OscConfig+0x272>
 8008d98:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008da0:	4a07      	ldr	r2, [pc, #28]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008da6:	6053      	str	r3, [r2, #4]
 8008da8:	e030      	b.n	8008e0c <HAL_RCC_OscConfig+0x2d4>
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	031b      	lsls	r3, r3, #12
 8008db8:	4901      	ldr	r1, [pc, #4]	; (8008dc0 <HAL_RCC_OscConfig+0x288>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	604b      	str	r3, [r1, #4]
 8008dbe:	e025      	b.n	8008e0c <HAL_RCC_OscConfig+0x2d4>
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	4b9a      	ldr	r3, [pc, #616]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	061b      	lsls	r3, r3, #24
 8008dd2:	4997      	ldr	r1, [pc, #604]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	604b      	str	r3, [r1, #4]
 8008dd8:	e018      	b.n	8008e0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dda:	4b95      	ldr	r3, [pc, #596]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a94      	ldr	r2, [pc, #592]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de6:	f7fa fbc3 	bl	8003570 <HAL_GetTick>
 8008dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dec:	e008      	b.n	8008e00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dee:	f7fa fbbf 	bl	8003570 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e2ed      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e00:	4b8b      	ldr	r3, [pc, #556]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f0      	bne.n	8008dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80a9 	beq.w	8008f6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e1a:	4b85      	ldr	r3, [pc, #532]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e24:	4b82      	ldr	r3, [pc, #520]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d007      	beq.n	8008e40 <HAL_RCC_OscConfig+0x308>
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2b18      	cmp	r3, #24
 8008e34:	d13a      	bne.n	8008eac <HAL_RCC_OscConfig+0x374>
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d135      	bne.n	8008eac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e40:	4b7b      	ldr	r3, [pc, #492]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_RCC_OscConfig+0x320>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	2b80      	cmp	r3, #128	; 0x80
 8008e52:	d001      	beq.n	8008e58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e2c1      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e58:	f7fa fb96 	bl	8003588 <HAL_GetREVID>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d817      	bhi.n	8008e96 <HAL_RCC_OscConfig+0x35e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d108      	bne.n	8008e80 <HAL_RCC_OscConfig+0x348>
 8008e6e:	4b70      	ldr	r3, [pc, #448]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e76:	4a6e      	ldr	r2, [pc, #440]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e7e:	e075      	b.n	8008f6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e80:	4b6b      	ldr	r3, [pc, #428]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	069b      	lsls	r3, r3, #26
 8008e8e:	4968      	ldr	r1, [pc, #416]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e94:	e06a      	b.n	8008f6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e96:	4b66      	ldr	r3, [pc, #408]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	061b      	lsls	r3, r3, #24
 8008ea4:	4962      	ldr	r1, [pc, #392]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eaa:	e05f      	b.n	8008f6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d042      	beq.n	8008f3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008eb4:	4b5e      	ldr	r3, [pc, #376]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a5d      	ldr	r2, [pc, #372]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec0:	f7fa fb56 	bl	8003570 <HAL_GetTick>
 8008ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ec6:	e008      	b.n	8008eda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ec8:	f7fa fb52 	bl	8003570 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d901      	bls.n	8008eda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e280      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eda:	4b55      	ldr	r3, [pc, #340]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0f0      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ee6:	f7fa fb4f 	bl	8003588 <HAL_GetREVID>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d817      	bhi.n	8008f24 <HAL_RCC_OscConfig+0x3ec>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	2b20      	cmp	r3, #32
 8008efa:	d108      	bne.n	8008f0e <HAL_RCC_OscConfig+0x3d6>
 8008efc:	4b4c      	ldr	r3, [pc, #304]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f04:	4a4a      	ldr	r2, [pc, #296]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f0a:	6053      	str	r3, [r2, #4]
 8008f0c:	e02e      	b.n	8008f6c <HAL_RCC_OscConfig+0x434>
 8008f0e:	4b48      	ldr	r3, [pc, #288]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	069b      	lsls	r3, r3, #26
 8008f1c:	4944      	ldr	r1, [pc, #272]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	604b      	str	r3, [r1, #4]
 8008f22:	e023      	b.n	8008f6c <HAL_RCC_OscConfig+0x434>
 8008f24:	4b42      	ldr	r3, [pc, #264]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	493f      	ldr	r1, [pc, #252]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60cb      	str	r3, [r1, #12]
 8008f38:	e018      	b.n	8008f6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f3a:	4b3d      	ldr	r3, [pc, #244]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a3c      	ldr	r2, [pc, #240]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f46:	f7fa fb13 	bl	8003570 <HAL_GetTick>
 8008f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f4c:	e008      	b.n	8008f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f4e:	f7fa fb0f 	bl	8003570 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e23d      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f60:	4b33      	ldr	r3, [pc, #204]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f0      	bne.n	8008f4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0308 	and.w	r3, r3, #8
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d036      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d019      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f80:	4b2b      	ldr	r3, [pc, #172]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f84:	4a2a      	ldr	r2, [pc, #168]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f8c:	f7fa faf0 	bl	8003570 <HAL_GetTick>
 8008f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f92:	e008      	b.n	8008fa6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f94:	f7fa faec 	bl	8003570 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d901      	bls.n	8008fa6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e21a      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fa6:	4b22      	ldr	r3, [pc, #136]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f0      	beq.n	8008f94 <HAL_RCC_OscConfig+0x45c>
 8008fb2:	e018      	b.n	8008fe6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fb4:	4b1e      	ldr	r3, [pc, #120]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc0:	f7fa fad6 	bl	8003570 <HAL_GetTick>
 8008fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fc8:	f7fa fad2 	bl	8003570 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e200      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f0      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d039      	beq.n	8009066 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01c      	beq.n	8009034 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8009000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009006:	f7fa fab3 	bl	8003570 <HAL_GetTick>
 800900a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800900c:	e008      	b.n	8009020 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800900e:	f7fa faaf 	bl	8003570 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e1dd      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009020:	4b03      	ldr	r3, [pc, #12]	; (8009030 <HAL_RCC_OscConfig+0x4f8>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0f0      	beq.n	800900e <HAL_RCC_OscConfig+0x4d6>
 800902c:	e01b      	b.n	8009066 <HAL_RCC_OscConfig+0x52e>
 800902e:	bf00      	nop
 8009030:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009034:	4b9b      	ldr	r3, [pc, #620]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a9a      	ldr	r2, [pc, #616]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800903a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800903e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009040:	f7fa fa96 	bl	8003570 <HAL_GetTick>
 8009044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009048:	f7fa fa92 	bl	8003570 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e1c0      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800905a:	4b92      	ldr	r3, [pc, #584]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8081 	beq.w	8009176 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009074:	4b8c      	ldr	r3, [pc, #560]	; (80092a8 <HAL_RCC_OscConfig+0x770>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a8b      	ldr	r2, [pc, #556]	; (80092a8 <HAL_RCC_OscConfig+0x770>)
 800907a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800907e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009080:	f7fa fa76 	bl	8003570 <HAL_GetTick>
 8009084:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009088:	f7fa fa72 	bl	8003570 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b64      	cmp	r3, #100	; 0x64
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e1a0      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800909a:	4b83      	ldr	r3, [pc, #524]	; (80092a8 <HAL_RCC_OscConfig+0x770>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f0      	beq.n	8009088 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d106      	bne.n	80090bc <HAL_RCC_OscConfig+0x584>
 80090ae:	4b7d      	ldr	r3, [pc, #500]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	4a7c      	ldr	r2, [pc, #496]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090b4:	f043 0301 	orr.w	r3, r3, #1
 80090b8:	6713      	str	r3, [r2, #112]	; 0x70
 80090ba:	e02d      	b.n	8009118 <HAL_RCC_OscConfig+0x5e0>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10c      	bne.n	80090de <HAL_RCC_OscConfig+0x5a6>
 80090c4:	4b77      	ldr	r3, [pc, #476]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c8:	4a76      	ldr	r2, [pc, #472]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090ca:	f023 0301 	bic.w	r3, r3, #1
 80090ce:	6713      	str	r3, [r2, #112]	; 0x70
 80090d0:	4b74      	ldr	r3, [pc, #464]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d4:	4a73      	ldr	r2, [pc, #460]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090d6:	f023 0304 	bic.w	r3, r3, #4
 80090da:	6713      	str	r3, [r2, #112]	; 0x70
 80090dc:	e01c      	b.n	8009118 <HAL_RCC_OscConfig+0x5e0>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d10c      	bne.n	8009100 <HAL_RCC_OscConfig+0x5c8>
 80090e6:	4b6f      	ldr	r3, [pc, #444]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	4a6e      	ldr	r2, [pc, #440]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090ec:	f043 0304 	orr.w	r3, r3, #4
 80090f0:	6713      	str	r3, [r2, #112]	; 0x70
 80090f2:	4b6c      	ldr	r3, [pc, #432]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	4a6b      	ldr	r2, [pc, #428]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80090f8:	f043 0301 	orr.w	r3, r3, #1
 80090fc:	6713      	str	r3, [r2, #112]	; 0x70
 80090fe:	e00b      	b.n	8009118 <HAL_RCC_OscConfig+0x5e0>
 8009100:	4b68      	ldr	r3, [pc, #416]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009104:	4a67      	ldr	r2, [pc, #412]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	6713      	str	r3, [r2, #112]	; 0x70
 800910c:	4b65      	ldr	r3, [pc, #404]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	4a64      	ldr	r2, [pc, #400]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009112:	f023 0304 	bic.w	r3, r3, #4
 8009116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d015      	beq.n	800914c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009120:	f7fa fa26 	bl	8003570 <HAL_GetTick>
 8009124:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009126:	e00a      	b.n	800913e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009128:	f7fa fa22 	bl	8003570 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	f241 3288 	movw	r2, #5000	; 0x1388
 8009136:	4293      	cmp	r3, r2
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e14e      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800913e:	4b59      	ldr	r3, [pc, #356]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0ee      	beq.n	8009128 <HAL_RCC_OscConfig+0x5f0>
 800914a:	e014      	b.n	8009176 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914c:	f7fa fa10 	bl	8003570 <HAL_GetTick>
 8009150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009152:	e00a      	b.n	800916a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009154:	f7fa fa0c 	bl	8003570 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009162:	4293      	cmp	r3, r2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e138      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800916a:	4b4e      	ldr	r3, [pc, #312]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1ee      	bne.n	8009154 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 812d 	beq.w	80093da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009180:	4b48      	ldr	r3, [pc, #288]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009188:	2b18      	cmp	r3, #24
 800918a:	f000 80bd 	beq.w	8009308 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	2b02      	cmp	r3, #2
 8009194:	f040 809e 	bne.w	80092d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009198:	4b42      	ldr	r3, [pc, #264]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a41      	ldr	r2, [pc, #260]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800919e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a4:	f7fa f9e4 	bl	8003570 <HAL_GetTick>
 80091a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091ac:	f7fa f9e0 	bl	8003570 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e10e      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091be:	4b39      	ldr	r3, [pc, #228]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091ca:	4b36      	ldr	r3, [pc, #216]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80091cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091ce:	4b37      	ldr	r3, [pc, #220]	; (80092ac <HAL_RCC_OscConfig+0x774>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091da:	0112      	lsls	r2, r2, #4
 80091dc:	430a      	orrs	r2, r1
 80091de:	4931      	ldr	r1, [pc, #196]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	628b      	str	r3, [r1, #40]	; 0x28
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	3b01      	subs	r3, #1
 80091ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f2:	3b01      	subs	r3, #1
 80091f4:	025b      	lsls	r3, r3, #9
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	3b01      	subs	r3, #1
 8009200:	041b      	lsls	r3, r3, #16
 8009202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920c:	3b01      	subs	r3, #1
 800920e:	061b      	lsls	r3, r3, #24
 8009210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009214:	4923      	ldr	r1, [pc, #140]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009216:	4313      	orrs	r3, r2
 8009218:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800921a:	4b22      	ldr	r3, [pc, #136]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a21      	ldr	r2, [pc, #132]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009226:	4b1f      	ldr	r3, [pc, #124]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922a:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <HAL_RCC_OscConfig+0x778>)
 800922c:	4013      	ands	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009232:	00d2      	lsls	r2, r2, #3
 8009234:	491b      	ldr	r1, [pc, #108]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009236:	4313      	orrs	r3, r2
 8009238:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	f023 020c 	bic.w	r2, r3, #12
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	4917      	ldr	r1, [pc, #92]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009248:	4313      	orrs	r3, r2
 800924a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800924c:	4b15      	ldr	r3, [pc, #84]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	f023 0202 	bic.w	r2, r3, #2
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009258:	4912      	ldr	r1, [pc, #72]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800925a:	4313      	orrs	r3, r2
 800925c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926a:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	4a0d      	ldr	r2, [pc, #52]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009276:	4b0b      	ldr	r3, [pc, #44]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	4a0a      	ldr	r2, [pc, #40]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 800927c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009282:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	4a07      	ldr	r2, [pc, #28]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009288:	f043 0301 	orr.w	r3, r3, #1
 800928c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800928e:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a04      	ldr	r2, [pc, #16]	; (80092a4 <HAL_RCC_OscConfig+0x76c>)
 8009294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800929a:	f7fa f969 	bl	8003570 <HAL_GetTick>
 800929e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092a0:	e011      	b.n	80092c6 <HAL_RCC_OscConfig+0x78e>
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
 80092a8:	58024800 	.word	0x58024800
 80092ac:	fffffc0c 	.word	0xfffffc0c
 80092b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b4:	f7fa f95c 	bl	8003570 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e08a      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092c6:	4b47      	ldr	r3, [pc, #284]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0f0      	beq.n	80092b4 <HAL_RCC_OscConfig+0x77c>
 80092d2:	e082      	b.n	80093da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092d4:	4b43      	ldr	r3, [pc, #268]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a42      	ldr	r2, [pc, #264]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80092da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e0:	f7fa f946 	bl	8003570 <HAL_GetTick>
 80092e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092e6:	e008      	b.n	80092fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092e8:	f7fa f942 	bl	8003570 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e070      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092fa:	4b3a      	ldr	r3, [pc, #232]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1f0      	bne.n	80092e8 <HAL_RCC_OscConfig+0x7b0>
 8009306:	e068      	b.n	80093da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 800930a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800930e:	4b35      	ldr	r3, [pc, #212]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b01      	cmp	r3, #1
 800931a:	d031      	beq.n	8009380 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f003 0203 	and.w	r2, r3, #3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009326:	429a      	cmp	r2, r3
 8009328:	d12a      	bne.n	8009380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	091b      	lsrs	r3, r3, #4
 800932e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009336:	429a      	cmp	r2, r3
 8009338:	d122      	bne.n	8009380 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009346:	429a      	cmp	r2, r3
 8009348:	d11a      	bne.n	8009380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	0a5b      	lsrs	r3, r3, #9
 800934e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009356:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009358:	429a      	cmp	r2, r3
 800935a:	d111      	bne.n	8009380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	0c1b      	lsrs	r3, r3, #16
 8009360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800936a:	429a      	cmp	r2, r3
 800936c:	d108      	bne.n	8009380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	0e1b      	lsrs	r3, r3, #24
 8009372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800937c:	429a      	cmp	r2, r3
 800937e:	d001      	beq.n	8009384 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e02b      	b.n	80093dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009384:	4b17      	ldr	r3, [pc, #92]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 8009386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009388:	08db      	lsrs	r3, r3, #3
 800938a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800938e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	429a      	cmp	r2, r3
 8009398:	d01f      	beq.n	80093da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800939a:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	4a11      	ldr	r2, [pc, #68]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093a6:	f7fa f8e3 	bl	8003570 <HAL_GetTick>
 80093aa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80093ac:	bf00      	nop
 80093ae:	f7fa f8df 	bl	8003570 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d0f9      	beq.n	80093ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80093bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093be:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <HAL_RCC_OscConfig+0x8b0>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093c6:	00d2      	lsls	r2, r2, #3
 80093c8:	4906      	ldr	r1, [pc, #24]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	4a04      	ldr	r2, [pc, #16]	; (80093e4 <HAL_RCC_OscConfig+0x8ac>)
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3730      	adds	r7, #48	; 0x30
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	58024400 	.word	0x58024400
 80093e8:	ffff0007 	.word	0xffff0007

080093ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e19c      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009400:	4b8a      	ldr	r3, [pc, #552]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d910      	bls.n	8009430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940e:	4b87      	ldr	r3, [pc, #540]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f023 020f 	bic.w	r2, r3, #15
 8009416:	4985      	ldr	r1, [pc, #532]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	4313      	orrs	r3, r2
 800941c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800941e:	4b83      	ldr	r3, [pc, #524]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d001      	beq.n	8009430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e184      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d010      	beq.n	800945e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	4b7b      	ldr	r3, [pc, #492]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009448:	429a      	cmp	r2, r3
 800944a:	d908      	bls.n	800945e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800944c:	4b78      	ldr	r3, [pc, #480]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	4975      	ldr	r1, [pc, #468]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800945a:	4313      	orrs	r3, r2
 800945c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d010      	beq.n	800948c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	695a      	ldr	r2, [r3, #20]
 800946e:	4b70      	ldr	r3, [pc, #448]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009476:	429a      	cmp	r2, r3
 8009478:	d908      	bls.n	800948c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800947a:	4b6d      	ldr	r3, [pc, #436]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	496a      	ldr	r1, [pc, #424]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009488:	4313      	orrs	r3, r2
 800948a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0310 	and.w	r3, r3, #16
 8009494:	2b00      	cmp	r3, #0
 8009496:	d010      	beq.n	80094ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	4b64      	ldr	r3, [pc, #400]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d908      	bls.n	80094ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094a8:	4b61      	ldr	r3, [pc, #388]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	495e      	ldr	r1, [pc, #376]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d010      	beq.n	80094e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69da      	ldr	r2, [r3, #28]
 80094ca:	4b59      	ldr	r3, [pc, #356]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d908      	bls.n	80094e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80094d6:	4b56      	ldr	r3, [pc, #344]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	4953      	ldr	r1, [pc, #332]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d010      	beq.n	8009516 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68da      	ldr	r2, [r3, #12]
 80094f8:	4b4d      	ldr	r3, [pc, #308]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f003 030f 	and.w	r3, r3, #15
 8009500:	429a      	cmp	r2, r3
 8009502:	d908      	bls.n	8009516 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009504:	4b4a      	ldr	r3, [pc, #296]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f023 020f 	bic.w	r2, r3, #15
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	4947      	ldr	r1, [pc, #284]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009512:	4313      	orrs	r3, r2
 8009514:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d055      	beq.n	80095ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009522:	4b43      	ldr	r3, [pc, #268]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	4940      	ldr	r1, [pc, #256]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009530:	4313      	orrs	r3, r2
 8009532:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d107      	bne.n	800954c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800953c:	4b3c      	ldr	r3, [pc, #240]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d121      	bne.n	800958c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e0f6      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b03      	cmp	r3, #3
 8009552:	d107      	bne.n	8009564 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009554:	4b36      	ldr	r3, [pc, #216]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d115      	bne.n	800958c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e0ea      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d107      	bne.n	800957c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800956c:	4b30      	ldr	r3, [pc, #192]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009574:	2b00      	cmp	r3, #0
 8009576:	d109      	bne.n	800958c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e0de      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800957c:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e0d6      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800958c:	4b28      	ldr	r3, [pc, #160]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	f023 0207 	bic.w	r2, r3, #7
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	4925      	ldr	r1, [pc, #148]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 800959a:	4313      	orrs	r3, r2
 800959c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959e:	f7f9 ffe7 	bl	8003570 <HAL_GetTick>
 80095a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095a4:	e00a      	b.n	80095bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095a6:	f7f9 ffe3 	bl	8003570 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d901      	bls.n	80095bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e0be      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095bc:	4b1c      	ldr	r3, [pc, #112]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d1eb      	bne.n	80095a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d010      	beq.n	80095fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	4b14      	ldr	r3, [pc, #80]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d208      	bcs.n	80095fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ea:	4b11      	ldr	r3, [pc, #68]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	f023 020f 	bic.w	r2, r3, #15
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	490e      	ldr	r1, [pc, #56]	; (8009630 <HAL_RCC_ClockConfig+0x244>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d214      	bcs.n	8009634 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800960a:	4b08      	ldr	r3, [pc, #32]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f023 020f 	bic.w	r2, r3, #15
 8009612:	4906      	ldr	r1, [pc, #24]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	4313      	orrs	r3, r2
 8009618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800961a:	4b04      	ldr	r3, [pc, #16]	; (800962c <HAL_RCC_ClockConfig+0x240>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d005      	beq.n	8009634 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e086      	b.n	800973a <HAL_RCC_ClockConfig+0x34e>
 800962c:	52002000 	.word	0x52002000
 8009630:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d010      	beq.n	8009662 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	4b3f      	ldr	r3, [pc, #252]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800964c:	429a      	cmp	r2, r3
 800964e:	d208      	bcs.n	8009662 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009650:	4b3c      	ldr	r3, [pc, #240]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	4939      	ldr	r1, [pc, #228]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 800965e:	4313      	orrs	r3, r2
 8009660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0308 	and.w	r3, r3, #8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d010      	beq.n	8009690 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695a      	ldr	r2, [r3, #20]
 8009672:	4b34      	ldr	r3, [pc, #208]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800967a:	429a      	cmp	r2, r3
 800967c:	d208      	bcs.n	8009690 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800967e:	4b31      	ldr	r3, [pc, #196]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	492e      	ldr	r1, [pc, #184]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 800968c:	4313      	orrs	r3, r2
 800968e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0310 	and.w	r3, r3, #16
 8009698:	2b00      	cmp	r3, #0
 800969a:	d010      	beq.n	80096be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699a      	ldr	r2, [r3, #24]
 80096a0:	4b28      	ldr	r3, [pc, #160]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d208      	bcs.n	80096be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096ac:	4b25      	ldr	r3, [pc, #148]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	4922      	ldr	r1, [pc, #136]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d010      	beq.n	80096ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69da      	ldr	r2, [r3, #28]
 80096ce:	4b1d      	ldr	r3, [pc, #116]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d208      	bcs.n	80096ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096da:	4b1a      	ldr	r3, [pc, #104]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	4917      	ldr	r1, [pc, #92]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096ec:	f000 f834 	bl	8009758 <HAL_RCC_GetSysClockFreq>
 80096f0:	4602      	mov	r2, r0
 80096f2:	4b14      	ldr	r3, [pc, #80]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	4912      	ldr	r1, [pc, #72]	; (8009748 <HAL_RCC_ClockConfig+0x35c>)
 80096fe:	5ccb      	ldrb	r3, [r1, r3]
 8009700:	f003 031f 	and.w	r3, r3, #31
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
 8009708:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800970a:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <HAL_RCC_ClockConfig+0x358>)
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	4a0d      	ldr	r2, [pc, #52]	; (8009748 <HAL_RCC_ClockConfig+0x35c>)
 8009714:	5cd3      	ldrb	r3, [r2, r3]
 8009716:	f003 031f 	and.w	r3, r3, #31
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	fa22 f303 	lsr.w	r3, r2, r3
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <HAL_RCC_ClockConfig+0x360>)
 8009722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009724:	4a0a      	ldr	r2, [pc, #40]	; (8009750 <HAL_RCC_ClockConfig+0x364>)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <HAL_RCC_ClockConfig+0x368>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f7f8 fee4 	bl	80024fc <HAL_InitTick>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	58024400 	.word	0x58024400
 8009748:	08015f00 	.word	0x08015f00
 800974c:	24000090 	.word	0x24000090
 8009750:	2400008c 	.word	0x2400008c
 8009754:	24000094 	.word	0x24000094

08009758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009758:	b480      	push	{r7}
 800975a:	b089      	sub	sp, #36	; 0x24
 800975c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800975e:	4bb3      	ldr	r3, [pc, #716]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009766:	2b18      	cmp	r3, #24
 8009768:	f200 8155 	bhi.w	8009a16 <HAL_RCC_GetSysClockFreq+0x2be>
 800976c:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <HAL_RCC_GetSysClockFreq+0x1c>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	080097d9 	.word	0x080097d9
 8009778:	08009a17 	.word	0x08009a17
 800977c:	08009a17 	.word	0x08009a17
 8009780:	08009a17 	.word	0x08009a17
 8009784:	08009a17 	.word	0x08009a17
 8009788:	08009a17 	.word	0x08009a17
 800978c:	08009a17 	.word	0x08009a17
 8009790:	08009a17 	.word	0x08009a17
 8009794:	080097ff 	.word	0x080097ff
 8009798:	08009a17 	.word	0x08009a17
 800979c:	08009a17 	.word	0x08009a17
 80097a0:	08009a17 	.word	0x08009a17
 80097a4:	08009a17 	.word	0x08009a17
 80097a8:	08009a17 	.word	0x08009a17
 80097ac:	08009a17 	.word	0x08009a17
 80097b0:	08009a17 	.word	0x08009a17
 80097b4:	08009805 	.word	0x08009805
 80097b8:	08009a17 	.word	0x08009a17
 80097bc:	08009a17 	.word	0x08009a17
 80097c0:	08009a17 	.word	0x08009a17
 80097c4:	08009a17 	.word	0x08009a17
 80097c8:	08009a17 	.word	0x08009a17
 80097cc:	08009a17 	.word	0x08009a17
 80097d0:	08009a17 	.word	0x08009a17
 80097d4:	0800980b 	.word	0x0800980b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097d8:	4b94      	ldr	r3, [pc, #592]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0320 	and.w	r3, r3, #32
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097e4:	4b91      	ldr	r3, [pc, #580]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	08db      	lsrs	r3, r3, #3
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	4a90      	ldr	r2, [pc, #576]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097f0:	fa22 f303 	lsr.w	r3, r2, r3
 80097f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80097f6:	e111      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097f8:	4b8d      	ldr	r3, [pc, #564]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097fa:	61bb      	str	r3, [r7, #24]
      break;
 80097fc:	e10e      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80097fe:	4b8d      	ldr	r3, [pc, #564]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009800:	61bb      	str	r3, [r7, #24]
      break;
 8009802:	e10b      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009804:	4b8c      	ldr	r3, [pc, #560]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009806:	61bb      	str	r3, [r7, #24]
      break;
 8009808:	e108      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800980a:	4b88      	ldr	r3, [pc, #544]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009814:	4b85      	ldr	r3, [pc, #532]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009818:	091b      	lsrs	r3, r3, #4
 800981a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800981e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009820:	4b82      	ldr	r3, [pc, #520]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800982a:	4b80      	ldr	r3, [pc, #512]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	08db      	lsrs	r3, r3, #3
 8009830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	fb02 f303 	mul.w	r3, r2, r3
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009842:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 80e1 	beq.w	8009a10 <HAL_RCC_GetSysClockFreq+0x2b8>
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b02      	cmp	r3, #2
 8009852:	f000 8083 	beq.w	800995c <HAL_RCC_GetSysClockFreq+0x204>
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b02      	cmp	r3, #2
 800985a:	f200 80a1 	bhi.w	80099a0 <HAL_RCC_GetSysClockFreq+0x248>
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d003      	beq.n	800986c <HAL_RCC_GetSysClockFreq+0x114>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d056      	beq.n	8009918 <HAL_RCC_GetSysClockFreq+0x1c0>
 800986a:	e099      	b.n	80099a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800986c:	4b6f      	ldr	r3, [pc, #444]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d02d      	beq.n	80098d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009878:	4b6c      	ldr	r3, [pc, #432]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	08db      	lsrs	r3, r3, #3
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	4a6b      	ldr	r2, [pc, #428]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009884:	fa22 f303 	lsr.w	r3, r2, r3
 8009888:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a2:	4b62      	ldr	r3, [pc, #392]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80098d2:	e087      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a40 <HAL_RCC_GetSysClockFreq+0x2e8>
 80098e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e6:	4b51      	ldr	r3, [pc, #324]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80098fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009916:	e065      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009922:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992a:	4b40      	ldr	r3, [pc, #256]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993a:	ed97 6a02 	vldr	s12, [r7, #8]
 800993e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800994e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800995a:	e043      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009966:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a48 <HAL_RCC_GetSysClockFreq+0x2f0>
 800996a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996e:	4b2f      	ldr	r3, [pc, #188]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009982:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800999e:	e021      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b2:	4b1e      	ldr	r3, [pc, #120]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80099e4:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	0a5b      	lsrs	r3, r3, #9
 80099ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ee:	3301      	adds	r3, #1
 80099f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	ee07 3a90 	vmov	s15, r3
 80099f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a08:	ee17 3a90 	vmov	r3, s15
 8009a0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a0e:	e005      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61bb      	str	r3, [r7, #24]
      break;
 8009a14:	e002      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a16:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a18:	61bb      	str	r3, [r7, #24]
      break;
 8009a1a:	bf00      	nop
  }

  return sysclockfreq;
 8009a1c:	69bb      	ldr	r3, [r7, #24]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3724      	adds	r7, #36	; 0x24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	03d09000 	.word	0x03d09000
 8009a34:	003d0900 	.word	0x003d0900
 8009a38:	017d7840 	.word	0x017d7840
 8009a3c:	46000000 	.word	0x46000000
 8009a40:	4c742400 	.word	0x4c742400
 8009a44:	4a742400 	.word	0x4a742400
 8009a48:	4bbebc20 	.word	0x4bbebc20

08009a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a52:	f7ff fe81 	bl	8009758 <HAL_RCC_GetSysClockFreq>
 8009a56:	4602      	mov	r2, r0
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	0a1b      	lsrs	r3, r3, #8
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	490f      	ldr	r1, [pc, #60]	; (8009aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a64:	5ccb      	ldrb	r3, [r1, r3]
 8009a66:	f003 031f 	and.w	r3, r3, #31
 8009a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	f003 030f 	and.w	r3, r3, #15
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a7a:	5cd3      	ldrb	r3, [r2, r3]
 8009a7c:	f003 031f 	and.w	r3, r3, #31
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	fa22 f303 	lsr.w	r3, r2, r3
 8009a86:	4a07      	ldr	r2, [pc, #28]	; (8009aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a8a:	4a07      	ldr	r2, [pc, #28]	; (8009aa8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a90:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a92:	681b      	ldr	r3, [r3, #0]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	58024400 	.word	0x58024400
 8009aa0:	08015f00 	.word	0x08015f00
 8009aa4:	24000090 	.word	0x24000090
 8009aa8:	2400008c 	.word	0x2400008c

08009aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ab0:	f7ff ffcc 	bl	8009a4c <HAL_RCC_GetHCLKFreq>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	091b      	lsrs	r3, r3, #4
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	4904      	ldr	r1, [pc, #16]	; (8009ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ac2:	5ccb      	ldrb	r3, [r1, r3]
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	08015f00 	.word	0x08015f00

08009ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009adc:	f7ff ffb6 	bl	8009a4c <HAL_RCC_GetHCLKFreq>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	4b06      	ldr	r3, [pc, #24]	; (8009afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	0a1b      	lsrs	r3, r3, #8
 8009ae8:	f003 0307 	and.w	r3, r3, #7
 8009aec:	4904      	ldr	r1, [pc, #16]	; (8009b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009aee:	5ccb      	ldrb	r3, [r1, r3]
 8009af0:	f003 031f 	and.w	r3, r3, #31
 8009af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	58024400 	.word	0x58024400
 8009b00:	08015f00 	.word	0x08015f00

08009b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	223f      	movs	r2, #63	; 0x3f
 8009b12:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b14:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0207 	and.w	r2, r3, #7
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009b20:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009b2c:	4b14      	ldr	r3, [pc, #80]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	f003 020f 	and.w	r2, r3, #15
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009b38:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b5c:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <HAL_RCC_GetClockConfig+0x7c>)
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b68:	4b06      	ldr	r3, [pc, #24]	; (8009b84 <HAL_RCC_GetClockConfig+0x80>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 020f 	and.w	r2, r3, #15
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	58024400 	.word	0x58024400
 8009b84:	52002000 	.word	0x52002000

08009b88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b8c:	b0ca      	sub	sp, #296	; 0x128
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009bac:	2500      	movs	r5, #0
 8009bae:	ea54 0305 	orrs.w	r3, r4, r5
 8009bb2:	d049      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bbe:	d02f      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bc4:	d828      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bca:	d01a      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bd0:	d822      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bda:	d007      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009bdc:	e01c      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bde:	4bb8      	ldr	r3, [pc, #736]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4ab7      	ldr	r2, [pc, #732]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bea:	e01a      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	2102      	movs	r1, #2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f002 fb61 	bl	800c2bc <RCCEx_PLL2_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c00:	e00f      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c06:	3328      	adds	r3, #40	; 0x28
 8009c08:	2102      	movs	r1, #2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f002 fc08 	bl	800c420 <RCCEx_PLL3_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c16:	e004      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c1e:	e000      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10a      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c2a:	4ba5      	ldr	r3, [pc, #660]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c38:	4aa1      	ldr	r2, [pc, #644]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c3a:	430b      	orrs	r3, r1
 8009c3c:	6513      	str	r3, [r2, #80]	; 0x50
 8009c3e:	e003      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009c54:	f04f 0900 	mov.w	r9, #0
 8009c58:	ea58 0309 	orrs.w	r3, r8, r9
 8009c5c:	d047      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d82a      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c85 	.word	0x08009c85
 8009c74:	08009c93 	.word	0x08009c93
 8009c78:	08009ca9 	.word	0x08009ca9
 8009c7c:	08009cc7 	.word	0x08009cc7
 8009c80:	08009cc7 	.word	0x08009cc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c84:	4b8e      	ldr	r3, [pc, #568]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4a8d      	ldr	r2, [pc, #564]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c90:	e01a      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	3308      	adds	r3, #8
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f002 fb0e 	bl	800c2bc <RCCEx_PLL2_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ca6:	e00f      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cac:	3328      	adds	r3, #40	; 0x28
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f002 fbb5 	bl	800c420 <RCCEx_PLL3_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cbc:	e004      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cc4:	e000      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cd0:	4b7b      	ldr	r3, [pc, #492]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd4:	f023 0107 	bic.w	r1, r3, #7
 8009cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	4a78      	ldr	r2, [pc, #480]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	6513      	str	r3, [r2, #80]	; 0x50
 8009ce4:	e003      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009cfa:	f04f 0b00 	mov.w	fp, #0
 8009cfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d02:	d04c      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0e:	d030      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d14:	d829      	bhi.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d16:	2bc0      	cmp	r3, #192	; 0xc0
 8009d18:	d02d      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8009d1c:	d825      	bhi.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d1e:	2b80      	cmp	r3, #128	; 0x80
 8009d20:	d018      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009d22:	2b80      	cmp	r3, #128	; 0x80
 8009d24:	d821      	bhi.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d2a:	2b40      	cmp	r3, #64	; 0x40
 8009d2c:	d007      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d2e:	e01c      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d30:	4b63      	ldr	r3, [pc, #396]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	4a62      	ldr	r2, [pc, #392]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d3c:	e01c      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d42:	3308      	adds	r3, #8
 8009d44:	2100      	movs	r1, #0
 8009d46:	4618      	mov	r0, r3
 8009d48:	f002 fab8 	bl	800c2bc <RCCEx_PLL2_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d52:	e011      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d58:	3328      	adds	r3, #40	; 0x28
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f002 fb5f 	bl	800c420 <RCCEx_PLL3_Config>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d68:	e006      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d70:	e002      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d72:	bf00      	nop
 8009d74:	e000      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009d80:	4b4f      	ldr	r3, [pc, #316]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d84:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8e:	4a4c      	ldr	r2, [pc, #304]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d90:	430b      	orrs	r3, r1
 8009d92:	6513      	str	r3, [r2, #80]	; 0x50
 8009d94:	e003      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009daa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009dae:	2300      	movs	r3, #0
 8009db0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009db4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009db8:	460b      	mov	r3, r1
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	d053      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dca:	d035      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dd0:	d82e      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dd6:	d031      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009dd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ddc:	d828      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de2:	d01a      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de8:	d822      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009df2:	d007      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009df4:	e01c      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df6:	4b32      	ldr	r3, [pc, #200]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	4a31      	ldr	r2, [pc, #196]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e02:	e01c      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	3308      	adds	r3, #8
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f002 fa55 	bl	800c2bc <RCCEx_PLL2_Config>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e18:	e011      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1e:	3328      	adds	r3, #40	; 0x28
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f002 fafc 	bl	800c420 <RCCEx_PLL3_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e2e:	e006      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e36:	e002      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e38:	bf00      	nop
 8009e3a:	e000      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10b      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e46:	4b1e      	ldr	r3, [pc, #120]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e56:	4a1a      	ldr	r2, [pc, #104]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e76:	2300      	movs	r3, #0
 8009e78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009e80:	460b      	mov	r3, r1
 8009e82:	4313      	orrs	r3, r2
 8009e84:	d056      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e92:	d038      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e98:	d831      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e9e:	d034      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ea4:	d82b      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eaa:	d01d      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb0:	d825      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009eb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eba:	d00a      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009ebc:	e01f      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ebe:	bf00      	nop
 8009ec0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec4:	4ba2      	ldr	r3, [pc, #648]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	4aa1      	ldr	r2, [pc, #644]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ed0:	e01c      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f002 f9ee 	bl	800c2bc <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ee6:	e011      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eec:	3328      	adds	r3, #40	; 0x28
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 fa95 	bl	800c420 <RCCEx_PLL3_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009efc:	e006      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10b      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f14:	4b8e      	ldr	r3, [pc, #568]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f24:	4a8a      	ldr	r2, [pc, #552]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f26:	430b      	orrs	r3, r1
 8009f28:	6593      	str	r3, [r2, #88]	; 0x58
 8009f2a:	e003      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f44:	2300      	movs	r3, #0
 8009f46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4313      	orrs	r3, r2
 8009f52:	d03a      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5a:	2b30      	cmp	r3, #48	; 0x30
 8009f5c:	d01f      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f5e:	2b30      	cmp	r3, #48	; 0x30
 8009f60:	d819      	bhi.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d00c      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	d815      	bhi.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d019      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d111      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f72:	4b77      	ldr	r3, [pc, #476]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	4a76      	ldr	r2, [pc, #472]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f7e:	e011      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f84:	3308      	adds	r3, #8
 8009f86:	2102      	movs	r1, #2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f002 f997 	bl	800c2bc <RCCEx_PLL2_Config>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f94:	e006      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f9c:	e002      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f9e:	bf00      	nop
 8009fa0:	e000      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fac:	4b68      	ldr	r3, [pc, #416]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fba:	4a65      	ldr	r2, [pc, #404]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fc0:	e003      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009fe0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	d051      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ff4:	d035      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ffa:	d82e      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ffc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a000:	d031      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a002:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a006:	d828      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a00c:	d01a      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a00e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a012:	d822      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a01c:	d007      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a01e:	e01c      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a020:	4b4b      	ldr	r3, [pc, #300]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a024:	4a4a      	ldr	r2, [pc, #296]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a02c:	e01c      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a032:	3308      	adds	r3, #8
 800a034:	2100      	movs	r1, #0
 800a036:	4618      	mov	r0, r3
 800a038:	f002 f940 	bl	800c2bc <RCCEx_PLL2_Config>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a042:	e011      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a048:	3328      	adds	r3, #40	; 0x28
 800a04a:	2100      	movs	r1, #0
 800a04c:	4618      	mov	r0, r3
 800a04e:	f002 f9e7 	bl	800c420 <RCCEx_PLL3_Config>
 800a052:	4603      	mov	r3, r0
 800a054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a058:	e006      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a060:	e002      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a062:	bf00      	nop
 800a064:	e000      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a066:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a070:	4b37      	ldr	r3, [pc, #220]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a074:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07e:	4a34      	ldr	r2, [pc, #208]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a080:	430b      	orrs	r3, r1
 800a082:	6513      	str	r3, [r2, #80]	; 0x50
 800a084:	e003      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a09a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	d056      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0b8:	d033      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a0ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0be:	d82c      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0c4:	d02f      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a0c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0ca:	d826      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0d0:	d02b      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a0d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0d6:	d820      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0dc:	d012      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e2:	d81a      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d022      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ec:	d115      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f002 f8e0 	bl	800c2bc <RCCEx_PLL2_Config>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a102:	e015      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a108:	3328      	adds	r3, #40	; 0x28
 800a10a:	2101      	movs	r1, #1
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 f987 	bl	800c420 <RCCEx_PLL3_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a118:	e00a      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a120:	e006      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a122:	bf00      	nop
 800a124:	e004      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a126:	bf00      	nop
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a12a:	bf00      	nop
 800a12c:	e000      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a12e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10d      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a146:	4a02      	ldr	r2, [pc, #8]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a148:	430b      	orrs	r3, r1
 800a14a:	6513      	str	r3, [r2, #80]	; 0x50
 800a14c:	e006      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a14e:	bf00      	nop
 800a150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a16c:	2300      	movs	r3, #0
 800a16e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a172:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a176:	460b      	mov	r3, r1
 800a178:	4313      	orrs	r3, r2
 800a17a:	d055      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a188:	d033      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a18a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a18e:	d82c      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a194:	d02f      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19a:	d826      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a19c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1a0:	d02b      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a1a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1a6:	d820      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ac:	d012      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a1ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1b2:	d81a      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d022      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a1b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1bc:	d115      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f002 f878 	bl	800c2bc <RCCEx_PLL2_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1d2:	e015      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d8:	3328      	adds	r3, #40	; 0x28
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f002 f91f 	bl	800c420 <RCCEx_PLL3_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1e8:	e00a      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1f0:	e006      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1f2:	bf00      	nop
 800a1f4:	e004      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1f6:	bf00      	nop
 800a1f8:	e002      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1fa:	bf00      	nop
 800a1fc:	e000      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10b      	bne.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a208:	4ba3      	ldr	r3, [pc, #652]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a218:	4a9f      	ldr	r2, [pc, #636]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a21a:	430b      	orrs	r3, r1
 800a21c:	6593      	str	r3, [r2, #88]	; 0x58
 800a21e:	e003      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a238:	2300      	movs	r3, #0
 800a23a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a23e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a242:	460b      	mov	r3, r1
 800a244:	4313      	orrs	r3, r2
 800a246:	d037      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a252:	d00e      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a258:	d816      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d018      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a25e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a262:	d111      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a264:	4b8c      	ldr	r3, [pc, #560]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	4a8b      	ldr	r2, [pc, #556]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a26e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a270:	e00f      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	3308      	adds	r3, #8
 800a278:	2101      	movs	r1, #1
 800a27a:	4618      	mov	r0, r3
 800a27c:	f002 f81e 	bl	800c2bc <RCCEx_PLL2_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a286:	e004      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a28e:	e000      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10a      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a29a:	4b7f      	ldr	r3, [pc, #508]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a8:	4a7b      	ldr	r2, [pc, #492]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	6513      	str	r3, [r2, #80]	; 0x50
 800a2ae:	e003      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a2ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	d039      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d81c      	bhi.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a2e2:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a325 	.word	0x0800a325
 800a2ec:	0800a2f9 	.word	0x0800a2f9
 800a2f0:	0800a307 	.word	0x0800a307
 800a2f4:	0800a325 	.word	0x0800a325
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f8:	4b67      	ldr	r3, [pc, #412]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a66      	ldr	r2, [pc, #408]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a304:	e00f      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30a:	3308      	adds	r3, #8
 800a30c:	2102      	movs	r1, #2
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 ffd4 	bl	800c2bc <RCCEx_PLL2_Config>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a31a:	e004      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a322:	e000      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a32e:	4b5a      	ldr	r3, [pc, #360]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a332:	f023 0103 	bic.w	r1, r3, #3
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a33c:	4a56      	ldr	r2, [pc, #344]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a33e:	430b      	orrs	r3, r1
 800a340:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a342:	e003      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a35c:	2300      	movs	r3, #0
 800a35e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a362:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a366:	460b      	mov	r3, r1
 800a368:	4313      	orrs	r3, r2
 800a36a:	f000 809f 	beq.w	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a36e:	4b4b      	ldr	r3, [pc, #300]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a4a      	ldr	r2, [pc, #296]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a37a:	f7f9 f8f9 	bl	8003570 <HAL_GetTick>
 800a37e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a382:	e00b      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a384:	f7f9 f8f4 	bl	8003570 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	2b64      	cmp	r3, #100	; 0x64
 800a392:	d903      	bls.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a39a:	e005      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a39c:	4b3f      	ldr	r3, [pc, #252]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0ed      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d179      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3b0:	4b39      	ldr	r3, [pc, #228]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3bc:	4053      	eors	r3, r2
 800a3be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d015      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3c6:	4b34      	ldr	r3, [pc, #208]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3d2:	4b31      	ldr	r3, [pc, #196]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	4a30      	ldr	r2, [pc, #192]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3de:	4b2e      	ldr	r3, [pc, #184]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	4a2d      	ldr	r2, [pc, #180]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3ea:	4a2b      	ldr	r2, [pc, #172]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fe:	d118      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a400:	f7f9 f8b6 	bl	8003570 <HAL_GetTick>
 800a404:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a408:	e00d      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a40a:	f7f9 f8b1 	bl	8003570 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a414:	1ad2      	subs	r2, r2, r3
 800a416:	f241 3388 	movw	r3, #5000	; 0x1388
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d903      	bls.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a424:	e005      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a426:	4b1c      	ldr	r3, [pc, #112]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42a:	f003 0302 	and.w	r3, r3, #2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0eb      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a436:	2b00      	cmp	r3, #0
 800a438:	d129      	bne.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a44a:	d10e      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a44c:	4b12      	ldr	r3, [pc, #72]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a45c:	091a      	lsrs	r2, r3, #4
 800a45e:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a460:	4013      	ands	r3, r2
 800a462:	4a0d      	ldr	r2, [pc, #52]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a464:	430b      	orrs	r3, r1
 800a466:	6113      	str	r3, [r2, #16]
 800a468:	e005      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a46a:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a470:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a474:	6113      	str	r3, [r2, #16]
 800a476:	4b08      	ldr	r3, [pc, #32]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a478:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a486:	4a04      	ldr	r2, [pc, #16]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a488:	430b      	orrs	r3, r1
 800a48a:	6713      	str	r3, [r2, #112]	; 0x70
 800a48c:	e00e      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a48e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a492:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a496:	e009      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a498:	58024400 	.word	0x58024400
 800a49c:	58024800 	.word	0x58024800
 800a4a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f002 0301 	and.w	r3, r2, #1
 800a4b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	f000 8089 	beq.w	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d4:	2b28      	cmp	r3, #40	; 0x28
 800a4d6:	d86b      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a4d8:	a201      	add	r2, pc, #4	; (adr r2, 800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4de:	bf00      	nop
 800a4e0:	0800a5b9 	.word	0x0800a5b9
 800a4e4:	0800a5b1 	.word	0x0800a5b1
 800a4e8:	0800a5b1 	.word	0x0800a5b1
 800a4ec:	0800a5b1 	.word	0x0800a5b1
 800a4f0:	0800a5b1 	.word	0x0800a5b1
 800a4f4:	0800a5b1 	.word	0x0800a5b1
 800a4f8:	0800a5b1 	.word	0x0800a5b1
 800a4fc:	0800a5b1 	.word	0x0800a5b1
 800a500:	0800a585 	.word	0x0800a585
 800a504:	0800a5b1 	.word	0x0800a5b1
 800a508:	0800a5b1 	.word	0x0800a5b1
 800a50c:	0800a5b1 	.word	0x0800a5b1
 800a510:	0800a5b1 	.word	0x0800a5b1
 800a514:	0800a5b1 	.word	0x0800a5b1
 800a518:	0800a5b1 	.word	0x0800a5b1
 800a51c:	0800a5b1 	.word	0x0800a5b1
 800a520:	0800a59b 	.word	0x0800a59b
 800a524:	0800a5b1 	.word	0x0800a5b1
 800a528:	0800a5b1 	.word	0x0800a5b1
 800a52c:	0800a5b1 	.word	0x0800a5b1
 800a530:	0800a5b1 	.word	0x0800a5b1
 800a534:	0800a5b1 	.word	0x0800a5b1
 800a538:	0800a5b1 	.word	0x0800a5b1
 800a53c:	0800a5b1 	.word	0x0800a5b1
 800a540:	0800a5b9 	.word	0x0800a5b9
 800a544:	0800a5b1 	.word	0x0800a5b1
 800a548:	0800a5b1 	.word	0x0800a5b1
 800a54c:	0800a5b1 	.word	0x0800a5b1
 800a550:	0800a5b1 	.word	0x0800a5b1
 800a554:	0800a5b1 	.word	0x0800a5b1
 800a558:	0800a5b1 	.word	0x0800a5b1
 800a55c:	0800a5b1 	.word	0x0800a5b1
 800a560:	0800a5b9 	.word	0x0800a5b9
 800a564:	0800a5b1 	.word	0x0800a5b1
 800a568:	0800a5b1 	.word	0x0800a5b1
 800a56c:	0800a5b1 	.word	0x0800a5b1
 800a570:	0800a5b1 	.word	0x0800a5b1
 800a574:	0800a5b1 	.word	0x0800a5b1
 800a578:	0800a5b1 	.word	0x0800a5b1
 800a57c:	0800a5b1 	.word	0x0800a5b1
 800a580:	0800a5b9 	.word	0x0800a5b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a588:	3308      	adds	r3, #8
 800a58a:	2101      	movs	r1, #1
 800a58c:	4618      	mov	r0, r3
 800a58e:	f001 fe95 	bl	800c2bc <RCCEx_PLL2_Config>
 800a592:	4603      	mov	r3, r0
 800a594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a598:	e00f      	b.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59e:	3328      	adds	r3, #40	; 0x28
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 ff3c 	bl	800c420 <RCCEx_PLL3_Config>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5ae:	e004      	b.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5b6:	e000      	b.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5c2:	4bbf      	ldr	r3, [pc, #764]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d0:	4abb      	ldr	r2, [pc, #748]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	6553      	str	r3, [r2, #84]	; 0x54
 800a5d6:	e003      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f002 0302 	and.w	r3, r2, #2
 800a5ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a5f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	d041      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a606:	2b05      	cmp	r3, #5
 800a608:	d824      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a65d 	.word	0x0800a65d
 800a614:	0800a629 	.word	0x0800a629
 800a618:	0800a63f 	.word	0x0800a63f
 800a61c:	0800a65d 	.word	0x0800a65d
 800a620:	0800a65d 	.word	0x0800a65d
 800a624:	0800a65d 	.word	0x0800a65d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62c:	3308      	adds	r3, #8
 800a62e:	2101      	movs	r1, #1
 800a630:	4618      	mov	r0, r3
 800a632:	f001 fe43 	bl	800c2bc <RCCEx_PLL2_Config>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a63c:	e00f      	b.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a642:	3328      	adds	r3, #40	; 0x28
 800a644:	2101      	movs	r1, #1
 800a646:	4618      	mov	r0, r3
 800a648:	f001 feea 	bl	800c420 <RCCEx_PLL3_Config>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a652:	e004      	b.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a65a:	e000      	b.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a65c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a65e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10a      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a666:	4b96      	ldr	r3, [pc, #600]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f023 0107 	bic.w	r1, r3, #7
 800a66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a674:	4a92      	ldr	r2, [pc, #584]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a676:	430b      	orrs	r3, r1
 800a678:	6553      	str	r3, [r2, #84]	; 0x54
 800a67a:	e003      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f002 0304 	and.w	r3, r2, #4
 800a690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a694:	2300      	movs	r3, #0
 800a696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a69a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	d044      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6ac:	2b05      	cmp	r3, #5
 800a6ae:	d825      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a6b0:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b6:	bf00      	nop
 800a6b8:	0800a705 	.word	0x0800a705
 800a6bc:	0800a6d1 	.word	0x0800a6d1
 800a6c0:	0800a6e7 	.word	0x0800a6e7
 800a6c4:	0800a705 	.word	0x0800a705
 800a6c8:	0800a705 	.word	0x0800a705
 800a6cc:	0800a705 	.word	0x0800a705
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 fdef 	bl	800c2bc <RCCEx_PLL2_Config>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6e4:	e00f      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ea:	3328      	adds	r3, #40	; 0x28
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f001 fe96 	bl	800c420 <RCCEx_PLL3_Config>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6fa:	e004      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a702:	e000      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a704:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10b      	bne.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a70e:	4b6c      	ldr	r3, [pc, #432]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	f023 0107 	bic.w	r1, r3, #7
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a71e:	4a68      	ldr	r2, [pc, #416]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a720:	430b      	orrs	r3, r1
 800a722:	6593      	str	r3, [r2, #88]	; 0x58
 800a724:	e003      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a72a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	f002 0320 	and.w	r3, r2, #32
 800a73a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a73e:	2300      	movs	r3, #0
 800a740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a744:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a748:	460b      	mov	r3, r1
 800a74a:	4313      	orrs	r3, r2
 800a74c:	d055      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a75a:	d033      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a75c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a760:	d82c      	bhi.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a766:	d02f      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76c:	d826      	bhi.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a76e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a772:	d02b      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a778:	d820      	bhi.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a77a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77e:	d012      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a784:	d81a      	bhi.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d022      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a78a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a78e:	d115      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a794:	3308      	adds	r3, #8
 800a796:	2100      	movs	r1, #0
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 fd8f 	bl	800c2bc <RCCEx_PLL2_Config>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7a4:	e015      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7aa:	3328      	adds	r3, #40	; 0x28
 800a7ac:	2102      	movs	r1, #2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 fe36 	bl	800c420 <RCCEx_PLL3_Config>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7ba:	e00a      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7c2:	e006      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7c4:	bf00      	nop
 800a7c6:	e004      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7c8:	bf00      	nop
 800a7ca:	e002      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7cc:	bf00      	nop
 800a7ce:	e000      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10b      	bne.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7da:	4b39      	ldr	r3, [pc, #228]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ea:	4a35      	ldr	r2, [pc, #212]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7ec:	430b      	orrs	r3, r1
 800a7ee:	6553      	str	r3, [r2, #84]	; 0x54
 800a7f0:	e003      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a80a:	2300      	movs	r3, #0
 800a80c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a810:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a814:	460b      	mov	r3, r1
 800a816:	4313      	orrs	r3, r2
 800a818:	d058      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a822:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a826:	d033      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a828:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a82c:	d82c      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a832:	d02f      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a838:	d826      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a83a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a83e:	d02b      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a844:	d820      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a84a:	d012      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a84c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a850:	d81a      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d022      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a85a:	d115      	bne.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a860:	3308      	adds	r3, #8
 800a862:	2100      	movs	r1, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f001 fd29 	bl	800c2bc <RCCEx_PLL2_Config>
 800a86a:	4603      	mov	r3, r0
 800a86c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a870:	e015      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a876:	3328      	adds	r3, #40	; 0x28
 800a878:	2102      	movs	r1, #2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f001 fdd0 	bl	800c420 <RCCEx_PLL3_Config>
 800a880:	4603      	mov	r3, r0
 800a882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a886:	e00a      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a88e:	e006      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a890:	bf00      	nop
 800a892:	e004      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a894:	bf00      	nop
 800a896:	e002      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a898:	bf00      	nop
 800a89a:	e000      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a89c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a89e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10e      	bne.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8b6:	4a02      	ldr	r2, [pc, #8]	; (800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	6593      	str	r3, [r2, #88]	; 0x58
 800a8bc:	e006      	b.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a8be:	bf00      	nop
 800a8c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a8d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	d055      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8f8:	d033      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a8fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8fe:	d82c      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a904:	d02f      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a90a:	d826      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a90c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a910:	d02b      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a912:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a916:	d820      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a91c:	d012      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a91e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a922:	d81a      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d022      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a92c:	d115      	bne.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a932:	3308      	adds	r3, #8
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f001 fcc0 	bl	800c2bc <RCCEx_PLL2_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a942:	e015      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a948:	3328      	adds	r3, #40	; 0x28
 800a94a:	2102      	movs	r1, #2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 fd67 	bl	800c420 <RCCEx_PLL3_Config>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a958:	e00a      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a960:	e006      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a962:	bf00      	nop
 800a964:	e004      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a966:	bf00      	nop
 800a968:	e002      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a96a:	bf00      	nop
 800a96c:	e000      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10b      	bne.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a978:	4ba1      	ldr	r3, [pc, #644]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a988:	4a9d      	ldr	r2, [pc, #628]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a98a:	430b      	orrs	r3, r1
 800a98c:	6593      	str	r3, [r2, #88]	; 0x58
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f002 0308 	and.w	r3, r2, #8
 800a9a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	d01e      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c4:	d10c      	bne.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ca:	3328      	adds	r3, #40	; 0x28
 800a9cc:	2102      	movs	r1, #2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 fd26 	bl	800c420 <RCCEx_PLL3_Config>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d002      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9e0:	4b87      	ldr	r3, [pc, #540]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9f0:	4a83      	ldr	r2, [pc, #524]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f002 0310 	and.w	r3, r2, #16
 800aa02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa06:	2300      	movs	r3, #0
 800aa08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aa10:	460b      	mov	r3, r1
 800aa12:	4313      	orrs	r3, r2
 800aa14:	d01e      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa22:	d10c      	bne.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa28:	3328      	adds	r3, #40	; 0x28
 800aa2a:	2102      	movs	r1, #2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f001 fcf7 	bl	800c420 <RCCEx_PLL3_Config>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa3e:	4b70      	ldr	r3, [pc, #448]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa4e:	4a6c      	ldr	r2, [pc, #432]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa50:	430b      	orrs	r3, r1
 800aa52:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa64:	2300      	movs	r3, #0
 800aa66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4313      	orrs	r3, r2
 800aa72:	d03e      	beq.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa80:	d022      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aa82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa86:	d81b      	bhi.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d003      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aa8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa90:	d00b      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aa92:	e015      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa98:	3308      	adds	r3, #8
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 fc0d 	bl	800c2bc <RCCEx_PLL2_Config>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aaa8:	e00f      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaae:	3328      	adds	r3, #40	; 0x28
 800aab0:	2102      	movs	r1, #2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 fcb4 	bl	800c420 <RCCEx_PLL3_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aabe:	e004      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aac6:	e000      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10b      	bne.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aad2:	4b4b      	ldr	r3, [pc, #300]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aae2:	4a47      	ldr	r2, [pc, #284]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aae4:	430b      	orrs	r3, r1
 800aae6:	6593      	str	r3, [r2, #88]	; 0x58
 800aae8:	e003      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aaf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800aafe:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab00:	2300      	movs	r3, #0
 800ab02:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	d03b      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab1a:	d01f      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ab1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab20:	d818      	bhi.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ab22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab26:	d003      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab2c:	d007      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab2e:	e011      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab30:	4b33      	ldr	r3, [pc, #204]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	4a32      	ldr	r2, [pc, #200]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab3c:	e00f      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab42:	3328      	adds	r3, #40	; 0x28
 800ab44:	2101      	movs	r1, #1
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 fc6a 	bl	800c420 <RCCEx_PLL3_Config>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab52:	e004      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab5a:	e000      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab66:	4b26      	ldr	r3, [pc, #152]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab76:	4a22      	ldr	r2, [pc, #136]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	6553      	str	r3, [r2, #84]	; 0x54
 800ab7c:	e003      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ab92:	673b      	str	r3, [r7, #112]	; 0x70
 800ab94:	2300      	movs	r3, #0
 800ab96:	677b      	str	r3, [r7, #116]	; 0x74
 800ab98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	d034      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800abac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abb0:	d007      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800abb2:	e011      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb4:	4b12      	ldr	r3, [pc, #72]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	4a11      	ldr	r2, [pc, #68]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abc0:	e00e      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc6:	3308      	adds	r3, #8
 800abc8:	2102      	movs	r1, #2
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 fb76 	bl	800c2bc <RCCEx_PLL2_Config>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abd6:	e003      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10d      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800abe8:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf6:	4a02      	ldr	r2, [pc, #8]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abf8:	430b      	orrs	r3, r1
 800abfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abfc:	e006      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800abfe:	bf00      	nop
 800ac00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ac18:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ac22:	460b      	mov	r3, r1
 800ac24:	4313      	orrs	r3, r2
 800ac26:	d00c      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac2c:	3328      	adds	r3, #40	; 0x28
 800ac2e:	2102      	movs	r1, #2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f001 fbf5 	bl	800c420 <RCCEx_PLL3_Config>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ac4e:	663b      	str	r3, [r7, #96]	; 0x60
 800ac50:	2300      	movs	r3, #0
 800ac52:	667b      	str	r3, [r7, #100]	; 0x64
 800ac54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	d038      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac6a:	d018      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ac6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac70:	d811      	bhi.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac76:	d014      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ac78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac7c:	d80b      	bhi.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d011      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ac82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac86:	d106      	bne.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac88:	4bc3      	ldr	r3, [pc, #780]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	4ac2      	ldr	r2, [pc, #776]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ac94:	e008      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac9c:	e004      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac9e:	bf00      	nop
 800aca0:	e002      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10b      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acb0:	4bb9      	ldr	r3, [pc, #740]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acc0:	4ab5      	ldr	r2, [pc, #724]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc2:	430b      	orrs	r3, r1
 800acc4:	6553      	str	r3, [r2, #84]	; 0x54
 800acc6:	e003      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800accc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800acdc:	65bb      	str	r3, [r7, #88]	; 0x58
 800acde:	2300      	movs	r3, #0
 800ace0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ace2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ace6:	460b      	mov	r3, r1
 800ace8:	4313      	orrs	r3, r2
 800acea:	d009      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800acec:	4baa      	ldr	r3, [pc, #680]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800acf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acfa:	4aa7      	ldr	r2, [pc, #668]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acfc:	430b      	orrs	r3, r1
 800acfe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ad00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ad0c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad0e:	2300      	movs	r3, #0
 800ad10:	657b      	str	r3, [r7, #84]	; 0x54
 800ad12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ad16:	460b      	mov	r3, r1
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	d00a      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad1c:	4b9e      	ldr	r3, [pc, #632]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ad24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad2c:	4a9a      	ldr	r2, [pc, #616]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad2e:	430b      	orrs	r3, r1
 800ad30:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ad3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad40:	2300      	movs	r3, #0
 800ad42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	d009      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad4e:	4b92      	ldr	r3, [pc, #584]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad52:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5c:	4a8e      	ldr	r2, [pc, #568]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad5e:	430b      	orrs	r3, r1
 800ad60:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ad6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad70:	2300      	movs	r3, #0
 800ad72:	647b      	str	r3, [r7, #68]	; 0x44
 800ad74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	d00e      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad7e:	4b86      	ldr	r3, [pc, #536]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	4a85      	ldr	r2, [pc, #532]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad88:	6113      	str	r3, [r2, #16]
 800ad8a:	4b83      	ldr	r3, [pc, #524]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad8c:	6919      	ldr	r1, [r3, #16]
 800ad8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad96:	4a80      	ldr	r2, [pc, #512]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ada8:	63bb      	str	r3, [r7, #56]	; 0x38
 800adaa:	2300      	movs	r3, #0
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800adb2:	460b      	mov	r3, r1
 800adb4:	4313      	orrs	r3, r2
 800adb6:	d009      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adb8:	4b77      	ldr	r3, [pc, #476]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adbc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	4a74      	ldr	r2, [pc, #464]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc8:	430b      	orrs	r3, r1
 800adca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800add8:	633b      	str	r3, [r7, #48]	; 0x30
 800adda:	2300      	movs	r3, #0
 800addc:	637b      	str	r3, [r7, #52]	; 0x34
 800adde:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ade2:	460b      	mov	r3, r1
 800ade4:	4313      	orrs	r3, r2
 800ade6:	d00a      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ade8:	4b6b      	ldr	r3, [pc, #428]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800adf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adf8:	4a67      	ldr	r2, [pc, #412]	; (800af98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adfa:	430b      	orrs	r3, r1
 800adfc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800adfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	2100      	movs	r1, #0
 800ae08:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ae14:	460b      	mov	r3, r1
 800ae16:	4313      	orrs	r3, r2
 800ae18:	d011      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1e:	3308      	adds	r3, #8
 800ae20:	2100      	movs	r1, #0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 fa4a 	bl	800c2bc <RCCEx_PLL2_Config>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	2100      	movs	r1, #0
 800ae48:	6239      	str	r1, [r7, #32]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ae50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d011      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5e:	3308      	adds	r3, #8
 800ae60:	2101      	movs	r1, #1
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 fa2a 	bl	800c2bc <RCCEx_PLL2_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	2100      	movs	r1, #0
 800ae88:	61b9      	str	r1, [r7, #24]
 800ae8a:	f003 0304 	and.w	r3, r3, #4
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae94:	460b      	mov	r3, r1
 800ae96:	4313      	orrs	r3, r2
 800ae98:	d011      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	3308      	adds	r3, #8
 800aea0:	2102      	movs	r1, #2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 fa0a 	bl	800c2bc <RCCEx_PLL2_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aeae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	2100      	movs	r1, #0
 800aec8:	6139      	str	r1, [r7, #16]
 800aeca:	f003 0308 	and.w	r3, r3, #8
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aed4:	460b      	mov	r3, r1
 800aed6:	4313      	orrs	r3, r2
 800aed8:	d011      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aede:	3328      	adds	r3, #40	; 0x28
 800aee0:	2100      	movs	r1, #0
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 fa9c 	bl	800c420 <RCCEx_PLL3_Config>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aeee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aefa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	2100      	movs	r1, #0
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	f003 0310 	and.w	r3, r3, #16
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af14:	460b      	mov	r3, r1
 800af16:	4313      	orrs	r3, r2
 800af18:	d011      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1e:	3328      	adds	r3, #40	; 0x28
 800af20:	2101      	movs	r1, #1
 800af22:	4618      	mov	r0, r3
 800af24:	f001 fa7c 	bl	800c420 <RCCEx_PLL3_Config>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	2100      	movs	r1, #0
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	f003 0320 	and.w	r3, r3, #32
 800af4e:	607b      	str	r3, [r7, #4]
 800af50:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af54:	460b      	mov	r3, r1
 800af56:	4313      	orrs	r3, r2
 800af58:	d011      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5e:	3328      	adds	r3, #40	; 0x28
 800af60:	2102      	movs	r1, #2
 800af62:	4618      	mov	r0, r3
 800af64:	f001 fa5c 	bl	800c420 <RCCEx_PLL3_Config>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800af7e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	e000      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800af92:	46bd      	mov	sp, r7
 800af94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af98:	58024400 	.word	0x58024400

0800af9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b090      	sub	sp, #64	; 0x40
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800afa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afaa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800afae:	430b      	orrs	r3, r1
 800afb0:	f040 8094 	bne.w	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afb4:	4b9e      	ldr	r3, [pc, #632]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	f200 8087 	bhi.w	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afe1 	.word	0x0800afe1
 800afd0:	0800b009 	.word	0x0800b009
 800afd4:	0800b031 	.word	0x0800b031
 800afd8:	0800b0cd 	.word	0x0800b0cd
 800afdc:	0800b059 	.word	0x0800b059
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afe0:	4b93      	ldr	r3, [pc, #588]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afec:	d108      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aff2:	4618      	mov	r0, r3
 800aff4:	f001 f810 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800affc:	f000 bd45 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b004:	f000 bd41 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b008:	4b89      	ldr	r3, [pc, #548]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b014:	d108      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b016:	f107 0318 	add.w	r3, r7, #24
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fd54 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b024:	f000 bd31 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02c:	f000 bd2d 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b030:	4b7f      	ldr	r3, [pc, #508]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b03c:	d108      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fe94 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b04c:	f000 bd1d 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b054:	f000 bd19 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b058:	4b75      	ldr	r3, [pc, #468]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b05a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b060:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b062:	4b73      	ldr	r3, [pc, #460]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d10c      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	2b00      	cmp	r3, #0
 800b072:	d109      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b074:	4b6e      	ldr	r3, [pc, #440]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	08db      	lsrs	r3, r3, #3
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	4a6d      	ldr	r2, [pc, #436]	; (800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b086:	e01f      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b088:	4b69      	ldr	r3, [pc, #420]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b094:	d106      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b09c:	d102      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b09e:	4b66      	ldr	r3, [pc, #408]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a2:	e011      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0a4:	4b62      	ldr	r3, [pc, #392]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b0:	d106      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0b8:	d102      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0ba:	4b60      	ldr	r3, [pc, #384]	; (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0be:	e003      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0c4:	f000 bce1 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0c8:	f000 bcdf 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0cc:	4b5c      	ldr	r3, [pc, #368]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d0:	f000 bcdb 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d8:	f000 bcd7 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0e0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	f040 80ad 	bne.w	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b0ea:	4b51      	ldr	r3, [pc, #324]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b0f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fa:	d056      	beq.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b102:	f200 8090 	bhi.w	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	2bc0      	cmp	r3, #192	; 0xc0
 800b10a:	f000 8088 	beq.w	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	2bc0      	cmp	r3, #192	; 0xc0
 800b112:	f200 8088 	bhi.w	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	2b80      	cmp	r3, #128	; 0x80
 800b11a:	d032      	beq.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	2b80      	cmp	r3, #128	; 0x80
 800b120:	f200 8081 	bhi.w	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	d014      	beq.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b130:	e079      	b.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b132:	4b3f      	ldr	r3, [pc, #252]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b13a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b13e:	d108      	bne.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b144:	4618      	mov	r0, r3
 800b146:	f000 ff67 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14e:	f000 bc9c 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b156:	f000 bc98 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b15a:	4b35      	ldr	r3, [pc, #212]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b166:	d108      	bne.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b168:	f107 0318 	add.w	r3, r7, #24
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 fcab 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b176:	f000 bc88 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17e:	f000 bc84 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b182:	4b2b      	ldr	r3, [pc, #172]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b18a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b18e:	d108      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b190:	f107 030c 	add.w	r3, r7, #12
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fdeb 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b19e:	f000 bc74 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1a6:	f000 bc70 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1aa:	4b21      	ldr	r3, [pc, #132]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1b4:	4b1e      	ldr	r3, [pc, #120]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d10c      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d109      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1c6:	4b1a      	ldr	r3, [pc, #104]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	08db      	lsrs	r3, r3, #3
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	4a18      	ldr	r2, [pc, #96]	; (800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d8:	e01f      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1da:	4b15      	ldr	r3, [pc, #84]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e6:	d106      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ee:	d102      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1f0:	4b11      	ldr	r3, [pc, #68]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f4:	e011      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1f6:	4b0e      	ldr	r3, [pc, #56]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b202:	d106      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b20a:	d102      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b20c:	4b0b      	ldr	r3, [pc, #44]	; (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b210:	e003      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b216:	f000 bc38 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b21a:	f000 bc36 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b21e:	4b08      	ldr	r3, [pc, #32]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b222:	f000 bc32 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b22a:	f000 bc2e 	b.w	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b22e:	bf00      	nop
 800b230:	58024400 	.word	0x58024400
 800b234:	03d09000 	.word	0x03d09000
 800b238:	003d0900 	.word	0x003d0900
 800b23c:	017d7840 	.word	0x017d7840
 800b240:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b244:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b248:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b24c:	430b      	orrs	r3, r1
 800b24e:	f040 809c 	bne.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b252:	4b9e      	ldr	r3, [pc, #632]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b256:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b25a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b262:	d054      	beq.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b26a:	f200 808b 	bhi.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b274:	f000 8083 	beq.w	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b27e:	f200 8081 	bhi.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b288:	d02f      	beq.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b290:	d878      	bhi.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b29e:	d012      	beq.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b2a0:	e070      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2a2:	4b8a      	ldr	r3, [pc, #552]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2ae:	d107      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 feaf 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2be:	e3e4      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c4:	e3e1      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2c6:	4b81      	ldr	r3, [pc, #516]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2d2:	d107      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d4:	f107 0318 	add.w	r3, r7, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fbf5 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e2:	e3d2      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e8:	e3cf      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ea:	4b78      	ldr	r3, [pc, #480]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2f6:	d107      	bne.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2f8:	f107 030c 	add.w	r3, r7, #12
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fd37 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b306:	e3c0      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b30c:	e3bd      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b30e:	4b6f      	ldr	r3, [pc, #444]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b312:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b316:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b318:	4b6c      	ldr	r3, [pc, #432]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0304 	and.w	r3, r3, #4
 800b320:	2b04      	cmp	r3, #4
 800b322:	d10c      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b32a:	4b68      	ldr	r3, [pc, #416]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	4a66      	ldr	r2, [pc, #408]	; (800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b33c:	e01e      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b33e:	4b63      	ldr	r3, [pc, #396]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b34a:	d106      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b352:	d102      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b354:	4b5f      	ldr	r3, [pc, #380]	; (800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b358:	e010      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b35a:	4b5c      	ldr	r3, [pc, #368]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b366:	d106      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b36e:	d102      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b370:	4b59      	ldr	r3, [pc, #356]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b374:	e002      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b37a:	e386      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b37c:	e385      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b37e:	4b57      	ldr	r3, [pc, #348]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b382:	e382      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b388:	e37f      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b38a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b38e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b392:	430b      	orrs	r3, r1
 800b394:	f040 80a7 	bne.w	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b398:	4b4c      	ldr	r3, [pc, #304]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b3a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3a8:	d055      	beq.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3b0:	f200 8096 	bhi.w	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ba:	f000 8084 	beq.w	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3c4:	f200 808c 	bhi.w	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ce:	d030      	beq.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3d6:	f200 8083 	bhi.w	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3e6:	d012      	beq.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b3e8:	e07a      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ea:	4b38      	ldr	r3, [pc, #224]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3f6:	d107      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fe0b 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b406:	e340      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b40c:	e33d      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b40e:	4b2f      	ldr	r3, [pc, #188]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b41a:	d107      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41c:	f107 0318 	add.w	r3, r7, #24
 800b420:	4618      	mov	r0, r3
 800b422:	f000 fb51 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b42a:	e32e      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b430:	e32b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b432:	4b26      	ldr	r3, [pc, #152]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b43a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b43e:	d107      	bne.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b440:	f107 030c 	add.w	r3, r7, #12
 800b444:	4618      	mov	r0, r3
 800b446:	f000 fc93 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b44e:	e31c      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b454:	e319      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b456:	4b1d      	ldr	r3, [pc, #116]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b45e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b460:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d10c      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d109      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b472:	4b16      	ldr	r3, [pc, #88]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	08db      	lsrs	r3, r3, #3
 800b478:	f003 0303 	and.w	r3, r3, #3
 800b47c:	4a14      	ldr	r2, [pc, #80]	; (800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b47e:	fa22 f303 	lsr.w	r3, r2, r3
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b484:	e01e      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b486:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b492:	d106      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b49a:	d102      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b49c:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4a0:	e010      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ae:	d106      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b6:	d102      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4b8:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4bc:	e002      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4c2:	e2e2      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4c4:	e2e1      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ca:	e2de      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4cc:	58024400 	.word	0x58024400
 800b4d0:	03d09000 	.word	0x03d09000
 800b4d4:	003d0900 	.word	0x003d0900
 800b4d8:	017d7840 	.word	0x017d7840
 800b4dc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e4:	e2d1      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b4e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ea:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b4ee:	430b      	orrs	r3, r1
 800b4f0:	f040 809c 	bne.w	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b4f4:	4b93      	ldr	r3, [pc, #588]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b4fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b504:	d054      	beq.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b50c:	f200 808b 	bhi.w	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b516:	f000 8083 	beq.w	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b520:	f200 8081 	bhi.w	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52a:	d02f      	beq.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b532:	d878      	bhi.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	2b00      	cmp	r3, #0
 800b538:	d004      	beq.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b540:	d012      	beq.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b542:	e070      	b.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b544:	4b7f      	ldr	r3, [pc, #508]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b54c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b550:	d107      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b556:	4618      	mov	r0, r3
 800b558:	f000 fd5e 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b560:	e293      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b566:	e290      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b568:	4b76      	ldr	r3, [pc, #472]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b574:	d107      	bne.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b576:	f107 0318 	add.w	r3, r7, #24
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 faa4 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b584:	e281      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b58a:	e27e      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b58c:	4b6d      	ldr	r3, [pc, #436]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b598:	d107      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b59a:	f107 030c 	add.w	r3, r7, #12
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fbe6 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a8:	e26f      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ae:	e26c      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5b0:	4b64      	ldr	r3, [pc, #400]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5ba:	4b62      	ldr	r3, [pc, #392]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0304 	and.w	r3, r3, #4
 800b5c2:	2b04      	cmp	r3, #4
 800b5c4:	d10c      	bne.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d109      	bne.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5cc:	4b5d      	ldr	r3, [pc, #372]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	08db      	lsrs	r3, r3, #3
 800b5d2:	f003 0303 	and.w	r3, r3, #3
 800b5d6:	4a5c      	ldr	r2, [pc, #368]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5de:	e01e      	b.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5e0:	4b58      	ldr	r3, [pc, #352]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ec:	d106      	bne.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5f4:	d102      	bne.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5f6:	4b55      	ldr	r3, [pc, #340]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5fa:	e010      	b.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5fc:	4b51      	ldr	r3, [pc, #324]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b608:	d106      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b610:	d102      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b612:	4b4f      	ldr	r3, [pc, #316]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b616:	e002      	b.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b61c:	e235      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b61e:	e234      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b620:	4b4c      	ldr	r3, [pc, #304]	; (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b624:	e231      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b62a:	e22e      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b62c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b630:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b634:	430b      	orrs	r3, r1
 800b636:	f040 808f 	bne.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b63a:	4b42      	ldr	r3, [pc, #264]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b642:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b64a:	d06b      	beq.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b652:	d874      	bhi.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b65a:	d056      	beq.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b662:	d86c      	bhi.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b66a:	d03b      	beq.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b672:	d864      	bhi.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b67a:	d021      	beq.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b682:	d85c      	bhi.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b690:	d004      	beq.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b692:	e054      	b.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b694:	f7fe fa0a 	bl	8009aac <HAL_RCC_GetPCLK1Freq>
 800b698:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b69a:	e1f6      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b69c:	4b29      	ldr	r3, [pc, #164]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6a8:	d107      	bne.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6aa:	f107 0318 	add.w	r3, r7, #24
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fa0a 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b8:	e1e7      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6be:	e1e4      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6c0:	4b20      	ldr	r3, [pc, #128]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6cc:	d107      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ce:	f107 030c 	add.w	r3, r7, #12
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fb4c 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6dc:	e1d5      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e2:	e1d2      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6e4:	4b17      	ldr	r3, [pc, #92]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	d109      	bne.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6f0:	4b14      	ldr	r3, [pc, #80]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	08db      	lsrs	r3, r3, #3
 800b6f6:	f003 0303 	and.w	r3, r3, #3
 800b6fa:	4a13      	ldr	r2, [pc, #76]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b6fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b702:	e1c2      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b708:	e1bf      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b70a:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b716:	d102      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b71c:	e1b5      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b722:	e1b2      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b72c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b730:	d102      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b732:	4b07      	ldr	r3, [pc, #28]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b736:	e1a8      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b73c:	e1a5      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b742:	e1a2      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b744:	58024400 	.word	0x58024400
 800b748:	03d09000 	.word	0x03d09000
 800b74c:	003d0900 	.word	0x003d0900
 800b750:	017d7840 	.word	0x017d7840
 800b754:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b75c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b760:	430b      	orrs	r3, r1
 800b762:	d173      	bne.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b764:	4b9c      	ldr	r3, [pc, #624]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b76c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b774:	d02f      	beq.n	800b7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b77c:	d863      	bhi.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	2b00      	cmp	r3, #0
 800b782:	d004      	beq.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b78a:	d012      	beq.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b78c:	e05b      	b.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b78e:	4b92      	ldr	r3, [pc, #584]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b79a:	d107      	bne.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b79c:	f107 0318 	add.w	r3, r7, #24
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 f991 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7aa:	e16e      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b0:	e16b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7b2:	4b89      	ldr	r3, [pc, #548]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7be:	d107      	bne.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7c0:	f107 030c 	add.w	r3, r7, #12
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 fad3 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ce:	e15c      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d4:	e159      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7d6:	4b80      	ldr	r3, [pc, #512]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7e0:	4b7d      	ldr	r3, [pc, #500]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d10c      	bne.n	800b806 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7f2:	4b79      	ldr	r3, [pc, #484]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	08db      	lsrs	r3, r3, #3
 800b7f8:	f003 0303 	and.w	r3, r3, #3
 800b7fc:	4a77      	ldr	r2, [pc, #476]	; (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b7fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b804:	e01e      	b.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b806:	4b74      	ldr	r3, [pc, #464]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b812:	d106      	bne.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b81a:	d102      	bne.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b81c:	4b70      	ldr	r3, [pc, #448]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b820:	e010      	b.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b822:	4b6d      	ldr	r3, [pc, #436]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b82a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b82e:	d106      	bne.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b836:	d102      	bne.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b838:	4b6a      	ldr	r3, [pc, #424]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b83c:	e002      	b.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b842:	e122      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b844:	e121      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84a:	e11e      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b850:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b854:	430b      	orrs	r3, r1
 800b856:	d133      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b858:	4b5f      	ldr	r3, [pc, #380]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b860:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	2b00      	cmp	r3, #0
 800b866:	d004      	beq.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86e:	d012      	beq.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b870:	e023      	b.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b872:	4b59      	ldr	r3, [pc, #356]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b87a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b87e:	d107      	bne.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b884:	4618      	mov	r0, r3
 800b886:	f000 fbc7 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b88e:	e0fc      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b894:	e0f9      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b896:	4b50      	ldr	r3, [pc, #320]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8a2:	d107      	bne.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8a4:	f107 0318 	add.w	r3, r7, #24
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 f90d 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8ae:	6a3b      	ldr	r3, [r7, #32]
 800b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8b2:	e0ea      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b8:	e0e7      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8be:	e0e4      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	f040 808d 	bne.w	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b8ce:	4b42      	ldr	r3, [pc, #264]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b8d6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8de:	d06b      	beq.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8e6:	d874      	bhi.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ee:	d056      	beq.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d86c      	bhi.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8fe:	d03b      	beq.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b906:	d864      	bhi.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90e:	d021      	beq.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b916:	d85c      	bhi.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d004      	beq.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b924:	d004      	beq.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b926:	e054      	b.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b928:	f000 f8b8 	bl	800ba9c <HAL_RCCEx_GetD3PCLK1Freq>
 800b92c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b92e:	e0ac      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b930:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b93c:	d107      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b93e:	f107 0318 	add.w	r3, r7, #24
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f8c0 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b94c:	e09d      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b952:	e09a      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b954:	4b20      	ldr	r3, [pc, #128]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b95c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b960:	d107      	bne.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	4618      	mov	r0, r3
 800b968:	f000 fa02 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b970:	e08b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b976:	e088      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b978:	4b17      	ldr	r3, [pc, #92]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b04      	cmp	r3, #4
 800b982:	d109      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b984:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	08db      	lsrs	r3, r3, #3
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	4a13      	ldr	r2, [pc, #76]	; (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b990:	fa22 f303 	lsr.w	r3, r2, r3
 800b994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b996:	e078      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b99c:	e075      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b99e:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9aa:	d102      	bne.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b9ac:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b0:	e06b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b6:	e068      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9b8:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9c4:	d102      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b9c6:	4b07      	ldr	r3, [pc, #28]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ca:	e05e      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d0:	e05b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d6:	e058      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9d8:	58024400 	.word	0x58024400
 800b9dc:	03d09000 	.word	0x03d09000
 800b9e0:	003d0900 	.word	0x003d0900
 800b9e4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	d148      	bne.n	800ba86 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b9f4:	4b27      	ldr	r3, [pc, #156]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba04:	d02a      	beq.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba0c:	d838      	bhi.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d004      	beq.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba1a:	d00d      	beq.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ba1c:	e030      	b.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba1e:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba2a:	d102      	bne.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba30:	e02b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba36:	e028      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba38:	4b16      	ldr	r3, [pc, #88]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba44:	d107      	bne.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fae4 	bl	800c018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba54:	e019      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba5a:	e016      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba5c:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba68:	d107      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba6a:	f107 0318 	add.w	r3, r7, #24
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f82a 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba78:	e007      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba7e:	e004      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba84:	e001      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ba8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3740      	adds	r7, #64	; 0x40
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	58024400 	.word	0x58024400
 800ba98:	017d7840 	.word	0x017d7840

0800ba9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800baa0:	f7fd ffd4 	bl	8009a4c <HAL_RCC_GetHCLKFreq>
 800baa4:	4602      	mov	r2, r0
 800baa6:	4b06      	ldr	r3, [pc, #24]	; (800bac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	091b      	lsrs	r3, r3, #4
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	4904      	ldr	r1, [pc, #16]	; (800bac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bab2:	5ccb      	ldrb	r3, [r1, r3]
 800bab4:	f003 031f 	and.w	r3, r3, #31
 800bab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800babc:	4618      	mov	r0, r3
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	58024400 	.word	0x58024400
 800bac4:	08015f00 	.word	0x08015f00

0800bac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bac8:	b480      	push	{r7}
 800baca:	b089      	sub	sp, #36	; 0x24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bad0:	4ba1      	ldr	r3, [pc, #644]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad4:	f003 0303 	and.w	r3, r3, #3
 800bad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bada:	4b9f      	ldr	r3, [pc, #636]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	0b1b      	lsrs	r3, r3, #12
 800bae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bae6:	4b9c      	ldr	r3, [pc, #624]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	091b      	lsrs	r3, r3, #4
 800baec:	f003 0301 	and.w	r3, r3, #1
 800baf0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800baf2:	4b99      	ldr	r3, [pc, #612]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf6:	08db      	lsrs	r3, r3, #3
 800baf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 8111 	beq.w	800bd38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	f000 8083 	beq.w	800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	f200 80a1 	bhi.w	800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d056      	beq.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb32:	e099      	b.n	800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb34:	4b88      	ldr	r3, [pc, #544]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d02d      	beq.n	800bb9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb40:	4b85      	ldr	r3, [pc, #532]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	08db      	lsrs	r3, r3, #3
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	4a84      	ldr	r2, [pc, #528]	; (800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb4c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	ee07 3a90 	vmov	s15, r3
 800bb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6a:	4b7b      	ldr	r3, [pc, #492]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb9a:	e087      	b.n	800bcac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bbaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbae:	4b6a      	ldr	r3, [pc, #424]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbde:	e065      	b.n	800bcac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	ee07 3a90 	vmov	s15, r3
 800bbe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbf2:	4b59      	ldr	r3, [pc, #356]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc02:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc06:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc22:	e043      	b.n	800bcac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	ee07 3a90 	vmov	s15, r3
 800bc2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bd6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc36:	4b48      	ldr	r3, [pc, #288]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc46:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc66:	e021      	b.n	800bcac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	ee07 3a90 	vmov	s15, r3
 800bc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc7a:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bcac:	4b2a      	ldr	r3, [pc, #168]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb0:	0a5b      	lsrs	r3, r3, #9
 800bcb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd2:	ee17 2a90 	vmov	r2, s15
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bcda:	4b1f      	ldr	r3, [pc, #124]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	0c1b      	lsrs	r3, r3, #16
 800bce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd00:	ee17 2a90 	vmov	r2, s15
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bd08:	4b13      	ldr	r3, [pc, #76]	; (800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0c:	0e1b      	lsrs	r3, r3, #24
 800bd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd12:	ee07 3a90 	vmov	s15, r3
 800bd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd22:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd2e:	ee17 2a90 	vmov	r2, s15
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd36:	e008      	b.n	800bd4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	609a      	str	r2, [r3, #8]
}
 800bd4a:	bf00      	nop
 800bd4c:	3724      	adds	r7, #36	; 0x24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	58024400 	.word	0x58024400
 800bd5c:	03d09000 	.word	0x03d09000
 800bd60:	46000000 	.word	0x46000000
 800bd64:	4c742400 	.word	0x4c742400
 800bd68:	4a742400 	.word	0x4a742400
 800bd6c:	4bbebc20 	.word	0x4bbebc20

0800bd70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b089      	sub	sp, #36	; 0x24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd78:	4ba1      	ldr	r3, [pc, #644]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0303 	and.w	r3, r3, #3
 800bd80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd82:	4b9f      	ldr	r3, [pc, #636]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd86:	0d1b      	lsrs	r3, r3, #20
 800bd88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd8e:	4b9c      	ldr	r3, [pc, #624]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	0a1b      	lsrs	r3, r3, #8
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd9a:	4b99      	ldr	r3, [pc, #612]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9e:	08db      	lsrs	r3, r3, #3
 800bda0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	fb02 f303 	mul.w	r3, r2, r3
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 8111 	beq.w	800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	f000 8083 	beq.w	800becc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	f200 80a1 	bhi.w	800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d056      	beq.n	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bdda:	e099      	b.n	800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bddc:	4b88      	ldr	r3, [pc, #544]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d02d      	beq.n	800be44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bde8:	4b85      	ldr	r3, [pc, #532]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	08db      	lsrs	r3, r3, #3
 800bdee:	f003 0303 	and.w	r3, r3, #3
 800bdf2:	4a84      	ldr	r2, [pc, #528]	; (800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bdf4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	ee07 3a90 	vmov	s15, r3
 800be00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be12:	4b7b      	ldr	r3, [pc, #492]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be22:	ed97 6a03 	vldr	s12, [r7, #12]
 800be26:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be42:	e087      	b.n	800bf54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c00c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be56:	4b6a      	ldr	r3, [pc, #424]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be66:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be86:	e065      	b.n	800bf54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9a:	4b59      	ldr	r3, [pc, #356]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800beae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beca:	e043      	b.n	800bf54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800beda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bede:	4b48      	ldr	r3, [pc, #288]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee6:	ee07 3a90 	vmov	s15, r3
 800beea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800befe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf0e:	e021      	b.n	800bf54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	ee07 3a90 	vmov	s15, r3
 800bf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf22:	4b37      	ldr	r3, [pc, #220]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf54:	4b2a      	ldr	r3, [pc, #168]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf58:	0a5b      	lsrs	r3, r3, #9
 800bf5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7a:	ee17 2a90 	vmov	r2, s15
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf82:	4b1f      	ldr	r3, [pc, #124]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8c:	ee07 3a90 	vmov	s15, r3
 800bf90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa8:	ee17 2a90 	vmov	r2, s15
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bfb0:	4b13      	ldr	r3, [pc, #76]	; (800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb4:	0e1b      	lsrs	r3, r3, #24
 800bfb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfd6:	ee17 2a90 	vmov	r2, s15
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bfde:	e008      	b.n	800bff2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	609a      	str	r2, [r3, #8]
}
 800bff2:	bf00      	nop
 800bff4:	3724      	adds	r7, #36	; 0x24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	58024400 	.word	0x58024400
 800c004:	03d09000 	.word	0x03d09000
 800c008:	46000000 	.word	0x46000000
 800c00c:	4c742400 	.word	0x4c742400
 800c010:	4a742400 	.word	0x4a742400
 800c014:	4bbebc20 	.word	0x4bbebc20

0800c018 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c018:	b480      	push	{r7}
 800c01a:	b089      	sub	sp, #36	; 0x24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c020:	4ba0      	ldr	r3, [pc, #640]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c024:	f003 0303 	and.w	r3, r3, #3
 800c028:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c02a:	4b9e      	ldr	r3, [pc, #632]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02e:	091b      	lsrs	r3, r3, #4
 800c030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c034:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c036:	4b9b      	ldr	r3, [pc, #620]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c040:	4b98      	ldr	r3, [pc, #608]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c044:	08db      	lsrs	r3, r3, #3
 800c046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	fb02 f303 	mul.w	r3, r2, r3
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c058:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 8111 	beq.w	800c286 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b02      	cmp	r3, #2
 800c068:	f000 8083 	beq.w	800c172 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	2b02      	cmp	r3, #2
 800c070:	f200 80a1 	bhi.w	800c1b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d056      	beq.n	800c12e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c080:	e099      	b.n	800c1b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c082:	4b88      	ldr	r3, [pc, #544]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d02d      	beq.n	800c0ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c08e:	4b85      	ldr	r3, [pc, #532]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	08db      	lsrs	r3, r3, #3
 800c094:	f003 0303 	and.w	r3, r3, #3
 800c098:	4a83      	ldr	r2, [pc, #524]	; (800c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c09a:	fa22 f303 	lsr.w	r3, r2, r3
 800c09e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	ee07 3a90 	vmov	s15, r3
 800c0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b8:	4b7a      	ldr	r3, [pc, #488]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0e8:	e087      	b.n	800c1fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fc:	4b69      	ldr	r3, [pc, #420]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c104:	ee07 3a90 	vmov	s15, r3
 800c108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c110:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c12c:	e065      	b.n	800c1fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	ee07 3a90 	vmov	s15, r3
 800c134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c138:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c13c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c140:	4b58      	ldr	r3, [pc, #352]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c150:	ed97 6a03 	vldr	s12, [r7, #12]
 800c154:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c170:	e043      	b.n	800c1fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	ee07 3a90 	vmov	s15, r3
 800c178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c184:	4b47      	ldr	r3, [pc, #284]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18c:	ee07 3a90 	vmov	s15, r3
 800c190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c194:	ed97 6a03 	vldr	s12, [r7, #12]
 800c198:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c19c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1b4:	e021      	b.n	800c1fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	ee07 3a90 	vmov	s15, r3
 800c1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c8:	4b36      	ldr	r3, [pc, #216]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c1fa:	4b2a      	ldr	r3, [pc, #168]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	0a5b      	lsrs	r3, r3, #9
 800c200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c204:	ee07 3a90 	vmov	s15, r3
 800c208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c210:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c214:	edd7 6a07 	vldr	s13, [r7, #28]
 800c218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c21c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c220:	ee17 2a90 	vmov	r2, s15
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c228:	4b1e      	ldr	r3, [pc, #120]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22c:	0c1b      	lsrs	r3, r3, #16
 800c22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c23e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c242:	edd7 6a07 	vldr	s13, [r7, #28]
 800c246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c24e:	ee17 2a90 	vmov	r2, s15
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c256:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	0e1b      	lsrs	r3, r3, #24
 800c25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c260:	ee07 3a90 	vmov	s15, r3
 800c264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c26c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c270:	edd7 6a07 	vldr	s13, [r7, #28]
 800c274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c27c:	ee17 2a90 	vmov	r2, s15
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c284:	e008      	b.n	800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	609a      	str	r2, [r3, #8]
}
 800c298:	bf00      	nop
 800c29a:	3724      	adds	r7, #36	; 0x24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	58024400 	.word	0x58024400
 800c2a8:	03d09000 	.word	0x03d09000
 800c2ac:	46000000 	.word	0x46000000
 800c2b0:	4c742400 	.word	0x4c742400
 800c2b4:	4a742400 	.word	0x4a742400
 800c2b8:	4bbebc20 	.word	0x4bbebc20

0800c2bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2ca:	4b53      	ldr	r3, [pc, #332]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d101      	bne.n	800c2da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e099      	b.n	800c40e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c2da:	4b4f      	ldr	r3, [pc, #316]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a4e      	ldr	r2, [pc, #312]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c2e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2e6:	f7f7 f943 	bl	8003570 <HAL_GetTick>
 800c2ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2ec:	e008      	b.n	800c300 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2ee:	f7f7 f93f 	bl	8003570 <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d901      	bls.n	800c300 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e086      	b.n	800c40e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c300:	4b45      	ldr	r3, [pc, #276]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1f0      	bne.n	800c2ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c30c:	4b42      	ldr	r3, [pc, #264]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c310:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	031b      	lsls	r3, r3, #12
 800c31a:	493f      	ldr	r1, [pc, #252]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	628b      	str	r3, [r1, #40]	; 0x28
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	3b01      	subs	r3, #1
 800c330:	025b      	lsls	r3, r3, #9
 800c332:	b29b      	uxth	r3, r3
 800c334:	431a      	orrs	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	041b      	lsls	r3, r3, #16
 800c33e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c342:	431a      	orrs	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	3b01      	subs	r3, #1
 800c34a:	061b      	lsls	r3, r3, #24
 800c34c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c350:	4931      	ldr	r1, [pc, #196]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c352:	4313      	orrs	r3, r2
 800c354:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c356:	4b30      	ldr	r3, [pc, #192]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	492d      	ldr	r1, [pc, #180]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c364:	4313      	orrs	r3, r2
 800c366:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c368:	4b2b      	ldr	r3, [pc, #172]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	f023 0220 	bic.w	r2, r3, #32
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	4928      	ldr	r1, [pc, #160]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c376:	4313      	orrs	r3, r2
 800c378:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c37a:	4b27      	ldr	r3, [pc, #156]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37e:	4a26      	ldr	r2, [pc, #152]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c380:	f023 0310 	bic.w	r3, r3, #16
 800c384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c386:	4b24      	ldr	r3, [pc, #144]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c38a:	4b24      	ldr	r3, [pc, #144]	; (800c41c <RCCEx_PLL2_Config+0x160>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	69d2      	ldr	r2, [r2, #28]
 800c392:	00d2      	lsls	r2, r2, #3
 800c394:	4920      	ldr	r1, [pc, #128]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c396:	4313      	orrs	r3, r2
 800c398:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c39a:	4b1f      	ldr	r3, [pc, #124]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39e:	4a1e      	ldr	r2, [pc, #120]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3a0:	f043 0310 	orr.w	r3, r3, #16
 800c3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	4a19      	ldr	r2, [pc, #100]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3b8:	e00f      	b.n	800c3da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d106      	bne.n	800c3ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c3c0:	4b15      	ldr	r3, [pc, #84]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c4:	4a14      	ldr	r2, [pc, #80]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3cc:	e005      	b.n	800c3da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c3ce:	4b12      	ldr	r3, [pc, #72]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d2:	4a11      	ldr	r2, [pc, #68]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a0e      	ldr	r2, [pc, #56]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c3e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3e6:	f7f7 f8c3 	bl	8003570 <HAL_GetTick>
 800c3ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3ec:	e008      	b.n	800c400 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3ee:	f7f7 f8bf 	bl	8003570 <HAL_GetTick>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d901      	bls.n	800c400 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	e006      	b.n	800c40e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <RCCEx_PLL2_Config+0x15c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d0f0      	beq.n	800c3ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	58024400 	.word	0x58024400
 800c41c:	ffff0007 	.word	0xffff0007

0800c420 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c42e:	4b53      	ldr	r3, [pc, #332]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	f003 0303 	and.w	r3, r3, #3
 800c436:	2b03      	cmp	r3, #3
 800c438:	d101      	bne.n	800c43e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e099      	b.n	800c572 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c43e:	4b4f      	ldr	r3, [pc, #316]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a4e      	ldr	r2, [pc, #312]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c44a:	f7f7 f891 	bl	8003570 <HAL_GetTick>
 800c44e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c450:	e008      	b.n	800c464 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c452:	f7f7 f88d 	bl	8003570 <HAL_GetTick>
 800c456:	4602      	mov	r2, r0
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d901      	bls.n	800c464 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e086      	b.n	800c572 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c464:	4b45      	ldr	r3, [pc, #276]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1f0      	bne.n	800c452 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c470:	4b42      	ldr	r3, [pc, #264]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	051b      	lsls	r3, r3, #20
 800c47e:	493f      	ldr	r1, [pc, #252]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c480:	4313      	orrs	r3, r2
 800c482:	628b      	str	r3, [r1, #40]	; 0x28
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	3b01      	subs	r3, #1
 800c48a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	3b01      	subs	r3, #1
 800c494:	025b      	lsls	r3, r3, #9
 800c496:	b29b      	uxth	r3, r3
 800c498:	431a      	orrs	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	041b      	lsls	r3, r3, #16
 800c4a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	061b      	lsls	r3, r3, #24
 800c4b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c4b4:	4931      	ldr	r1, [pc, #196]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c4ba:	4b30      	ldr	r3, [pc, #192]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	492d      	ldr	r1, [pc, #180]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c4cc:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	4928      	ldr	r1, [pc, #160]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c4de:	4b27      	ldr	r3, [pc, #156]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e2:	4a26      	ldr	r2, [pc, #152]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c4ea:	4b24      	ldr	r3, [pc, #144]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4ee:	4b24      	ldr	r3, [pc, #144]	; (800c580 <RCCEx_PLL3_Config+0x160>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	69d2      	ldr	r2, [r2, #28]
 800c4f6:	00d2      	lsls	r2, r2, #3
 800c4f8:	4920      	ldr	r1, [pc, #128]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4fe:	4b1f      	ldr	r3, [pc, #124]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	4a1e      	ldr	r2, [pc, #120]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c510:	4b1a      	ldr	r3, [pc, #104]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	4a19      	ldr	r2, [pc, #100]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c51a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c51c:	e00f      	b.n	800c53e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d106      	bne.n	800c532 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c524:	4b15      	ldr	r3, [pc, #84]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	4a14      	ldr	r2, [pc, #80]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c52a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c52e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c530:	e005      	b.n	800c53e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c532:	4b12      	ldr	r3, [pc, #72]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	4a11      	ldr	r2, [pc, #68]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c53c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c53e:	4b0f      	ldr	r3, [pc, #60]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a0e      	ldr	r2, [pc, #56]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c54a:	f7f7 f811 	bl	8003570 <HAL_GetTick>
 800c54e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c550:	e008      	b.n	800c564 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c552:	f7f7 f80d 	bl	8003570 <HAL_GetTick>
 800c556:	4602      	mov	r2, r0
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d901      	bls.n	800c564 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e006      	b.n	800c572 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c564:	4b05      	ldr	r3, [pc, #20]	; (800c57c <RCCEx_PLL3_Config+0x15c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0f0      	beq.n	800c552 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	58024400 	.word	0x58024400
 800c580:	ffff0007 	.word	0xffff0007

0800c584 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d071      	beq.n	800c67a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7f5 fd8a 	bl	80020c4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f003 0310 	and.w	r3, r3, #16
 800c5c2:	2b10      	cmp	r3, #16
 800c5c4:	d050      	beq.n	800c668 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	22ca      	movs	r2, #202	; 0xca
 800c5cc:	625a      	str	r2, [r3, #36]	; 0x24
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2253      	movs	r2, #83	; 0x53
 800c5d4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f9a0 	bl	800c91c <RTC_EnterInitMode>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d124      	bne.n	800c630 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6899      	ldr	r1, [r3, #8]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	4b24      	ldr	r3, [pc, #144]	; (800c684 <HAL_RTC_Init+0x100>)
 800c5f2:	400b      	ands	r3, r1
 800c5f4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	6899      	ldr	r1, [r3, #8]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	431a      	orrs	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	431a      	orrs	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	0419      	lsls	r1, r3, #16
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	430a      	orrs	r2, r1
 800c624:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f9ac 	bl	800c984 <RTC_ExitInitMode>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d113      	bne.n	800c65e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f022 0203 	bic.w	r2, r2, #3
 800c644:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	69da      	ldr	r2, [r3, #28]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	431a      	orrs	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	22ff      	movs	r2, #255	; 0xff
 800c664:	625a      	str	r2, [r3, #36]	; 0x24
 800c666:	e001      	b.n	800c66c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	ff8fffbf 	.word	0xff8fffbf

0800c688 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c688:	b590      	push	{r4, r7, lr}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d101      	bne.n	800c6a2 <HAL_RTC_SetTime+0x1a>
 800c69e:	2302      	movs	r3, #2
 800c6a0:	e089      	b.n	800c7b6 <HAL_RTC_SetTime+0x12e>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	22ca      	movs	r2, #202	; 0xca
 800c6b8:	625a      	str	r2, [r3, #36]	; 0x24
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2253      	movs	r2, #83	; 0x53
 800c6c0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f000 f92a 	bl	800c91c <RTC_EnterInitMode>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c6cc:	7cfb      	ldrb	r3, [r7, #19]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d161      	bne.n	800c796 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d126      	bne.n	800c726 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d102      	bne.n	800c6ec <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 f985 	bl	800ca00 <RTC_ByteToBcd2>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f97e 	bl	800ca00 <RTC_ByteToBcd2>
 800c704:	4603      	mov	r3, r0
 800c706:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c708:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	789b      	ldrb	r3, [r3, #2]
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f976 	bl	800ca00 <RTC_ByteToBcd2>
 800c714:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c716:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	78db      	ldrb	r3, [r3, #3]
 800c71e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c720:	4313      	orrs	r3, r2
 800c722:	617b      	str	r3, [r7, #20]
 800c724:	e018      	b.n	800c758 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d102      	bne.n	800c73a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2200      	movs	r2, #0
 800c738:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	785b      	ldrb	r3, [r3, #1]
 800c744:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c746:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c74c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	78db      	ldrb	r3, [r3, #3]
 800c752:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	6979      	ldr	r1, [r7, #20]
 800c75e:	4b18      	ldr	r3, [pc, #96]	; (800c7c0 <HAL_RTC_SetTime+0x138>)
 800c760:	400b      	ands	r3, r1
 800c762:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c772:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6899      	ldr	r1, [r3, #8]
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	68da      	ldr	r2, [r3, #12]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	431a      	orrs	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	430a      	orrs	r2, r1
 800c78a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 f8f9 	bl	800c984 <RTC_ExitInitMode>
 800c792:	4603      	mov	r3, r0
 800c794:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	22ff      	movs	r2, #255	; 0xff
 800c79c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c79e:	7cfb      	ldrb	r3, [r7, #19]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d103      	bne.n	800c7ac <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c7b4:	7cfb      	ldrb	r3, [r7, #19]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd90      	pop	{r4, r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	007f7f7f 	.word	0x007f7f7f

0800c7c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c7c4:	b590      	push	{r4, r7, lr}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d101      	bne.n	800c7de <HAL_RTC_SetDate+0x1a>
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e073      	b.n	800c8c6 <HAL_RTC_SetDate+0x102>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2202      	movs	r2, #2
 800c7ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10e      	bne.n	800c812 <HAL_RTC_SetDate+0x4e>
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	f003 0310 	and.w	r3, r3, #16
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d008      	beq.n	800c812 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	785b      	ldrb	r3, [r3, #1]
 800c804:	f023 0310 	bic.w	r3, r3, #16
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	330a      	adds	r3, #10
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d11c      	bne.n	800c852 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	78db      	ldrb	r3, [r3, #3]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 f8ef 	bl	800ca00 <RTC_ByteToBcd2>
 800c822:	4603      	mov	r3, r0
 800c824:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	785b      	ldrb	r3, [r3, #1]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 f8e8 	bl	800ca00 <RTC_ByteToBcd2>
 800c830:	4603      	mov	r3, r0
 800c832:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c834:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	789b      	ldrb	r3, [r3, #2]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 f8e0 	bl	800ca00 <RTC_ByteToBcd2>
 800c840:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c842:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c84c:	4313      	orrs	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]
 800c850:	e00e      	b.n	800c870 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	78db      	ldrb	r3, [r3, #3]
 800c856:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c85e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c864:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c86c:	4313      	orrs	r3, r2
 800c86e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	22ca      	movs	r2, #202	; 0xca
 800c876:	625a      	str	r2, [r3, #36]	; 0x24
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2253      	movs	r2, #83	; 0x53
 800c87e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 f84b 	bl	800c91c <RTC_EnterInitMode>
 800c886:	4603      	mov	r3, r0
 800c888:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c88a:	7cfb      	ldrb	r3, [r7, #19]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10a      	bne.n	800c8a6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	6979      	ldr	r1, [r7, #20]
 800c896:	4b0e      	ldr	r3, [pc, #56]	; (800c8d0 <HAL_RTC_SetDate+0x10c>)
 800c898:	400b      	ands	r3, r1
 800c89a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f000 f871 	bl	800c984 <RTC_ExitInitMode>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	22ff      	movs	r2, #255	; 0xff
 800c8ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c8ae:	7cfb      	ldrb	r3, [r7, #19]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d103      	bne.n	800c8bc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c8c4:	7cfb      	ldrb	r3, [r7, #19]


}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	371c      	adds	r7, #28
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd90      	pop	{r4, r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	00ffff3f 	.word	0x00ffff3f

0800c8d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a0d      	ldr	r2, [pc, #52]	; (800c918 <HAL_RTC_WaitForSynchro+0x44>)
 800c8e2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c8e4:	f7f6 fe44 	bl	8003570 <HAL_GetTick>
 800c8e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8ea:	e009      	b.n	800c900 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c8ec:	f7f6 fe40 	bl	8003570 <HAL_GetTick>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8fa:	d901      	bls.n	800c900 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e007      	b.n	800c910 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	f003 0320 	and.w	r3, r3, #32
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0ee      	beq.n	800c8ec <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	0003ff5f 	.word	0x0003ff5f

0800c91c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	d120      	bne.n	800c978 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c93e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c940:	f7f6 fe16 	bl	8003570 <HAL_GetTick>
 800c944:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c946:	e00d      	b.n	800c964 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c948:	f7f6 fe12 	bl	8003570 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c956:	d905      	bls.n	800c964 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2203      	movs	r2, #3
 800c960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <RTC_EnterInitMode+0x5c>
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b03      	cmp	r3, #3
 800c976:	d1e7      	bne.n	800c948 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c978:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c990:	4b1a      	ldr	r3, [pc, #104]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	4a19      	ldr	r2, [pc, #100]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c99a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c99c:	4b17      	ldr	r3, [pc, #92]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f003 0320 	and.w	r3, r3, #32
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10c      	bne.n	800c9c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff ff93 	bl	800c8d4 <HAL_RTC_WaitForSynchro>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d01e      	beq.n	800c9f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2203      	movs	r2, #3
 800c9b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	73fb      	strb	r3, [r7, #15]
 800c9c0:	e017      	b.n	800c9f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9c2:	4b0e      	ldr	r3, [pc, #56]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	4a0d      	ldr	r2, [pc, #52]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c9c8:	f023 0320 	bic.w	r3, r3, #32
 800c9cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff ff80 	bl	800c8d4 <HAL_RTC_WaitForSynchro>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d005      	beq.n	800c9e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2203      	movs	r2, #3
 800c9de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9e6:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	4a04      	ldr	r2, [pc, #16]	; (800c9fc <RTC_ExitInitMode+0x78>)
 800c9ec:	f043 0320 	orr.w	r3, r3, #32
 800c9f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	58004000 	.word	0x58004000

0800ca00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ca12:	e005      	b.n	800ca20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3301      	adds	r3, #1
 800ca18:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ca1a:	7afb      	ldrb	r3, [r7, #11]
 800ca1c:	3b0a      	subs	r3, #10
 800ca1e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ca20:	7afb      	ldrb	r3, [r7, #11]
 800ca22:	2b09      	cmp	r3, #9
 800ca24:	d8f6      	bhi.n	800ca14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	011b      	lsls	r3, r3, #4
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	7afb      	ldrb	r3, [r7, #11]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	b2db      	uxtb	r3, r3
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e10f      	b.n	800cc72 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a87      	ldr	r2, [pc, #540]	; (800cc7c <HAL_SPI_Init+0x23c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00f      	beq.n	800ca82 <HAL_SPI_Init+0x42>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a86      	ldr	r2, [pc, #536]	; (800cc80 <HAL_SPI_Init+0x240>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d00a      	beq.n	800ca82 <HAL_SPI_Init+0x42>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a84      	ldr	r2, [pc, #528]	; (800cc84 <HAL_SPI_Init+0x244>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d005      	beq.n	800ca82 <HAL_SPI_Init+0x42>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	2b0f      	cmp	r3, #15
 800ca7c:	d901      	bls.n	800ca82 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e0f7      	b.n	800cc72 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fc12 	bl	800d2ac <SPI_GetPacketSize>
 800ca88:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a7b      	ldr	r2, [pc, #492]	; (800cc7c <HAL_SPI_Init+0x23c>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00c      	beq.n	800caae <HAL_SPI_Init+0x6e>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a79      	ldr	r2, [pc, #484]	; (800cc80 <HAL_SPI_Init+0x240>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d007      	beq.n	800caae <HAL_SPI_Init+0x6e>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a78      	ldr	r2, [pc, #480]	; (800cc84 <HAL_SPI_Init+0x244>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d002      	beq.n	800caae <HAL_SPI_Init+0x6e>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b08      	cmp	r3, #8
 800caac:	d811      	bhi.n	800cad2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cab2:	4a72      	ldr	r2, [pc, #456]	; (800cc7c <HAL_SPI_Init+0x23c>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d009      	beq.n	800cacc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a70      	ldr	r2, [pc, #448]	; (800cc80 <HAL_SPI_Init+0x240>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d004      	beq.n	800cacc <HAL_SPI_Init+0x8c>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a6f      	ldr	r2, [pc, #444]	; (800cc84 <HAL_SPI_Init+0x244>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d104      	bne.n	800cad6 <HAL_SPI_Init+0x96>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b10      	cmp	r3, #16
 800cad0:	d901      	bls.n	800cad6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e0cd      	b.n	800cc72 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7f5 fc32 	bl	8002354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2202      	movs	r2, #2
 800caf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f022 0201 	bic.w	r2, r2, #1
 800cb06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cb12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	699b      	ldr	r3, [r3, #24]
 800cb18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb1c:	d119      	bne.n	800cb52 <HAL_SPI_Init+0x112>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb26:	d103      	bne.n	800cb30 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d008      	beq.n	800cb42 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10c      	bne.n	800cb52 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb40:	d107      	bne.n	800cb52 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00f      	beq.n	800cb7e <HAL_SPI_Init+0x13e>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	2b06      	cmp	r3, #6
 800cb64:	d90b      	bls.n	800cb7e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	e007      	b.n	800cb8e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	69da      	ldr	r2, [r3, #28]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb96:	431a      	orrs	r2, r3
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba0:	ea42 0103 	orr.w	r1, r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68da      	ldr	r2, [r3, #12]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	430a      	orrs	r2, r1
 800cbae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	431a      	orrs	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	431a      	orrs	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbee:	ea42 0103 	orr.w	r1, r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d113      	bne.n	800cc2e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f022 0201 	bic.w	r2, r2, #1
 800cc3c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00a      	beq.n	800cc60 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	430a      	orrs	r2, r1
 800cc5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	40013000 	.word	0x40013000
 800cc80:	40003800 	.word	0x40003800
 800cc84:	40003c00 	.word	0x40003c00

0800cc88 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	603b      	str	r3, [r7, #0]
 800cc94:	4613      	mov	r3, r2
 800cc96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9c:	095b      	lsrs	r3, r3, #5
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	3301      	adds	r3, #1
 800cca2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3330      	adds	r3, #48	; 0x30
 800ccaa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccac:	f7f6 fc60 	bl	8003570 <HAL_GetTick>
 800ccb0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d001      	beq.n	800ccc2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	e250      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <HAL_SPI_Receive+0x46>
 800ccc8:	88fb      	ldrh	r3, [r7, #6]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e248      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d101      	bne.n	800cce0 <HAL_SPI_Receive+0x58>
 800ccdc:	2302      	movs	r3, #2
 800ccde:	e241      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2204      	movs	r2, #4
 800ccec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	88fa      	ldrh	r2, [r7, #6]
 800cd02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	88fa      	ldrh	r2, [r7, #6]
 800cd0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cd38:	d108      	bne.n	800cd4c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	e009      	b.n	800cd60 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cd5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	4b95      	ldr	r3, [pc, #596]	; (800cfbc <HAL_SPI_Receive+0x334>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	88f9      	ldrh	r1, [r7, #6]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	6812      	ldr	r2, [r2, #0]
 800cd70:	430b      	orrs	r3, r1
 800cd72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f042 0201 	orr.w	r2, r2, #1
 800cd82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd8c:	d107      	bne.n	800cd9e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	d96c      	bls.n	800ce80 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cda6:	e064      	b.n	800ce72 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	695b      	ldr	r3, [r3, #20]
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d114      	bne.n	800cde8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cdc8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdce:	1d1a      	adds	r2, r3, #4
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	3b01      	subs	r3, #1
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cde6:	e044      	b.n	800ce72 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	8bfa      	ldrh	r2, [r7, #30]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d919      	bls.n	800ce2a <HAL_SPI_Receive+0x1a2>
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d014      	beq.n	800ce2a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce0a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce10:	1d1a      	adds	r2, r3, #4
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ce28:	e023      	b.n	800ce72 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce2a:	f7f6 fba1 	bl	8003570 <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d803      	bhi.n	800ce42 <HAL_SPI_Receive+0x1ba>
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce40:	d102      	bne.n	800ce48 <HAL_SPI_Receive+0x1c0>
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d114      	bne.n	800ce72 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f000 f98f 	bl	800d16c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e178      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d194      	bne.n	800cda8 <HAL_SPI_Receive+0x120>
 800ce7e:	e15e      	b.n	800d13e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	2b07      	cmp	r3, #7
 800ce86:	f240 8153 	bls.w	800d130 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ce8a:	e08f      	b.n	800cfac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	695b      	ldr	r3, [r3, #20]
 800ce92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	695b      	ldr	r3, [r3, #20]
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d114      	bne.n	800cecc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cea6:	69ba      	ldr	r2, [r7, #24]
 800cea8:	8812      	ldrh	r2, [r2, #0]
 800ceaa:	b292      	uxth	r2, r2
 800ceac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceb2:	1c9a      	adds	r2, r3, #2
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	3b01      	subs	r3, #1
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ceca:	e06f      	b.n	800cfac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	8bfa      	ldrh	r2, [r7, #30]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d924      	bls.n	800cf24 <HAL_SPI_Receive+0x29c>
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d01f      	beq.n	800cf24 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	8812      	ldrh	r2, [r2, #0]
 800ceec:	b292      	uxth	r2, r2
 800ceee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cef4:	1c9a      	adds	r2, r3, #2
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	8812      	ldrh	r2, [r2, #0]
 800cf02:	b292      	uxth	r2, r2
 800cf04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf0a:	1c9a      	adds	r2, r3, #2
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	3b02      	subs	r3, #2
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cf22:	e043      	b.n	800cfac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d119      	bne.n	800cf64 <HAL_SPI_Receive+0x2dc>
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d014      	beq.n	800cf64 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	8812      	ldrh	r2, [r2, #0]
 800cf42:	b292      	uxth	r2, r2
 800cf44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf4a:	1c9a      	adds	r2, r3, #2
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cf62:	e023      	b.n	800cfac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf64:	f7f6 fb04 	bl	8003570 <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d803      	bhi.n	800cf7c <HAL_SPI_Receive+0x2f4>
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf7a:	d102      	bne.n	800cf82 <HAL_SPI_Receive+0x2fa>
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d114      	bne.n	800cfac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f8f2 	bl	800d16c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	e0db      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f47f af69 	bne.w	800ce8c <HAL_SPI_Receive+0x204>
 800cfba:	e0c0      	b.n	800d13e <HAL_SPI_Receive+0x4b6>
 800cfbc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	695b      	ldr	r3, [r3, #20]
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d117      	bne.n	800d006 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfe2:	7812      	ldrb	r2, [r2, #0]
 800cfe4:	b2d2      	uxtb	r2, r2
 800cfe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	3b01      	subs	r3, #1
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d004:	e094      	b.n	800d130 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	8bfa      	ldrh	r2, [r7, #30]
 800d010:	429a      	cmp	r2, r3
 800d012:	d946      	bls.n	800d0a2 <HAL_SPI_Receive+0x41a>
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d041      	beq.n	800d0a2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d02a:	7812      	ldrb	r2, [r2, #0]
 800d02c:	b2d2      	uxtb	r2, r2
 800d02e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d046:	7812      	ldrb	r2, [r2, #0]
 800d048:	b2d2      	uxtb	r2, r2
 800d04a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d062:	7812      	ldrb	r2, [r2, #0]
 800d064:	b2d2      	uxtb	r2, r2
 800d066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d07e:	7812      	ldrb	r2, [r2, #0]
 800d080:	b2d2      	uxtb	r2, r2
 800d082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d088:	1c5a      	adds	r2, r3, #1
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d094:	b29b      	uxth	r3, r3
 800d096:	3b04      	subs	r3, #4
 800d098:	b29a      	uxth	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d0a0:	e046      	b.n	800d130 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	2b03      	cmp	r3, #3
 800d0ac:	d81c      	bhi.n	800d0e8 <HAL_SPI_Receive+0x460>
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d017      	beq.n	800d0e8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0c4:	7812      	ldrb	r2, [r2, #0]
 800d0c6:	b2d2      	uxtb	r2, r2
 800d0c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d0e6:	e023      	b.n	800d130 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0e8:	f7f6 fa42 	bl	8003570 <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d803      	bhi.n	800d100 <HAL_SPI_Receive+0x478>
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0fe:	d102      	bne.n	800d106 <HAL_SPI_Receive+0x47e>
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d114      	bne.n	800d130 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 f830 	bl	800d16c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d12c:	2303      	movs	r3, #3
 800d12e:	e019      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d136:	b29b      	uxth	r3, r3
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f47f af41 	bne.w	800cfc0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f000 f814 	bl	800d16c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d162:	2300      	movs	r3, #0
  }
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	699a      	ldr	r2, [r3, #24]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0208 	orr.w	r2, r2, #8
 800d18a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	699a      	ldr	r2, [r3, #24]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f042 0210 	orr.w	r2, r2, #16
 800d19a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f022 0201 	bic.w	r2, r2, #1
 800d1aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6919      	ldr	r1, [r3, #16]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b3c      	ldr	r3, [pc, #240]	; (800d2a8 <SPI_CloseTransfer+0x13c>)
 800d1b8:	400b      	ands	r3, r1
 800d1ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689a      	ldr	r2, [r3, #8]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d1ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b04      	cmp	r3, #4
 800d1d6:	d014      	beq.n	800d202 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f003 0320 	and.w	r3, r3, #32
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00f      	beq.n	800d202 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	699a      	ldr	r2, [r3, #24]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f042 0220 	orr.w	r2, r2, #32
 800d200:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d014      	beq.n	800d238 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00f      	beq.n	800d238 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d21e:	f043 0204 	orr.w	r2, r3, #4
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d236:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00f      	beq.n	800d262 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d248:	f043 0201 	orr.w	r2, r3, #1
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d260:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00f      	beq.n	800d28c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d272:	f043 0208 	orr.w	r2, r3, #8
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	699a      	ldr	r2, [r3, #24]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d28a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d29c:	bf00      	nop
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	fffffc90 	.word	0xfffffc90

0800d2ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b8:	095b      	lsrs	r3, r3, #5
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	3307      	adds	r3, #7
 800d2ca:	08db      	lsrs	r3, r3, #3
 800d2cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e049      	b.n	800d388 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d106      	bne.n	800d30e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7f5 fcc1 	bl	8002c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2202      	movs	r2, #2
 800d312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3304      	adds	r3, #4
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f000 fe7d 	bl	800e020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2201      	movs	r2, #1
 800d332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2201      	movs	r2, #1
 800d36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d001      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e054      	b.n	800d452 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68da      	ldr	r2, [r3, #12]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0201 	orr.w	r2, r2, #1
 800d3be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a26      	ldr	r2, [pc, #152]	; (800d460 <HAL_TIM_Base_Start_IT+0xd0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d022      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3d2:	d01d      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a22      	ldr	r2, [pc, #136]	; (800d464 <HAL_TIM_Base_Start_IT+0xd4>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d018      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a21      	ldr	r2, [pc, #132]	; (800d468 <HAL_TIM_Base_Start_IT+0xd8>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d013      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a1f      	ldr	r2, [pc, #124]	; (800d46c <HAL_TIM_Base_Start_IT+0xdc>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d00e      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <HAL_TIM_Base_Start_IT+0xe0>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d009      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a1c      	ldr	r2, [pc, #112]	; (800d474 <HAL_TIM_Base_Start_IT+0xe4>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d004      	beq.n	800d410 <HAL_TIM_Base_Start_IT+0x80>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a1b      	ldr	r2, [pc, #108]	; (800d478 <HAL_TIM_Base_Start_IT+0xe8>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d115      	bne.n	800d43c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	689a      	ldr	r2, [r3, #8]
 800d416:	4b19      	ldr	r3, [pc, #100]	; (800d47c <HAL_TIM_Base_Start_IT+0xec>)
 800d418:	4013      	ands	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b06      	cmp	r3, #6
 800d420:	d015      	beq.n	800d44e <HAL_TIM_Base_Start_IT+0xbe>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d428:	d011      	beq.n	800d44e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f042 0201 	orr.w	r2, r2, #1
 800d438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d43a:	e008      	b.n	800d44e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f042 0201 	orr.w	r2, r2, #1
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	e000      	b.n	800d450 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d44e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3714      	adds	r7, #20
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	40010000 	.word	0x40010000
 800d464:	40000400 	.word	0x40000400
 800d468:	40000800 	.word	0x40000800
 800d46c:	40000c00 	.word	0x40000c00
 800d470:	40010400 	.word	0x40010400
 800d474:	40001800 	.word	0x40001800
 800d478:	40014000 	.word	0x40014000
 800d47c:	00010007 	.word	0x00010007

0800d480 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d48a:	2300      	movs	r3, #0
 800d48c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d109      	bne.n	800d4a8 <HAL_TIM_OC_Start_IT+0x28>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	bf14      	ite	ne
 800d4a0:	2301      	movne	r3, #1
 800d4a2:	2300      	moveq	r3, #0
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	e03c      	b.n	800d522 <HAL_TIM_OC_Start_IT+0xa2>
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	d109      	bne.n	800d4c2 <HAL_TIM_OC_Start_IT+0x42>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	bf14      	ite	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	2300      	moveq	r3, #0
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	e02f      	b.n	800d522 <HAL_TIM_OC_Start_IT+0xa2>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b08      	cmp	r3, #8
 800d4c6:	d109      	bne.n	800d4dc <HAL_TIM_OC_Start_IT+0x5c>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	bf14      	ite	ne
 800d4d4:	2301      	movne	r3, #1
 800d4d6:	2300      	moveq	r3, #0
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	e022      	b.n	800d522 <HAL_TIM_OC_Start_IT+0xa2>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b0c      	cmp	r3, #12
 800d4e0:	d109      	bne.n	800d4f6 <HAL_TIM_OC_Start_IT+0x76>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	bf14      	ite	ne
 800d4ee:	2301      	movne	r3, #1
 800d4f0:	2300      	moveq	r3, #0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	e015      	b.n	800d522 <HAL_TIM_OC_Start_IT+0xa2>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b10      	cmp	r3, #16
 800d4fa:	d109      	bne.n	800d510 <HAL_TIM_OC_Start_IT+0x90>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b01      	cmp	r3, #1
 800d506:	bf14      	ite	ne
 800d508:	2301      	movne	r3, #1
 800d50a:	2300      	moveq	r3, #0
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	e008      	b.n	800d522 <HAL_TIM_OC_Start_IT+0xa2>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b01      	cmp	r3, #1
 800d51a:	bf14      	ite	ne
 800d51c:	2301      	movne	r3, #1
 800d51e:	2300      	moveq	r3, #0
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e0ec      	b.n	800d704 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d104      	bne.n	800d53a <HAL_TIM_OC_Start_IT+0xba>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d538:	e023      	b.n	800d582 <HAL_TIM_OC_Start_IT+0x102>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	d104      	bne.n	800d54a <HAL_TIM_OC_Start_IT+0xca>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2202      	movs	r2, #2
 800d544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d548:	e01b      	b.n	800d582 <HAL_TIM_OC_Start_IT+0x102>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b08      	cmp	r3, #8
 800d54e:	d104      	bne.n	800d55a <HAL_TIM_OC_Start_IT+0xda>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d558:	e013      	b.n	800d582 <HAL_TIM_OC_Start_IT+0x102>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b0c      	cmp	r3, #12
 800d55e:	d104      	bne.n	800d56a <HAL_TIM_OC_Start_IT+0xea>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2202      	movs	r2, #2
 800d564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d568:	e00b      	b.n	800d582 <HAL_TIM_OC_Start_IT+0x102>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b10      	cmp	r3, #16
 800d56e:	d104      	bne.n	800d57a <HAL_TIM_OC_Start_IT+0xfa>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d578:	e003      	b.n	800d582 <HAL_TIM_OC_Start_IT+0x102>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2202      	movs	r2, #2
 800d57e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b0c      	cmp	r3, #12
 800d586:	d841      	bhi.n	800d60c <HAL_TIM_OC_Start_IT+0x18c>
 800d588:	a201      	add	r2, pc, #4	; (adr r2, 800d590 <HAL_TIM_OC_Start_IT+0x110>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d5c5 	.word	0x0800d5c5
 800d594:	0800d60d 	.word	0x0800d60d
 800d598:	0800d60d 	.word	0x0800d60d
 800d59c:	0800d60d 	.word	0x0800d60d
 800d5a0:	0800d5d7 	.word	0x0800d5d7
 800d5a4:	0800d60d 	.word	0x0800d60d
 800d5a8:	0800d60d 	.word	0x0800d60d
 800d5ac:	0800d60d 	.word	0x0800d60d
 800d5b0:	0800d5e9 	.word	0x0800d5e9
 800d5b4:	0800d60d 	.word	0x0800d60d
 800d5b8:	0800d60d 	.word	0x0800d60d
 800d5bc:	0800d60d 	.word	0x0800d60d
 800d5c0:	0800d5fb 	.word	0x0800d5fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68da      	ldr	r2, [r3, #12]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f042 0202 	orr.w	r2, r2, #2
 800d5d2:	60da      	str	r2, [r3, #12]
      break;
 800d5d4:	e01d      	b.n	800d612 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68da      	ldr	r2, [r3, #12]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f042 0204 	orr.w	r2, r2, #4
 800d5e4:	60da      	str	r2, [r3, #12]
      break;
 800d5e6:	e014      	b.n	800d612 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f042 0208 	orr.w	r2, r2, #8
 800d5f6:	60da      	str	r2, [r3, #12]
      break;
 800d5f8:	e00b      	b.n	800d612 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68da      	ldr	r2, [r3, #12]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f042 0210 	orr.w	r2, r2, #16
 800d608:	60da      	str	r2, [r3, #12]
      break;
 800d60a:	e002      	b.n	800d612 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	73fb      	strb	r3, [r7, #15]
      break;
 800d610:	bf00      	nop
  }

  if (status == HAL_OK)
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d174      	bne.n	800d702 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2201      	movs	r2, #1
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	4618      	mov	r0, r3
 800d622:	f001 f917 	bl	800e854 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a38      	ldr	r2, [pc, #224]	; (800d70c <HAL_TIM_OC_Start_IT+0x28c>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d013      	beq.n	800d658 <HAL_TIM_OC_Start_IT+0x1d8>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a36      	ldr	r2, [pc, #216]	; (800d710 <HAL_TIM_OC_Start_IT+0x290>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d00e      	beq.n	800d658 <HAL_TIM_OC_Start_IT+0x1d8>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a35      	ldr	r2, [pc, #212]	; (800d714 <HAL_TIM_OC_Start_IT+0x294>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d009      	beq.n	800d658 <HAL_TIM_OC_Start_IT+0x1d8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a33      	ldr	r2, [pc, #204]	; (800d718 <HAL_TIM_OC_Start_IT+0x298>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d004      	beq.n	800d658 <HAL_TIM_OC_Start_IT+0x1d8>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a32      	ldr	r2, [pc, #200]	; (800d71c <HAL_TIM_OC_Start_IT+0x29c>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d101      	bne.n	800d65c <HAL_TIM_OC_Start_IT+0x1dc>
 800d658:	2301      	movs	r3, #1
 800d65a:	e000      	b.n	800d65e <HAL_TIM_OC_Start_IT+0x1de>
 800d65c:	2300      	movs	r3, #0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d007      	beq.n	800d672 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a25      	ldr	r2, [pc, #148]	; (800d70c <HAL_TIM_OC_Start_IT+0x28c>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d022      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d684:	d01d      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a25      	ldr	r2, [pc, #148]	; (800d720 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d018      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a23      	ldr	r2, [pc, #140]	; (800d724 <HAL_TIM_OC_Start_IT+0x2a4>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d013      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a22      	ldr	r2, [pc, #136]	; (800d728 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d00e      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a19      	ldr	r2, [pc, #100]	; (800d710 <HAL_TIM_OC_Start_IT+0x290>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d009      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a1e      	ldr	r2, [pc, #120]	; (800d72c <HAL_TIM_OC_Start_IT+0x2ac>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d004      	beq.n	800d6c2 <HAL_TIM_OC_Start_IT+0x242>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a15      	ldr	r2, [pc, #84]	; (800d714 <HAL_TIM_OC_Start_IT+0x294>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d115      	bne.n	800d6ee <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	689a      	ldr	r2, [r3, #8]
 800d6c8:	4b19      	ldr	r3, [pc, #100]	; (800d730 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b06      	cmp	r3, #6
 800d6d2:	d015      	beq.n	800d700 <HAL_TIM_OC_Start_IT+0x280>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6da:	d011      	beq.n	800d700 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f042 0201 	orr.w	r2, r2, #1
 800d6ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6ec:	e008      	b.n	800d700 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f042 0201 	orr.w	r2, r2, #1
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	e000      	b.n	800d702 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d700:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d702:	7bfb      	ldrb	r3, [r7, #15]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	40010000 	.word	0x40010000
 800d710:	40010400 	.word	0x40010400
 800d714:	40014000 	.word	0x40014000
 800d718:	40014400 	.word	0x40014400
 800d71c:	40014800 	.word	0x40014800
 800d720:	40000400 	.word	0x40000400
 800d724:	40000800 	.word	0x40000800
 800d728:	40000c00 	.word	0x40000c00
 800d72c:	40001800 	.word	0x40001800
 800d730:	00010007 	.word	0x00010007

0800d734 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2b0c      	cmp	r3, #12
 800d746:	d841      	bhi.n	800d7cc <HAL_TIM_OC_Stop_IT+0x98>
 800d748:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <HAL_TIM_OC_Stop_IT+0x1c>)
 800d74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74e:	bf00      	nop
 800d750:	0800d785 	.word	0x0800d785
 800d754:	0800d7cd 	.word	0x0800d7cd
 800d758:	0800d7cd 	.word	0x0800d7cd
 800d75c:	0800d7cd 	.word	0x0800d7cd
 800d760:	0800d797 	.word	0x0800d797
 800d764:	0800d7cd 	.word	0x0800d7cd
 800d768:	0800d7cd 	.word	0x0800d7cd
 800d76c:	0800d7cd 	.word	0x0800d7cd
 800d770:	0800d7a9 	.word	0x0800d7a9
 800d774:	0800d7cd 	.word	0x0800d7cd
 800d778:	0800d7cd 	.word	0x0800d7cd
 800d77c:	0800d7cd 	.word	0x0800d7cd
 800d780:	0800d7bb 	.word	0x0800d7bb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68da      	ldr	r2, [r3, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f022 0202 	bic.w	r2, r2, #2
 800d792:	60da      	str	r2, [r3, #12]
      break;
 800d794:	e01d      	b.n	800d7d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68da      	ldr	r2, [r3, #12]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f022 0204 	bic.w	r2, r2, #4
 800d7a4:	60da      	str	r2, [r3, #12]
      break;
 800d7a6:	e014      	b.n	800d7d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68da      	ldr	r2, [r3, #12]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f022 0208 	bic.w	r2, r2, #8
 800d7b6:	60da      	str	r2, [r3, #12]
      break;
 800d7b8:	e00b      	b.n	800d7d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68da      	ldr	r2, [r3, #12]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f022 0210 	bic.w	r2, r2, #16
 800d7c8:	60da      	str	r2, [r3, #12]
      break;
 800d7ca:	e002      	b.n	800d7d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d7d0:	bf00      	nop
  }

  if (status == HAL_OK)
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f040 8081 	bne.w	800d8dc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f001 f836 	bl	800e854 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a3e      	ldr	r2, [pc, #248]	; (800d8e8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d013      	beq.n	800d81a <HAL_TIM_OC_Stop_IT+0xe6>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a3d      	ldr	r2, [pc, #244]	; (800d8ec <HAL_TIM_OC_Stop_IT+0x1b8>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d00e      	beq.n	800d81a <HAL_TIM_OC_Stop_IT+0xe6>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a3b      	ldr	r2, [pc, #236]	; (800d8f0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d009      	beq.n	800d81a <HAL_TIM_OC_Stop_IT+0xe6>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a3a      	ldr	r2, [pc, #232]	; (800d8f4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d004      	beq.n	800d81a <HAL_TIM_OC_Stop_IT+0xe6>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a38      	ldr	r2, [pc, #224]	; (800d8f8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d101      	bne.n	800d81e <HAL_TIM_OC_Stop_IT+0xea>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <HAL_TIM_OC_Stop_IT+0xec>
 800d81e:	2300      	movs	r3, #0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d017      	beq.n	800d854 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6a1a      	ldr	r2, [r3, #32]
 800d82a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d82e:	4013      	ands	r3, r2
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10f      	bne.n	800d854 <HAL_TIM_OC_Stop_IT+0x120>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6a1a      	ldr	r2, [r3, #32]
 800d83a:	f240 4344 	movw	r3, #1092	; 0x444
 800d83e:	4013      	ands	r3, r2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d107      	bne.n	800d854 <HAL_TIM_OC_Stop_IT+0x120>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d852:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6a1a      	ldr	r2, [r3, #32]
 800d85a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d85e:	4013      	ands	r3, r2
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10f      	bne.n	800d884 <HAL_TIM_OC_Stop_IT+0x150>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	6a1a      	ldr	r2, [r3, #32]
 800d86a:	f240 4344 	movw	r3, #1092	; 0x444
 800d86e:	4013      	ands	r3, r2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d107      	bne.n	800d884 <HAL_TIM_OC_Stop_IT+0x150>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f022 0201 	bic.w	r2, r2, #1
 800d882:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d104      	bne.n	800d894 <HAL_TIM_OC_Stop_IT+0x160>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d892:	e023      	b.n	800d8dc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b04      	cmp	r3, #4
 800d898:	d104      	bne.n	800d8a4 <HAL_TIM_OC_Stop_IT+0x170>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2201      	movs	r2, #1
 800d89e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8a2:	e01b      	b.n	800d8dc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	2b08      	cmp	r3, #8
 800d8a8:	d104      	bne.n	800d8b4 <HAL_TIM_OC_Stop_IT+0x180>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d8b2:	e013      	b.n	800d8dc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	2b0c      	cmp	r3, #12
 800d8b8:	d104      	bne.n	800d8c4 <HAL_TIM_OC_Stop_IT+0x190>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d8c2:	e00b      	b.n	800d8dc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b10      	cmp	r3, #16
 800d8c8:	d104      	bne.n	800d8d4 <HAL_TIM_OC_Stop_IT+0x1a0>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d8d2:	e003      	b.n	800d8dc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	40010000 	.word	0x40010000
 800d8ec:	40010400 	.word	0x40010400
 800d8f0:	40014000 	.word	0x40014000
 800d8f4:	40014400 	.word	0x40014400
 800d8f8:	40014800 	.word	0x40014800

0800d8fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e049      	b.n	800d9a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b00      	cmp	r3, #0
 800d918:	d106      	bne.n	800d928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f841 	bl	800d9aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2202      	movs	r2, #2
 800d92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3304      	adds	r3, #4
 800d938:	4619      	mov	r1, r3
 800d93a:	4610      	mov	r0, r2
 800d93c:	f000 fb70 	bl	800e020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b083      	sub	sp, #12
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d9b2:	bf00      	nop
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d020      	beq.n	800da22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d01b      	beq.n	800da22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f06f 0202 	mvn.w	r2, #2
 800d9f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	f003 0303 	and.w	r3, r3, #3
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 faeb 	bl	800dfe4 <HAL_TIM_IC_CaptureCallback>
 800da0e:	e005      	b.n	800da1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7f3 fc7d 	bl	8001310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 faee 	bl	800dff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d020      	beq.n	800da6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f003 0304 	and.w	r3, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	d01b      	beq.n	800da6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f06f 0204 	mvn.w	r2, #4
 800da3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2202      	movs	r2, #2
 800da44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da50:	2b00      	cmp	r3, #0
 800da52:	d003      	beq.n	800da5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fac5 	bl	800dfe4 <HAL_TIM_IC_CaptureCallback>
 800da5a:	e005      	b.n	800da68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7f3 fc57 	bl	8001310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fac8 	bl	800dff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	f003 0308 	and.w	r3, r3, #8
 800da74:	2b00      	cmp	r3, #0
 800da76:	d020      	beq.n	800daba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f003 0308 	and.w	r3, r3, #8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d01b      	beq.n	800daba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f06f 0208 	mvn.w	r2, #8
 800da8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2204      	movs	r2, #4
 800da90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	f003 0303 	and.w	r3, r3, #3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d003      	beq.n	800daa8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fa9f 	bl	800dfe4 <HAL_TIM_IC_CaptureCallback>
 800daa6:	e005      	b.n	800dab4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7f3 fc31 	bl	8001310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 faa2 	bl	800dff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	f003 0310 	and.w	r3, r3, #16
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d020      	beq.n	800db06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f003 0310 	and.w	r3, r3, #16
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d01b      	beq.n	800db06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f06f 0210 	mvn.w	r2, #16
 800dad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2208      	movs	r2, #8
 800dadc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69db      	ldr	r3, [r3, #28]
 800dae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fa79 	bl	800dfe4 <HAL_TIM_IC_CaptureCallback>
 800daf2:	e005      	b.n	800db00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7f3 fc0b 	bl	8001310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fa7c 	bl	800dff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	f003 0301 	and.w	r3, r3, #1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00c      	beq.n	800db2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	2b00      	cmp	r3, #0
 800db18:	d007      	beq.n	800db2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f06f 0201 	mvn.w	r2, #1
 800db22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7f4 f9bd 	bl	8001ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db30:	2b00      	cmp	r3, #0
 800db32:	d104      	bne.n	800db3e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00c      	beq.n	800db58 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db44:	2b00      	cmp	r3, #0
 800db46:	d007      	beq.n	800db58 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800db50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 ffba 	bl	800eacc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00c      	beq.n	800db7c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d007      	beq.n	800db7c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 ffb2 	bl	800eae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00c      	beq.n	800dba0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d007      	beq.n	800dba0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fa36 	bl	800e00c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00c      	beq.n	800dbc4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f003 0320 	and.w	r3, r3, #32
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d007      	beq.n	800dbc4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f06f 0220 	mvn.w	r2, #32
 800dbbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 ff7a 	bl	800eab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbc4:	bf00      	nop
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d101      	bne.n	800dbea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dbe6:	2302      	movs	r3, #2
 800dbe8:	e0ff      	b.n	800ddea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2201      	movs	r2, #1
 800dbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b14      	cmp	r3, #20
 800dbf6:	f200 80f0 	bhi.w	800ddda <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dbfa:	a201      	add	r2, pc, #4	; (adr r2, 800dc00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc00:	0800dc55 	.word	0x0800dc55
 800dc04:	0800dddb 	.word	0x0800dddb
 800dc08:	0800dddb 	.word	0x0800dddb
 800dc0c:	0800dddb 	.word	0x0800dddb
 800dc10:	0800dc95 	.word	0x0800dc95
 800dc14:	0800dddb 	.word	0x0800dddb
 800dc18:	0800dddb 	.word	0x0800dddb
 800dc1c:	0800dddb 	.word	0x0800dddb
 800dc20:	0800dcd7 	.word	0x0800dcd7
 800dc24:	0800dddb 	.word	0x0800dddb
 800dc28:	0800dddb 	.word	0x0800dddb
 800dc2c:	0800dddb 	.word	0x0800dddb
 800dc30:	0800dd17 	.word	0x0800dd17
 800dc34:	0800dddb 	.word	0x0800dddb
 800dc38:	0800dddb 	.word	0x0800dddb
 800dc3c:	0800dddb 	.word	0x0800dddb
 800dc40:	0800dd59 	.word	0x0800dd59
 800dc44:	0800dddb 	.word	0x0800dddb
 800dc48:	0800dddb 	.word	0x0800dddb
 800dc4c:	0800dddb 	.word	0x0800dddb
 800dc50:	0800dd99 	.word	0x0800dd99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 fa86 	bl	800e16c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	699a      	ldr	r2, [r3, #24]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f042 0208 	orr.w	r2, r2, #8
 800dc6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	699a      	ldr	r2, [r3, #24]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f022 0204 	bic.w	r2, r2, #4
 800dc7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6999      	ldr	r1, [r3, #24]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	691a      	ldr	r2, [r3, #16]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	619a      	str	r2, [r3, #24]
      break;
 800dc92:	e0a5      	b.n	800dde0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68b9      	ldr	r1, [r7, #8]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 faf6 	bl	800e28c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	699a      	ldr	r2, [r3, #24]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	699a      	ldr	r2, [r3, #24]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6999      	ldr	r1, [r3, #24]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	021a      	lsls	r2, r3, #8
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	619a      	str	r2, [r3, #24]
      break;
 800dcd4:	e084      	b.n	800dde0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fb5f 	bl	800e3a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	69da      	ldr	r2, [r3, #28]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f042 0208 	orr.w	r2, r2, #8
 800dcf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	69da      	ldr	r2, [r3, #28]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f022 0204 	bic.w	r2, r2, #4
 800dd00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	69d9      	ldr	r1, [r3, #28]
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	691a      	ldr	r2, [r3, #16]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	430a      	orrs	r2, r1
 800dd12:	61da      	str	r2, [r3, #28]
      break;
 800dd14:	e064      	b.n	800dde0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68b9      	ldr	r1, [r7, #8]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 fbc7 	bl	800e4b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	69da      	ldr	r2, [r3, #28]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	69da      	ldr	r2, [r3, #28]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	69d9      	ldr	r1, [r3, #28]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	021a      	lsls	r2, r3, #8
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	430a      	orrs	r2, r1
 800dd54:	61da      	str	r2, [r3, #28]
      break;
 800dd56:	e043      	b.n	800dde0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68b9      	ldr	r1, [r7, #8]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 fc10 	bl	800e584 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f042 0208 	orr.w	r2, r2, #8
 800dd72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f022 0204 	bic.w	r2, r2, #4
 800dd82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	691a      	ldr	r2, [r3, #16]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	430a      	orrs	r2, r1
 800dd94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dd96:	e023      	b.n	800dde0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68b9      	ldr	r1, [r7, #8]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 fc54 	bl	800e64c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ddb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	021a      	lsls	r2, r3, #8
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	430a      	orrs	r2, r1
 800ddd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ddd8:	e002      	b.n	800dde0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	75fb      	strb	r3, [r7, #23]
      break;
 800ddde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop

0800ddf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <HAL_TIM_ConfigClockSource+0x1c>
 800de0c:	2302      	movs	r3, #2
 800de0e:	e0dc      	b.n	800dfca <HAL_TIM_ConfigClockSource+0x1d6>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2202      	movs	r2, #2
 800de1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	4b6a      	ldr	r3, [pc, #424]	; (800dfd4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800de2c:	4013      	ands	r3, r2
 800de2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a64      	ldr	r2, [pc, #400]	; (800dfd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de46:	4293      	cmp	r3, r2
 800de48:	f000 80a9 	beq.w	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800de4c:	4a62      	ldr	r2, [pc, #392]	; (800dfd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	f200 80ae 	bhi.w	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800de54:	4a61      	ldr	r2, [pc, #388]	; (800dfdc <HAL_TIM_ConfigClockSource+0x1e8>)
 800de56:	4293      	cmp	r3, r2
 800de58:	f000 80a1 	beq.w	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800de5c:	4a5f      	ldr	r2, [pc, #380]	; (800dfdc <HAL_TIM_ConfigClockSource+0x1e8>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	f200 80a6 	bhi.w	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800de64:	4a5e      	ldr	r2, [pc, #376]	; (800dfe0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800de66:	4293      	cmp	r3, r2
 800de68:	f000 8099 	beq.w	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800de6c:	4a5c      	ldr	r2, [pc, #368]	; (800dfe0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	f200 809e 	bhi.w	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800de74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de78:	f000 8091 	beq.w	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800de7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de80:	f200 8096 	bhi.w	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800de84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de88:	f000 8089 	beq.w	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800de8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de90:	f200 808e 	bhi.w	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800de94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de98:	d03e      	beq.n	800df18 <HAL_TIM_ConfigClockSource+0x124>
 800de9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de9e:	f200 8087 	bhi.w	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dea6:	f000 8086 	beq.w	800dfb6 <HAL_TIM_ConfigClockSource+0x1c2>
 800deaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deae:	d87f      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800deb0:	2b70      	cmp	r3, #112	; 0x70
 800deb2:	d01a      	beq.n	800deea <HAL_TIM_ConfigClockSource+0xf6>
 800deb4:	2b70      	cmp	r3, #112	; 0x70
 800deb6:	d87b      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800deb8:	2b60      	cmp	r3, #96	; 0x60
 800deba:	d050      	beq.n	800df5e <HAL_TIM_ConfigClockSource+0x16a>
 800debc:	2b60      	cmp	r3, #96	; 0x60
 800debe:	d877      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dec0:	2b50      	cmp	r3, #80	; 0x50
 800dec2:	d03c      	beq.n	800df3e <HAL_TIM_ConfigClockSource+0x14a>
 800dec4:	2b50      	cmp	r3, #80	; 0x50
 800dec6:	d873      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dec8:	2b40      	cmp	r3, #64	; 0x40
 800deca:	d058      	beq.n	800df7e <HAL_TIM_ConfigClockSource+0x18a>
 800decc:	2b40      	cmp	r3, #64	; 0x40
 800dece:	d86f      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ded0:	2b30      	cmp	r3, #48	; 0x30
 800ded2:	d064      	beq.n	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800ded4:	2b30      	cmp	r3, #48	; 0x30
 800ded6:	d86b      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ded8:	2b20      	cmp	r3, #32
 800deda:	d060      	beq.n	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800dedc:	2b20      	cmp	r3, #32
 800dede:	d867      	bhi.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d05c      	beq.n	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800dee4:	2b10      	cmp	r3, #16
 800dee6:	d05a      	beq.n	800df9e <HAL_TIM_ConfigClockSource+0x1aa>
 800dee8:	e062      	b.n	800dfb0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6818      	ldr	r0, [r3, #0]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	6899      	ldr	r1, [r3, #8]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	f000 fc8b 	bl	800e814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800df0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	609a      	str	r2, [r3, #8]
      break;
 800df16:	e04f      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6818      	ldr	r0, [r3, #0]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	6899      	ldr	r1, [r3, #8]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	f000 fc74 	bl	800e814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	689a      	ldr	r2, [r3, #8]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df3a:	609a      	str	r2, [r3, #8]
      break;
 800df3c:	e03c      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6818      	ldr	r0, [r3, #0]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	6859      	ldr	r1, [r3, #4]
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	461a      	mov	r2, r3
 800df4c:	f000 fbe4 	bl	800e718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2150      	movs	r1, #80	; 0x50
 800df56:	4618      	mov	r0, r3
 800df58:	f000 fc3e 	bl	800e7d8 <TIM_ITRx_SetConfig>
      break;
 800df5c:	e02c      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	6859      	ldr	r1, [r3, #4]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f000 fc03 	bl	800e776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2160      	movs	r1, #96	; 0x60
 800df76:	4618      	mov	r0, r3
 800df78:	f000 fc2e 	bl	800e7d8 <TIM_ITRx_SetConfig>
      break;
 800df7c:	e01c      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	6859      	ldr	r1, [r3, #4]
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	461a      	mov	r2, r3
 800df8c:	f000 fbc4 	bl	800e718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2140      	movs	r1, #64	; 0x40
 800df96:	4618      	mov	r0, r3
 800df98:	f000 fc1e 	bl	800e7d8 <TIM_ITRx_SetConfig>
      break;
 800df9c:	e00c      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	f000 fc15 	bl	800e7d8 <TIM_ITRx_SetConfig>
      break;
 800dfae:	e003      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	73fb      	strb	r3, [r7, #15]
      break;
 800dfb4:	e000      	b.n	800dfb8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dfb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	ffceff88 	.word	0xffceff88
 800dfd8:	00100040 	.word	0x00100040
 800dfdc:	00100030 	.word	0x00100030
 800dfe0:	00100020 	.word	0x00100020

0800dfe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a46      	ldr	r2, [pc, #280]	; (800e14c <TIM_Base_SetConfig+0x12c>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d013      	beq.n	800e060 <TIM_Base_SetConfig+0x40>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e03e:	d00f      	beq.n	800e060 <TIM_Base_SetConfig+0x40>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a43      	ldr	r2, [pc, #268]	; (800e150 <TIM_Base_SetConfig+0x130>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d00b      	beq.n	800e060 <TIM_Base_SetConfig+0x40>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a42      	ldr	r2, [pc, #264]	; (800e154 <TIM_Base_SetConfig+0x134>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d007      	beq.n	800e060 <TIM_Base_SetConfig+0x40>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a41      	ldr	r2, [pc, #260]	; (800e158 <TIM_Base_SetConfig+0x138>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d003      	beq.n	800e060 <TIM_Base_SetConfig+0x40>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a40      	ldr	r2, [pc, #256]	; (800e15c <TIM_Base_SetConfig+0x13c>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d108      	bne.n	800e072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4313      	orrs	r3, r2
 800e070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4a35      	ldr	r2, [pc, #212]	; (800e14c <TIM_Base_SetConfig+0x12c>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d01f      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e080:	d01b      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a32      	ldr	r2, [pc, #200]	; (800e150 <TIM_Base_SetConfig+0x130>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d017      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a31      	ldr	r2, [pc, #196]	; (800e154 <TIM_Base_SetConfig+0x134>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d013      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4a30      	ldr	r2, [pc, #192]	; (800e158 <TIM_Base_SetConfig+0x138>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d00f      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a2f      	ldr	r2, [pc, #188]	; (800e15c <TIM_Base_SetConfig+0x13c>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d00b      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a2e      	ldr	r2, [pc, #184]	; (800e160 <TIM_Base_SetConfig+0x140>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d007      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a2d      	ldr	r2, [pc, #180]	; (800e164 <TIM_Base_SetConfig+0x144>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d003      	beq.n	800e0ba <TIM_Base_SetConfig+0x9a>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a2c      	ldr	r2, [pc, #176]	; (800e168 <TIM_Base_SetConfig+0x148>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d108      	bne.n	800e0cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	695b      	ldr	r3, [r3, #20]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a16      	ldr	r2, [pc, #88]	; (800e14c <TIM_Base_SetConfig+0x12c>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d00f      	beq.n	800e118 <TIM_Base_SetConfig+0xf8>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4a18      	ldr	r2, [pc, #96]	; (800e15c <TIM_Base_SetConfig+0x13c>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d00b      	beq.n	800e118 <TIM_Base_SetConfig+0xf8>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4a17      	ldr	r2, [pc, #92]	; (800e160 <TIM_Base_SetConfig+0x140>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d007      	beq.n	800e118 <TIM_Base_SetConfig+0xf8>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4a16      	ldr	r2, [pc, #88]	; (800e164 <TIM_Base_SetConfig+0x144>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d003      	beq.n	800e118 <TIM_Base_SetConfig+0xf8>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4a15      	ldr	r2, [pc, #84]	; (800e168 <TIM_Base_SetConfig+0x148>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d103      	bne.n	800e120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	691a      	ldr	r2, [r3, #16]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d105      	bne.n	800e13e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	f023 0201 	bic.w	r2, r3, #1
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	611a      	str	r2, [r3, #16]
  }
}
 800e13e:	bf00      	nop
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	40010000 	.word	0x40010000
 800e150:	40000400 	.word	0x40000400
 800e154:	40000800 	.word	0x40000800
 800e158:	40000c00 	.word	0x40000c00
 800e15c:	40010400 	.word	0x40010400
 800e160:	40014000 	.word	0x40014000
 800e164:	40014400 	.word	0x40014400
 800e168:	40014800 	.word	0x40014800

0800e16c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b087      	sub	sp, #28
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a1b      	ldr	r3, [r3, #32]
 800e17a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6a1b      	ldr	r3, [r3, #32]
 800e180:	f023 0201 	bic.w	r2, r3, #1
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	699b      	ldr	r3, [r3, #24]
 800e192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	4b37      	ldr	r3, [pc, #220]	; (800e274 <TIM_OC1_SetConfig+0x108>)
 800e198:	4013      	ands	r3, r2
 800e19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f023 0303 	bic.w	r3, r3, #3
 800e1a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f023 0302 	bic.w	r3, r3, #2
 800e1b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4a2d      	ldr	r2, [pc, #180]	; (800e278 <TIM_OC1_SetConfig+0x10c>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d00f      	beq.n	800e1e8 <TIM_OC1_SetConfig+0x7c>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4a2c      	ldr	r2, [pc, #176]	; (800e27c <TIM_OC1_SetConfig+0x110>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d00b      	beq.n	800e1e8 <TIM_OC1_SetConfig+0x7c>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4a2b      	ldr	r2, [pc, #172]	; (800e280 <TIM_OC1_SetConfig+0x114>)
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d007      	beq.n	800e1e8 <TIM_OC1_SetConfig+0x7c>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4a2a      	ldr	r2, [pc, #168]	; (800e284 <TIM_OC1_SetConfig+0x118>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d003      	beq.n	800e1e8 <TIM_OC1_SetConfig+0x7c>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a29      	ldr	r2, [pc, #164]	; (800e288 <TIM_OC1_SetConfig+0x11c>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d10c      	bne.n	800e202 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	f023 0308 	bic.w	r3, r3, #8
 800e1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	697a      	ldr	r2, [r7, #20]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f023 0304 	bic.w	r3, r3, #4
 800e200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4a1c      	ldr	r2, [pc, #112]	; (800e278 <TIM_OC1_SetConfig+0x10c>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d00f      	beq.n	800e22a <TIM_OC1_SetConfig+0xbe>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4a1b      	ldr	r2, [pc, #108]	; (800e27c <TIM_OC1_SetConfig+0x110>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d00b      	beq.n	800e22a <TIM_OC1_SetConfig+0xbe>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a1a      	ldr	r2, [pc, #104]	; (800e280 <TIM_OC1_SetConfig+0x114>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d007      	beq.n	800e22a <TIM_OC1_SetConfig+0xbe>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a19      	ldr	r2, [pc, #100]	; (800e284 <TIM_OC1_SetConfig+0x118>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d003      	beq.n	800e22a <TIM_OC1_SetConfig+0xbe>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4a18      	ldr	r2, [pc, #96]	; (800e288 <TIM_OC1_SetConfig+0x11c>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d111      	bne.n	800e24e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	693a      	ldr	r2, [r7, #16]
 800e240:	4313      	orrs	r3, r2
 800e242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	693a      	ldr	r2, [r7, #16]
 800e252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	697a      	ldr	r2, [r7, #20]
 800e266:	621a      	str	r2, [r3, #32]
}
 800e268:	bf00      	nop
 800e26a:	371c      	adds	r7, #28
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	fffeff8f 	.word	0xfffeff8f
 800e278:	40010000 	.word	0x40010000
 800e27c:	40010400 	.word	0x40010400
 800e280:	40014000 	.word	0x40014000
 800e284:	40014400 	.word	0x40014400
 800e288:	40014800 	.word	0x40014800

0800e28c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a1b      	ldr	r3, [r3, #32]
 800e2a0:	f023 0210 	bic.w	r2, r3, #16
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	4b34      	ldr	r3, [pc, #208]	; (800e388 <TIM_OC2_SetConfig+0xfc>)
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	021b      	lsls	r3, r3, #8
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	f023 0320 	bic.w	r3, r3, #32
 800e2d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	689b      	ldr	r3, [r3, #8]
 800e2dc:	011b      	lsls	r3, r3, #4
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a29      	ldr	r2, [pc, #164]	; (800e38c <TIM_OC2_SetConfig+0x100>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d003      	beq.n	800e2f4 <TIM_OC2_SetConfig+0x68>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a28      	ldr	r2, [pc, #160]	; (800e390 <TIM_OC2_SetConfig+0x104>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d10d      	bne.n	800e310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	011b      	lsls	r3, r3, #4
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	4313      	orrs	r3, r2
 800e306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e30e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a1e      	ldr	r2, [pc, #120]	; (800e38c <TIM_OC2_SetConfig+0x100>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d00f      	beq.n	800e338 <TIM_OC2_SetConfig+0xac>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a1d      	ldr	r2, [pc, #116]	; (800e390 <TIM_OC2_SetConfig+0x104>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d00b      	beq.n	800e338 <TIM_OC2_SetConfig+0xac>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a1c      	ldr	r2, [pc, #112]	; (800e394 <TIM_OC2_SetConfig+0x108>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d007      	beq.n	800e338 <TIM_OC2_SetConfig+0xac>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	4a1b      	ldr	r2, [pc, #108]	; (800e398 <TIM_OC2_SetConfig+0x10c>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d003      	beq.n	800e338 <TIM_OC2_SetConfig+0xac>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a1a      	ldr	r2, [pc, #104]	; (800e39c <TIM_OC2_SetConfig+0x110>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d113      	bne.n	800e360 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e33e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	693a      	ldr	r2, [r7, #16]
 800e350:	4313      	orrs	r3, r2
 800e352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	699b      	ldr	r3, [r3, #24]
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	693a      	ldr	r2, [r7, #16]
 800e35c:	4313      	orrs	r3, r2
 800e35e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	685a      	ldr	r2, [r3, #4]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	621a      	str	r2, [r3, #32]
}
 800e37a:	bf00      	nop
 800e37c:	371c      	adds	r7, #28
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	feff8fff 	.word	0xfeff8fff
 800e38c:	40010000 	.word	0x40010000
 800e390:	40010400 	.word	0x40010400
 800e394:	40014000 	.word	0x40014000
 800e398:	40014400 	.word	0x40014400
 800e39c:	40014800 	.word	0x40014800

0800e3a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b087      	sub	sp, #28
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a1b      	ldr	r3, [r3, #32]
 800e3b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	69db      	ldr	r3, [r3, #28]
 800e3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	4b33      	ldr	r3, [pc, #204]	; (800e498 <TIM_OC3_SetConfig+0xf8>)
 800e3cc:	4013      	ands	r3, r2
 800e3ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f023 0303 	bic.w	r3, r3, #3
 800e3d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4a28      	ldr	r2, [pc, #160]	; (800e49c <TIM_OC3_SetConfig+0xfc>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d003      	beq.n	800e406 <TIM_OC3_SetConfig+0x66>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4a27      	ldr	r2, [pc, #156]	; (800e4a0 <TIM_OC3_SetConfig+0x100>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d10d      	bne.n	800e422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e40c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	697a      	ldr	r2, [r7, #20]
 800e416:	4313      	orrs	r3, r2
 800e418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a1d      	ldr	r2, [pc, #116]	; (800e49c <TIM_OC3_SetConfig+0xfc>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d00f      	beq.n	800e44a <TIM_OC3_SetConfig+0xaa>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4a1c      	ldr	r2, [pc, #112]	; (800e4a0 <TIM_OC3_SetConfig+0x100>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d00b      	beq.n	800e44a <TIM_OC3_SetConfig+0xaa>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a1b      	ldr	r2, [pc, #108]	; (800e4a4 <TIM_OC3_SetConfig+0x104>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d007      	beq.n	800e44a <TIM_OC3_SetConfig+0xaa>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4a1a      	ldr	r2, [pc, #104]	; (800e4a8 <TIM_OC3_SetConfig+0x108>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d003      	beq.n	800e44a <TIM_OC3_SetConfig+0xaa>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4a19      	ldr	r2, [pc, #100]	; (800e4ac <TIM_OC3_SetConfig+0x10c>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d113      	bne.n	800e472 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	011b      	lsls	r3, r3, #4
 800e460:	693a      	ldr	r2, [r7, #16]
 800e462:	4313      	orrs	r3, r2
 800e464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	011b      	lsls	r3, r3, #4
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	4313      	orrs	r3, r2
 800e470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	621a      	str	r2, [r3, #32]
}
 800e48c:	bf00      	nop
 800e48e:	371c      	adds	r7, #28
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	fffeff8f 	.word	0xfffeff8f
 800e49c:	40010000 	.word	0x40010000
 800e4a0:	40010400 	.word	0x40010400
 800e4a4:	40014000 	.word	0x40014000
 800e4a8:	40014400 	.word	0x40014400
 800e4ac:	40014800 	.word	0x40014800

0800e4b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a1b      	ldr	r3, [r3, #32]
 800e4c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	4b24      	ldr	r3, [pc, #144]	; (800e56c <TIM_OC4_SetConfig+0xbc>)
 800e4dc:	4013      	ands	r3, r2
 800e4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	021b      	lsls	r3, r3, #8
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	031b      	lsls	r3, r3, #12
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	4313      	orrs	r3, r2
 800e506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a19      	ldr	r2, [pc, #100]	; (800e570 <TIM_OC4_SetConfig+0xc0>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d00f      	beq.n	800e530 <TIM_OC4_SetConfig+0x80>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4a18      	ldr	r2, [pc, #96]	; (800e574 <TIM_OC4_SetConfig+0xc4>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d00b      	beq.n	800e530 <TIM_OC4_SetConfig+0x80>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4a17      	ldr	r2, [pc, #92]	; (800e578 <TIM_OC4_SetConfig+0xc8>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d007      	beq.n	800e530 <TIM_OC4_SetConfig+0x80>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4a16      	ldr	r2, [pc, #88]	; (800e57c <TIM_OC4_SetConfig+0xcc>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d003      	beq.n	800e530 <TIM_OC4_SetConfig+0x80>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a15      	ldr	r2, [pc, #84]	; (800e580 <TIM_OC4_SetConfig+0xd0>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d109      	bne.n	800e544 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	019b      	lsls	r3, r3, #6
 800e53e:	697a      	ldr	r2, [r7, #20]
 800e540:	4313      	orrs	r3, r2
 800e542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	693a      	ldr	r2, [r7, #16]
 800e55c:	621a      	str	r2, [r3, #32]
}
 800e55e:	bf00      	nop
 800e560:	371c      	adds	r7, #28
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	feff8fff 	.word	0xfeff8fff
 800e570:	40010000 	.word	0x40010000
 800e574:	40010400 	.word	0x40010400
 800e578:	40014000 	.word	0x40014000
 800e57c:	40014400 	.word	0x40014400
 800e580:	40014800 	.word	0x40014800

0800e584 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e584:	b480      	push	{r7}
 800e586:	b087      	sub	sp, #28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a1b      	ldr	r3, [r3, #32]
 800e592:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	4b21      	ldr	r3, [pc, #132]	; (800e634 <TIM_OC5_SetConfig+0xb0>)
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e5c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	041b      	lsls	r3, r3, #16
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a18      	ldr	r2, [pc, #96]	; (800e638 <TIM_OC5_SetConfig+0xb4>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d00f      	beq.n	800e5fa <TIM_OC5_SetConfig+0x76>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a17      	ldr	r2, [pc, #92]	; (800e63c <TIM_OC5_SetConfig+0xb8>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d00b      	beq.n	800e5fa <TIM_OC5_SetConfig+0x76>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a16      	ldr	r2, [pc, #88]	; (800e640 <TIM_OC5_SetConfig+0xbc>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d007      	beq.n	800e5fa <TIM_OC5_SetConfig+0x76>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4a15      	ldr	r2, [pc, #84]	; (800e644 <TIM_OC5_SetConfig+0xc0>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d003      	beq.n	800e5fa <TIM_OC5_SetConfig+0x76>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4a14      	ldr	r2, [pc, #80]	; (800e648 <TIM_OC5_SetConfig+0xc4>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d109      	bne.n	800e60e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e600:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	021b      	lsls	r3, r3, #8
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	685a      	ldr	r2, [r3, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	693a      	ldr	r2, [r7, #16]
 800e626:	621a      	str	r2, [r3, #32]
}
 800e628:	bf00      	nop
 800e62a:	371c      	adds	r7, #28
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	fffeff8f 	.word	0xfffeff8f
 800e638:	40010000 	.word	0x40010000
 800e63c:	40010400 	.word	0x40010400
 800e640:	40014000 	.word	0x40014000
 800e644:	40014400 	.word	0x40014400
 800e648:	40014800 	.word	0x40014800

0800e64c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b087      	sub	sp, #28
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a1b      	ldr	r3, [r3, #32]
 800e660:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4b22      	ldr	r3, [pc, #136]	; (800e700 <TIM_OC6_SetConfig+0xb4>)
 800e678:	4013      	ands	r3, r2
 800e67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	021b      	lsls	r3, r3, #8
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	4313      	orrs	r3, r2
 800e686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e68e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	051b      	lsls	r3, r3, #20
 800e696:	693a      	ldr	r2, [r7, #16]
 800e698:	4313      	orrs	r3, r2
 800e69a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a19      	ldr	r2, [pc, #100]	; (800e704 <TIM_OC6_SetConfig+0xb8>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d00f      	beq.n	800e6c4 <TIM_OC6_SetConfig+0x78>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a18      	ldr	r2, [pc, #96]	; (800e708 <TIM_OC6_SetConfig+0xbc>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d00b      	beq.n	800e6c4 <TIM_OC6_SetConfig+0x78>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4a17      	ldr	r2, [pc, #92]	; (800e70c <TIM_OC6_SetConfig+0xc0>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d007      	beq.n	800e6c4 <TIM_OC6_SetConfig+0x78>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a16      	ldr	r2, [pc, #88]	; (800e710 <TIM_OC6_SetConfig+0xc4>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d003      	beq.n	800e6c4 <TIM_OC6_SetConfig+0x78>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a15      	ldr	r2, [pc, #84]	; (800e714 <TIM_OC6_SetConfig+0xc8>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d109      	bne.n	800e6d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	029b      	lsls	r3, r3, #10
 800e6d2:	697a      	ldr	r2, [r7, #20]
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	685a      	ldr	r2, [r3, #4]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	621a      	str	r2, [r3, #32]
}
 800e6f2:	bf00      	nop
 800e6f4:	371c      	adds	r7, #28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	feff8fff 	.word	0xfeff8fff
 800e704:	40010000 	.word	0x40010000
 800e708:	40010400 	.word	0x40010400
 800e70c:	40014000 	.word	0x40014000
 800e710:	40014400 	.word	0x40014400
 800e714:	40014800 	.word	0x40014800

0800e718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e718:	b480      	push	{r7}
 800e71a:	b087      	sub	sp, #28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6a1b      	ldr	r3, [r3, #32]
 800e728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	f023 0201 	bic.w	r2, r3, #1
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	011b      	lsls	r3, r3, #4
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	f023 030a 	bic.w	r3, r3, #10
 800e754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	4313      	orrs	r3, r2
 800e75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	621a      	str	r2, [r3, #32]
}
 800e76a:	bf00      	nop
 800e76c:	371c      	adds	r7, #28
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e776:	b480      	push	{r7}
 800e778:	b087      	sub	sp, #28
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	f023 0210 	bic.w	r2, r3, #16
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	031b      	lsls	r3, r3, #12
 800e7a6:	693a      	ldr	r2, [r7, #16]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	697a      	ldr	r2, [r7, #20]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	693a      	ldr	r2, [r7, #16]
 800e7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	621a      	str	r2, [r3, #32]
}
 800e7ca:	bf00      	nop
 800e7cc:	371c      	adds	r7, #28
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr
	...

0800e7d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	4b09      	ldr	r3, [pc, #36]	; (800e810 <TIM_ITRx_SetConfig+0x38>)
 800e7ec:	4013      	ands	r3, r2
 800e7ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	f043 0307 	orr.w	r3, r3, #7
 800e7fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	609a      	str	r2, [r3, #8]
}
 800e802:	bf00      	nop
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	ffcfff8f 	.word	0xffcfff8f

0800e814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e814:	b480      	push	{r7}
 800e816:	b087      	sub	sp, #28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e82e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	021a      	lsls	r2, r3, #8
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	431a      	orrs	r2, r3
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	697a      	ldr	r2, [r7, #20]
 800e83e:	4313      	orrs	r3, r2
 800e840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	609a      	str	r2, [r3, #8]
}
 800e848:	bf00      	nop
 800e84a:	371c      	adds	r7, #28
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e854:	b480      	push	{r7}
 800e856:	b087      	sub	sp, #28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	f003 031f 	and.w	r3, r3, #31
 800e866:	2201      	movs	r2, #1
 800e868:	fa02 f303 	lsl.w	r3, r2, r3
 800e86c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6a1a      	ldr	r2, [r3, #32]
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	43db      	mvns	r3, r3
 800e876:	401a      	ands	r2, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6a1a      	ldr	r2, [r3, #32]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	f003 031f 	and.w	r3, r3, #31
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	fa01 f303 	lsl.w	r3, r1, r3
 800e88c:	431a      	orrs	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	621a      	str	r2, [r3, #32]
}
 800e892:	bf00      	nop
 800e894:	371c      	adds	r7, #28
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
	...

0800e8a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d101      	bne.n	800e8b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	e06d      	b.n	800e994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2202      	movs	r2, #2
 800e8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a30      	ldr	r2, [pc, #192]	; (800e9a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d004      	beq.n	800e8ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4a2f      	ldr	r2, [pc, #188]	; (800e9a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d108      	bne.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e8f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a20      	ldr	r2, [pc, #128]	; (800e9a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d022      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e92a:	d01d      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a1d      	ldr	r2, [pc, #116]	; (800e9a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d018      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a1c      	ldr	r2, [pc, #112]	; (800e9ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d013      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a1a      	ldr	r2, [pc, #104]	; (800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d00e      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a15      	ldr	r2, [pc, #84]	; (800e9a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d009      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a16      	ldr	r2, [pc, #88]	; (800e9b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d004      	beq.n	800e968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d10c      	bne.n	800e982 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e96e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	4313      	orrs	r3, r2
 800e978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2201      	movs	r2, #1
 800e986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	40010000 	.word	0x40010000
 800e9a4:	40010400 	.word	0x40010400
 800e9a8:	40000400 	.word	0x40000400
 800e9ac:	40000800 	.word	0x40000800
 800e9b0:	40000c00 	.word	0x40000c00
 800e9b4:	40001800 	.word	0x40001800
 800e9b8:	40014000 	.word	0x40014000

0800e9bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d101      	bne.n	800e9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	e065      	b.n	800eaa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	691b      	ldr	r3, [r3, #16]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	4313      	orrs	r3, r2
 800ea32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	041b      	lsls	r3, r3, #16
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a16      	ldr	r2, [pc, #88]	; (800eab0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d004      	beq.n	800ea66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a14      	ldr	r2, [pc, #80]	; (800eab4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d115      	bne.n	800ea92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea70:	051b      	lsls	r3, r3, #20
 800ea72:	4313      	orrs	r3, r2
 800ea74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	69db      	ldr	r3, [r3, #28]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	40010000 	.word	0x40010000
 800eab4:	40010400 	.word	0x40010400

0800eab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	e042      	b.n	800eb8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7f4 fa2f 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2224      	movs	r2, #36	; 0x24
 800eb22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f022 0201 	bic.w	r2, r2, #1
 800eb34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f001 fc42 	bl	80103c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fed7 	bl	800f8f8 <UART_SetConfig>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d101      	bne.n	800eb54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	e01b      	b.n	800eb8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	685a      	ldr	r2, [r3, #4]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	689a      	ldr	r2, [r3, #8]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f042 0201 	orr.w	r2, r2, #1
 800eb82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f001 fcc1 	bl	801050c <UART_CheckIdleState>
 800eb8a:	4603      	mov	r3, r0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b08a      	sub	sp, #40	; 0x28
 800eb98:	af02      	add	r7, sp, #8
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	603b      	str	r3, [r7, #0]
 800eba0:	4613      	mov	r3, r2
 800eba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebaa:	2b20      	cmp	r3, #32
 800ebac:	d17b      	bne.n	800eca6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <HAL_UART_Transmit+0x26>
 800ebb4:	88fb      	ldrh	r3, [r7, #6]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e074      	b.n	800eca8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2221      	movs	r2, #33	; 0x21
 800ebca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ebce:	f7f4 fccf 	bl	8003570 <HAL_GetTick>
 800ebd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	88fa      	ldrh	r2, [r7, #6]
 800ebd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	88fa      	ldrh	r2, [r7, #6]
 800ebe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebec:	d108      	bne.n	800ec00 <HAL_UART_Transmit+0x6c>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d104      	bne.n	800ec00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	61bb      	str	r3, [r7, #24]
 800ebfe:	e003      	b.n	800ec08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec04:	2300      	movs	r3, #0
 800ec06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ec08:	e030      	b.n	800ec6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	2200      	movs	r2, #0
 800ec12:	2180      	movs	r1, #128	; 0x80
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f001 fd23 	bl	8010660 <UART_WaitOnFlagUntilTimeout>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d005      	beq.n	800ec2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2220      	movs	r2, #32
 800ec24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	e03d      	b.n	800eca8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10b      	bne.n	800ec4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	881b      	ldrh	r3, [r3, #0]
 800ec36:	461a      	mov	r2, r3
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	3302      	adds	r3, #2
 800ec46:	61bb      	str	r3, [r7, #24]
 800ec48:	e007      	b.n	800ec5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	781a      	ldrb	r2, [r3, #0]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	3301      	adds	r3, #1
 800ec58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	3b01      	subs	r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1c8      	bne.n	800ec0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	2140      	movs	r1, #64	; 0x40
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f001 fcec 	bl	8010660 <UART_WaitOnFlagUntilTimeout>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d005      	beq.n	800ec9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2220      	movs	r2, #32
 800ec92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e006      	b.n	800eca8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2220      	movs	r2, #32
 800ec9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	e000      	b.n	800eca8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800eca6:	2302      	movs	r3, #2
  }
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3720      	adds	r7, #32
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b08a      	sub	sp, #40	; 0x28
 800ecb4:	af02      	add	r7, sp, #8
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecc6:	2b20      	cmp	r3, #32
 800ecc8:	f040 80b5 	bne.w	800ee36 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d002      	beq.n	800ecd8 <HAL_UART_Receive+0x28>
 800ecd2:	88fb      	ldrh	r3, [r7, #6]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e0ad      	b.n	800ee38 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2222      	movs	r2, #34	; 0x22
 800ece8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ecf2:	f7f4 fc3d 	bl	8003570 <HAL_GetTick>
 800ecf6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	88fa      	ldrh	r2, [r7, #6]
 800ecfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	88fa      	ldrh	r2, [r7, #6]
 800ed04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed10:	d10e      	bne.n	800ed30 <HAL_UART_Receive+0x80>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <HAL_UART_Receive+0x76>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed24:	e02d      	b.n	800ed82 <HAL_UART_Receive+0xd2>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	22ff      	movs	r2, #255	; 0xff
 800ed2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed2e:	e028      	b.n	800ed82 <HAL_UART_Receive+0xd2>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10d      	bne.n	800ed54 <HAL_UART_Receive+0xa4>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d104      	bne.n	800ed4a <HAL_UART_Receive+0x9a>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	22ff      	movs	r2, #255	; 0xff
 800ed44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed48:	e01b      	b.n	800ed82 <HAL_UART_Receive+0xd2>
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	227f      	movs	r2, #127	; 0x7f
 800ed4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed52:	e016      	b.n	800ed82 <HAL_UART_Receive+0xd2>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed5c:	d10d      	bne.n	800ed7a <HAL_UART_Receive+0xca>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d104      	bne.n	800ed70 <HAL_UART_Receive+0xc0>
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	227f      	movs	r2, #127	; 0x7f
 800ed6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed6e:	e008      	b.n	800ed82 <HAL_UART_Receive+0xd2>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	223f      	movs	r2, #63	; 0x3f
 800ed74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed78:	e003      	b.n	800ed82 <HAL_UART_Receive+0xd2>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed88:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed92:	d108      	bne.n	800eda6 <HAL_UART_Receive+0xf6>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d104      	bne.n	800eda6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	61bb      	str	r3, [r7, #24]
 800eda4:	e003      	b.n	800edae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800edaa:	2300      	movs	r3, #0
 800edac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800edae:	e036      	b.n	800ee1e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	2200      	movs	r2, #0
 800edb8:	2120      	movs	r1, #32
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f001 fc50 	bl	8010660 <UART_WaitOnFlagUntilTimeout>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d005      	beq.n	800edd2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2220      	movs	r2, #32
 800edca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800edce:	2303      	movs	r3, #3
 800edd0:	e032      	b.n	800ee38 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10c      	bne.n	800edf2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edde:	b29a      	uxth	r2, r3
 800ede0:	8a7b      	ldrh	r3, [r7, #18]
 800ede2:	4013      	ands	r3, r2
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	3302      	adds	r3, #2
 800edee:	61bb      	str	r3, [r7, #24]
 800edf0:	e00c      	b.n	800ee0c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf8:	b2da      	uxtb	r2, r3
 800edfa:	8a7b      	ldrh	r3, [r7, #18]
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	4013      	ands	r3, r2
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	3b01      	subs	r3, #1
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1c2      	bne.n	800edb0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2220      	movs	r2, #32
 800ee2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e000      	b.n	800ee38 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ee36:	2302      	movs	r3, #2
  }
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3720      	adds	r7, #32
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b08a      	sub	sp, #40	; 0x28
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee54:	2b20      	cmp	r3, #32
 800ee56:	d137      	bne.n	800eec8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <HAL_UART_Receive_IT+0x24>
 800ee5e:	88fb      	ldrh	r3, [r7, #6]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ee64:	2301      	movs	r3, #1
 800ee66:	e030      	b.n	800eeca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a18      	ldr	r2, [pc, #96]	; (800eed4 <HAL_UART_Receive_IT+0x94>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d01f      	beq.n	800eeb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d018      	beq.n	800eeb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	e853 3f00 	ldrex	r3, [r3]
 800ee92:	613b      	str	r3, [r7, #16]
   return(result);
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ee9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	461a      	mov	r2, r3
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	623b      	str	r3, [r7, #32]
 800eea6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea8:	69f9      	ldr	r1, [r7, #28]
 800eeaa:	6a3a      	ldr	r2, [r7, #32]
 800eeac:	e841 2300 	strex	r3, r2, [r1]
 800eeb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e6      	bne.n	800ee86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eeb8:	88fb      	ldrh	r3, [r7, #6]
 800eeba:	461a      	mov	r2, r3
 800eebc:	68b9      	ldr	r1, [r7, #8]
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f001 fc3c 	bl	801073c <UART_Start_Receive_IT>
 800eec4:	4603      	mov	r3, r0
 800eec6:	e000      	b.n	800eeca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eec8:	2302      	movs	r3, #2
  }
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3728      	adds	r7, #40	; 0x28
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	58000c00 	.word	0x58000c00

0800eed8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08a      	sub	sp, #40	; 0x28
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	4613      	mov	r3, r2
 800eee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeec:	2b20      	cmp	r3, #32
 800eeee:	d167      	bne.n	800efc0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <HAL_UART_Transmit_DMA+0x24>
 800eef6:	88fb      	ldrh	r3, [r7, #6]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800eefc:	2301      	movs	r3, #1
 800eefe:	e060      	b.n	800efc2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	88fa      	ldrh	r2, [r7, #6]
 800ef0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	88fa      	ldrh	r2, [r7, #6]
 800ef12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2221      	movs	r2, #33	; 0x21
 800ef22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d028      	beq.n	800ef80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef32:	4a26      	ldr	r2, [pc, #152]	; (800efcc <HAL_UART_Transmit_DMA+0xf4>)
 800ef34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef3a:	4a25      	ldr	r2, [pc, #148]	; (800efd0 <HAL_UART_Transmit_DMA+0xf8>)
 800ef3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef42:	4a24      	ldr	r2, [pc, #144]	; (800efd4 <HAL_UART_Transmit_DMA+0xfc>)
 800ef44:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef56:	4619      	mov	r1, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3328      	adds	r3, #40	; 0x28
 800ef5e:	461a      	mov	r2, r3
 800ef60:	88fb      	ldrh	r3, [r7, #6]
 800ef62:	f7f6 ff89 	bl	8005e78 <HAL_DMA_Start_IT>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d009      	beq.n	800ef80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2210      	movs	r2, #16
 800ef70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2220      	movs	r2, #32
 800ef78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e020      	b.n	800efc2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2240      	movs	r2, #64	; 0x40
 800ef86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	e853 3f00 	ldrex	r3, [r3]
 800ef96:	613b      	str	r3, [r7, #16]
   return(result);
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	3308      	adds	r3, #8
 800efa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa8:	623a      	str	r2, [r7, #32]
 800efaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efac:	69f9      	ldr	r1, [r7, #28]
 800efae:	6a3a      	ldr	r2, [r7, #32]
 800efb0:	e841 2300 	strex	r3, r2, [r1]
 800efb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1e5      	bne.n	800ef88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e000      	b.n	800efc2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800efc0:	2302      	movs	r3, #2
  }
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3728      	adds	r7, #40	; 0x28
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	08010ad1 	.word	0x08010ad1
 800efd0:	08010b67 	.word	0x08010b67
 800efd4:	08010b83 	.word	0x08010b83

0800efd8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b09a      	sub	sp, #104	; 0x68
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800efee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eff4:	667b      	str	r3, [r7, #100]	; 0x64
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800effe:	657b      	str	r3, [r7, #84]	; 0x54
 800f000:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f006:	e841 2300 	strex	r3, r2, [r1]
 800f00a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e6      	bne.n	800efe0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3308      	adds	r3, #8
 800f018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01c:	e853 3f00 	ldrex	r3, [r3]
 800f020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f024:	4b46      	ldr	r3, [pc, #280]	; (800f140 <HAL_UART_AbortReceive+0x168>)
 800f026:	4013      	ands	r3, r2
 800f028:	663b      	str	r3, [r7, #96]	; 0x60
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	3308      	adds	r3, #8
 800f030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f032:	643a      	str	r2, [r7, #64]	; 0x40
 800f034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f03a:	e841 2300 	strex	r3, r2, [r1]
 800f03e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1e5      	bne.n	800f012 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d118      	bne.n	800f080 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f054:	6a3b      	ldr	r3, [r7, #32]
 800f056:	e853 3f00 	ldrex	r3, [r3]
 800f05a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	f023 0310 	bic.w	r3, r3, #16
 800f062:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	461a      	mov	r2, r3
 800f06a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f06c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f06e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f074:	e841 2300 	strex	r3, r2, [r1]
 800f078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1e6      	bne.n	800f04e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f08a:	2b40      	cmp	r3, #64	; 0x40
 800f08c:	d13b      	bne.n	800f106 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3308      	adds	r3, #8
 800f094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	e853 3f00 	ldrex	r3, [r3]
 800f09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0ae:	61ba      	str	r2, [r7, #24]
 800f0b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b2:	6979      	ldr	r1, [r7, #20]
 800f0b4:	69ba      	ldr	r2, [r7, #24]
 800f0b6:	e841 2300 	strex	r3, r2, [r1]
 800f0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1e5      	bne.n	800f08e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d01c      	beq.n	800f106 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7f7 f935 	bl	800634c <HAL_DMA_Abort>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00e      	beq.n	800f106 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7f8 fdba 	bl	8007c68 <HAL_DMA_GetError>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b20      	cmp	r3, #32
 800f0f8:	d105      	bne.n	800f106 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2210      	movs	r2, #16
 800f0fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800f102:	2303      	movs	r3, #3
 800f104:	e017      	b.n	800f136 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	220f      	movs	r2, #15
 800f114:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	699a      	ldr	r2, [r3, #24]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f042 0208 	orr.w	r2, r2, #8
 800f124:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2220      	movs	r2, #32
 800f12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3768      	adds	r7, #104	; 0x68
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	effffffe 	.word	0xeffffffe

0800f144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b0ba      	sub	sp, #232	; 0xe8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	69db      	ldr	r3, [r3, #28]
 800f152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	689b      	ldr	r3, [r3, #8]
 800f166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f16a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f16e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f172:	4013      	ands	r3, r2
 800f174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d11b      	bne.n	800f1b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f184:	f003 0320 	and.w	r3, r3, #32
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d015      	beq.n	800f1b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f190:	f003 0320 	and.w	r3, r3, #32
 800f194:	2b00      	cmp	r3, #0
 800f196:	d105      	bne.n	800f1a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d009      	beq.n	800f1b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f000 8377 	beq.w	800f89c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	4798      	blx	r3
      }
      return;
 800f1b6:	e371      	b.n	800f89c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f1b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 8123 	beq.w	800f408 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f1c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f1c6:	4b8d      	ldr	r3, [pc, #564]	; (800f3fc <HAL_UART_IRQHandler+0x2b8>)
 800f1c8:	4013      	ands	r3, r2
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d106      	bne.n	800f1dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f1ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f1d2:	4b8b      	ldr	r3, [pc, #556]	; (800f400 <HAL_UART_IRQHandler+0x2bc>)
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f000 8116 	beq.w	800f408 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1e0:	f003 0301 	and.w	r3, r3, #1
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d011      	beq.n	800f20c <HAL_UART_IRQHandler+0xc8>
 800f1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00b      	beq.n	800f20c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f202:	f043 0201 	orr.w	r2, r3, #1
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f210:	f003 0302 	and.w	r3, r3, #2
 800f214:	2b00      	cmp	r3, #0
 800f216:	d011      	beq.n	800f23c <HAL_UART_IRQHandler+0xf8>
 800f218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00b      	beq.n	800f23c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2202      	movs	r2, #2
 800f22a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f232:	f043 0204 	orr.w	r2, r3, #4
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f240:	f003 0304 	and.w	r3, r3, #4
 800f244:	2b00      	cmp	r3, #0
 800f246:	d011      	beq.n	800f26c <HAL_UART_IRQHandler+0x128>
 800f248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f24c:	f003 0301 	and.w	r3, r3, #1
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00b      	beq.n	800f26c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2204      	movs	r2, #4
 800f25a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f262:	f043 0202 	orr.w	r2, r3, #2
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f270:	f003 0308 	and.w	r3, r3, #8
 800f274:	2b00      	cmp	r3, #0
 800f276:	d017      	beq.n	800f2a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f27c:	f003 0320 	and.w	r3, r3, #32
 800f280:	2b00      	cmp	r3, #0
 800f282:	d105      	bne.n	800f290 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f284:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f288:	4b5c      	ldr	r3, [pc, #368]	; (800f3fc <HAL_UART_IRQHandler+0x2b8>)
 800f28a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00b      	beq.n	800f2a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2208      	movs	r2, #8
 800f296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f29e:	f043 0208 	orr.w	r2, r3, #8
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d012      	beq.n	800f2da <HAL_UART_IRQHandler+0x196>
 800f2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00c      	beq.n	800f2da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2d0:	f043 0220 	orr.w	r2, r3, #32
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	f000 82dd 	beq.w	800f8a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2ea:	f003 0320 	and.w	r3, r3, #32
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d013      	beq.n	800f31a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f2f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2f6:	f003 0320 	and.w	r3, r3, #32
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d105      	bne.n	800f30a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f2fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f306:	2b00      	cmp	r3, #0
 800f308:	d007      	beq.n	800f31a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f32e:	2b40      	cmp	r3, #64	; 0x40
 800f330:	d005      	beq.n	800f33e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f336:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d054      	beq.n	800f3e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f001 fb60 	bl	8010a04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f34e:	2b40      	cmp	r3, #64	; 0x40
 800f350:	d146      	bne.n	800f3e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	3308      	adds	r3, #8
 800f358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f35c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f360:	e853 3f00 	ldrex	r3, [r3]
 800f364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f36c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3308      	adds	r3, #8
 800f37a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f37e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f38a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f38e:	e841 2300 	strex	r3, r2, [r1]
 800f392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1d9      	bne.n	800f352 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d017      	beq.n	800f3d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3ae:	4a15      	ldr	r2, [pc, #84]	; (800f404 <HAL_UART_IRQHandler+0x2c0>)
 800f3b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f7 fae5 	bl	8006988 <HAL_DMA_Abort_IT>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d019      	beq.n	800f3f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f3d2:	4610      	mov	r0, r2
 800f3d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3d6:	e00f      	b.n	800f3f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fa77 	bl	800f8cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3de:	e00b      	b.n	800f3f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fa73 	bl	800f8cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3e6:	e007      	b.n	800f3f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fa6f 	bl	800f8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800f3f6:	e253      	b.n	800f8a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3f8:	bf00      	nop
    return;
 800f3fa:	e251      	b.n	800f8a0 <HAL_UART_IRQHandler+0x75c>
 800f3fc:	10000001 	.word	0x10000001
 800f400:	04000120 	.word	0x04000120
 800f404:	08010c03 	.word	0x08010c03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	f040 81e7 	bne.w	800f7e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f416:	f003 0310 	and.w	r3, r3, #16
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 81e0 	beq.w	800f7e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f424:	f003 0310 	and.w	r3, r3, #16
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f000 81d9 	beq.w	800f7e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2210      	movs	r2, #16
 800f434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	689b      	ldr	r3, [r3, #8]
 800f43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f440:	2b40      	cmp	r3, #64	; 0x40
 800f442:	f040 8151 	bne.w	800f6e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a96      	ldr	r2, [pc, #600]	; (800f6a8 <HAL_UART_IRQHandler+0x564>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d068      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a93      	ldr	r2, [pc, #588]	; (800f6ac <HAL_UART_IRQHandler+0x568>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d061      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a91      	ldr	r2, [pc, #580]	; (800f6b0 <HAL_UART_IRQHandler+0x56c>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d05a      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a8e      	ldr	r2, [pc, #568]	; (800f6b4 <HAL_UART_IRQHandler+0x570>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d053      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a8c      	ldr	r2, [pc, #560]	; (800f6b8 <HAL_UART_IRQHandler+0x574>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d04c      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a89      	ldr	r2, [pc, #548]	; (800f6bc <HAL_UART_IRQHandler+0x578>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d045      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a87      	ldr	r2, [pc, #540]	; (800f6c0 <HAL_UART_IRQHandler+0x57c>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d03e      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a84      	ldr	r2, [pc, #528]	; (800f6c4 <HAL_UART_IRQHandler+0x580>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d037      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a82      	ldr	r2, [pc, #520]	; (800f6c8 <HAL_UART_IRQHandler+0x584>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d030      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a7f      	ldr	r2, [pc, #508]	; (800f6cc <HAL_UART_IRQHandler+0x588>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d029      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a7d      	ldr	r2, [pc, #500]	; (800f6d0 <HAL_UART_IRQHandler+0x58c>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d022      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a7a      	ldr	r2, [pc, #488]	; (800f6d4 <HAL_UART_IRQHandler+0x590>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d01b      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4a78      	ldr	r2, [pc, #480]	; (800f6d8 <HAL_UART_IRQHandler+0x594>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d014      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a75      	ldr	r2, [pc, #468]	; (800f6dc <HAL_UART_IRQHandler+0x598>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d00d      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4a73      	ldr	r2, [pc, #460]	; (800f6e0 <HAL_UART_IRQHandler+0x59c>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d006      	beq.n	800f526 <HAL_UART_IRQHandler+0x3e2>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a70      	ldr	r2, [pc, #448]	; (800f6e4 <HAL_UART_IRQHandler+0x5a0>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d106      	bne.n	800f534 <HAL_UART_IRQHandler+0x3f0>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	b29b      	uxth	r3, r3
 800f532:	e005      	b.n	800f540 <HAL_UART_IRQHandler+0x3fc>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	b29b      	uxth	r3, r3
 800f540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 81ab 	beq.w	800f8a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f558:	429a      	cmp	r2, r3
 800f55a:	f080 81a3 	bcs.w	800f8a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f574:	f000 8087 	beq.w	800f686 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f584:	e853 3f00 	ldrex	r3, [r3]
 800f588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f58c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	461a      	mov	r2, r3
 800f59e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f5a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f5a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f5ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f5b2:	e841 2300 	strex	r3, r2, [r1]
 800f5b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f5ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1da      	bne.n	800f578 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5cc:	e853 3f00 	ldrex	r3, [r3]
 800f5d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f5d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5d4:	f023 0301 	bic.w	r3, r3, #1
 800f5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f5e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f5ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f5ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f5f2:	e841 2300 	strex	r3, r2, [r1]
 800f5f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f5f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1e1      	bne.n	800f5c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	3308      	adds	r3, #8
 800f604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f608:	e853 3f00 	ldrex	r3, [r3]
 800f60c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3308      	adds	r3, #8
 800f61e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f622:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f62a:	e841 2300 	strex	r3, r2, [r1]
 800f62e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f632:	2b00      	cmp	r3, #0
 800f634:	d1e3      	bne.n	800f5fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2220      	movs	r2, #32
 800f63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f64c:	e853 3f00 	ldrex	r3, [r3]
 800f650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f654:	f023 0310 	bic.w	r3, r3, #16
 800f658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	461a      	mov	r2, r3
 800f662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f666:	65bb      	str	r3, [r7, #88]	; 0x58
 800f668:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f66a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f66c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f66e:	e841 2300 	strex	r3, r2, [r1]
 800f672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1e4      	bne.n	800f644 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f680:	4618      	mov	r0, r3
 800f682:	f7f6 fe63 	bl	800634c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2202      	movs	r2, #2
 800f68a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f698:	b29b      	uxth	r3, r3
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	4619      	mov	r1, r3
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f91d 	bl	800f8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f6a6:	e0fd      	b.n	800f8a4 <HAL_UART_IRQHandler+0x760>
 800f6a8:	40020010 	.word	0x40020010
 800f6ac:	40020028 	.word	0x40020028
 800f6b0:	40020040 	.word	0x40020040
 800f6b4:	40020058 	.word	0x40020058
 800f6b8:	40020070 	.word	0x40020070
 800f6bc:	40020088 	.word	0x40020088
 800f6c0:	400200a0 	.word	0x400200a0
 800f6c4:	400200b8 	.word	0x400200b8
 800f6c8:	40020410 	.word	0x40020410
 800f6cc:	40020428 	.word	0x40020428
 800f6d0:	40020440 	.word	0x40020440
 800f6d4:	40020458 	.word	0x40020458
 800f6d8:	40020470 	.word	0x40020470
 800f6dc:	40020488 	.word	0x40020488
 800f6e0:	400204a0 	.word	0x400204a0
 800f6e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	1ad3      	subs	r3, r2, r3
 800f6f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f702:	b29b      	uxth	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	f000 80cf 	beq.w	800f8a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f70a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 80ca 	beq.w	800f8a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71c:	e853 3f00 	ldrex	r3, [r3]
 800f720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	461a      	mov	r2, r3
 800f732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f736:	647b      	str	r3, [r7, #68]	; 0x44
 800f738:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f73c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f73e:	e841 2300 	strex	r3, r2, [r1]
 800f742:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1e4      	bne.n	800f714 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3308      	adds	r3, #8
 800f750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f754:	e853 3f00 	ldrex	r3, [r3]
 800f758:	623b      	str	r3, [r7, #32]
   return(result);
 800f75a:	6a3a      	ldr	r2, [r7, #32]
 800f75c:	4b55      	ldr	r3, [pc, #340]	; (800f8b4 <HAL_UART_IRQHandler+0x770>)
 800f75e:	4013      	ands	r3, r2
 800f760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	3308      	adds	r3, #8
 800f76a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f76e:	633a      	str	r2, [r7, #48]	; 0x30
 800f770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f776:	e841 2300 	strex	r3, r2, [r1]
 800f77a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e3      	bne.n	800f74a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2220      	movs	r2, #32
 800f786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	e853 3f00 	ldrex	r3, [r3]
 800f7a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f023 0310 	bic.w	r3, r3, #16
 800f7aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f7b8:	61fb      	str	r3, [r7, #28]
 800f7ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7bc:	69b9      	ldr	r1, [r7, #24]
 800f7be:	69fa      	ldr	r2, [r7, #28]
 800f7c0:	e841 2300 	strex	r3, r2, [r1]
 800f7c4:	617b      	str	r3, [r7, #20]
   return(result);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d1e4      	bne.n	800f796 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f7d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 f881 	bl	800f8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f7de:	e063      	b.n	800f8a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00e      	beq.n	800f80a <HAL_UART_IRQHandler+0x6c6>
 800f7ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d008      	beq.n	800f80a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f001 ff5a 	bl	80116bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f808:	e051      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f812:	2b00      	cmp	r3, #0
 800f814:	d014      	beq.n	800f840 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d105      	bne.n	800f82e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d008      	beq.n	800f840 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f832:	2b00      	cmp	r3, #0
 800f834:	d03a      	beq.n	800f8ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	4798      	blx	r3
    }
    return;
 800f83e:	e035      	b.n	800f8ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d009      	beq.n	800f860 <HAL_UART_IRQHandler+0x71c>
 800f84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f854:	2b00      	cmp	r3, #0
 800f856:	d003      	beq.n	800f860 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f001 f9e8 	bl	8010c2e <UART_EndTransmit_IT>
    return;
 800f85e:	e026      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d009      	beq.n	800f880 <HAL_UART_IRQHandler+0x73c>
 800f86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f001 ff33 	bl	80116e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f87e:	e016      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d010      	beq.n	800f8ae <HAL_UART_IRQHandler+0x76a>
 800f88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f890:	2b00      	cmp	r3, #0
 800f892:	da0c      	bge.n	800f8ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f001 ff1b 	bl	80116d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f89a:	e008      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
      return;
 800f89c:	bf00      	nop
 800f89e:	e006      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
    return;
 800f8a0:	bf00      	nop
 800f8a2:	e004      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
      return;
 800f8a4:	bf00      	nop
 800f8a6:	e002      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
      return;
 800f8a8:	bf00      	nop
 800f8aa:	e000      	b.n	800f8ae <HAL_UART_IRQHandler+0x76a>
    return;
 800f8ac:	bf00      	nop
  }
}
 800f8ae:	37e8      	adds	r7, #232	; 0xe8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	effffffe 	.word	0xeffffffe

0800f8b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8fc:	b092      	sub	sp, #72	; 0x48
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f902:	2300      	movs	r3, #0
 800f904:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	689a      	ldr	r2, [r3, #8]
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	431a      	orrs	r2, r3
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	695b      	ldr	r3, [r3, #20]
 800f916:	431a      	orrs	r2, r3
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	69db      	ldr	r3, [r3, #28]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	4bbe      	ldr	r3, [pc, #760]	; (800fc20 <UART_SetConfig+0x328>)
 800f928:	4013      	ands	r3, r2
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	6812      	ldr	r2, [r2, #0]
 800f92e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f930:	430b      	orrs	r3, r1
 800f932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	68da      	ldr	r2, [r3, #12]
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	430a      	orrs	r2, r1
 800f948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	699b      	ldr	r3, [r3, #24]
 800f94e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4ab3      	ldr	r2, [pc, #716]	; (800fc24 <UART_SetConfig+0x32c>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d004      	beq.n	800f964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	6a1b      	ldr	r3, [r3, #32]
 800f95e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f960:	4313      	orrs	r3, r2
 800f962:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	689a      	ldr	r2, [r3, #8]
 800f96a:	4baf      	ldr	r3, [pc, #700]	; (800fc28 <UART_SetConfig+0x330>)
 800f96c:	4013      	ands	r3, r2
 800f96e:	697a      	ldr	r2, [r7, #20]
 800f970:	6812      	ldr	r2, [r2, #0]
 800f972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f974:	430b      	orrs	r3, r1
 800f976:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97e:	f023 010f 	bic.w	r1, r3, #15
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	430a      	orrs	r2, r1
 800f98c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4aa6      	ldr	r2, [pc, #664]	; (800fc2c <UART_SetConfig+0x334>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d177      	bne.n	800fa88 <UART_SetConfig+0x190>
 800f998:	4ba5      	ldr	r3, [pc, #660]	; (800fc30 <UART_SetConfig+0x338>)
 800f99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f99c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9a0:	2b28      	cmp	r3, #40	; 0x28
 800f9a2:	d86d      	bhi.n	800fa80 <UART_SetConfig+0x188>
 800f9a4:	a201      	add	r2, pc, #4	; (adr r2, 800f9ac <UART_SetConfig+0xb4>)
 800f9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9aa:	bf00      	nop
 800f9ac:	0800fa51 	.word	0x0800fa51
 800f9b0:	0800fa81 	.word	0x0800fa81
 800f9b4:	0800fa81 	.word	0x0800fa81
 800f9b8:	0800fa81 	.word	0x0800fa81
 800f9bc:	0800fa81 	.word	0x0800fa81
 800f9c0:	0800fa81 	.word	0x0800fa81
 800f9c4:	0800fa81 	.word	0x0800fa81
 800f9c8:	0800fa81 	.word	0x0800fa81
 800f9cc:	0800fa59 	.word	0x0800fa59
 800f9d0:	0800fa81 	.word	0x0800fa81
 800f9d4:	0800fa81 	.word	0x0800fa81
 800f9d8:	0800fa81 	.word	0x0800fa81
 800f9dc:	0800fa81 	.word	0x0800fa81
 800f9e0:	0800fa81 	.word	0x0800fa81
 800f9e4:	0800fa81 	.word	0x0800fa81
 800f9e8:	0800fa81 	.word	0x0800fa81
 800f9ec:	0800fa61 	.word	0x0800fa61
 800f9f0:	0800fa81 	.word	0x0800fa81
 800f9f4:	0800fa81 	.word	0x0800fa81
 800f9f8:	0800fa81 	.word	0x0800fa81
 800f9fc:	0800fa81 	.word	0x0800fa81
 800fa00:	0800fa81 	.word	0x0800fa81
 800fa04:	0800fa81 	.word	0x0800fa81
 800fa08:	0800fa81 	.word	0x0800fa81
 800fa0c:	0800fa69 	.word	0x0800fa69
 800fa10:	0800fa81 	.word	0x0800fa81
 800fa14:	0800fa81 	.word	0x0800fa81
 800fa18:	0800fa81 	.word	0x0800fa81
 800fa1c:	0800fa81 	.word	0x0800fa81
 800fa20:	0800fa81 	.word	0x0800fa81
 800fa24:	0800fa81 	.word	0x0800fa81
 800fa28:	0800fa81 	.word	0x0800fa81
 800fa2c:	0800fa71 	.word	0x0800fa71
 800fa30:	0800fa81 	.word	0x0800fa81
 800fa34:	0800fa81 	.word	0x0800fa81
 800fa38:	0800fa81 	.word	0x0800fa81
 800fa3c:	0800fa81 	.word	0x0800fa81
 800fa40:	0800fa81 	.word	0x0800fa81
 800fa44:	0800fa81 	.word	0x0800fa81
 800fa48:	0800fa81 	.word	0x0800fa81
 800fa4c:	0800fa79 	.word	0x0800fa79
 800fa50:	2301      	movs	r3, #1
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e222      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa58:	2304      	movs	r3, #4
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5e:	e21e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa60:	2308      	movs	r3, #8
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa66:	e21a      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa68:	2310      	movs	r3, #16
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e216      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa70:	2320      	movs	r3, #32
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa76:	e212      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa78:	2340      	movs	r3, #64	; 0x40
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7e:	e20e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa80:	2380      	movs	r3, #128	; 0x80
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa86:	e20a      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a69      	ldr	r2, [pc, #420]	; (800fc34 <UART_SetConfig+0x33c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d130      	bne.n	800faf4 <UART_SetConfig+0x1fc>
 800fa92:	4b67      	ldr	r3, [pc, #412]	; (800fc30 <UART_SetConfig+0x338>)
 800fa94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa96:	f003 0307 	and.w	r3, r3, #7
 800fa9a:	2b05      	cmp	r3, #5
 800fa9c:	d826      	bhi.n	800faec <UART_SetConfig+0x1f4>
 800fa9e:	a201      	add	r2, pc, #4	; (adr r2, 800faa4 <UART_SetConfig+0x1ac>)
 800faa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa4:	0800fabd 	.word	0x0800fabd
 800faa8:	0800fac5 	.word	0x0800fac5
 800faac:	0800facd 	.word	0x0800facd
 800fab0:	0800fad5 	.word	0x0800fad5
 800fab4:	0800fadd 	.word	0x0800fadd
 800fab8:	0800fae5 	.word	0x0800fae5
 800fabc:	2300      	movs	r3, #0
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fac2:	e1ec      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fac4:	2304      	movs	r3, #4
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faca:	e1e8      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800facc:	2308      	movs	r3, #8
 800face:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad2:	e1e4      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fad4:	2310      	movs	r3, #16
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e1e0      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fadc:	2320      	movs	r3, #32
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae2:	e1dc      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fae4:	2340      	movs	r3, #64	; 0x40
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faea:	e1d8      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800faec:	2380      	movs	r3, #128	; 0x80
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf2:	e1d4      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a4f      	ldr	r2, [pc, #316]	; (800fc38 <UART_SetConfig+0x340>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d130      	bne.n	800fb60 <UART_SetConfig+0x268>
 800fafe:	4b4c      	ldr	r3, [pc, #304]	; (800fc30 <UART_SetConfig+0x338>)
 800fb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb02:	f003 0307 	and.w	r3, r3, #7
 800fb06:	2b05      	cmp	r3, #5
 800fb08:	d826      	bhi.n	800fb58 <UART_SetConfig+0x260>
 800fb0a:	a201      	add	r2, pc, #4	; (adr r2, 800fb10 <UART_SetConfig+0x218>)
 800fb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb10:	0800fb29 	.word	0x0800fb29
 800fb14:	0800fb31 	.word	0x0800fb31
 800fb18:	0800fb39 	.word	0x0800fb39
 800fb1c:	0800fb41 	.word	0x0800fb41
 800fb20:	0800fb49 	.word	0x0800fb49
 800fb24:	0800fb51 	.word	0x0800fb51
 800fb28:	2300      	movs	r3, #0
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb2e:	e1b6      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb30:	2304      	movs	r3, #4
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb36:	e1b2      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb38:	2308      	movs	r3, #8
 800fb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb3e:	e1ae      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb40:	2310      	movs	r3, #16
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb46:	e1aa      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb48:	2320      	movs	r3, #32
 800fb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4e:	e1a6      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb50:	2340      	movs	r3, #64	; 0x40
 800fb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb56:	e1a2      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb58:	2380      	movs	r3, #128	; 0x80
 800fb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5e:	e19e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a35      	ldr	r2, [pc, #212]	; (800fc3c <UART_SetConfig+0x344>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d130      	bne.n	800fbcc <UART_SetConfig+0x2d4>
 800fb6a:	4b31      	ldr	r3, [pc, #196]	; (800fc30 <UART_SetConfig+0x338>)
 800fb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb6e:	f003 0307 	and.w	r3, r3, #7
 800fb72:	2b05      	cmp	r3, #5
 800fb74:	d826      	bhi.n	800fbc4 <UART_SetConfig+0x2cc>
 800fb76:	a201      	add	r2, pc, #4	; (adr r2, 800fb7c <UART_SetConfig+0x284>)
 800fb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7c:	0800fb95 	.word	0x0800fb95
 800fb80:	0800fb9d 	.word	0x0800fb9d
 800fb84:	0800fba5 	.word	0x0800fba5
 800fb88:	0800fbad 	.word	0x0800fbad
 800fb8c:	0800fbb5 	.word	0x0800fbb5
 800fb90:	0800fbbd 	.word	0x0800fbbd
 800fb94:	2300      	movs	r3, #0
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb9a:	e180      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fb9c:	2304      	movs	r3, #4
 800fb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fba2:	e17c      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fba4:	2308      	movs	r3, #8
 800fba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbaa:	e178      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fbac:	2310      	movs	r3, #16
 800fbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb2:	e174      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbba:	e170      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fbbc:	2340      	movs	r3, #64	; 0x40
 800fbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc2:	e16c      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fbc4:	2380      	movs	r3, #128	; 0x80
 800fbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbca:	e168      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a1b      	ldr	r2, [pc, #108]	; (800fc40 <UART_SetConfig+0x348>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d142      	bne.n	800fc5c <UART_SetConfig+0x364>
 800fbd6:	4b16      	ldr	r3, [pc, #88]	; (800fc30 <UART_SetConfig+0x338>)
 800fbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d838      	bhi.n	800fc54 <UART_SetConfig+0x35c>
 800fbe2:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <UART_SetConfig+0x2f0>)
 800fbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe8:	0800fc01 	.word	0x0800fc01
 800fbec:	0800fc09 	.word	0x0800fc09
 800fbf0:	0800fc11 	.word	0x0800fc11
 800fbf4:	0800fc19 	.word	0x0800fc19
 800fbf8:	0800fc45 	.word	0x0800fc45
 800fbfc:	0800fc4d 	.word	0x0800fc4d
 800fc00:	2300      	movs	r3, #0
 800fc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc06:	e14a      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc08:	2304      	movs	r3, #4
 800fc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc0e:	e146      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc10:	2308      	movs	r3, #8
 800fc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc16:	e142      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc18:	2310      	movs	r3, #16
 800fc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc1e:	e13e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc20:	cfff69f3 	.word	0xcfff69f3
 800fc24:	58000c00 	.word	0x58000c00
 800fc28:	11fff4ff 	.word	0x11fff4ff
 800fc2c:	40011000 	.word	0x40011000
 800fc30:	58024400 	.word	0x58024400
 800fc34:	40004400 	.word	0x40004400
 800fc38:	40004800 	.word	0x40004800
 800fc3c:	40004c00 	.word	0x40004c00
 800fc40:	40005000 	.word	0x40005000
 800fc44:	2320      	movs	r3, #32
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc4a:	e128      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc4c:	2340      	movs	r3, #64	; 0x40
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc52:	e124      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc54:	2380      	movs	r3, #128	; 0x80
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc5a:	e120      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4acb      	ldr	r2, [pc, #812]	; (800ff90 <UART_SetConfig+0x698>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d176      	bne.n	800fd54 <UART_SetConfig+0x45c>
 800fc66:	4bcb      	ldr	r3, [pc, #812]	; (800ff94 <UART_SetConfig+0x69c>)
 800fc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc6e:	2b28      	cmp	r3, #40	; 0x28
 800fc70:	d86c      	bhi.n	800fd4c <UART_SetConfig+0x454>
 800fc72:	a201      	add	r2, pc, #4	; (adr r2, 800fc78 <UART_SetConfig+0x380>)
 800fc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc78:	0800fd1d 	.word	0x0800fd1d
 800fc7c:	0800fd4d 	.word	0x0800fd4d
 800fc80:	0800fd4d 	.word	0x0800fd4d
 800fc84:	0800fd4d 	.word	0x0800fd4d
 800fc88:	0800fd4d 	.word	0x0800fd4d
 800fc8c:	0800fd4d 	.word	0x0800fd4d
 800fc90:	0800fd4d 	.word	0x0800fd4d
 800fc94:	0800fd4d 	.word	0x0800fd4d
 800fc98:	0800fd25 	.word	0x0800fd25
 800fc9c:	0800fd4d 	.word	0x0800fd4d
 800fca0:	0800fd4d 	.word	0x0800fd4d
 800fca4:	0800fd4d 	.word	0x0800fd4d
 800fca8:	0800fd4d 	.word	0x0800fd4d
 800fcac:	0800fd4d 	.word	0x0800fd4d
 800fcb0:	0800fd4d 	.word	0x0800fd4d
 800fcb4:	0800fd4d 	.word	0x0800fd4d
 800fcb8:	0800fd2d 	.word	0x0800fd2d
 800fcbc:	0800fd4d 	.word	0x0800fd4d
 800fcc0:	0800fd4d 	.word	0x0800fd4d
 800fcc4:	0800fd4d 	.word	0x0800fd4d
 800fcc8:	0800fd4d 	.word	0x0800fd4d
 800fccc:	0800fd4d 	.word	0x0800fd4d
 800fcd0:	0800fd4d 	.word	0x0800fd4d
 800fcd4:	0800fd4d 	.word	0x0800fd4d
 800fcd8:	0800fd35 	.word	0x0800fd35
 800fcdc:	0800fd4d 	.word	0x0800fd4d
 800fce0:	0800fd4d 	.word	0x0800fd4d
 800fce4:	0800fd4d 	.word	0x0800fd4d
 800fce8:	0800fd4d 	.word	0x0800fd4d
 800fcec:	0800fd4d 	.word	0x0800fd4d
 800fcf0:	0800fd4d 	.word	0x0800fd4d
 800fcf4:	0800fd4d 	.word	0x0800fd4d
 800fcf8:	0800fd3d 	.word	0x0800fd3d
 800fcfc:	0800fd4d 	.word	0x0800fd4d
 800fd00:	0800fd4d 	.word	0x0800fd4d
 800fd04:	0800fd4d 	.word	0x0800fd4d
 800fd08:	0800fd4d 	.word	0x0800fd4d
 800fd0c:	0800fd4d 	.word	0x0800fd4d
 800fd10:	0800fd4d 	.word	0x0800fd4d
 800fd14:	0800fd4d 	.word	0x0800fd4d
 800fd18:	0800fd45 	.word	0x0800fd45
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd22:	e0bc      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd24:	2304      	movs	r3, #4
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2a:	e0b8      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd2c:	2308      	movs	r3, #8
 800fd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd32:	e0b4      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd34:	2310      	movs	r3, #16
 800fd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3a:	e0b0      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd3c:	2320      	movs	r3, #32
 800fd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd42:	e0ac      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd44:	2340      	movs	r3, #64	; 0x40
 800fd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd4a:	e0a8      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd4c:	2380      	movs	r3, #128	; 0x80
 800fd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd52:	e0a4      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a8f      	ldr	r2, [pc, #572]	; (800ff98 <UART_SetConfig+0x6a0>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d130      	bne.n	800fdc0 <UART_SetConfig+0x4c8>
 800fd5e:	4b8d      	ldr	r3, [pc, #564]	; (800ff94 <UART_SetConfig+0x69c>)
 800fd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd62:	f003 0307 	and.w	r3, r3, #7
 800fd66:	2b05      	cmp	r3, #5
 800fd68:	d826      	bhi.n	800fdb8 <UART_SetConfig+0x4c0>
 800fd6a:	a201      	add	r2, pc, #4	; (adr r2, 800fd70 <UART_SetConfig+0x478>)
 800fd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd70:	0800fd89 	.word	0x0800fd89
 800fd74:	0800fd91 	.word	0x0800fd91
 800fd78:	0800fd99 	.word	0x0800fd99
 800fd7c:	0800fda1 	.word	0x0800fda1
 800fd80:	0800fda9 	.word	0x0800fda9
 800fd84:	0800fdb1 	.word	0x0800fdb1
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd8e:	e086      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd90:	2304      	movs	r3, #4
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd96:	e082      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fd98:	2308      	movs	r3, #8
 800fd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd9e:	e07e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fda0:	2310      	movs	r3, #16
 800fda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fda6:	e07a      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fda8:	2320      	movs	r3, #32
 800fdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdae:	e076      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fdb0:	2340      	movs	r3, #64	; 0x40
 800fdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdb6:	e072      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fdb8:	2380      	movs	r3, #128	; 0x80
 800fdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdbe:	e06e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a75      	ldr	r2, [pc, #468]	; (800ff9c <UART_SetConfig+0x6a4>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d130      	bne.n	800fe2c <UART_SetConfig+0x534>
 800fdca:	4b72      	ldr	r3, [pc, #456]	; (800ff94 <UART_SetConfig+0x69c>)
 800fdcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdce:	f003 0307 	and.w	r3, r3, #7
 800fdd2:	2b05      	cmp	r3, #5
 800fdd4:	d826      	bhi.n	800fe24 <UART_SetConfig+0x52c>
 800fdd6:	a201      	add	r2, pc, #4	; (adr r2, 800fddc <UART_SetConfig+0x4e4>)
 800fdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fddc:	0800fdf5 	.word	0x0800fdf5
 800fde0:	0800fdfd 	.word	0x0800fdfd
 800fde4:	0800fe05 	.word	0x0800fe05
 800fde8:	0800fe0d 	.word	0x0800fe0d
 800fdec:	0800fe15 	.word	0x0800fe15
 800fdf0:	0800fe1d 	.word	0x0800fe1d
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfa:	e050      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fdfc:	2304      	movs	r3, #4
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe02:	e04c      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe04:	2308      	movs	r3, #8
 800fe06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe0a:	e048      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe0c:	2310      	movs	r3, #16
 800fe0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe12:	e044      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe14:	2320      	movs	r3, #32
 800fe16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe1a:	e040      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe1c:	2340      	movs	r3, #64	; 0x40
 800fe1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe22:	e03c      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe24:	2380      	movs	r3, #128	; 0x80
 800fe26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe2a:	e038      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a5b      	ldr	r2, [pc, #364]	; (800ffa0 <UART_SetConfig+0x6a8>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d130      	bne.n	800fe98 <UART_SetConfig+0x5a0>
 800fe36:	4b57      	ldr	r3, [pc, #348]	; (800ff94 <UART_SetConfig+0x69c>)
 800fe38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe3a:	f003 0307 	and.w	r3, r3, #7
 800fe3e:	2b05      	cmp	r3, #5
 800fe40:	d826      	bhi.n	800fe90 <UART_SetConfig+0x598>
 800fe42:	a201      	add	r2, pc, #4	; (adr r2, 800fe48 <UART_SetConfig+0x550>)
 800fe44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe48:	0800fe61 	.word	0x0800fe61
 800fe4c:	0800fe69 	.word	0x0800fe69
 800fe50:	0800fe71 	.word	0x0800fe71
 800fe54:	0800fe79 	.word	0x0800fe79
 800fe58:	0800fe81 	.word	0x0800fe81
 800fe5c:	0800fe89 	.word	0x0800fe89
 800fe60:	2302      	movs	r3, #2
 800fe62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe66:	e01a      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe68:	2304      	movs	r3, #4
 800fe6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe6e:	e016      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe70:	2308      	movs	r3, #8
 800fe72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe76:	e012      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe78:	2310      	movs	r3, #16
 800fe7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe7e:	e00e      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe80:	2320      	movs	r3, #32
 800fe82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe86:	e00a      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe88:	2340      	movs	r3, #64	; 0x40
 800fe8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe8e:	e006      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe90:	2380      	movs	r3, #128	; 0x80
 800fe92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe96:	e002      	b.n	800fe9e <UART_SetConfig+0x5a6>
 800fe98:	2380      	movs	r3, #128	; 0x80
 800fe9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a3f      	ldr	r2, [pc, #252]	; (800ffa0 <UART_SetConfig+0x6a8>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	f040 80f8 	bne.w	801009a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800feaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800feae:	2b20      	cmp	r3, #32
 800feb0:	dc46      	bgt.n	800ff40 <UART_SetConfig+0x648>
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	f2c0 8082 	blt.w	800ffbc <UART_SetConfig+0x6c4>
 800feb8:	3b02      	subs	r3, #2
 800feba:	2b1e      	cmp	r3, #30
 800febc:	d87e      	bhi.n	800ffbc <UART_SetConfig+0x6c4>
 800febe:	a201      	add	r2, pc, #4	; (adr r2, 800fec4 <UART_SetConfig+0x5cc>)
 800fec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec4:	0800ff47 	.word	0x0800ff47
 800fec8:	0800ffbd 	.word	0x0800ffbd
 800fecc:	0800ff4f 	.word	0x0800ff4f
 800fed0:	0800ffbd 	.word	0x0800ffbd
 800fed4:	0800ffbd 	.word	0x0800ffbd
 800fed8:	0800ffbd 	.word	0x0800ffbd
 800fedc:	0800ff5f 	.word	0x0800ff5f
 800fee0:	0800ffbd 	.word	0x0800ffbd
 800fee4:	0800ffbd 	.word	0x0800ffbd
 800fee8:	0800ffbd 	.word	0x0800ffbd
 800feec:	0800ffbd 	.word	0x0800ffbd
 800fef0:	0800ffbd 	.word	0x0800ffbd
 800fef4:	0800ffbd 	.word	0x0800ffbd
 800fef8:	0800ffbd 	.word	0x0800ffbd
 800fefc:	0800ff6f 	.word	0x0800ff6f
 800ff00:	0800ffbd 	.word	0x0800ffbd
 800ff04:	0800ffbd 	.word	0x0800ffbd
 800ff08:	0800ffbd 	.word	0x0800ffbd
 800ff0c:	0800ffbd 	.word	0x0800ffbd
 800ff10:	0800ffbd 	.word	0x0800ffbd
 800ff14:	0800ffbd 	.word	0x0800ffbd
 800ff18:	0800ffbd 	.word	0x0800ffbd
 800ff1c:	0800ffbd 	.word	0x0800ffbd
 800ff20:	0800ffbd 	.word	0x0800ffbd
 800ff24:	0800ffbd 	.word	0x0800ffbd
 800ff28:	0800ffbd 	.word	0x0800ffbd
 800ff2c:	0800ffbd 	.word	0x0800ffbd
 800ff30:	0800ffbd 	.word	0x0800ffbd
 800ff34:	0800ffbd 	.word	0x0800ffbd
 800ff38:	0800ffbd 	.word	0x0800ffbd
 800ff3c:	0800ffaf 	.word	0x0800ffaf
 800ff40:	2b40      	cmp	r3, #64	; 0x40
 800ff42:	d037      	beq.n	800ffb4 <UART_SetConfig+0x6bc>
 800ff44:	e03a      	b.n	800ffbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff46:	f7fb fda9 	bl	800ba9c <HAL_RCCEx_GetD3PCLK1Freq>
 800ff4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff4c:	e03c      	b.n	800ffc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7fb fdb8 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff5c:	e034      	b.n	800ffc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff5e:	f107 0318 	add.w	r3, r7, #24
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fb ff04 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff6c:	e02c      	b.n	800ffc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff6e:	4b09      	ldr	r3, [pc, #36]	; (800ff94 <UART_SetConfig+0x69c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f003 0320 	and.w	r3, r3, #32
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d016      	beq.n	800ffa8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff7a:	4b06      	ldr	r3, [pc, #24]	; (800ff94 <UART_SetConfig+0x69c>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	08db      	lsrs	r3, r3, #3
 800ff80:	f003 0303 	and.w	r3, r3, #3
 800ff84:	4a07      	ldr	r2, [pc, #28]	; (800ffa4 <UART_SetConfig+0x6ac>)
 800ff86:	fa22 f303 	lsr.w	r3, r2, r3
 800ff8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff8c:	e01c      	b.n	800ffc8 <UART_SetConfig+0x6d0>
 800ff8e:	bf00      	nop
 800ff90:	40011400 	.word	0x40011400
 800ff94:	58024400 	.word	0x58024400
 800ff98:	40007800 	.word	0x40007800
 800ff9c:	40007c00 	.word	0x40007c00
 800ffa0:	58000c00 	.word	0x58000c00
 800ffa4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ffa8:	4b9d      	ldr	r3, [pc, #628]	; (8010220 <UART_SetConfig+0x928>)
 800ffaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffac:	e00c      	b.n	800ffc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffae:	4b9d      	ldr	r3, [pc, #628]	; (8010224 <UART_SetConfig+0x92c>)
 800ffb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffb2:	e009      	b.n	800ffc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffba:	e005      	b.n	800ffc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ffc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ffc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f000 81de 	beq.w	801038c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd4:	4a94      	ldr	r2, [pc, #592]	; (8010228 <UART_SetConfig+0x930>)
 800ffd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffde:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffe2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	685a      	ldr	r2, [r3, #4]
 800ffe8:	4613      	mov	r3, r2
 800ffea:	005b      	lsls	r3, r3, #1
 800ffec:	4413      	add	r3, r2
 800ffee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d305      	bcc.n	8010000 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d903      	bls.n	8010008 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010000:	2301      	movs	r3, #1
 8010002:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010006:	e1c1      	b.n	801038c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801000a:	2200      	movs	r2, #0
 801000c:	60bb      	str	r3, [r7, #8]
 801000e:	60fa      	str	r2, [r7, #12]
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010014:	4a84      	ldr	r2, [pc, #528]	; (8010228 <UART_SetConfig+0x930>)
 8010016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801001a:	b29b      	uxth	r3, r3
 801001c:	2200      	movs	r2, #0
 801001e:	603b      	str	r3, [r7, #0]
 8010020:	607a      	str	r2, [r7, #4]
 8010022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801002a:	f7f0 f959 	bl	80002e0 <__aeabi_uldivmod>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	4610      	mov	r0, r2
 8010034:	4619      	mov	r1, r3
 8010036:	f04f 0200 	mov.w	r2, #0
 801003a:	f04f 0300 	mov.w	r3, #0
 801003e:	020b      	lsls	r3, r1, #8
 8010040:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010044:	0202      	lsls	r2, r0, #8
 8010046:	6979      	ldr	r1, [r7, #20]
 8010048:	6849      	ldr	r1, [r1, #4]
 801004a:	0849      	lsrs	r1, r1, #1
 801004c:	2000      	movs	r0, #0
 801004e:	460c      	mov	r4, r1
 8010050:	4605      	mov	r5, r0
 8010052:	eb12 0804 	adds.w	r8, r2, r4
 8010056:	eb43 0905 	adc.w	r9, r3, r5
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	469a      	mov	sl, r3
 8010062:	4693      	mov	fp, r2
 8010064:	4652      	mov	r2, sl
 8010066:	465b      	mov	r3, fp
 8010068:	4640      	mov	r0, r8
 801006a:	4649      	mov	r1, r9
 801006c:	f7f0 f938 	bl	80002e0 <__aeabi_uldivmod>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	4613      	mov	r3, r2
 8010076:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801007e:	d308      	bcc.n	8010092 <UART_SetConfig+0x79a>
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010086:	d204      	bcs.n	8010092 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801008e:	60da      	str	r2, [r3, #12]
 8010090:	e17c      	b.n	801038c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010092:	2301      	movs	r3, #1
 8010094:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010098:	e178      	b.n	801038c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	69db      	ldr	r3, [r3, #28]
 801009e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100a2:	f040 80c5 	bne.w	8010230 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80100a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100aa:	2b20      	cmp	r3, #32
 80100ac:	dc48      	bgt.n	8010140 <UART_SetConfig+0x848>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	db7b      	blt.n	80101aa <UART_SetConfig+0x8b2>
 80100b2:	2b20      	cmp	r3, #32
 80100b4:	d879      	bhi.n	80101aa <UART_SetConfig+0x8b2>
 80100b6:	a201      	add	r2, pc, #4	; (adr r2, 80100bc <UART_SetConfig+0x7c4>)
 80100b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100bc:	08010147 	.word	0x08010147
 80100c0:	0801014f 	.word	0x0801014f
 80100c4:	080101ab 	.word	0x080101ab
 80100c8:	080101ab 	.word	0x080101ab
 80100cc:	08010157 	.word	0x08010157
 80100d0:	080101ab 	.word	0x080101ab
 80100d4:	080101ab 	.word	0x080101ab
 80100d8:	080101ab 	.word	0x080101ab
 80100dc:	08010167 	.word	0x08010167
 80100e0:	080101ab 	.word	0x080101ab
 80100e4:	080101ab 	.word	0x080101ab
 80100e8:	080101ab 	.word	0x080101ab
 80100ec:	080101ab 	.word	0x080101ab
 80100f0:	080101ab 	.word	0x080101ab
 80100f4:	080101ab 	.word	0x080101ab
 80100f8:	080101ab 	.word	0x080101ab
 80100fc:	08010177 	.word	0x08010177
 8010100:	080101ab 	.word	0x080101ab
 8010104:	080101ab 	.word	0x080101ab
 8010108:	080101ab 	.word	0x080101ab
 801010c:	080101ab 	.word	0x080101ab
 8010110:	080101ab 	.word	0x080101ab
 8010114:	080101ab 	.word	0x080101ab
 8010118:	080101ab 	.word	0x080101ab
 801011c:	080101ab 	.word	0x080101ab
 8010120:	080101ab 	.word	0x080101ab
 8010124:	080101ab 	.word	0x080101ab
 8010128:	080101ab 	.word	0x080101ab
 801012c:	080101ab 	.word	0x080101ab
 8010130:	080101ab 	.word	0x080101ab
 8010134:	080101ab 	.word	0x080101ab
 8010138:	080101ab 	.word	0x080101ab
 801013c:	0801019d 	.word	0x0801019d
 8010140:	2b40      	cmp	r3, #64	; 0x40
 8010142:	d02e      	beq.n	80101a2 <UART_SetConfig+0x8aa>
 8010144:	e031      	b.n	80101aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010146:	f7f9 fcb1 	bl	8009aac <HAL_RCC_GetPCLK1Freq>
 801014a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801014c:	e033      	b.n	80101b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801014e:	f7f9 fcc3 	bl	8009ad8 <HAL_RCC_GetPCLK2Freq>
 8010152:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010154:	e02f      	b.n	80101b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801015a:	4618      	mov	r0, r3
 801015c:	f7fb fcb4 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010164:	e027      	b.n	80101b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010166:	f107 0318 	add.w	r3, r7, #24
 801016a:	4618      	mov	r0, r3
 801016c:	f7fb fe00 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010174:	e01f      	b.n	80101b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010176:	4b2d      	ldr	r3, [pc, #180]	; (801022c <UART_SetConfig+0x934>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f003 0320 	and.w	r3, r3, #32
 801017e:	2b00      	cmp	r3, #0
 8010180:	d009      	beq.n	8010196 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010182:	4b2a      	ldr	r3, [pc, #168]	; (801022c <UART_SetConfig+0x934>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	08db      	lsrs	r3, r3, #3
 8010188:	f003 0303 	and.w	r3, r3, #3
 801018c:	4a24      	ldr	r2, [pc, #144]	; (8010220 <UART_SetConfig+0x928>)
 801018e:	fa22 f303 	lsr.w	r3, r2, r3
 8010192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010194:	e00f      	b.n	80101b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010196:	4b22      	ldr	r3, [pc, #136]	; (8010220 <UART_SetConfig+0x928>)
 8010198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801019a:	e00c      	b.n	80101b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801019c:	4b21      	ldr	r3, [pc, #132]	; (8010224 <UART_SetConfig+0x92c>)
 801019e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101a0:	e009      	b.n	80101b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101a8:	e005      	b.n	80101b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80101aa:	2300      	movs	r3, #0
 80101ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80101ae:	2301      	movs	r3, #1
 80101b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80101b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80101b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 80e7 	beq.w	801038c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c2:	4a19      	ldr	r2, [pc, #100]	; (8010228 <UART_SetConfig+0x930>)
 80101c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101c8:	461a      	mov	r2, r3
 80101ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80101d0:	005a      	lsls	r2, r3, #1
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	085b      	lsrs	r3, r3, #1
 80101d8:	441a      	add	r2, r3
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	fbb2 f3f3 	udiv	r3, r2, r3
 80101e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	2b0f      	cmp	r3, #15
 80101e8:	d916      	bls.n	8010218 <UART_SetConfig+0x920>
 80101ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101f0:	d212      	bcs.n	8010218 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	f023 030f 	bic.w	r3, r3, #15
 80101fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	085b      	lsrs	r3, r3, #1
 8010200:	b29b      	uxth	r3, r3
 8010202:	f003 0307 	and.w	r3, r3, #7
 8010206:	b29a      	uxth	r2, r3
 8010208:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801020a:	4313      	orrs	r3, r2
 801020c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010214:	60da      	str	r2, [r3, #12]
 8010216:	e0b9      	b.n	801038c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010218:	2301      	movs	r3, #1
 801021a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801021e:	e0b5      	b.n	801038c <UART_SetConfig+0xa94>
 8010220:	03d09000 	.word	0x03d09000
 8010224:	003d0900 	.word	0x003d0900
 8010228:	08015f18 	.word	0x08015f18
 801022c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010230:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010234:	2b20      	cmp	r3, #32
 8010236:	dc49      	bgt.n	80102cc <UART_SetConfig+0x9d4>
 8010238:	2b00      	cmp	r3, #0
 801023a:	db7c      	blt.n	8010336 <UART_SetConfig+0xa3e>
 801023c:	2b20      	cmp	r3, #32
 801023e:	d87a      	bhi.n	8010336 <UART_SetConfig+0xa3e>
 8010240:	a201      	add	r2, pc, #4	; (adr r2, 8010248 <UART_SetConfig+0x950>)
 8010242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010246:	bf00      	nop
 8010248:	080102d3 	.word	0x080102d3
 801024c:	080102db 	.word	0x080102db
 8010250:	08010337 	.word	0x08010337
 8010254:	08010337 	.word	0x08010337
 8010258:	080102e3 	.word	0x080102e3
 801025c:	08010337 	.word	0x08010337
 8010260:	08010337 	.word	0x08010337
 8010264:	08010337 	.word	0x08010337
 8010268:	080102f3 	.word	0x080102f3
 801026c:	08010337 	.word	0x08010337
 8010270:	08010337 	.word	0x08010337
 8010274:	08010337 	.word	0x08010337
 8010278:	08010337 	.word	0x08010337
 801027c:	08010337 	.word	0x08010337
 8010280:	08010337 	.word	0x08010337
 8010284:	08010337 	.word	0x08010337
 8010288:	08010303 	.word	0x08010303
 801028c:	08010337 	.word	0x08010337
 8010290:	08010337 	.word	0x08010337
 8010294:	08010337 	.word	0x08010337
 8010298:	08010337 	.word	0x08010337
 801029c:	08010337 	.word	0x08010337
 80102a0:	08010337 	.word	0x08010337
 80102a4:	08010337 	.word	0x08010337
 80102a8:	08010337 	.word	0x08010337
 80102ac:	08010337 	.word	0x08010337
 80102b0:	08010337 	.word	0x08010337
 80102b4:	08010337 	.word	0x08010337
 80102b8:	08010337 	.word	0x08010337
 80102bc:	08010337 	.word	0x08010337
 80102c0:	08010337 	.word	0x08010337
 80102c4:	08010337 	.word	0x08010337
 80102c8:	08010329 	.word	0x08010329
 80102cc:	2b40      	cmp	r3, #64	; 0x40
 80102ce:	d02e      	beq.n	801032e <UART_SetConfig+0xa36>
 80102d0:	e031      	b.n	8010336 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102d2:	f7f9 fbeb 	bl	8009aac <HAL_RCC_GetPCLK1Freq>
 80102d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80102d8:	e033      	b.n	8010342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102da:	f7f9 fbfd 	bl	8009ad8 <HAL_RCC_GetPCLK2Freq>
 80102de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80102e0:	e02f      	b.n	8010342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fb fbee 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102f0:	e027      	b.n	8010342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102f2:	f107 0318 	add.w	r3, r7, #24
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fb fd3a 	bl	800bd70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010300:	e01f      	b.n	8010342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010302:	4b2d      	ldr	r3, [pc, #180]	; (80103b8 <UART_SetConfig+0xac0>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f003 0320 	and.w	r3, r3, #32
 801030a:	2b00      	cmp	r3, #0
 801030c:	d009      	beq.n	8010322 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801030e:	4b2a      	ldr	r3, [pc, #168]	; (80103b8 <UART_SetConfig+0xac0>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	08db      	lsrs	r3, r3, #3
 8010314:	f003 0303 	and.w	r3, r3, #3
 8010318:	4a28      	ldr	r2, [pc, #160]	; (80103bc <UART_SetConfig+0xac4>)
 801031a:	fa22 f303 	lsr.w	r3, r2, r3
 801031e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010320:	e00f      	b.n	8010342 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010322:	4b26      	ldr	r3, [pc, #152]	; (80103bc <UART_SetConfig+0xac4>)
 8010324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010326:	e00c      	b.n	8010342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010328:	4b25      	ldr	r3, [pc, #148]	; (80103c0 <UART_SetConfig+0xac8>)
 801032a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801032c:	e009      	b.n	8010342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801032e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010334:	e005      	b.n	8010342 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010336:	2300      	movs	r3, #0
 8010338:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801033a:	2301      	movs	r3, #1
 801033c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010340:	bf00      	nop
    }

    if (pclk != 0U)
 8010342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010344:	2b00      	cmp	r3, #0
 8010346:	d021      	beq.n	801038c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801034c:	4a1d      	ldr	r2, [pc, #116]	; (80103c4 <UART_SetConfig+0xacc>)
 801034e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010352:	461a      	mov	r2, r3
 8010354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010356:	fbb3 f2f2 	udiv	r2, r3, r2
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	085b      	lsrs	r3, r3, #1
 8010360:	441a      	add	r2, r3
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	fbb2 f3f3 	udiv	r3, r2, r3
 801036a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801036c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036e:	2b0f      	cmp	r3, #15
 8010370:	d909      	bls.n	8010386 <UART_SetConfig+0xa8e>
 8010372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010378:	d205      	bcs.n	8010386 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801037a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037c:	b29a      	uxth	r2, r3
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	60da      	str	r2, [r3, #12]
 8010384:	e002      	b.n	801038c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010386:	2301      	movs	r3, #1
 8010388:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	2201      	movs	r2, #1
 8010390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	2201      	movs	r2, #1
 8010398:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	2200      	movs	r2, #0
 80103a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	2200      	movs	r2, #0
 80103a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80103a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3748      	adds	r7, #72	; 0x48
 80103b0:	46bd      	mov	sp, r7
 80103b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103b6:	bf00      	nop
 80103b8:	58024400 	.word	0x58024400
 80103bc:	03d09000 	.word	0x03d09000
 80103c0:	003d0900 	.word	0x003d0900
 80103c4:	08015f18 	.word	0x08015f18

080103c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d4:	f003 0308 	and.w	r3, r3, #8
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00a      	beq.n	80103f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	430a      	orrs	r2, r1
 80103f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f6:	f003 0301 	and.w	r3, r3, #1
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00a      	beq.n	8010414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	430a      	orrs	r2, r1
 8010412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010418:	f003 0302 	and.w	r3, r3, #2
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00a      	beq.n	8010436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	430a      	orrs	r2, r1
 8010434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043a:	f003 0304 	and.w	r3, r3, #4
 801043e:	2b00      	cmp	r3, #0
 8010440:	d00a      	beq.n	8010458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	430a      	orrs	r2, r1
 8010456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045c:	f003 0310 	and.w	r3, r3, #16
 8010460:	2b00      	cmp	r3, #0
 8010462:	d00a      	beq.n	801047a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	430a      	orrs	r2, r1
 8010478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801047e:	f003 0320 	and.w	r3, r3, #32
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00a      	beq.n	801049c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	430a      	orrs	r2, r1
 801049a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01a      	beq.n	80104de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	430a      	orrs	r2, r1
 80104bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104c6:	d10a      	bne.n	80104de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	430a      	orrs	r2, r1
 80104dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00a      	beq.n	8010500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	430a      	orrs	r2, r1
 80104fe:	605a      	str	r2, [r3, #4]
  }
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b098      	sub	sp, #96	; 0x60
 8010510:	af02      	add	r7, sp, #8
 8010512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2200      	movs	r2, #0
 8010518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801051c:	f7f3 f828 	bl	8003570 <HAL_GetTick>
 8010520:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f003 0308 	and.w	r3, r3, #8
 801052c:	2b08      	cmp	r3, #8
 801052e:	d12f      	bne.n	8010590 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010538:	2200      	movs	r2, #0
 801053a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 f88e 	bl	8010660 <UART_WaitOnFlagUntilTimeout>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d022      	beq.n	8010590 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010552:	e853 3f00 	ldrex	r3, [r3]
 8010556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801055e:	653b      	str	r3, [r7, #80]	; 0x50
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	461a      	mov	r2, r3
 8010566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010568:	647b      	str	r3, [r7, #68]	; 0x44
 801056a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801056e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010570:	e841 2300 	strex	r3, r2, [r1]
 8010574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1e6      	bne.n	801054a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2220      	movs	r2, #32
 8010580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801058c:	2303      	movs	r3, #3
 801058e:	e063      	b.n	8010658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f003 0304 	and.w	r3, r3, #4
 801059a:	2b04      	cmp	r3, #4
 801059c:	d149      	bne.n	8010632 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801059e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105a6:	2200      	movs	r2, #0
 80105a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 f857 	bl	8010660 <UART_WaitOnFlagUntilTimeout>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d03c      	beq.n	8010632 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c0:	e853 3f00 	ldrex	r3, [r3]
 80105c4:	623b      	str	r3, [r7, #32]
   return(result);
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	461a      	mov	r2, r3
 80105d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d6:	633b      	str	r3, [r7, #48]	; 0x30
 80105d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105de:	e841 2300 	strex	r3, r2, [r1]
 80105e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d1e6      	bne.n	80105b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	3308      	adds	r3, #8
 80105f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	e853 3f00 	ldrex	r3, [r3]
 80105f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f023 0301 	bic.w	r3, r3, #1
 8010600:	64bb      	str	r3, [r7, #72]	; 0x48
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	3308      	adds	r3, #8
 8010608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801060a:	61fa      	str	r2, [r7, #28]
 801060c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060e:	69b9      	ldr	r1, [r7, #24]
 8010610:	69fa      	ldr	r2, [r7, #28]
 8010612:	e841 2300 	strex	r3, r2, [r1]
 8010616:	617b      	str	r3, [r7, #20]
   return(result);
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1e5      	bne.n	80105ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2220      	movs	r2, #32
 8010622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801062e:	2303      	movs	r3, #3
 8010630:	e012      	b.n	8010658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2220      	movs	r2, #32
 8010636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2220      	movs	r2, #32
 801063e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3758      	adds	r7, #88	; 0x58
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	603b      	str	r3, [r7, #0]
 801066c:	4613      	mov	r3, r2
 801066e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010670:	e04f      	b.n	8010712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010678:	d04b      	beq.n	8010712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801067a:	f7f2 ff79 	bl	8003570 <HAL_GetTick>
 801067e:	4602      	mov	r2, r0
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	69ba      	ldr	r2, [r7, #24]
 8010686:	429a      	cmp	r2, r3
 8010688:	d302      	bcc.n	8010690 <UART_WaitOnFlagUntilTimeout+0x30>
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d101      	bne.n	8010694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010690:	2303      	movs	r3, #3
 8010692:	e04e      	b.n	8010732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f003 0304 	and.w	r3, r3, #4
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d037      	beq.n	8010712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	2b80      	cmp	r3, #128	; 0x80
 80106a6:	d034      	beq.n	8010712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2b40      	cmp	r3, #64	; 0x40
 80106ac:	d031      	beq.n	8010712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	69db      	ldr	r3, [r3, #28]
 80106b4:	f003 0308 	and.w	r3, r3, #8
 80106b8:	2b08      	cmp	r3, #8
 80106ba:	d110      	bne.n	80106de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2208      	movs	r2, #8
 80106c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f000 f99d 	bl	8010a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2208      	movs	r2, #8
 80106ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2200      	movs	r2, #0
 80106d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	e029      	b.n	8010732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	69db      	ldr	r3, [r3, #28]
 80106e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106ec:	d111      	bne.n	8010712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 f983 	bl	8010a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2220      	movs	r2, #32
 8010702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801070e:	2303      	movs	r3, #3
 8010710:	e00f      	b.n	8010732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	69da      	ldr	r2, [r3, #28]
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	4013      	ands	r3, r2
 801071c:	68ba      	ldr	r2, [r7, #8]
 801071e:	429a      	cmp	r2, r3
 8010720:	bf0c      	ite	eq
 8010722:	2301      	moveq	r3, #1
 8010724:	2300      	movne	r3, #0
 8010726:	b2db      	uxtb	r3, r3
 8010728:	461a      	mov	r2, r3
 801072a:	79fb      	ldrb	r3, [r7, #7]
 801072c:	429a      	cmp	r2, r3
 801072e:	d0a0      	beq.n	8010672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
	...

0801073c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801073c:	b480      	push	{r7}
 801073e:	b0a3      	sub	sp, #140	; 0x8c
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	4613      	mov	r3, r2
 8010748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	88fa      	ldrh	r2, [r7, #6]
 8010754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	88fa      	ldrh	r2, [r7, #6]
 801075c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2200      	movs	r2, #0
 8010764:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	689b      	ldr	r3, [r3, #8]
 801076a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801076e:	d10e      	bne.n	801078e <UART_Start_Receive_IT+0x52>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	691b      	ldr	r3, [r3, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d105      	bne.n	8010784 <UART_Start_Receive_IT+0x48>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801077e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010782:	e02d      	b.n	80107e0 <UART_Start_Receive_IT+0xa4>
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	22ff      	movs	r2, #255	; 0xff
 8010788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801078c:	e028      	b.n	80107e0 <UART_Start_Receive_IT+0xa4>
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	689b      	ldr	r3, [r3, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10d      	bne.n	80107b2 <UART_Start_Receive_IT+0x76>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	691b      	ldr	r3, [r3, #16]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d104      	bne.n	80107a8 <UART_Start_Receive_IT+0x6c>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	22ff      	movs	r2, #255	; 0xff
 80107a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107a6:	e01b      	b.n	80107e0 <UART_Start_Receive_IT+0xa4>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	227f      	movs	r2, #127	; 0x7f
 80107ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107b0:	e016      	b.n	80107e0 <UART_Start_Receive_IT+0xa4>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107ba:	d10d      	bne.n	80107d8 <UART_Start_Receive_IT+0x9c>
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d104      	bne.n	80107ce <UART_Start_Receive_IT+0x92>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	227f      	movs	r2, #127	; 0x7f
 80107c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107cc:	e008      	b.n	80107e0 <UART_Start_Receive_IT+0xa4>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	223f      	movs	r2, #63	; 0x3f
 80107d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107d6:	e003      	b.n	80107e0 <UART_Start_Receive_IT+0xa4>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2200      	movs	r2, #0
 80107dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2222      	movs	r2, #34	; 0x22
 80107ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	3308      	adds	r3, #8
 80107f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010802:	f043 0301 	orr.w	r3, r3, #1
 8010806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3308      	adds	r3, #8
 8010810:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010814:	673a      	str	r2, [r7, #112]	; 0x70
 8010816:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010818:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801081a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801081c:	e841 2300 	strex	r3, r2, [r1]
 8010820:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1e3      	bne.n	80107f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801082c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010830:	d14f      	bne.n	80108d2 <UART_Start_Receive_IT+0x196>
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010838:	88fa      	ldrh	r2, [r7, #6]
 801083a:	429a      	cmp	r2, r3
 801083c:	d349      	bcc.n	80108d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010846:	d107      	bne.n	8010858 <UART_Start_Receive_IT+0x11c>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	691b      	ldr	r3, [r3, #16]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d103      	bne.n	8010858 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	4a47      	ldr	r2, [pc, #284]	; (8010970 <UART_Start_Receive_IT+0x234>)
 8010854:	675a      	str	r2, [r3, #116]	; 0x74
 8010856:	e002      	b.n	801085e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	4a46      	ldr	r2, [pc, #280]	; (8010974 <UART_Start_Receive_IT+0x238>)
 801085c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d01a      	beq.n	801089c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801086c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801086e:	e853 3f00 	ldrex	r3, [r3]
 8010872:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801087a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	461a      	mov	r2, r3
 8010884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010888:	65fb      	str	r3, [r7, #92]	; 0x5c
 801088a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801088e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010890:	e841 2300 	strex	r3, r2, [r1]
 8010894:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1e4      	bne.n	8010866 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	3308      	adds	r3, #8
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108a6:	e853 3f00 	ldrex	r3, [r3]
 80108aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	3308      	adds	r3, #8
 80108ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80108bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80108be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108c4:	e841 2300 	strex	r3, r2, [r1]
 80108c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80108ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1e5      	bne.n	801089c <UART_Start_Receive_IT+0x160>
 80108d0:	e046      	b.n	8010960 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108da:	d107      	bne.n	80108ec <UART_Start_Receive_IT+0x1b0>
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d103      	bne.n	80108ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	4a24      	ldr	r2, [pc, #144]	; (8010978 <UART_Start_Receive_IT+0x23c>)
 80108e8:	675a      	str	r2, [r3, #116]	; 0x74
 80108ea:	e002      	b.n	80108f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	4a23      	ldr	r2, [pc, #140]	; (801097c <UART_Start_Receive_IT+0x240>)
 80108f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	691b      	ldr	r3, [r3, #16]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d019      	beq.n	801092e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010902:	e853 3f00 	ldrex	r3, [r3]
 8010906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801090e:	677b      	str	r3, [r7, #116]	; 0x74
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	461a      	mov	r2, r3
 8010916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010918:	637b      	str	r3, [r7, #52]	; 0x34
 801091a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801091e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010920:	e841 2300 	strex	r3, r2, [r1]
 8010924:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1e6      	bne.n	80108fa <UART_Start_Receive_IT+0x1be>
 801092c:	e018      	b.n	8010960 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	e853 3f00 	ldrex	r3, [r3]
 801093a:	613b      	str	r3, [r7, #16]
   return(result);
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	f043 0320 	orr.w	r3, r3, #32
 8010942:	67bb      	str	r3, [r7, #120]	; 0x78
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	461a      	mov	r2, r3
 801094a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801094c:	623b      	str	r3, [r7, #32]
 801094e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010950:	69f9      	ldr	r1, [r7, #28]
 8010952:	6a3a      	ldr	r2, [r7, #32]
 8010954:	e841 2300 	strex	r3, r2, [r1]
 8010958:	61bb      	str	r3, [r7, #24]
   return(result);
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1e6      	bne.n	801092e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	378c      	adds	r7, #140	; 0x8c
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	08011355 	.word	0x08011355
 8010974:	08010ff5 	.word	0x08010ff5
 8010978:	08010e3d 	.word	0x08010e3d
 801097c:	08010c85 	.word	0x08010c85

08010980 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010980:	b480      	push	{r7}
 8010982:	b08f      	sub	sp, #60	; 0x3c
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801098e:	6a3b      	ldr	r3, [r7, #32]
 8010990:	e853 3f00 	ldrex	r3, [r3]
 8010994:	61fb      	str	r3, [r7, #28]
   return(result);
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801099c:	637b      	str	r3, [r7, #52]	; 0x34
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	461a      	mov	r2, r3
 80109a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109ae:	e841 2300 	strex	r3, r2, [r1]
 80109b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1e6      	bne.n	8010988 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3308      	adds	r3, #8
 80109c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	e853 3f00 	ldrex	r3, [r3]
 80109c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80109d0:	633b      	str	r3, [r7, #48]	; 0x30
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	3308      	adds	r3, #8
 80109d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109da:	61ba      	str	r2, [r7, #24]
 80109dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109de:	6979      	ldr	r1, [r7, #20]
 80109e0:	69ba      	ldr	r2, [r7, #24]
 80109e2:	e841 2300 	strex	r3, r2, [r1]
 80109e6:	613b      	str	r3, [r7, #16]
   return(result);
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d1e5      	bne.n	80109ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2220      	movs	r2, #32
 80109f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80109f6:	bf00      	nop
 80109f8:	373c      	adds	r7, #60	; 0x3c
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
	...

08010a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b095      	sub	sp, #84	; 0x54
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a14:	e853 3f00 	ldrex	r3, [r3]
 8010a18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	461a      	mov	r2, r3
 8010a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8010a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a32:	e841 2300 	strex	r3, r2, [r1]
 8010a36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1e6      	bne.n	8010a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	3308      	adds	r3, #8
 8010a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	e853 3f00 	ldrex	r3, [r3]
 8010a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a4e:	69fa      	ldr	r2, [r7, #28]
 8010a50:	4b1e      	ldr	r3, [pc, #120]	; (8010acc <UART_EndRxTransfer+0xc8>)
 8010a52:	4013      	ands	r3, r2
 8010a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	3308      	adds	r3, #8
 8010a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1e5      	bne.n	8010a3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	d118      	bne.n	8010aac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	e853 3f00 	ldrex	r3, [r3]
 8010a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	f023 0310 	bic.w	r3, r3, #16
 8010a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	461a      	mov	r2, r3
 8010a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a98:	61bb      	str	r3, [r7, #24]
 8010a9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9c:	6979      	ldr	r1, [r7, #20]
 8010a9e:	69ba      	ldr	r2, [r7, #24]
 8010aa0:	e841 2300 	strex	r3, r2, [r1]
 8010aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1e6      	bne.n	8010a7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2220      	movs	r2, #32
 8010ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2200      	movs	r2, #0
 8010abe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010ac0:	bf00      	nop
 8010ac2:	3754      	adds	r7, #84	; 0x54
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	effffffe 	.word	0xeffffffe

08010ad0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b090      	sub	sp, #64	; 0x40
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010adc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	69db      	ldr	r3, [r3, #28]
 8010ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ae6:	d037      	beq.n	8010b58 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aea:	2200      	movs	r2, #0
 8010aec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	3308      	adds	r3, #8
 8010af6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	e853 3f00 	ldrex	r3, [r3]
 8010afe:	623b      	str	r3, [r7, #32]
   return(result);
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b10:	633a      	str	r2, [r7, #48]	; 0x30
 8010b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b18:	e841 2300 	strex	r3, r2, [r1]
 8010b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d1e5      	bne.n	8010af0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	e853 3f00 	ldrex	r3, [r3]
 8010b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b38:	637b      	str	r3, [r7, #52]	; 0x34
 8010b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	461a      	mov	r2, r3
 8010b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b42:	61fb      	str	r3, [r7, #28]
 8010b44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b46:	69b9      	ldr	r1, [r7, #24]
 8010b48:	69fa      	ldr	r2, [r7, #28]
 8010b4a:	e841 2300 	strex	r3, r2, [r1]
 8010b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1e6      	bne.n	8010b24 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b56:	e002      	b.n	8010b5e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010b58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b5a:	f7f1 f833 	bl	8001bc4 <HAL_UART_TxCpltCallback>
}
 8010b5e:	bf00      	nop
 8010b60:	3740      	adds	r7, #64	; 0x40
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010b74:	68f8      	ldr	r0, [r7, #12]
 8010b76:	f7fe fe9f 	bl	800f8b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b7a:	bf00      	nop
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b086      	sub	sp, #24
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010baa:	2b80      	cmp	r3, #128	; 0x80
 8010bac:	d109      	bne.n	8010bc2 <UART_DMAError+0x40>
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	2b21      	cmp	r3, #33	; 0x21
 8010bb2:	d106      	bne.n	8010bc2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010bbc:	6978      	ldr	r0, [r7, #20]
 8010bbe:	f7ff fedf 	bl	8010980 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bcc:	2b40      	cmp	r3, #64	; 0x40
 8010bce:	d109      	bne.n	8010be4 <UART_DMAError+0x62>
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2b22      	cmp	r3, #34	; 0x22
 8010bd4:	d106      	bne.n	8010be4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010bde:	6978      	ldr	r0, [r7, #20]
 8010be0:	f7ff ff10 	bl	8010a04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bea:	f043 0210 	orr.w	r2, r3, #16
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bf4:	6978      	ldr	r0, [r7, #20]
 8010bf6:	f7fe fe69 	bl	800f8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bfa:	bf00      	nop
 8010bfc:	3718      	adds	r7, #24
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7fe fe53 	bl	800f8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c26:	bf00      	nop
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b088      	sub	sp, #32
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	e853 3f00 	ldrex	r3, [r3]
 8010c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c4a:	61fb      	str	r3, [r7, #28]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	461a      	mov	r2, r3
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	61bb      	str	r3, [r7, #24]
 8010c56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c58:	6979      	ldr	r1, [r7, #20]
 8010c5a:	69ba      	ldr	r2, [r7, #24]
 8010c5c:	e841 2300 	strex	r3, r2, [r1]
 8010c60:	613b      	str	r3, [r7, #16]
   return(result);
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1e6      	bne.n	8010c36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2220      	movs	r2, #32
 8010c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7f0 ffa4 	bl	8001bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c7c:	bf00      	nop
 8010c7e:	3720      	adds	r7, #32
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b09c      	sub	sp, #112	; 0x70
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c9c:	2b22      	cmp	r3, #34	; 0x22
 8010c9e:	f040 80be 	bne.w	8010e1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010cac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010cb0:	b2d9      	uxtb	r1, r3
 8010cb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cbc:	400a      	ands	r2, r1
 8010cbe:	b2d2      	uxtb	r2, r2
 8010cc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cc6:	1c5a      	adds	r2, r3, #1
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	3b01      	subs	r3, #1
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f040 80a1 	bne.w	8010e2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cf4:	e853 3f00 	ldrex	r3, [r3]
 8010cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	461a      	mov	r2, r3
 8010d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d12:	e841 2300 	strex	r3, r2, [r1]
 8010d16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d1e6      	bne.n	8010cec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3308      	adds	r3, #8
 8010d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d28:	e853 3f00 	ldrex	r3, [r3]
 8010d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d30:	f023 0301 	bic.w	r3, r3, #1
 8010d34:	667b      	str	r3, [r7, #100]	; 0x64
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	3308      	adds	r3, #8
 8010d3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d3e:	647a      	str	r2, [r7, #68]	; 0x44
 8010d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d46:	e841 2300 	strex	r3, r2, [r1]
 8010d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d1e5      	bne.n	8010d1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2220      	movs	r2, #32
 8010d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a33      	ldr	r2, [pc, #204]	; (8010e38 <UART_RxISR_8BIT+0x1b4>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d01f      	beq.n	8010db0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d018      	beq.n	8010db0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d86:	e853 3f00 	ldrex	r3, [r3]
 8010d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010d92:	663b      	str	r3, [r7, #96]	; 0x60
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	461a      	mov	r2, r3
 8010d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8010d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010da4:	e841 2300 	strex	r3, r2, [r1]
 8010da8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1e6      	bne.n	8010d7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d12e      	bne.n	8010e16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	e853 3f00 	ldrex	r3, [r3]
 8010dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f023 0310 	bic.w	r3, r3, #16
 8010dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	461a      	mov	r2, r3
 8010dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ddc:	61fb      	str	r3, [r7, #28]
 8010dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de0:	69b9      	ldr	r1, [r7, #24]
 8010de2:	69fa      	ldr	r2, [r7, #28]
 8010de4:	e841 2300 	strex	r3, r2, [r1]
 8010de8:	617b      	str	r3, [r7, #20]
   return(result);
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d1e6      	bne.n	8010dbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	f003 0310 	and.w	r3, r3, #16
 8010dfa:	2b10      	cmp	r3, #16
 8010dfc:	d103      	bne.n	8010e06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2210      	movs	r2, #16
 8010e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7fe fd66 	bl	800f8e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e14:	e00b      	b.n	8010e2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7f0 fa90 	bl	800133c <HAL_UART_RxCpltCallback>
}
 8010e1c:	e007      	b.n	8010e2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	699a      	ldr	r2, [r3, #24]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f042 0208 	orr.w	r2, r2, #8
 8010e2c:	619a      	str	r2, [r3, #24]
}
 8010e2e:	bf00      	nop
 8010e30:	3770      	adds	r7, #112	; 0x70
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	58000c00 	.word	0x58000c00

08010e3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b09c      	sub	sp, #112	; 0x70
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e54:	2b22      	cmp	r3, #34	; 0x22
 8010e56:	f040 80be 	bne.w	8010fd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e68:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010e6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010e6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010e72:	4013      	ands	r3, r2
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e7e:	1c9a      	adds	r2, r3, #2
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f040 80a1 	bne.w	8010fe6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eac:	e853 3f00 	ldrex	r3, [r3]
 8010eb0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8010ec4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010eca:	e841 2300 	strex	r3, r2, [r1]
 8010ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1e6      	bne.n	8010ea4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3308      	adds	r3, #8
 8010edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	f023 0301 	bic.w	r3, r3, #1
 8010eec:	663b      	str	r3, [r7, #96]	; 0x60
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	3308      	adds	r3, #8
 8010ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ef6:	643a      	str	r2, [r7, #64]	; 0x40
 8010ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010efe:	e841 2300 	strex	r3, r2, [r1]
 8010f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1e5      	bne.n	8010ed6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2220      	movs	r2, #32
 8010f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4a33      	ldr	r2, [pc, #204]	; (8010ff0 <UART_RxISR_16BIT+0x1b4>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d01f      	beq.n	8010f68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d018      	beq.n	8010f68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3c:	6a3b      	ldr	r3, [r7, #32]
 8010f3e:	e853 3f00 	ldrex	r3, [r3]
 8010f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	461a      	mov	r2, r3
 8010f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f5c:	e841 2300 	strex	r3, r2, [r1]
 8010f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1e6      	bne.n	8010f36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d12e      	bne.n	8010fce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	e853 3f00 	ldrex	r3, [r3]
 8010f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	f023 0310 	bic.w	r3, r3, #16
 8010f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	461a      	mov	r2, r3
 8010f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f94:	61bb      	str	r3, [r7, #24]
 8010f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f98:	6979      	ldr	r1, [r7, #20]
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	e841 2300 	strex	r3, r2, [r1]
 8010fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1e6      	bne.n	8010f76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	69db      	ldr	r3, [r3, #28]
 8010fae:	f003 0310 	and.w	r3, r3, #16
 8010fb2:	2b10      	cmp	r3, #16
 8010fb4:	d103      	bne.n	8010fbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2210      	movs	r2, #16
 8010fbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7fe fc8a 	bl	800f8e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010fcc:	e00b      	b.n	8010fe6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f7f0 f9b4 	bl	800133c <HAL_UART_RxCpltCallback>
}
 8010fd4:	e007      	b.n	8010fe6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	699a      	ldr	r2, [r3, #24]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f042 0208 	orr.w	r2, r2, #8
 8010fe4:	619a      	str	r2, [r3, #24]
}
 8010fe6:	bf00      	nop
 8010fe8:	3770      	adds	r7, #112	; 0x70
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	58000c00 	.word	0x58000c00

08010ff4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b0ac      	sub	sp, #176	; 0xb0
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011002:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	69db      	ldr	r3, [r3, #28]
 801100c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	689b      	ldr	r3, [r3, #8]
 8011020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801102a:	2b22      	cmp	r3, #34	; 0x22
 801102c:	f040 8180 	bne.w	8011330 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011036:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801103a:	e123      	b.n	8011284 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011042:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011046:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801104a:	b2d9      	uxtb	r1, r3
 801104c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011050:	b2da      	uxtb	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011056:	400a      	ands	r2, r1
 8011058:	b2d2      	uxtb	r2, r2
 801105a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011060:	1c5a      	adds	r2, r3, #1
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801106c:	b29b      	uxth	r3, r3
 801106e:	3b01      	subs	r3, #1
 8011070:	b29a      	uxth	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	69db      	ldr	r3, [r3, #28]
 801107e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011086:	f003 0307 	and.w	r3, r3, #7
 801108a:	2b00      	cmp	r3, #0
 801108c:	d053      	beq.n	8011136 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801108e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011092:	f003 0301 	and.w	r3, r3, #1
 8011096:	2b00      	cmp	r3, #0
 8011098:	d011      	beq.n	80110be <UART_RxISR_8BIT_FIFOEN+0xca>
 801109a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00b      	beq.n	80110be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2201      	movs	r2, #1
 80110ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110b4:	f043 0201 	orr.w	r2, r3, #1
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80110be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80110c2:	f003 0302 	and.w	r3, r3, #2
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d011      	beq.n	80110ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80110ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80110ce:	f003 0301 	and.w	r3, r3, #1
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00b      	beq.n	80110ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2202      	movs	r2, #2
 80110dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110e4:	f043 0204 	orr.w	r2, r3, #4
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80110ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80110f2:	f003 0304 	and.w	r3, r3, #4
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d011      	beq.n	801111e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80110fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80110fe:	f003 0301 	and.w	r3, r3, #1
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00b      	beq.n	801111e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2204      	movs	r2, #4
 801110c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011114:	f043 0202 	orr.w	r2, r3, #2
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011124:	2b00      	cmp	r3, #0
 8011126:	d006      	beq.n	8011136 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7fe fbcf 	bl	800f8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801113c:	b29b      	uxth	r3, r3
 801113e:	2b00      	cmp	r3, #0
 8011140:	f040 80a0 	bne.w	8011284 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801114a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801114c:	e853 3f00 	ldrex	r3, [r3]
 8011150:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	461a      	mov	r2, r3
 8011162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011168:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801116a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801116c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801116e:	e841 2300 	strex	r3, r2, [r1]
 8011172:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011176:	2b00      	cmp	r3, #0
 8011178:	d1e4      	bne.n	8011144 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3308      	adds	r3, #8
 8011180:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011184:	e853 3f00 	ldrex	r3, [r3]
 8011188:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801118a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801118c:	4b6e      	ldr	r3, [pc, #440]	; (8011348 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801118e:	4013      	ands	r3, r2
 8011190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	3308      	adds	r3, #8
 801119a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801119e:	66ba      	str	r2, [r7, #104]	; 0x68
 80111a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80111a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80111a6:	e841 2300 	strex	r3, r2, [r1]
 80111aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80111ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1e3      	bne.n	801117a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2220      	movs	r2, #32
 80111b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a60      	ldr	r2, [pc, #384]	; (801134c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d021      	beq.n	8011214 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d01a      	beq.n	8011214 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111e6:	e853 3f00 	ldrex	r3, [r3]
 80111ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80111ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80111f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	461a      	mov	r2, r3
 80111fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011200:	657b      	str	r3, [r7, #84]	; 0x54
 8011202:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011204:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011206:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011208:	e841 2300 	strex	r3, r2, [r1]
 801120c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801120e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011210:	2b00      	cmp	r3, #0
 8011212:	d1e4      	bne.n	80111de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011218:	2b01      	cmp	r3, #1
 801121a:	d130      	bne.n	801127e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122a:	e853 3f00 	ldrex	r3, [r3]
 801122e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011232:	f023 0310 	bic.w	r3, r3, #16
 8011236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	461a      	mov	r2, r3
 8011240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011244:	643b      	str	r3, [r7, #64]	; 0x40
 8011246:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801124a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801124c:	e841 2300 	strex	r3, r2, [r1]
 8011250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011254:	2b00      	cmp	r3, #0
 8011256:	d1e4      	bne.n	8011222 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	69db      	ldr	r3, [r3, #28]
 801125e:	f003 0310 	and.w	r3, r3, #16
 8011262:	2b10      	cmp	r3, #16
 8011264:	d103      	bne.n	801126e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2210      	movs	r2, #16
 801126c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7fe fb32 	bl	800f8e0 <HAL_UARTEx_RxEventCallback>
 801127c:	e002      	b.n	8011284 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7f0 f85c 	bl	800133c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011284:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011288:	2b00      	cmp	r3, #0
 801128a:	d006      	beq.n	801129a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801128c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011290:	f003 0320 	and.w	r3, r3, #32
 8011294:	2b00      	cmp	r3, #0
 8011296:	f47f aed1 	bne.w	801103c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80112a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80112a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d049      	beq.n	8011340 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80112b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d242      	bcs.n	8011340 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	3308      	adds	r3, #8
 80112c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112c2:	6a3b      	ldr	r3, [r7, #32]
 80112c4:	e853 3f00 	ldrex	r3, [r3]
 80112c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80112ca:	69fb      	ldr	r3, [r7, #28]
 80112cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80112d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	3308      	adds	r3, #8
 80112da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80112de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80112e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112e6:	e841 2300 	strex	r3, r2, [r1]
 80112ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80112ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1e3      	bne.n	80112ba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4a16      	ldr	r2, [pc, #88]	; (8011350 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80112f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	e853 3f00 	ldrex	r3, [r3]
 8011304:	60bb      	str	r3, [r7, #8]
   return(result);
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	f043 0320 	orr.w	r3, r3, #32
 801130c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	461a      	mov	r2, r3
 8011316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801131a:	61bb      	str	r3, [r7, #24]
 801131c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801131e:	6979      	ldr	r1, [r7, #20]
 8011320:	69ba      	ldr	r2, [r7, #24]
 8011322:	e841 2300 	strex	r3, r2, [r1]
 8011326:	613b      	str	r3, [r7, #16]
   return(result);
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d1e4      	bne.n	80112f8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801132e:	e007      	b.n	8011340 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	699a      	ldr	r2, [r3, #24]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f042 0208 	orr.w	r2, r2, #8
 801133e:	619a      	str	r2, [r3, #24]
}
 8011340:	bf00      	nop
 8011342:	37b0      	adds	r7, #176	; 0xb0
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	effffffe 	.word	0xeffffffe
 801134c:	58000c00 	.word	0x58000c00
 8011350:	08010c85 	.word	0x08010c85

08011354 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b0ae      	sub	sp, #184	; 0xb8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011362:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	69db      	ldr	r3, [r3, #28]
 801136c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801138a:	2b22      	cmp	r3, #34	; 0x22
 801138c:	f040 8184 	bne.w	8011698 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011396:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801139a:	e127      	b.n	80115ec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80113ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80113b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80113b6:	4013      	ands	r3, r2
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113c4:	1c9a      	adds	r2, r3, #2
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	3b01      	subs	r3, #1
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	69db      	ldr	r3, [r3, #28]
 80113e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80113e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80113ea:	f003 0307 	and.w	r3, r3, #7
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d053      	beq.n	801149a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80113f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d011      	beq.n	8011422 <UART_RxISR_16BIT_FIFOEN+0xce>
 80113fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00b      	beq.n	8011422 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2201      	movs	r2, #1
 8011410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011418:	f043 0201 	orr.w	r2, r3, #1
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011426:	f003 0302 	and.w	r3, r3, #2
 801142a:	2b00      	cmp	r3, #0
 801142c:	d011      	beq.n	8011452 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801142e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011432:	f003 0301 	and.w	r3, r3, #1
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00b      	beq.n	8011452 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2202      	movs	r2, #2
 8011440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011448:	f043 0204 	orr.w	r2, r3, #4
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011452:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011456:	f003 0304 	and.w	r3, r3, #4
 801145a:	2b00      	cmp	r3, #0
 801145c:	d011      	beq.n	8011482 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801145e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011462:	f003 0301 	and.w	r3, r3, #1
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00b      	beq.n	8011482 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2204      	movs	r2, #4
 8011470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011478:	f043 0202 	orr.w	r2, r3, #2
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011488:	2b00      	cmp	r3, #0
 801148a:	d006      	beq.n	801149a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7fe fa1d 	bl	800f8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f040 80a2 	bne.w	80115ec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80114b0:	e853 3f00 	ldrex	r3, [r3]
 80114b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80114b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	461a      	mov	r2, r3
 80114c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80114ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80114ce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80114d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80114d6:	e841 2300 	strex	r3, r2, [r1]
 80114da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80114dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d1e2      	bne.n	80114a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	3308      	adds	r3, #8
 80114e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80114ec:	e853 3f00 	ldrex	r3, [r3]
 80114f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80114f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114f4:	4b6e      	ldr	r3, [pc, #440]	; (80116b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80114f6:	4013      	ands	r3, r2
 80114f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	3308      	adds	r3, #8
 8011502:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801150a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801150c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801150e:	e841 2300 	strex	r3, r2, [r1]
 8011512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1e3      	bne.n	80114e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2220      	movs	r2, #32
 801151e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2200      	movs	r2, #0
 8011526:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2200      	movs	r2, #0
 801152c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4a60      	ldr	r2, [pc, #384]	; (80116b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d021      	beq.n	801157c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011542:	2b00      	cmp	r3, #0
 8011544:	d01a      	beq.n	801157c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801154e:	e853 3f00 	ldrex	r3, [r3]
 8011552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801155a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	461a      	mov	r2, r3
 8011564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011568:	65bb      	str	r3, [r7, #88]	; 0x58
 801156a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801156e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011570:	e841 2300 	strex	r3, r2, [r1]
 8011574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1e4      	bne.n	8011546 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011580:	2b01      	cmp	r3, #1
 8011582:	d130      	bne.n	80115e6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011592:	e853 3f00 	ldrex	r3, [r3]
 8011596:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801159a:	f023 0310 	bic.w	r3, r3, #16
 801159e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	461a      	mov	r2, r3
 80115a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80115ac:	647b      	str	r3, [r7, #68]	; 0x44
 80115ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80115b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115b4:	e841 2300 	strex	r3, r2, [r1]
 80115b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80115ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1e4      	bne.n	801158a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	69db      	ldr	r3, [r3, #28]
 80115c6:	f003 0310 	and.w	r3, r3, #16
 80115ca:	2b10      	cmp	r3, #16
 80115cc:	d103      	bne.n	80115d6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2210      	movs	r2, #16
 80115d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7fe f97e 	bl	800f8e0 <HAL_UARTEx_RxEventCallback>
 80115e4:	e002      	b.n	80115ec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f7ef fea8 	bl	800133c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d006      	beq.n	8011602 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80115f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80115f8:	f003 0320 	and.w	r3, r3, #32
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f47f aecd 	bne.w	801139c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011608:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801160c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011610:	2b00      	cmp	r3, #0
 8011612:	d049      	beq.n	80116a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801161a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801161e:	429a      	cmp	r2, r3
 8011620:	d242      	bcs.n	80116a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	3308      	adds	r3, #8
 8011628:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162c:	e853 3f00 	ldrex	r3, [r3]
 8011630:	623b      	str	r3, [r7, #32]
   return(result);
 8011632:	6a3b      	ldr	r3, [r7, #32]
 8011634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	3308      	adds	r3, #8
 8011642:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011646:	633a      	str	r2, [r7, #48]	; 0x30
 8011648:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801164a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801164c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801164e:	e841 2300 	strex	r3, r2, [r1]
 8011652:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1e3      	bne.n	8011622 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4a16      	ldr	r2, [pc, #88]	; (80116b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801165e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	e853 3f00 	ldrex	r3, [r3]
 801166c:	60fb      	str	r3, [r7, #12]
   return(result);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f043 0320 	orr.w	r3, r3, #32
 8011674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	461a      	mov	r2, r3
 801167e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011682:	61fb      	str	r3, [r7, #28]
 8011684:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011686:	69b9      	ldr	r1, [r7, #24]
 8011688:	69fa      	ldr	r2, [r7, #28]
 801168a:	e841 2300 	strex	r3, r2, [r1]
 801168e:	617b      	str	r3, [r7, #20]
   return(result);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d1e4      	bne.n	8011660 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011696:	e007      	b.n	80116a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	699a      	ldr	r2, [r3, #24]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f042 0208 	orr.w	r2, r2, #8
 80116a6:	619a      	str	r2, [r3, #24]
}
 80116a8:	bf00      	nop
 80116aa:	37b8      	adds	r7, #184	; 0xb8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	effffffe 	.word	0xeffffffe
 80116b4:	58000c00 	.word	0x58000c00
 80116b8:	08010e3d 	.word	0x08010e3d

080116bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80116c4:	bf00      	nop
 80116c6:	370c      	adds	r7, #12
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b083      	sub	sp, #12
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80116d8:	bf00      	nop
 80116da:	370c      	adds	r7, #12
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr

080116e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80116ec:	bf00      	nop
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b085      	sub	sp, #20
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011706:	2b01      	cmp	r3, #1
 8011708:	d101      	bne.n	801170e <HAL_UARTEx_DisableFifoMode+0x16>
 801170a:	2302      	movs	r3, #2
 801170c:	e027      	b.n	801175e <HAL_UARTEx_DisableFifoMode+0x66>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2201      	movs	r2, #1
 8011712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2224      	movs	r2, #36	; 0x24
 801171a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f022 0201 	bic.w	r2, r2, #1
 8011734:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801173c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2220      	movs	r2, #32
 8011750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2200      	movs	r2, #0
 8011758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801175c:	2300      	movs	r3, #0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3714      	adds	r7, #20
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b084      	sub	sp, #16
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
 8011772:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801177a:	2b01      	cmp	r3, #1
 801177c:	d101      	bne.n	8011782 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801177e:	2302      	movs	r3, #2
 8011780:	e02d      	b.n	80117de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2201      	movs	r2, #1
 8011786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2224      	movs	r2, #36	; 0x24
 801178e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f022 0201 	bic.w	r2, r2, #1
 80117a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	430a      	orrs	r2, r1
 80117bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 f850 	bl	8011864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2220      	movs	r2, #32
 80117d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2200      	movs	r2, #0
 80117d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117dc:	2300      	movs	r3, #0
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b084      	sub	sp, #16
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
 80117ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d101      	bne.n	80117fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80117fa:	2302      	movs	r3, #2
 80117fc:	e02d      	b.n	801185a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2201      	movs	r2, #1
 8011802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2224      	movs	r2, #36	; 0x24
 801180a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f022 0201 	bic.w	r2, r2, #1
 8011824:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	689b      	ldr	r3, [r3, #8]
 801182c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	683a      	ldr	r2, [r7, #0]
 8011836:	430a      	orrs	r2, r1
 8011838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f812 	bl	8011864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2220      	movs	r2, #32
 801184c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011858:	2300      	movs	r3, #0
}
 801185a:	4618      	mov	r0, r3
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
	...

08011864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011864:	b480      	push	{r7}
 8011866:	b085      	sub	sp, #20
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011870:	2b00      	cmp	r3, #0
 8011872:	d108      	bne.n	8011886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2201      	movs	r2, #1
 8011878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2201      	movs	r2, #1
 8011880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011884:	e031      	b.n	80118ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011886:	2310      	movs	r3, #16
 8011888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801188a:	2310      	movs	r3, #16
 801188c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	0e5b      	lsrs	r3, r3, #25
 8011896:	b2db      	uxtb	r3, r3
 8011898:	f003 0307 	and.w	r3, r3, #7
 801189c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	0f5b      	lsrs	r3, r3, #29
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	f003 0307 	and.w	r3, r3, #7
 80118ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80118ae:	7bbb      	ldrb	r3, [r7, #14]
 80118b0:	7b3a      	ldrb	r2, [r7, #12]
 80118b2:	4911      	ldr	r1, [pc, #68]	; (80118f8 <UARTEx_SetNbDataToProcess+0x94>)
 80118b4:	5c8a      	ldrb	r2, [r1, r2]
 80118b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80118ba:	7b3a      	ldrb	r2, [r7, #12]
 80118bc:	490f      	ldr	r1, [pc, #60]	; (80118fc <UARTEx_SetNbDataToProcess+0x98>)
 80118be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80118c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80118c4:	b29a      	uxth	r2, r3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	7b7a      	ldrb	r2, [r7, #13]
 80118d0:	4909      	ldr	r1, [pc, #36]	; (80118f8 <UARTEx_SetNbDataToProcess+0x94>)
 80118d2:	5c8a      	ldrb	r2, [r1, r2]
 80118d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80118d8:	7b7a      	ldrb	r2, [r7, #13]
 80118da:	4908      	ldr	r1, [pc, #32]	; (80118fc <UARTEx_SetNbDataToProcess+0x98>)
 80118dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80118de:	fb93 f3f2 	sdiv	r3, r3, r2
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80118ea:	bf00      	nop
 80118ec:	3714      	adds	r7, #20
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop
 80118f8:	08015f30 	.word	0x08015f30
 80118fc:	08015f38 	.word	0x08015f38

08011900 <__NVIC_SetPriority>:
{
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	4603      	mov	r3, r0
 8011908:	6039      	str	r1, [r7, #0]
 801190a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801190c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011910:	2b00      	cmp	r3, #0
 8011912:	db0a      	blt.n	801192a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	b2da      	uxtb	r2, r3
 8011918:	490c      	ldr	r1, [pc, #48]	; (801194c <__NVIC_SetPriority+0x4c>)
 801191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801191e:	0112      	lsls	r2, r2, #4
 8011920:	b2d2      	uxtb	r2, r2
 8011922:	440b      	add	r3, r1
 8011924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011928:	e00a      	b.n	8011940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	b2da      	uxtb	r2, r3
 801192e:	4908      	ldr	r1, [pc, #32]	; (8011950 <__NVIC_SetPriority+0x50>)
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	f003 030f 	and.w	r3, r3, #15
 8011936:	3b04      	subs	r3, #4
 8011938:	0112      	lsls	r2, r2, #4
 801193a:	b2d2      	uxtb	r2, r2
 801193c:	440b      	add	r3, r1
 801193e:	761a      	strb	r2, [r3, #24]
}
 8011940:	bf00      	nop
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	e000e100 	.word	0xe000e100
 8011950:	e000ed00 	.word	0xe000ed00

08011954 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011954:	b580      	push	{r7, lr}
 8011956:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011958:	4b05      	ldr	r3, [pc, #20]	; (8011970 <SysTick_Handler+0x1c>)
 801195a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801195c:	f002 fae2 	bl	8013f24 <xTaskGetSchedulerState>
 8011960:	4603      	mov	r3, r0
 8011962:	2b01      	cmp	r3, #1
 8011964:	d001      	beq.n	801196a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011966:	f003 f8ff 	bl	8014b68 <xPortSysTickHandler>
  }
}
 801196a:	bf00      	nop
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop
 8011970:	e000e010 	.word	0xe000e010

08011974 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011974:	b580      	push	{r7, lr}
 8011976:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011978:	2100      	movs	r1, #0
 801197a:	f06f 0004 	mvn.w	r0, #4
 801197e:	f7ff ffbf 	bl	8011900 <__NVIC_SetPriority>
#endif
}
 8011982:	bf00      	nop
 8011984:	bd80      	pop	{r7, pc}
	...

08011988 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801198e:	f3ef 8305 	mrs	r3, IPSR
 8011992:	603b      	str	r3, [r7, #0]
  return(result);
 8011994:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011996:	2b00      	cmp	r3, #0
 8011998:	d003      	beq.n	80119a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801199a:	f06f 0305 	mvn.w	r3, #5
 801199e:	607b      	str	r3, [r7, #4]
 80119a0:	e00c      	b.n	80119bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80119a2:	4b0a      	ldr	r3, [pc, #40]	; (80119cc <osKernelInitialize+0x44>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d105      	bne.n	80119b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80119aa:	4b08      	ldr	r3, [pc, #32]	; (80119cc <osKernelInitialize+0x44>)
 80119ac:	2201      	movs	r2, #1
 80119ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80119b0:	2300      	movs	r3, #0
 80119b2:	607b      	str	r3, [r7, #4]
 80119b4:	e002      	b.n	80119bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80119b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80119bc:	687b      	ldr	r3, [r7, #4]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	370c      	adds	r7, #12
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	24000c90 	.word	0x24000c90

080119d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119d6:	f3ef 8305 	mrs	r3, IPSR
 80119da:	603b      	str	r3, [r7, #0]
  return(result);
 80119dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d003      	beq.n	80119ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80119e2:	f06f 0305 	mvn.w	r3, #5
 80119e6:	607b      	str	r3, [r7, #4]
 80119e8:	e010      	b.n	8011a0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80119ea:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <osKernelStart+0x48>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d109      	bne.n	8011a06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80119f2:	f7ff ffbf 	bl	8011974 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80119f6:	4b08      	ldr	r3, [pc, #32]	; (8011a18 <osKernelStart+0x48>)
 80119f8:	2202      	movs	r2, #2
 80119fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80119fc:	f001 fda4 	bl	8013548 <vTaskStartScheduler>
      stat = osOK;
 8011a00:	2300      	movs	r3, #0
 8011a02:	607b      	str	r3, [r7, #4]
 8011a04:	e002      	b.n	8011a0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011a0c:	687b      	ldr	r3, [r7, #4]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	24000c90 	.word	0x24000c90

08011a1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b08e      	sub	sp, #56	; 0x38
 8011a20:	af04      	add	r7, sp, #16
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a2c:	f3ef 8305 	mrs	r3, IPSR
 8011a30:	617b      	str	r3, [r7, #20]
  return(result);
 8011a32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d17e      	bne.n	8011b36 <osThreadNew+0x11a>
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d07b      	beq.n	8011b36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011a3e:	2380      	movs	r3, #128	; 0x80
 8011a40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011a42:	2318      	movs	r3, #24
 8011a44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011a46:	2300      	movs	r3, #0
 8011a48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d045      	beq.n	8011ae2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d002      	beq.n	8011a64 <osThreadNew+0x48>
        name = attr->name;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	699b      	ldr	r3, [r3, #24]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	699b      	ldr	r3, [r3, #24]
 8011a70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d008      	beq.n	8011a8a <osThreadNew+0x6e>
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	2b38      	cmp	r3, #56	; 0x38
 8011a7c:	d805      	bhi.n	8011a8a <osThreadNew+0x6e>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d001      	beq.n	8011a8e <osThreadNew+0x72>
        return (NULL);
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e054      	b.n	8011b38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	695b      	ldr	r3, [r3, #20]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	695b      	ldr	r3, [r3, #20]
 8011a9a:	089b      	lsrs	r3, r3, #2
 8011a9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d00e      	beq.n	8011ac4 <osThreadNew+0xa8>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	2b5b      	cmp	r3, #91	; 0x5b
 8011aac:	d90a      	bls.n	8011ac4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d006      	beq.n	8011ac4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	695b      	ldr	r3, [r3, #20]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d002      	beq.n	8011ac4 <osThreadNew+0xa8>
        mem = 1;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	61bb      	str	r3, [r7, #24]
 8011ac2:	e010      	b.n	8011ae6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	689b      	ldr	r3, [r3, #8]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d10c      	bne.n	8011ae6 <osThreadNew+0xca>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d108      	bne.n	8011ae6 <osThreadNew+0xca>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	691b      	ldr	r3, [r3, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d104      	bne.n	8011ae6 <osThreadNew+0xca>
          mem = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	61bb      	str	r3, [r7, #24]
 8011ae0:	e001      	b.n	8011ae6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d110      	bne.n	8011b0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011af4:	9202      	str	r2, [sp, #8]
 8011af6:	9301      	str	r3, [sp, #4]
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	6a3a      	ldr	r2, [r7, #32]
 8011b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f001 fb4a 	bl	801319c <xTaskCreateStatic>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	613b      	str	r3, [r7, #16]
 8011b0c:	e013      	b.n	8011b36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d110      	bne.n	8011b36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011b14:	6a3b      	ldr	r3, [r7, #32]
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	f107 0310 	add.w	r3, r7, #16
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f001 fb95 	bl	8013256 <xTaskCreate>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	d001      	beq.n	8011b36 <osThreadNew+0x11a>
            hTask = NULL;
 8011b32:	2300      	movs	r3, #0
 8011b34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011b36:	693b      	ldr	r3, [r7, #16]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3728      	adds	r7, #40	; 0x28
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011b40:	b480      	push	{r7}
 8011b42:	b083      	sub	sp, #12
 8011b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b46:	f3ef 8305 	mrs	r3, IPSR
 8011b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8011b4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d003      	beq.n	8011b5a <osThreadYield+0x1a>
    stat = osErrorISR;
 8011b52:	f06f 0305 	mvn.w	r3, #5
 8011b56:	607b      	str	r3, [r7, #4]
 8011b58:	e009      	b.n	8011b6e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8011b5e:	4b07      	ldr	r3, [pc, #28]	; (8011b7c <osThreadYield+0x3c>)
 8011b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b64:	601a      	str	r2, [r3, #0]
 8011b66:	f3bf 8f4f 	dsb	sy
 8011b6a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011b6e:	687b      	ldr	r3, [r7, #4]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	e000ed04 	.word	0xe000ed04

08011b80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b88:	f3ef 8305 	mrs	r3, IPSR
 8011b8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d003      	beq.n	8011b9c <osDelay+0x1c>
    stat = osErrorISR;
 8011b94:	f06f 0305 	mvn.w	r3, #5
 8011b98:	60fb      	str	r3, [r7, #12]
 8011b9a:	e007      	b.n	8011bac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d002      	beq.n	8011bac <osDelay+0x2c>
      vTaskDelay(ticks);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f001 fc9a 	bl	80134e0 <vTaskDelay>
    }
  }

  return (stat);
 8011bac:	68fb      	ldr	r3, [r7, #12]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b086      	sub	sp, #24
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bc2:	f3ef 8305 	mrs	r3, IPSR
 8011bc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bc8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d12d      	bne.n	8011c2a <osEventFlagsNew+0x74>
    mem = -1;
 8011bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bd2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d015      	beq.n	8011c06 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d006      	beq.n	8011bf0 <osEventFlagsNew+0x3a>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	2b1f      	cmp	r3, #31
 8011be8:	d902      	bls.n	8011bf0 <osEventFlagsNew+0x3a>
        mem = 1;
 8011bea:	2301      	movs	r3, #1
 8011bec:	613b      	str	r3, [r7, #16]
 8011bee:	e00c      	b.n	8011c0a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d108      	bne.n	8011c0a <osEventFlagsNew+0x54>
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d104      	bne.n	8011c0a <osEventFlagsNew+0x54>
          mem = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	613b      	str	r3, [r7, #16]
 8011c04:	e001      	b.n	8011c0a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8011c06:	2300      	movs	r3, #0
 8011c08:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d106      	bne.n	8011c1e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 fa3d 	bl	8012094 <xEventGroupCreateStatic>
 8011c1a:	6178      	str	r0, [r7, #20]
 8011c1c:	e005      	b.n	8011c2a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d102      	bne.n	8011c2a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8011c24:	f000 fa6d 	bl	8012102 <xEventGroupCreate>
 8011c28:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8011c2a:	697b      	ldr	r3, [r7, #20]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b086      	sub	sp, #24
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d004      	beq.n	8011c52 <osEventFlagsSet+0x1e>
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d003      	beq.n	8011c5a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8011c52:	f06f 0303 	mvn.w	r3, #3
 8011c56:	617b      	str	r3, [r7, #20]
 8011c58:	e028      	b.n	8011cac <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c5a:	f3ef 8305 	mrs	r3, IPSR
 8011c5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d01d      	beq.n	8011ca2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8011c66:	2300      	movs	r3, #0
 8011c68:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011c6a:	f107 0308 	add.w	r3, r7, #8
 8011c6e:	461a      	mov	r2, r3
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6938      	ldr	r0, [r7, #16]
 8011c74:	f000 fbe8 	bl	8012448 <xEventGroupSetBitsFromISR>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d103      	bne.n	8011c86 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011c7e:	f06f 0302 	mvn.w	r3, #2
 8011c82:	617b      	str	r3, [r7, #20]
 8011c84:	e012      	b.n	8011cac <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00d      	beq.n	8011cac <osEventFlagsSet+0x78>
 8011c90:	4b09      	ldr	r3, [pc, #36]	; (8011cb8 <osEventFlagsSet+0x84>)
 8011c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c96:	601a      	str	r2, [r3, #0]
 8011c98:	f3bf 8f4f 	dsb	sy
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	e004      	b.n	8011cac <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8011ca2:	6839      	ldr	r1, [r7, #0]
 8011ca4:	6938      	ldr	r0, [r7, #16]
 8011ca6:	f000 fb15 	bl	80122d4 <xEventGroupSetBits>
 8011caa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011cac:	697b      	ldr	r3, [r7, #20]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3718      	adds	r7, #24
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	e000ed04 	.word	0xe000ed04

08011cbc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b08c      	sub	sp, #48	; 0x30
 8011cc0:	af02      	add	r7, sp, #8
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]
 8011cc8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d004      	beq.n	8011cde <osEventFlagsWait+0x22>
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d003      	beq.n	8011ce6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8011cde:	f06f 0303 	mvn.w	r3, #3
 8011ce2:	61fb      	str	r3, [r7, #28]
 8011ce4:	e04b      	b.n	8011d7e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ce6:	f3ef 8305 	mrs	r3, IPSR
 8011cea:	617b      	str	r3, [r7, #20]
  return(result);
 8011cec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d003      	beq.n	8011cfa <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8011cf2:	f06f 0305 	mvn.w	r3, #5
 8011cf6:	61fb      	str	r3, [r7, #28]
 8011cf8:	e041      	b.n	8011d7e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f003 0301 	and.w	r3, r3, #1
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d002      	beq.n	8011d0a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8011d04:	2301      	movs	r3, #1
 8011d06:	627b      	str	r3, [r7, #36]	; 0x24
 8011d08:	e001      	b.n	8011d0e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f003 0302 	and.w	r3, r3, #2
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d002      	beq.n	8011d1e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	623b      	str	r3, [r7, #32]
 8011d1c:	e001      	b.n	8011d22 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	6a3a      	ldr	r2, [r7, #32]
 8011d2a:	68b9      	ldr	r1, [r7, #8]
 8011d2c:	69b8      	ldr	r0, [r7, #24]
 8011d2e:	f000 fa03 	bl	8012138 <xEventGroupWaitBits>
 8011d32:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f003 0301 	and.w	r3, r3, #1
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d010      	beq.n	8011d60 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011d3e:	68ba      	ldr	r2, [r7, #8]
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	4013      	ands	r3, r2
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d019      	beq.n	8011d7e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d003      	beq.n	8011d58 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011d50:	f06f 0301 	mvn.w	r3, #1
 8011d54:	61fb      	str	r3, [r7, #28]
 8011d56:	e012      	b.n	8011d7e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011d58:	f06f 0302 	mvn.w	r3, #2
 8011d5c:	61fb      	str	r3, [r7, #28]
 8011d5e:	e00e      	b.n	8011d7e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	4013      	ands	r3, r2
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d109      	bne.n	8011d7e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d003      	beq.n	8011d78 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011d70:	f06f 0301 	mvn.w	r3, #1
 8011d74:	61fb      	str	r3, [r7, #28]
 8011d76:	e002      	b.n	8011d7e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011d78:	f06f 0302 	mvn.w	r3, #2
 8011d7c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011d7e:	69fb      	ldr	r3, [r7, #28]
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3728      	adds	r7, #40	; 0x28
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b08a      	sub	sp, #40	; 0x28
 8011d8c:	af02      	add	r7, sp, #8
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011d94:	2300      	movs	r3, #0
 8011d96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d98:	f3ef 8305 	mrs	r3, IPSR
 8011d9c:	613b      	str	r3, [r7, #16]
  return(result);
 8011d9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d15f      	bne.n	8011e64 <osMessageQueueNew+0xdc>
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d05c      	beq.n	8011e64 <osMessageQueueNew+0xdc>
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d059      	beq.n	8011e64 <osMessageQueueNew+0xdc>
    mem = -1;
 8011db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011db4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d029      	beq.n	8011e10 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	689b      	ldr	r3, [r3, #8]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d012      	beq.n	8011dea <osMessageQueueNew+0x62>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	68db      	ldr	r3, [r3, #12]
 8011dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8011dca:	d90e      	bls.n	8011dea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00a      	beq.n	8011dea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	695a      	ldr	r2, [r3, #20]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	68b9      	ldr	r1, [r7, #8]
 8011ddc:	fb01 f303 	mul.w	r3, r1, r3
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d302      	bcc.n	8011dea <osMessageQueueNew+0x62>
        mem = 1;
 8011de4:	2301      	movs	r3, #1
 8011de6:	61bb      	str	r3, [r7, #24]
 8011de8:	e014      	b.n	8011e14 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d110      	bne.n	8011e14 <osMessageQueueNew+0x8c>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d10c      	bne.n	8011e14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d108      	bne.n	8011e14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	695b      	ldr	r3, [r3, #20]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d104      	bne.n	8011e14 <osMessageQueueNew+0x8c>
          mem = 0;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	61bb      	str	r3, [r7, #24]
 8011e0e:	e001      	b.n	8011e14 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d10b      	bne.n	8011e32 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	691a      	ldr	r2, [r3, #16]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	2100      	movs	r1, #0
 8011e24:	9100      	str	r1, [sp, #0]
 8011e26:	68b9      	ldr	r1, [r7, #8]
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 fc3d 	bl	80126a8 <xQueueGenericCreateStatic>
 8011e2e:	61f8      	str	r0, [r7, #28]
 8011e30:	e008      	b.n	8011e44 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d105      	bne.n	8011e44 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011e38:	2200      	movs	r2, #0
 8011e3a:	68b9      	ldr	r1, [r7, #8]
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f000 fcab 	bl	8012798 <xQueueGenericCreate>
 8011e42:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00c      	beq.n	8011e64 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d003      	beq.n	8011e58 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	617b      	str	r3, [r7, #20]
 8011e56:	e001      	b.n	8011e5c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011e5c:	6979      	ldr	r1, [r7, #20]
 8011e5e:	69f8      	ldr	r0, [r7, #28]
 8011e60:	f001 f93e 	bl	80130e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011e64:	69fb      	ldr	r3, [r7, #28]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3720      	adds	r7, #32
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
	...

08011e70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b088      	sub	sp, #32
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	603b      	str	r3, [r7, #0]
 8011e7c:	4613      	mov	r3, r2
 8011e7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011e84:	2300      	movs	r3, #0
 8011e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e88:	f3ef 8305 	mrs	r3, IPSR
 8011e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8011e8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d028      	beq.n	8011ee6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d005      	beq.n	8011ea6 <osMessageQueuePut+0x36>
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d002      	beq.n	8011ea6 <osMessageQueuePut+0x36>
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d003      	beq.n	8011eae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011ea6:	f06f 0303 	mvn.w	r3, #3
 8011eaa:	61fb      	str	r3, [r7, #28]
 8011eac:	e038      	b.n	8011f20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011eb2:	f107 0210 	add.w	r2, r7, #16
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	68b9      	ldr	r1, [r7, #8]
 8011eba:	69b8      	ldr	r0, [r7, #24]
 8011ebc:	f000 fdc8 	bl	8012a50 <xQueueGenericSendFromISR>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d003      	beq.n	8011ece <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011ec6:	f06f 0302 	mvn.w	r3, #2
 8011eca:	61fb      	str	r3, [r7, #28]
 8011ecc:	e028      	b.n	8011f20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d025      	beq.n	8011f20 <osMessageQueuePut+0xb0>
 8011ed4:	4b15      	ldr	r3, [pc, #84]	; (8011f2c <osMessageQueuePut+0xbc>)
 8011ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	f3bf 8f4f 	dsb	sy
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	e01c      	b.n	8011f20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <osMessageQueuePut+0x82>
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d103      	bne.n	8011efa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011ef2:	f06f 0303 	mvn.w	r3, #3
 8011ef6:	61fb      	str	r3, [r7, #28]
 8011ef8:	e012      	b.n	8011f20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011efa:	2300      	movs	r3, #0
 8011efc:	683a      	ldr	r2, [r7, #0]
 8011efe:	68b9      	ldr	r1, [r7, #8]
 8011f00:	69b8      	ldr	r0, [r7, #24]
 8011f02:	f000 fca7 	bl	8012854 <xQueueGenericSend>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d009      	beq.n	8011f20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d003      	beq.n	8011f1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011f12:	f06f 0301 	mvn.w	r3, #1
 8011f16:	61fb      	str	r3, [r7, #28]
 8011f18:	e002      	b.n	8011f20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011f1a:	f06f 0302 	mvn.w	r3, #2
 8011f1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011f20:	69fb      	ldr	r3, [r7, #28]
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3720      	adds	r7, #32
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	e000ed04 	.word	0xe000ed04

08011f30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b088      	sub	sp, #32
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011f42:	2300      	movs	r3, #0
 8011f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f46:	f3ef 8305 	mrs	r3, IPSR
 8011f4a:	617b      	str	r3, [r7, #20]
  return(result);
 8011f4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d028      	beq.n	8011fa4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d005      	beq.n	8011f64 <osMessageQueueGet+0x34>
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d002      	beq.n	8011f64 <osMessageQueueGet+0x34>
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d003      	beq.n	8011f6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011f64:	f06f 0303 	mvn.w	r3, #3
 8011f68:	61fb      	str	r3, [r7, #28]
 8011f6a:	e037      	b.n	8011fdc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011f70:	f107 0310 	add.w	r3, r7, #16
 8011f74:	461a      	mov	r2, r3
 8011f76:	68b9      	ldr	r1, [r7, #8]
 8011f78:	69b8      	ldr	r0, [r7, #24]
 8011f7a:	f000 fee5 	bl	8012d48 <xQueueReceiveFromISR>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d003      	beq.n	8011f8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011f84:	f06f 0302 	mvn.w	r3, #2
 8011f88:	61fb      	str	r3, [r7, #28]
 8011f8a:	e027      	b.n	8011fdc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d024      	beq.n	8011fdc <osMessageQueueGet+0xac>
 8011f92:	4b15      	ldr	r3, [pc, #84]	; (8011fe8 <osMessageQueueGet+0xb8>)
 8011f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	f3bf 8f4f 	dsb	sy
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	e01b      	b.n	8011fdc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d002      	beq.n	8011fb0 <osMessageQueueGet+0x80>
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d103      	bne.n	8011fb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011fb0:	f06f 0303 	mvn.w	r3, #3
 8011fb4:	61fb      	str	r3, [r7, #28]
 8011fb6:	e011      	b.n	8011fdc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011fb8:	683a      	ldr	r2, [r7, #0]
 8011fba:	68b9      	ldr	r1, [r7, #8]
 8011fbc:	69b8      	ldr	r0, [r7, #24]
 8011fbe:	f000 fde3 	bl	8012b88 <xQueueReceive>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d009      	beq.n	8011fdc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d003      	beq.n	8011fd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011fce:	f06f 0301 	mvn.w	r3, #1
 8011fd2:	61fb      	str	r3, [r7, #28]
 8011fd4:	e002      	b.n	8011fdc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011fd6:	f06f 0302 	mvn.w	r3, #2
 8011fda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011fdc:	69fb      	ldr	r3, [r7, #28]
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3720      	adds	r7, #32
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	e000ed04 	.word	0xe000ed04

08011fec <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b086      	sub	sp, #24
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d102      	bne.n	8012004 <osMessageQueueGetCount+0x18>
    count = 0U;
 8011ffe:	2300      	movs	r3, #0
 8012000:	617b      	str	r3, [r7, #20]
 8012002:	e00e      	b.n	8012022 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012004:	f3ef 8305 	mrs	r3, IPSR
 8012008:	60fb      	str	r3, [r7, #12]
  return(result);
 801200a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801200c:	2b00      	cmp	r3, #0
 801200e:	d004      	beq.n	801201a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8012010:	6938      	ldr	r0, [r7, #16]
 8012012:	f000 ff37 	bl	8012e84 <uxQueueMessagesWaitingFromISR>
 8012016:	6178      	str	r0, [r7, #20]
 8012018:	e003      	b.n	8012022 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 801201a:	6938      	ldr	r0, [r7, #16]
 801201c:	f000 ff14 	bl	8012e48 <uxQueueMessagesWaiting>
 8012020:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8012022:	697b      	ldr	r3, [r7, #20]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	4a07      	ldr	r2, [pc, #28]	; (8012058 <vApplicationGetIdleTaskMemory+0x2c>)
 801203c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	4a06      	ldr	r2, [pc, #24]	; (801205c <vApplicationGetIdleTaskMemory+0x30>)
 8012042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2280      	movs	r2, #128	; 0x80
 8012048:	601a      	str	r2, [r3, #0]
}
 801204a:	bf00      	nop
 801204c:	3714      	adds	r7, #20
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	24000c94 	.word	0x24000c94
 801205c:	24000cf0 	.word	0x24000cf0

08012060 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	4a07      	ldr	r2, [pc, #28]	; (801208c <vApplicationGetTimerTaskMemory+0x2c>)
 8012070:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	4a06      	ldr	r2, [pc, #24]	; (8012090 <vApplicationGetTimerTaskMemory+0x30>)
 8012076:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801207e:	601a      	str	r2, [r3, #0]
}
 8012080:	bf00      	nop
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr
 801208c:	24000ef0 	.word	0x24000ef0
 8012090:	24000f4c 	.word	0x24000f4c

08012094 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012094:	b580      	push	{r7, lr}
 8012096:	b086      	sub	sp, #24
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10a      	bne.n	80120b8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a6:	f383 8811 	msr	BASEPRI, r3
 80120aa:	f3bf 8f6f 	isb	sy
 80120ae:	f3bf 8f4f 	dsb	sy
 80120b2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80120b4:	bf00      	nop
 80120b6:	e7fe      	b.n	80120b6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80120b8:	2320      	movs	r3, #32
 80120ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2b20      	cmp	r3, #32
 80120c0:	d00a      	beq.n	80120d8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	60fb      	str	r3, [r7, #12]
}
 80120d4:	bf00      	nop
 80120d6:	e7fe      	b.n	80120d6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d00a      	beq.n	80120f8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	2200      	movs	r2, #0
 80120e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	3304      	adds	r3, #4
 80120ec:	4618      	mov	r0, r3
 80120ee:	f000 f9bf 	bl	8012470 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2201      	movs	r2, #1
 80120f6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80120f8:	697b      	ldr	r3, [r7, #20]
	}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3718      	adds	r7, #24
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}

08012102 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012102:	b580      	push	{r7, lr}
 8012104:	b082      	sub	sp, #8
 8012106:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012108:	2020      	movs	r0, #32
 801210a:	f002 fdbd 	bl	8014c88 <pvPortMalloc>
 801210e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00a      	beq.n	801212c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	3304      	adds	r3, #4
 8012120:	4618      	mov	r0, r3
 8012122:	f000 f9a5 	bl	8012470 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2200      	movs	r2, #0
 801212a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801212c:	687b      	ldr	r3, [r7, #4]
	}
 801212e:	4618      	mov	r0, r3
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
	...

08012138 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b090      	sub	sp, #64	; 0x40
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801214e:	2300      	movs	r3, #0
 8012150:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10a      	bne.n	801216e <xEventGroupWaitBits+0x36>
	__asm volatile
 8012158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215c:	f383 8811 	msr	BASEPRI, r3
 8012160:	f3bf 8f6f 	isb	sy
 8012164:	f3bf 8f4f 	dsb	sy
 8012168:	623b      	str	r3, [r7, #32]
}
 801216a:	bf00      	nop
 801216c:	e7fe      	b.n	801216c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00a      	beq.n	801218e <xEventGroupWaitBits+0x56>
	__asm volatile
 8012178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217c:	f383 8811 	msr	BASEPRI, r3
 8012180:	f3bf 8f6f 	isb	sy
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	61fb      	str	r3, [r7, #28]
}
 801218a:	bf00      	nop
 801218c:	e7fe      	b.n	801218c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10a      	bne.n	80121aa <xEventGroupWaitBits+0x72>
	__asm volatile
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	61bb      	str	r3, [r7, #24]
}
 80121a6:	bf00      	nop
 80121a8:	e7fe      	b.n	80121a8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121aa:	f001 febb 	bl	8013f24 <xTaskGetSchedulerState>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d102      	bne.n	80121ba <xEventGroupWaitBits+0x82>
 80121b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d101      	bne.n	80121be <xEventGroupWaitBits+0x86>
 80121ba:	2301      	movs	r3, #1
 80121bc:	e000      	b.n	80121c0 <xEventGroupWaitBits+0x88>
 80121be:	2300      	movs	r3, #0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10a      	bne.n	80121da <xEventGroupWaitBits+0xa2>
	__asm volatile
 80121c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c8:	f383 8811 	msr	BASEPRI, r3
 80121cc:	f3bf 8f6f 	isb	sy
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	617b      	str	r3, [r7, #20]
}
 80121d6:	bf00      	nop
 80121d8:	e7fe      	b.n	80121d8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80121da:	f001 fa1b 	bl	8013614 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80121de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80121e4:	683a      	ldr	r2, [r7, #0]
 80121e6:	68b9      	ldr	r1, [r7, #8]
 80121e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ea:	f000 f90b 	bl	8012404 <prvTestWaitCondition>
 80121ee:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80121f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00e      	beq.n	8012214 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80121f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d028      	beq.n	8012256 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	43db      	mvns	r3, r3
 801220c:	401a      	ands	r2, r3
 801220e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	e020      	b.n	8012256 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012216:	2b00      	cmp	r3, #0
 8012218:	d104      	bne.n	8012224 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801221e:	2301      	movs	r3, #1
 8012220:	633b      	str	r3, [r7, #48]	; 0x30
 8012222:	e018      	b.n	8012256 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d003      	beq.n	8012232 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012230:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d003      	beq.n	8012240 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801223e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012242:	1d18      	adds	r0, r3, #4
 8012244:	68ba      	ldr	r2, [r7, #8]
 8012246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012248:	4313      	orrs	r3, r2
 801224a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801224c:	4619      	mov	r1, r3
 801224e:	f001 fbe1 	bl	8013a14 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012256:	f001 f9eb 	bl	8013630 <xTaskResumeAll>
 801225a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801225c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801225e:	2b00      	cmp	r3, #0
 8012260:	d031      	beq.n	80122c6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	2b00      	cmp	r3, #0
 8012266:	d107      	bne.n	8012278 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012268:	4b19      	ldr	r3, [pc, #100]	; (80122d0 <xEventGroupWaitBits+0x198>)
 801226a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801226e:	601a      	str	r2, [r3, #0]
 8012270:	f3bf 8f4f 	dsb	sy
 8012274:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012278:	f001 fee0 	bl	801403c <uxTaskResetEventItemValue>
 801227c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012284:	2b00      	cmp	r3, #0
 8012286:	d11a      	bne.n	80122be <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012288:	f002 fbdc 	bl	8014a44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012292:	683a      	ldr	r2, [r7, #0]
 8012294:	68b9      	ldr	r1, [r7, #8]
 8012296:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012298:	f000 f8b4 	bl	8012404 <prvTestWaitCondition>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d009      	beq.n	80122b6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d006      	beq.n	80122b6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80122a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	43db      	mvns	r3, r3
 80122b0:	401a      	ands	r2, r3
 80122b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80122b6:	2301      	movs	r3, #1
 80122b8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80122ba:	f002 fbf3 	bl	8014aa4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80122be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80122c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80122c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3740      	adds	r7, #64	; 0x40
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	e000ed04 	.word	0xe000ed04

080122d4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b08e      	sub	sp, #56	; 0x38
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80122de:	2300      	movs	r3, #0
 80122e0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80122e6:	2300      	movs	r3, #0
 80122e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10a      	bne.n	8012306 <xEventGroupSetBits+0x32>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	613b      	str	r3, [r7, #16]
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00a      	beq.n	8012326 <xEventGroupSetBits+0x52>
	__asm volatile
 8012310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012314:	f383 8811 	msr	BASEPRI, r3
 8012318:	f3bf 8f6f 	isb	sy
 801231c:	f3bf 8f4f 	dsb	sy
 8012320:	60fb      	str	r3, [r7, #12]
}
 8012322:	bf00      	nop
 8012324:	e7fe      	b.n	8012324 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012328:	3304      	adds	r3, #4
 801232a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	3308      	adds	r3, #8
 8012330:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012332:	f001 f96f 	bl	8013614 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	431a      	orrs	r2, r3
 8012344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012346:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012348:	e03c      	b.n	80123c4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801234a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012356:	2300      	movs	r3, #0
 8012358:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801235a:	69bb      	ldr	r3, [r7, #24]
 801235c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012360:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012368:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012370:	2b00      	cmp	r3, #0
 8012372:	d108      	bne.n	8012386 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	4013      	ands	r3, r2
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00b      	beq.n	8012398 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012380:	2301      	movs	r3, #1
 8012382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012384:	e008      	b.n	8012398 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012388:	681a      	ldr	r2, [r3, #0]
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	4013      	ands	r3, r2
 801238e:	69ba      	ldr	r2, [r7, #24]
 8012390:	429a      	cmp	r2, r3
 8012392:	d101      	bne.n	8012398 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012394:	2301      	movs	r3, #1
 8012396:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239a:	2b00      	cmp	r3, #0
 801239c:	d010      	beq.n	80123c0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d003      	beq.n	80123b0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80123a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123aa:	69bb      	ldr	r3, [r7, #24]
 80123ac:	4313      	orrs	r3, r2
 80123ae:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80123b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80123b8:	4619      	mov	r1, r3
 80123ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80123bc:	f001 fbf6 	bl	8013bac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80123c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123c6:	6a3b      	ldr	r3, [r7, #32]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d1be      	bne.n	801234a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80123cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d2:	43db      	mvns	r3, r3
 80123d4:	401a      	ands	r2, r3
 80123d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80123da:	f001 f929 	bl	8013630 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80123de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e0:	681b      	ldr	r3, [r3, #0]
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3738      	adds	r7, #56	; 0x38
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80123ea:	b580      	push	{r7, lr}
 80123ec:	b082      	sub	sp, #8
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
 80123f2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f7ff ff6c 	bl	80122d4 <xEventGroupSetBits>
}
 80123fc:	bf00      	nop
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012404:	b480      	push	{r7}
 8012406:	b087      	sub	sp, #28
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012410:	2300      	movs	r3, #0
 8012412:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d107      	bne.n	801242a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	4013      	ands	r3, r2
 8012420:	2b00      	cmp	r3, #0
 8012422:	d00a      	beq.n	801243a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012424:	2301      	movs	r3, #1
 8012426:	617b      	str	r3, [r7, #20]
 8012428:	e007      	b.n	801243a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	4013      	ands	r3, r2
 8012430:	68ba      	ldr	r2, [r7, #8]
 8012432:	429a      	cmp	r2, r3
 8012434:	d101      	bne.n	801243a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012436:	2301      	movs	r3, #1
 8012438:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801243a:	697b      	ldr	r3, [r7, #20]
}
 801243c:	4618      	mov	r0, r3
 801243e:	371c      	adds	r7, #28
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	68ba      	ldr	r2, [r7, #8]
 8012458:	68f9      	ldr	r1, [r7, #12]
 801245a:	4804      	ldr	r0, [pc, #16]	; (801246c <xEventGroupSetBitsFromISR+0x24>)
 801245c:	f002 f9a8 	bl	80147b0 <xTimerPendFunctionCallFromISR>
 8012460:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012462:	697b      	ldr	r3, [r7, #20]
	}
 8012464:	4618      	mov	r0, r3
 8012466:	3718      	adds	r7, #24
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	080123eb 	.word	0x080123eb

08012470 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012470:	b480      	push	{r7}
 8012472:	b083      	sub	sp, #12
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f103 0208 	add.w	r2, r3, #8
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012488:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f103 0208 	add.w	r2, r3, #8
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f103 0208 	add.w	r2, r3, #8
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2200      	movs	r2, #0
 80124a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80124a4:	bf00      	nop
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80124be:	bf00      	nop
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80124ca:	b480      	push	{r7}
 80124cc:	b085      	sub	sp, #20
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
 80124d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	68fa      	ldr	r2, [r7, #12]
 80124de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	689a      	ldr	r2, [r3, #8]
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	689b      	ldr	r3, [r3, #8]
 80124ec:	683a      	ldr	r2, [r7, #0]
 80124ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	683a      	ldr	r2, [r7, #0]
 80124f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	1c5a      	adds	r2, r3, #1
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	601a      	str	r2, [r3, #0]
}
 8012506:	bf00      	nop
 8012508:	3714      	adds	r7, #20
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr

08012512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012512:	b480      	push	{r7}
 8012514:	b085      	sub	sp, #20
 8012516:	af00      	add	r7, sp, #0
 8012518:	6078      	str	r0, [r7, #4]
 801251a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012528:	d103      	bne.n	8012532 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	60fb      	str	r3, [r7, #12]
 8012530:	e00c      	b.n	801254c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3308      	adds	r3, #8
 8012536:	60fb      	str	r3, [r7, #12]
 8012538:	e002      	b.n	8012540 <vListInsert+0x2e>
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	60fb      	str	r3, [r7, #12]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	429a      	cmp	r2, r3
 801254a:	d2f6      	bcs.n	801253a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	685a      	ldr	r2, [r3, #4]
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	683a      	ldr	r2, [r7, #0]
 801255a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	1c5a      	adds	r2, r3, #1
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	601a      	str	r2, [r3, #0]
}
 8012578:	bf00      	nop
 801257a:	3714      	adds	r7, #20
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	6892      	ldr	r2, [r2, #8]
 801259a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	689b      	ldr	r3, [r3, #8]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	6852      	ldr	r2, [r2, #4]
 80125a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	687a      	ldr	r2, [r7, #4]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d103      	bne.n	80125b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	689a      	ldr	r2, [r3, #8]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2200      	movs	r2, #0
 80125bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	1e5a      	subs	r2, r3, #1
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3714      	adds	r7, #20
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr

080125d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d10a      	bne.n	8012602 <xQueueGenericReset+0x2a>
	__asm volatile
 80125ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f0:	f383 8811 	msr	BASEPRI, r3
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	60bb      	str	r3, [r7, #8]
}
 80125fe:	bf00      	nop
 8012600:	e7fe      	b.n	8012600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012602:	f002 fa1f 	bl	8014a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801260e:	68f9      	ldr	r1, [r7, #12]
 8012610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012612:	fb01 f303 	mul.w	r3, r1, r3
 8012616:	441a      	add	r2, r3
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2200      	movs	r2, #0
 8012620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012632:	3b01      	subs	r3, #1
 8012634:	68f9      	ldr	r1, [r7, #12]
 8012636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012638:	fb01 f303 	mul.w	r3, r1, r3
 801263c:	441a      	add	r2, r3
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	22ff      	movs	r2, #255	; 0xff
 8012646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	22ff      	movs	r2, #255	; 0xff
 801264e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d114      	bne.n	8012682 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	691b      	ldr	r3, [r3, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d01a      	beq.n	8012696 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	3310      	adds	r3, #16
 8012664:	4618      	mov	r0, r3
 8012666:	f001 fa3d 	bl	8013ae4 <xTaskRemoveFromEventList>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	d012      	beq.n	8012696 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012670:	4b0c      	ldr	r3, [pc, #48]	; (80126a4 <xQueueGenericReset+0xcc>)
 8012672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012676:	601a      	str	r2, [r3, #0]
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	f3bf 8f6f 	isb	sy
 8012680:	e009      	b.n	8012696 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	3310      	adds	r3, #16
 8012686:	4618      	mov	r0, r3
 8012688:	f7ff fef2 	bl	8012470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	3324      	adds	r3, #36	; 0x24
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff feed 	bl	8012470 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012696:	f002 fa05 	bl	8014aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801269a:	2301      	movs	r3, #1
}
 801269c:	4618      	mov	r0, r3
 801269e:	3710      	adds	r7, #16
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	e000ed04 	.word	0xe000ed04

080126a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08e      	sub	sp, #56	; 0x38
 80126ac:	af02      	add	r7, sp, #8
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
 80126b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10a      	bne.n	80126d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80126bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80126ce:	bf00      	nop
 80126d0:	e7fe      	b.n	80126d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d10a      	bne.n	80126ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80126d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126dc:	f383 8811 	msr	BASEPRI, r3
 80126e0:	f3bf 8f6f 	isb	sy
 80126e4:	f3bf 8f4f 	dsb	sy
 80126e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126ea:	bf00      	nop
 80126ec:	e7fe      	b.n	80126ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <xQueueGenericCreateStatic+0x52>
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <xQueueGenericCreateStatic+0x56>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e000      	b.n	8012700 <xQueueGenericCreateStatic+0x58>
 80126fe:	2300      	movs	r3, #0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10a      	bne.n	801271a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	623b      	str	r3, [r7, #32]
}
 8012716:	bf00      	nop
 8012718:	e7fe      	b.n	8012718 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d102      	bne.n	8012726 <xQueueGenericCreateStatic+0x7e>
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d101      	bne.n	801272a <xQueueGenericCreateStatic+0x82>
 8012726:	2301      	movs	r3, #1
 8012728:	e000      	b.n	801272c <xQueueGenericCreateStatic+0x84>
 801272a:	2300      	movs	r3, #0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d10a      	bne.n	8012746 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012734:	f383 8811 	msr	BASEPRI, r3
 8012738:	f3bf 8f6f 	isb	sy
 801273c:	f3bf 8f4f 	dsb	sy
 8012740:	61fb      	str	r3, [r7, #28]
}
 8012742:	bf00      	nop
 8012744:	e7fe      	b.n	8012744 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012746:	2350      	movs	r3, #80	; 0x50
 8012748:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	2b50      	cmp	r3, #80	; 0x50
 801274e:	d00a      	beq.n	8012766 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012754:	f383 8811 	msr	BASEPRI, r3
 8012758:	f3bf 8f6f 	isb	sy
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	61bb      	str	r3, [r7, #24]
}
 8012762:	bf00      	nop
 8012764:	e7fe      	b.n	8012764 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012766:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00d      	beq.n	801278e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012774:	2201      	movs	r2, #1
 8012776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801277a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012780:	9300      	str	r3, [sp, #0]
 8012782:	4613      	mov	r3, r2
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	68b9      	ldr	r1, [r7, #8]
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f000 f83f 	bl	801280c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012790:	4618      	mov	r0, r3
 8012792:	3730      	adds	r7, #48	; 0x30
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08a      	sub	sp, #40	; 0x28
 801279c:	af02      	add	r7, sp, #8
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	4613      	mov	r3, r2
 80127a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d10a      	bne.n	80127c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	613b      	str	r3, [r7, #16]
}
 80127be:	bf00      	nop
 80127c0:	e7fe      	b.n	80127c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	fb02 f303 	mul.w	r3, r2, r3
 80127ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	3350      	adds	r3, #80	; 0x50
 80127d0:	4618      	mov	r0, r3
 80127d2:	f002 fa59 	bl	8014c88 <pvPortMalloc>
 80127d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d011      	beq.n	8012802 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	3350      	adds	r3, #80	; 0x50
 80127e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	2200      	movs	r2, #0
 80127ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127f0:	79fa      	ldrb	r2, [r7, #7]
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	9300      	str	r3, [sp, #0]
 80127f6:	4613      	mov	r3, r2
 80127f8:	697a      	ldr	r2, [r7, #20]
 80127fa:	68b9      	ldr	r1, [r7, #8]
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f000 f805 	bl	801280c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012802:	69bb      	ldr	r3, [r7, #24]
	}
 8012804:	4618      	mov	r0, r3
 8012806:	3720      	adds	r7, #32
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d103      	bne.n	8012828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	69ba      	ldr	r2, [r7, #24]
 8012824:	601a      	str	r2, [r3, #0]
 8012826:	e002      	b.n	801282e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	68ba      	ldr	r2, [r7, #8]
 8012838:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801283a:	2101      	movs	r1, #1
 801283c:	69b8      	ldr	r0, [r7, #24]
 801283e:	f7ff fecb 	bl	80125d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	78fa      	ldrb	r2, [r7, #3]
 8012846:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801284a:	bf00      	nop
 801284c:	3710      	adds	r7, #16
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
	...

08012854 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b08e      	sub	sp, #56	; 0x38
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
 8012860:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012862:	2300      	movs	r3, #0
 8012864:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286c:	2b00      	cmp	r3, #0
 801286e:	d10a      	bne.n	8012886 <xQueueGenericSend+0x32>
	__asm volatile
 8012870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012874:	f383 8811 	msr	BASEPRI, r3
 8012878:	f3bf 8f6f 	isb	sy
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012882:	bf00      	nop
 8012884:	e7fe      	b.n	8012884 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d103      	bne.n	8012894 <xQueueGenericSend+0x40>
 801288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012890:	2b00      	cmp	r3, #0
 8012892:	d101      	bne.n	8012898 <xQueueGenericSend+0x44>
 8012894:	2301      	movs	r3, #1
 8012896:	e000      	b.n	801289a <xQueueGenericSend+0x46>
 8012898:	2300      	movs	r3, #0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d10a      	bne.n	80128b4 <xQueueGenericSend+0x60>
	__asm volatile
 801289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a2:	f383 8811 	msr	BASEPRI, r3
 80128a6:	f3bf 8f6f 	isb	sy
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80128b0:	bf00      	nop
 80128b2:	e7fe      	b.n	80128b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2b02      	cmp	r3, #2
 80128b8:	d103      	bne.n	80128c2 <xQueueGenericSend+0x6e>
 80128ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d101      	bne.n	80128c6 <xQueueGenericSend+0x72>
 80128c2:	2301      	movs	r3, #1
 80128c4:	e000      	b.n	80128c8 <xQueueGenericSend+0x74>
 80128c6:	2300      	movs	r3, #0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d10a      	bne.n	80128e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80128cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d0:	f383 8811 	msr	BASEPRI, r3
 80128d4:	f3bf 8f6f 	isb	sy
 80128d8:	f3bf 8f4f 	dsb	sy
 80128dc:	623b      	str	r3, [r7, #32]
}
 80128de:	bf00      	nop
 80128e0:	e7fe      	b.n	80128e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80128e2:	f001 fb1f 	bl	8013f24 <xTaskGetSchedulerState>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d102      	bne.n	80128f2 <xQueueGenericSend+0x9e>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d101      	bne.n	80128f6 <xQueueGenericSend+0xa2>
 80128f2:	2301      	movs	r3, #1
 80128f4:	e000      	b.n	80128f8 <xQueueGenericSend+0xa4>
 80128f6:	2300      	movs	r3, #0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d10a      	bne.n	8012912 <xQueueGenericSend+0xbe>
	__asm volatile
 80128fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	61fb      	str	r3, [r7, #28]
}
 801290e:	bf00      	nop
 8012910:	e7fe      	b.n	8012910 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012912:	f002 f897 	bl	8014a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801291e:	429a      	cmp	r2, r3
 8012920:	d302      	bcc.n	8012928 <xQueueGenericSend+0xd4>
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	2b02      	cmp	r3, #2
 8012926:	d129      	bne.n	801297c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	68b9      	ldr	r1, [r7, #8]
 801292c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801292e:	f000 fac7 	bl	8012ec0 <prvCopyDataToQueue>
 8012932:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012938:	2b00      	cmp	r3, #0
 801293a:	d010      	beq.n	801295e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293e:	3324      	adds	r3, #36	; 0x24
 8012940:	4618      	mov	r0, r3
 8012942:	f001 f8cf 	bl	8013ae4 <xTaskRemoveFromEventList>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d013      	beq.n	8012974 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801294c:	4b3f      	ldr	r3, [pc, #252]	; (8012a4c <xQueueGenericSend+0x1f8>)
 801294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	f3bf 8f4f 	dsb	sy
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	e00a      	b.n	8012974 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012960:	2b00      	cmp	r3, #0
 8012962:	d007      	beq.n	8012974 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012964:	4b39      	ldr	r3, [pc, #228]	; (8012a4c <xQueueGenericSend+0x1f8>)
 8012966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801296a:	601a      	str	r2, [r3, #0]
 801296c:	f3bf 8f4f 	dsb	sy
 8012970:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012974:	f002 f896 	bl	8014aa4 <vPortExitCritical>
				return pdPASS;
 8012978:	2301      	movs	r3, #1
 801297a:	e063      	b.n	8012a44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d103      	bne.n	801298a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012982:	f002 f88f 	bl	8014aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012986:	2300      	movs	r3, #0
 8012988:	e05c      	b.n	8012a44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298c:	2b00      	cmp	r3, #0
 801298e:	d106      	bne.n	801299e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012990:	f107 0314 	add.w	r3, r7, #20
 8012994:	4618      	mov	r0, r3
 8012996:	f001 f96b 	bl	8013c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801299a:	2301      	movs	r3, #1
 801299c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801299e:	f002 f881 	bl	8014aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80129a2:	f000 fe37 	bl	8013614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80129a6:	f002 f84d 	bl	8014a44 <vPortEnterCritical>
 80129aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129b0:	b25b      	sxtb	r3, r3
 80129b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80129b6:	d103      	bne.n	80129c0 <xQueueGenericSend+0x16c>
 80129b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129c6:	b25b      	sxtb	r3, r3
 80129c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80129cc:	d103      	bne.n	80129d6 <xQueueGenericSend+0x182>
 80129ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d0:	2200      	movs	r2, #0
 80129d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129d6:	f002 f865 	bl	8014aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80129da:	1d3a      	adds	r2, r7, #4
 80129dc:	f107 0314 	add.w	r3, r7, #20
 80129e0:	4611      	mov	r1, r2
 80129e2:	4618      	mov	r0, r3
 80129e4:	f001 f95a 	bl	8013c9c <xTaskCheckForTimeOut>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d124      	bne.n	8012a38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80129ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129f0:	f000 fb5e 	bl	80130b0 <prvIsQueueFull>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d018      	beq.n	8012a2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	3310      	adds	r3, #16
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	4611      	mov	r1, r2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f000 ffe2 	bl	80139cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a0a:	f000 fae9 	bl	8012fe0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012a0e:	f000 fe0f 	bl	8013630 <xTaskResumeAll>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f47f af7c 	bne.w	8012912 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012a1a:	4b0c      	ldr	r3, [pc, #48]	; (8012a4c <xQueueGenericSend+0x1f8>)
 8012a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	e772      	b.n	8012912 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a2e:	f000 fad7 	bl	8012fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a32:	f000 fdfd 	bl	8013630 <xTaskResumeAll>
 8012a36:	e76c      	b.n	8012912 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a3a:	f000 fad1 	bl	8012fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a3e:	f000 fdf7 	bl	8013630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012a42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3738      	adds	r7, #56	; 0x38
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	e000ed04 	.word	0xe000ed04

08012a50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b090      	sub	sp, #64	; 0x40
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
 8012a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10a      	bne.n	8012a7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012a7a:	bf00      	nop
 8012a7c:	e7fe      	b.n	8012a7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d103      	bne.n	8012a8c <xQueueGenericSendFromISR+0x3c>
 8012a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d101      	bne.n	8012a90 <xQueueGenericSendFromISR+0x40>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	e000      	b.n	8012a92 <xQueueGenericSendFromISR+0x42>
 8012a90:	2300      	movs	r3, #0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d10a      	bne.n	8012aac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9a:	f383 8811 	msr	BASEPRI, r3
 8012a9e:	f3bf 8f6f 	isb	sy
 8012aa2:	f3bf 8f4f 	dsb	sy
 8012aa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012aa8:	bf00      	nop
 8012aaa:	e7fe      	b.n	8012aaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	2b02      	cmp	r3, #2
 8012ab0:	d103      	bne.n	8012aba <xQueueGenericSendFromISR+0x6a>
 8012ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d101      	bne.n	8012abe <xQueueGenericSendFromISR+0x6e>
 8012aba:	2301      	movs	r3, #1
 8012abc:	e000      	b.n	8012ac0 <xQueueGenericSendFromISR+0x70>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10a      	bne.n	8012ada <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac8:	f383 8811 	msr	BASEPRI, r3
 8012acc:	f3bf 8f6f 	isb	sy
 8012ad0:	f3bf 8f4f 	dsb	sy
 8012ad4:	623b      	str	r3, [r7, #32]
}
 8012ad6:	bf00      	nop
 8012ad8:	e7fe      	b.n	8012ad8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ada:	f002 f895 	bl	8014c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012ade:	f3ef 8211 	mrs	r2, BASEPRI
 8012ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae6:	f383 8811 	msr	BASEPRI, r3
 8012aea:	f3bf 8f6f 	isb	sy
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	61fa      	str	r2, [r7, #28]
 8012af4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012af6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012af8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d302      	bcc.n	8012b0c <xQueueGenericSendFromISR+0xbc>
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d12f      	bne.n	8012b6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	68b9      	ldr	r1, [r7, #8]
 8012b20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b22:	f000 f9cd 	bl	8012ec0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b2e:	d112      	bne.n	8012b56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d016      	beq.n	8012b66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3a:	3324      	adds	r3, #36	; 0x24
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f000 ffd1 	bl	8013ae4 <xTaskRemoveFromEventList>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d00e      	beq.n	8012b66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00b      	beq.n	8012b66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2201      	movs	r2, #1
 8012b52:	601a      	str	r2, [r3, #0]
 8012b54:	e007      	b.n	8012b66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	b2db      	uxtb	r3, r3
 8012b5e:	b25a      	sxtb	r2, r3
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b66:	2301      	movs	r3, #1
 8012b68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012b6a:	e001      	b.n	8012b70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012b7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3740      	adds	r7, #64	; 0x40
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
	...

08012b88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b08c      	sub	sp, #48	; 0x30
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	60b9      	str	r1, [r7, #8]
 8012b92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b94:	2300      	movs	r3, #0
 8012b96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d10a      	bne.n	8012bb8 <xQueueReceive+0x30>
	__asm volatile
 8012ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba6:	f383 8811 	msr	BASEPRI, r3
 8012baa:	f3bf 8f6f 	isb	sy
 8012bae:	f3bf 8f4f 	dsb	sy
 8012bb2:	623b      	str	r3, [r7, #32]
}
 8012bb4:	bf00      	nop
 8012bb6:	e7fe      	b.n	8012bb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d103      	bne.n	8012bc6 <xQueueReceive+0x3e>
 8012bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d101      	bne.n	8012bca <xQueueReceive+0x42>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e000      	b.n	8012bcc <xQueueReceive+0x44>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d10a      	bne.n	8012be6 <xQueueReceive+0x5e>
	__asm volatile
 8012bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	61fb      	str	r3, [r7, #28]
}
 8012be2:	bf00      	nop
 8012be4:	e7fe      	b.n	8012be4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012be6:	f001 f99d 	bl	8013f24 <xTaskGetSchedulerState>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d102      	bne.n	8012bf6 <xQueueReceive+0x6e>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d101      	bne.n	8012bfa <xQueueReceive+0x72>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e000      	b.n	8012bfc <xQueueReceive+0x74>
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d10a      	bne.n	8012c16 <xQueueReceive+0x8e>
	__asm volatile
 8012c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	61bb      	str	r3, [r7, #24]
}
 8012c12:	bf00      	nop
 8012c14:	e7fe      	b.n	8012c14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c16:	f001 ff15 	bl	8014a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01f      	beq.n	8012c66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c26:	68b9      	ldr	r1, [r7, #8]
 8012c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c2a:	f000 f9b3 	bl	8012f94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c30:	1e5a      	subs	r2, r3, #1
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d00f      	beq.n	8012c5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c40:	3310      	adds	r3, #16
 8012c42:	4618      	mov	r0, r3
 8012c44:	f000 ff4e 	bl	8013ae4 <xTaskRemoveFromEventList>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d007      	beq.n	8012c5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c4e:	4b3d      	ldr	r3, [pc, #244]	; (8012d44 <xQueueReceive+0x1bc>)
 8012c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c54:	601a      	str	r2, [r3, #0]
 8012c56:	f3bf 8f4f 	dsb	sy
 8012c5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012c5e:	f001 ff21 	bl	8014aa4 <vPortExitCritical>
				return pdPASS;
 8012c62:	2301      	movs	r3, #1
 8012c64:	e069      	b.n	8012d3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d103      	bne.n	8012c74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c6c:	f001 ff1a 	bl	8014aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c70:	2300      	movs	r3, #0
 8012c72:	e062      	b.n	8012d3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d106      	bne.n	8012c88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c7a:	f107 0310 	add.w	r3, r7, #16
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f000 fff6 	bl	8013c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c84:	2301      	movs	r3, #1
 8012c86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c88:	f001 ff0c 	bl	8014aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c8c:	f000 fcc2 	bl	8013614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c90:	f001 fed8 	bl	8014a44 <vPortEnterCritical>
 8012c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c9a:	b25b      	sxtb	r3, r3
 8012c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ca0:	d103      	bne.n	8012caa <xQueueReceive+0x122>
 8012ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cb0:	b25b      	sxtb	r3, r3
 8012cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cb6:	d103      	bne.n	8012cc0 <xQueueReceive+0x138>
 8012cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cc0:	f001 fef0 	bl	8014aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cc4:	1d3a      	adds	r2, r7, #4
 8012cc6:	f107 0310 	add.w	r3, r7, #16
 8012cca:	4611      	mov	r1, r2
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 ffe5 	bl	8013c9c <xTaskCheckForTimeOut>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d123      	bne.n	8012d20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cda:	f000 f9d3 	bl	8013084 <prvIsQueueEmpty>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d017      	beq.n	8012d14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce6:	3324      	adds	r3, #36	; 0x24
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	4611      	mov	r1, r2
 8012cec:	4618      	mov	r0, r3
 8012cee:	f000 fe6d 	bl	80139cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cf4:	f000 f974 	bl	8012fe0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012cf8:	f000 fc9a 	bl	8013630 <xTaskResumeAll>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d189      	bne.n	8012c16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012d02:	4b10      	ldr	r3, [pc, #64]	; (8012d44 <xQueueReceive+0x1bc>)
 8012d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d08:	601a      	str	r2, [r3, #0]
 8012d0a:	f3bf 8f4f 	dsb	sy
 8012d0e:	f3bf 8f6f 	isb	sy
 8012d12:	e780      	b.n	8012c16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d16:	f000 f963 	bl	8012fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d1a:	f000 fc89 	bl	8013630 <xTaskResumeAll>
 8012d1e:	e77a      	b.n	8012c16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d22:	f000 f95d 	bl	8012fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d26:	f000 fc83 	bl	8013630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d2c:	f000 f9aa 	bl	8013084 <prvIsQueueEmpty>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	f43f af6f 	beq.w	8012c16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3730      	adds	r7, #48	; 0x30
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	e000ed04 	.word	0xe000ed04

08012d48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b08e      	sub	sp, #56	; 0x38
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	60b9      	str	r1, [r7, #8]
 8012d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10a      	bne.n	8012d74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d62:	f383 8811 	msr	BASEPRI, r3
 8012d66:	f3bf 8f6f 	isb	sy
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	623b      	str	r3, [r7, #32]
}
 8012d70:	bf00      	nop
 8012d72:	e7fe      	b.n	8012d72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d103      	bne.n	8012d82 <xQueueReceiveFromISR+0x3a>
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d101      	bne.n	8012d86 <xQueueReceiveFromISR+0x3e>
 8012d82:	2301      	movs	r3, #1
 8012d84:	e000      	b.n	8012d88 <xQueueReceiveFromISR+0x40>
 8012d86:	2300      	movs	r3, #0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10a      	bne.n	8012da2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	61fb      	str	r3, [r7, #28]
}
 8012d9e:	bf00      	nop
 8012da0:	e7fe      	b.n	8012da0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012da2:	f001 ff31 	bl	8014c08 <vPortValidateInterruptPriority>
	__asm volatile
 8012da6:	f3ef 8211 	mrs	r2, BASEPRI
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	61ba      	str	r2, [r7, #24]
 8012dbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012dbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d02f      	beq.n	8012e2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012dd8:	68b9      	ldr	r1, [r7, #8]
 8012dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ddc:	f000 f8da 	bl	8012f94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de2:	1e5a      	subs	r2, r3, #1
 8012de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012de8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012df0:	d112      	bne.n	8012e18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d016      	beq.n	8012e28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	3310      	adds	r3, #16
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f000 fe70 	bl	8013ae4 <xTaskRemoveFromEventList>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d00e      	beq.n	8012e28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00b      	beq.n	8012e28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2201      	movs	r2, #1
 8012e14:	601a      	str	r2, [r3, #0]
 8012e16:	e007      	b.n	8012e28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	b25a      	sxtb	r2, r3
 8012e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8012e2c:	e001      	b.n	8012e32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	637b      	str	r3, [r7, #52]	; 0x34
 8012e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	f383 8811 	msr	BASEPRI, r3
}
 8012e3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3738      	adds	r7, #56	; 0x38
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b084      	sub	sp, #16
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d10a      	bne.n	8012e6c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5a:	f383 8811 	msr	BASEPRI, r3
 8012e5e:	f3bf 8f6f 	isb	sy
 8012e62:	f3bf 8f4f 	dsb	sy
 8012e66:	60bb      	str	r3, [r7, #8]
}
 8012e68:	bf00      	nop
 8012e6a:	e7fe      	b.n	8012e6a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012e6c:	f001 fdea 	bl	8014a44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e74:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012e76:	f001 fe15 	bl	8014aa4 <vPortExitCritical>

	return uxReturn;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3710      	adds	r7, #16
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b087      	sub	sp, #28
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d10a      	bne.n	8012eac <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8012e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e9a:	f383 8811 	msr	BASEPRI, r3
 8012e9e:	f3bf 8f6f 	isb	sy
 8012ea2:	f3bf 8f4f 	dsb	sy
 8012ea6:	60fb      	str	r3, [r7, #12]
}
 8012ea8:	bf00      	nop
 8012eaa:	e7fe      	b.n	8012eaa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eb0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012eb2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	371c      	adds	r7, #28
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ed4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10d      	bne.n	8012efa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d14d      	bne.n	8012f82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	689b      	ldr	r3, [r3, #8]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f001 f838 	bl	8013f60 <xTaskPriorityDisinherit>
 8012ef0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	609a      	str	r2, [r3, #8]
 8012ef8:	e043      	b.n	8012f82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d119      	bne.n	8012f34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	6858      	ldr	r0, [r3, #4]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f08:	461a      	mov	r2, r3
 8012f0a:	68b9      	ldr	r1, [r7, #8]
 8012f0c:	f002 f8e0 	bl	80150d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	685a      	ldr	r2, [r3, #4]
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f18:	441a      	add	r2, r3
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	685a      	ldr	r2, [r3, #4]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	689b      	ldr	r3, [r3, #8]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d32b      	bcc.n	8012f82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	605a      	str	r2, [r3, #4]
 8012f32:	e026      	b.n	8012f82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	68d8      	ldr	r0, [r3, #12]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	68b9      	ldr	r1, [r7, #8]
 8012f40:	f002 f8c6 	bl	80150d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	68da      	ldr	r2, [r3, #12]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f4c:	425b      	negs	r3, r3
 8012f4e:	441a      	add	r2, r3
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	68da      	ldr	r2, [r3, #12]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d207      	bcs.n	8012f70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	689a      	ldr	r2, [r3, #8]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f68:	425b      	negs	r3, r3
 8012f6a:	441a      	add	r2, r3
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2b02      	cmp	r3, #2
 8012f74:	d105      	bne.n	8012f82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	1c5a      	adds	r2, r3, #1
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f8a:	697b      	ldr	r3, [r7, #20]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3718      	adds	r7, #24
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}

08012f94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d018      	beq.n	8012fd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	68da      	ldr	r2, [r3, #12]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fae:	441a      	add	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	68da      	ldr	r2, [r3, #12]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d303      	bcc.n	8012fc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68d9      	ldr	r1, [r3, #12]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	6838      	ldr	r0, [r7, #0]
 8012fd4:	f002 f87c 	bl	80150d0 <memcpy>
	}
}
 8012fd8:	bf00      	nop
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012fe8:	f001 fd2c 	bl	8014a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ff2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ff4:	e011      	b.n	801301a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d012      	beq.n	8013024 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	3324      	adds	r3, #36	; 0x24
 8013002:	4618      	mov	r0, r3
 8013004:	f000 fd6e 	bl	8013ae4 <xTaskRemoveFromEventList>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d001      	beq.n	8013012 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801300e:	f000 fea7 	bl	8013d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013012:	7bfb      	ldrb	r3, [r7, #15]
 8013014:	3b01      	subs	r3, #1
 8013016:	b2db      	uxtb	r3, r3
 8013018:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801301a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801301e:	2b00      	cmp	r3, #0
 8013020:	dce9      	bgt.n	8012ff6 <prvUnlockQueue+0x16>
 8013022:	e000      	b.n	8013026 <prvUnlockQueue+0x46>
					break;
 8013024:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	22ff      	movs	r2, #255	; 0xff
 801302a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801302e:	f001 fd39 	bl	8014aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013032:	f001 fd07 	bl	8014a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801303c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801303e:	e011      	b.n	8013064 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	691b      	ldr	r3, [r3, #16]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d012      	beq.n	801306e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	3310      	adds	r3, #16
 801304c:	4618      	mov	r0, r3
 801304e:	f000 fd49 	bl	8013ae4 <xTaskRemoveFromEventList>
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	d001      	beq.n	801305c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013058:	f000 fe82 	bl	8013d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801305c:	7bbb      	ldrb	r3, [r7, #14]
 801305e:	3b01      	subs	r3, #1
 8013060:	b2db      	uxtb	r3, r3
 8013062:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013068:	2b00      	cmp	r3, #0
 801306a:	dce9      	bgt.n	8013040 <prvUnlockQueue+0x60>
 801306c:	e000      	b.n	8013070 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801306e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	22ff      	movs	r2, #255	; 0xff
 8013074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013078:	f001 fd14 	bl	8014aa4 <vPortExitCritical>
}
 801307c:	bf00      	nop
 801307e:	3710      	adds	r7, #16
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801308c:	f001 fcda 	bl	8014a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013094:	2b00      	cmp	r3, #0
 8013096:	d102      	bne.n	801309e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013098:	2301      	movs	r3, #1
 801309a:	60fb      	str	r3, [r7, #12]
 801309c:	e001      	b.n	80130a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801309e:	2300      	movs	r3, #0
 80130a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130a2:	f001 fcff 	bl	8014aa4 <vPortExitCritical>

	return xReturn;
 80130a6:	68fb      	ldr	r3, [r7, #12]
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80130b8:	f001 fcc4 	bl	8014a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d102      	bne.n	80130ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80130c8:	2301      	movs	r3, #1
 80130ca:	60fb      	str	r3, [r7, #12]
 80130cc:	e001      	b.n	80130d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80130ce:	2300      	movs	r3, #0
 80130d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130d2:	f001 fce7 	bl	8014aa4 <vPortExitCritical>

	return xReturn;
 80130d6:	68fb      	ldr	r3, [r7, #12]
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3710      	adds	r7, #16
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80130e0:	b480      	push	{r7}
 80130e2:	b085      	sub	sp, #20
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130ea:	2300      	movs	r3, #0
 80130ec:	60fb      	str	r3, [r7, #12]
 80130ee:	e014      	b.n	801311a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80130f0:	4a0f      	ldr	r2, [pc, #60]	; (8013130 <vQueueAddToRegistry+0x50>)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d10b      	bne.n	8013114 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80130fc:	490c      	ldr	r1, [pc, #48]	; (8013130 <vQueueAddToRegistry+0x50>)
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013106:	4a0a      	ldr	r2, [pc, #40]	; (8013130 <vQueueAddToRegistry+0x50>)
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	00db      	lsls	r3, r3, #3
 801310c:	4413      	add	r3, r2
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013112:	e006      	b.n	8013122 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	3301      	adds	r3, #1
 8013118:	60fb      	str	r3, [r7, #12]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b07      	cmp	r3, #7
 801311e:	d9e7      	bls.n	80130f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013120:	bf00      	nop
 8013122:	bf00      	nop
 8013124:	3714      	adds	r7, #20
 8013126:	46bd      	mov	sp, r7
 8013128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop
 8013130:	2400134c 	.word	0x2400134c

08013134 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013134:	b580      	push	{r7, lr}
 8013136:	b086      	sub	sp, #24
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013144:	f001 fc7e 	bl	8014a44 <vPortEnterCritical>
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801314e:	b25b      	sxtb	r3, r3
 8013150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013154:	d103      	bne.n	801315e <vQueueWaitForMessageRestricted+0x2a>
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	2200      	movs	r2, #0
 801315a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013164:	b25b      	sxtb	r3, r3
 8013166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801316a:	d103      	bne.n	8013174 <vQueueWaitForMessageRestricted+0x40>
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	2200      	movs	r2, #0
 8013170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013174:	f001 fc96 	bl	8014aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801317c:	2b00      	cmp	r3, #0
 801317e:	d106      	bne.n	801318e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	3324      	adds	r3, #36	; 0x24
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	4618      	mov	r0, r3
 801318a:	f000 fc7f 	bl	8013a8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801318e:	6978      	ldr	r0, [r7, #20]
 8013190:	f7ff ff26 	bl	8012fe0 <prvUnlockQueue>
	}
 8013194:	bf00      	nop
 8013196:	3718      	adds	r7, #24
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801319c:	b580      	push	{r7, lr}
 801319e:	b08e      	sub	sp, #56	; 0x38
 80131a0:	af04      	add	r7, sp, #16
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	607a      	str	r2, [r7, #4]
 80131a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80131aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d10a      	bne.n	80131c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80131b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b4:	f383 8811 	msr	BASEPRI, r3
 80131b8:	f3bf 8f6f 	isb	sy
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	623b      	str	r3, [r7, #32]
}
 80131c2:	bf00      	nop
 80131c4:	e7fe      	b.n	80131c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d10a      	bne.n	80131e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80131cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d0:	f383 8811 	msr	BASEPRI, r3
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	f3bf 8f4f 	dsb	sy
 80131dc:	61fb      	str	r3, [r7, #28]
}
 80131de:	bf00      	nop
 80131e0:	e7fe      	b.n	80131e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80131e2:	235c      	movs	r3, #92	; 0x5c
 80131e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	2b5c      	cmp	r3, #92	; 0x5c
 80131ea:	d00a      	beq.n	8013202 <xTaskCreateStatic+0x66>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	61bb      	str	r3, [r7, #24]
}
 80131fe:	bf00      	nop
 8013200:	e7fe      	b.n	8013200 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013202:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013206:	2b00      	cmp	r3, #0
 8013208:	d01e      	beq.n	8013248 <xTaskCreateStatic+0xac>
 801320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801320c:	2b00      	cmp	r3, #0
 801320e:	d01b      	beq.n	8013248 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321c:	2202      	movs	r2, #2
 801321e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013222:	2300      	movs	r3, #0
 8013224:	9303      	str	r3, [sp, #12]
 8013226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013228:	9302      	str	r3, [sp, #8]
 801322a:	f107 0314 	add.w	r3, r7, #20
 801322e:	9301      	str	r3, [sp, #4]
 8013230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	68b9      	ldr	r1, [r7, #8]
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f000 f850 	bl	80132e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013242:	f000 f8dd 	bl	8013400 <prvAddNewTaskToReadyList>
 8013246:	e001      	b.n	801324c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013248:	2300      	movs	r3, #0
 801324a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801324c:	697b      	ldr	r3, [r7, #20]
	}
 801324e:	4618      	mov	r0, r3
 8013250:	3728      	adds	r7, #40	; 0x28
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}

08013256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013256:	b580      	push	{r7, lr}
 8013258:	b08c      	sub	sp, #48	; 0x30
 801325a:	af04      	add	r7, sp, #16
 801325c:	60f8      	str	r0, [r7, #12]
 801325e:	60b9      	str	r1, [r7, #8]
 8013260:	603b      	str	r3, [r7, #0]
 8013262:	4613      	mov	r3, r2
 8013264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013266:	88fb      	ldrh	r3, [r7, #6]
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	4618      	mov	r0, r3
 801326c:	f001 fd0c 	bl	8014c88 <pvPortMalloc>
 8013270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d00e      	beq.n	8013296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013278:	205c      	movs	r0, #92	; 0x5c
 801327a:	f001 fd05 	bl	8014c88 <pvPortMalloc>
 801327e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d003      	beq.n	801328e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	697a      	ldr	r2, [r7, #20]
 801328a:	631a      	str	r2, [r3, #48]	; 0x30
 801328c:	e005      	b.n	801329a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801328e:	6978      	ldr	r0, [r7, #20]
 8013290:	f001 fdc6 	bl	8014e20 <vPortFree>
 8013294:	e001      	b.n	801329a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013296:	2300      	movs	r3, #0
 8013298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d017      	beq.n	80132d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	2200      	movs	r2, #0
 80132a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80132a8:	88fa      	ldrh	r2, [r7, #6]
 80132aa:	2300      	movs	r3, #0
 80132ac:	9303      	str	r3, [sp, #12]
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	9302      	str	r3, [sp, #8]
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	9301      	str	r3, [sp, #4]
 80132b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	68b9      	ldr	r1, [r7, #8]
 80132be:	68f8      	ldr	r0, [r7, #12]
 80132c0:	f000 f80e 	bl	80132e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80132c4:	69f8      	ldr	r0, [r7, #28]
 80132c6:	f000 f89b 	bl	8013400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80132ca:	2301      	movs	r3, #1
 80132cc:	61bb      	str	r3, [r7, #24]
 80132ce:	e002      	b.n	80132d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80132d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80132d6:	69bb      	ldr	r3, [r7, #24]
	}
 80132d8:	4618      	mov	r0, r3
 80132da:	3720      	adds	r7, #32
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b088      	sub	sp, #32
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	60f8      	str	r0, [r7, #12]
 80132e8:	60b9      	str	r1, [r7, #8]
 80132ea:	607a      	str	r2, [r7, #4]
 80132ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	461a      	mov	r2, r3
 80132f8:	21a5      	movs	r1, #165	; 0xa5
 80132fa:	f001 fef7 	bl	80150ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80132fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013302:	6879      	ldr	r1, [r7, #4]
 8013304:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013308:	440b      	add	r3, r1
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	4413      	add	r3, r2
 801330e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	f023 0307 	bic.w	r3, r3, #7
 8013316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	f003 0307 	and.w	r3, r3, #7
 801331e:	2b00      	cmp	r3, #0
 8013320:	d00a      	beq.n	8013338 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	617b      	str	r3, [r7, #20]
}
 8013334:	bf00      	nop
 8013336:	e7fe      	b.n	8013336 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d01f      	beq.n	801337e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801333e:	2300      	movs	r3, #0
 8013340:	61fb      	str	r3, [r7, #28]
 8013342:	e012      	b.n	801336a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013344:	68ba      	ldr	r2, [r7, #8]
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	4413      	add	r3, r2
 801334a:	7819      	ldrb	r1, [r3, #0]
 801334c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	4413      	add	r3, r2
 8013352:	3334      	adds	r3, #52	; 0x34
 8013354:	460a      	mov	r2, r1
 8013356:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013358:	68ba      	ldr	r2, [r7, #8]
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	4413      	add	r3, r2
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d006      	beq.n	8013372 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	3301      	adds	r3, #1
 8013368:	61fb      	str	r3, [r7, #28]
 801336a:	69fb      	ldr	r3, [r7, #28]
 801336c:	2b0f      	cmp	r3, #15
 801336e:	d9e9      	bls.n	8013344 <prvInitialiseNewTask+0x64>
 8013370:	e000      	b.n	8013374 <prvInitialiseNewTask+0x94>
			{
				break;
 8013372:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013376:	2200      	movs	r2, #0
 8013378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801337c:	e003      	b.n	8013386 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013380:	2200      	movs	r2, #0
 8013382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013388:	2b37      	cmp	r3, #55	; 0x37
 801338a:	d901      	bls.n	8013390 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801338c:	2337      	movs	r3, #55	; 0x37
 801338e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013394:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801339a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801339e:	2200      	movs	r2, #0
 80133a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80133a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a4:	3304      	adds	r3, #4
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7ff f882 	bl	80124b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80133ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ae:	3318      	adds	r3, #24
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7ff f87d 	bl	80124b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80133b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80133c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80133c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80133cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ce:	2200      	movs	r2, #0
 80133d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80133d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d4:	2200      	movs	r2, #0
 80133d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80133da:	683a      	ldr	r2, [r7, #0]
 80133dc:	68f9      	ldr	r1, [r7, #12]
 80133de:	69b8      	ldr	r0, [r7, #24]
 80133e0:	f001 fa06 	bl	80147f0 <pxPortInitialiseStack>
 80133e4:	4602      	mov	r2, r0
 80133e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80133ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d002      	beq.n	80133f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80133f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133f6:	bf00      	nop
 80133f8:	3720      	adds	r7, #32
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
	...

08013400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013408:	f001 fb1c 	bl	8014a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801340c:	4b2d      	ldr	r3, [pc, #180]	; (80134c4 <prvAddNewTaskToReadyList+0xc4>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	3301      	adds	r3, #1
 8013412:	4a2c      	ldr	r2, [pc, #176]	; (80134c4 <prvAddNewTaskToReadyList+0xc4>)
 8013414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013416:	4b2c      	ldr	r3, [pc, #176]	; (80134c8 <prvAddNewTaskToReadyList+0xc8>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d109      	bne.n	8013432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801341e:	4a2a      	ldr	r2, [pc, #168]	; (80134c8 <prvAddNewTaskToReadyList+0xc8>)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013424:	4b27      	ldr	r3, [pc, #156]	; (80134c4 <prvAddNewTaskToReadyList+0xc4>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b01      	cmp	r3, #1
 801342a:	d110      	bne.n	801344e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801342c:	f000 fcbc 	bl	8013da8 <prvInitialiseTaskLists>
 8013430:	e00d      	b.n	801344e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013432:	4b26      	ldr	r3, [pc, #152]	; (80134cc <prvAddNewTaskToReadyList+0xcc>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d109      	bne.n	801344e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801343a:	4b23      	ldr	r3, [pc, #140]	; (80134c8 <prvAddNewTaskToReadyList+0xc8>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013444:	429a      	cmp	r2, r3
 8013446:	d802      	bhi.n	801344e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013448:	4a1f      	ldr	r2, [pc, #124]	; (80134c8 <prvAddNewTaskToReadyList+0xc8>)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801344e:	4b20      	ldr	r3, [pc, #128]	; (80134d0 <prvAddNewTaskToReadyList+0xd0>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	3301      	adds	r3, #1
 8013454:	4a1e      	ldr	r2, [pc, #120]	; (80134d0 <prvAddNewTaskToReadyList+0xd0>)
 8013456:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013458:	4b1d      	ldr	r3, [pc, #116]	; (80134d0 <prvAddNewTaskToReadyList+0xd0>)
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013464:	4b1b      	ldr	r3, [pc, #108]	; (80134d4 <prvAddNewTaskToReadyList+0xd4>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	429a      	cmp	r2, r3
 801346a:	d903      	bls.n	8013474 <prvAddNewTaskToReadyList+0x74>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013470:	4a18      	ldr	r2, [pc, #96]	; (80134d4 <prvAddNewTaskToReadyList+0xd4>)
 8013472:	6013      	str	r3, [r2, #0]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013478:	4613      	mov	r3, r2
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	4413      	add	r3, r2
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	4a15      	ldr	r2, [pc, #84]	; (80134d8 <prvAddNewTaskToReadyList+0xd8>)
 8013482:	441a      	add	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	3304      	adds	r3, #4
 8013488:	4619      	mov	r1, r3
 801348a:	4610      	mov	r0, r2
 801348c:	f7ff f81d 	bl	80124ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013490:	f001 fb08 	bl	8014aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013494:	4b0d      	ldr	r3, [pc, #52]	; (80134cc <prvAddNewTaskToReadyList+0xcc>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d00e      	beq.n	80134ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801349c:	4b0a      	ldr	r3, [pc, #40]	; (80134c8 <prvAddNewTaskToReadyList+0xc8>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d207      	bcs.n	80134ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80134aa:	4b0c      	ldr	r3, [pc, #48]	; (80134dc <prvAddNewTaskToReadyList+0xdc>)
 80134ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134b0:	601a      	str	r2, [r3, #0]
 80134b2:	f3bf 8f4f 	dsb	sy
 80134b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134ba:	bf00      	nop
 80134bc:	3708      	adds	r7, #8
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	24001860 	.word	0x24001860
 80134c8:	2400138c 	.word	0x2400138c
 80134cc:	2400186c 	.word	0x2400186c
 80134d0:	2400187c 	.word	0x2400187c
 80134d4:	24001868 	.word	0x24001868
 80134d8:	24001390 	.word	0x24001390
 80134dc:	e000ed04 	.word	0xe000ed04

080134e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80134e8:	2300      	movs	r3, #0
 80134ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d017      	beq.n	8013522 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80134f2:	4b13      	ldr	r3, [pc, #76]	; (8013540 <vTaskDelay+0x60>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d00a      	beq.n	8013510 <vTaskDelay+0x30>
	__asm volatile
 80134fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fe:	f383 8811 	msr	BASEPRI, r3
 8013502:	f3bf 8f6f 	isb	sy
 8013506:	f3bf 8f4f 	dsb	sy
 801350a:	60bb      	str	r3, [r7, #8]
}
 801350c:	bf00      	nop
 801350e:	e7fe      	b.n	801350e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013510:	f000 f880 	bl	8013614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013514:	2100      	movs	r1, #0
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 fda8 	bl	801406c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801351c:	f000 f888 	bl	8013630 <xTaskResumeAll>
 8013520:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d107      	bne.n	8013538 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013528:	4b06      	ldr	r3, [pc, #24]	; (8013544 <vTaskDelay+0x64>)
 801352a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801352e:	601a      	str	r2, [r3, #0]
 8013530:	f3bf 8f4f 	dsb	sy
 8013534:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013538:	bf00      	nop
 801353a:	3710      	adds	r7, #16
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	24001888 	.word	0x24001888
 8013544:	e000ed04 	.word	0xe000ed04

08013548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b08a      	sub	sp, #40	; 0x28
 801354c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801354e:	2300      	movs	r3, #0
 8013550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013552:	2300      	movs	r3, #0
 8013554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013556:	463a      	mov	r2, r7
 8013558:	1d39      	adds	r1, r7, #4
 801355a:	f107 0308 	add.w	r3, r7, #8
 801355e:	4618      	mov	r0, r3
 8013560:	f7fe fd64 	bl	801202c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013564:	6839      	ldr	r1, [r7, #0]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	68ba      	ldr	r2, [r7, #8]
 801356a:	9202      	str	r2, [sp, #8]
 801356c:	9301      	str	r3, [sp, #4]
 801356e:	2300      	movs	r3, #0
 8013570:	9300      	str	r3, [sp, #0]
 8013572:	2300      	movs	r3, #0
 8013574:	460a      	mov	r2, r1
 8013576:	4921      	ldr	r1, [pc, #132]	; (80135fc <vTaskStartScheduler+0xb4>)
 8013578:	4821      	ldr	r0, [pc, #132]	; (8013600 <vTaskStartScheduler+0xb8>)
 801357a:	f7ff fe0f 	bl	801319c <xTaskCreateStatic>
 801357e:	4603      	mov	r3, r0
 8013580:	4a20      	ldr	r2, [pc, #128]	; (8013604 <vTaskStartScheduler+0xbc>)
 8013582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013584:	4b1f      	ldr	r3, [pc, #124]	; (8013604 <vTaskStartScheduler+0xbc>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d002      	beq.n	8013592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801358c:	2301      	movs	r3, #1
 801358e:	617b      	str	r3, [r7, #20]
 8013590:	e001      	b.n	8013596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013592:	2300      	movs	r3, #0
 8013594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d102      	bne.n	80135a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801359c:	f000 fdba 	bl	8014114 <xTimerCreateTimerTask>
 80135a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	d116      	bne.n	80135d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80135a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ac:	f383 8811 	msr	BASEPRI, r3
 80135b0:	f3bf 8f6f 	isb	sy
 80135b4:	f3bf 8f4f 	dsb	sy
 80135b8:	613b      	str	r3, [r7, #16]
}
 80135ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80135bc:	4b12      	ldr	r3, [pc, #72]	; (8013608 <vTaskStartScheduler+0xc0>)
 80135be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80135c4:	4b11      	ldr	r3, [pc, #68]	; (801360c <vTaskStartScheduler+0xc4>)
 80135c6:	2201      	movs	r2, #1
 80135c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80135ca:	4b11      	ldr	r3, [pc, #68]	; (8013610 <vTaskStartScheduler+0xc8>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80135d0:	f001 f996 	bl	8014900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80135d4:	e00e      	b.n	80135f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135dc:	d10a      	bne.n	80135f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80135de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e2:	f383 8811 	msr	BASEPRI, r3
 80135e6:	f3bf 8f6f 	isb	sy
 80135ea:	f3bf 8f4f 	dsb	sy
 80135ee:	60fb      	str	r3, [r7, #12]
}
 80135f0:	bf00      	nop
 80135f2:	e7fe      	b.n	80135f2 <vTaskStartScheduler+0xaa>
}
 80135f4:	bf00      	nop
 80135f6:	3718      	adds	r7, #24
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	08015d38 	.word	0x08015d38
 8013600:	08013d79 	.word	0x08013d79
 8013604:	24001884 	.word	0x24001884
 8013608:	24001880 	.word	0x24001880
 801360c:	2400186c 	.word	0x2400186c
 8013610:	24001864 	.word	0x24001864

08013614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013614:	b480      	push	{r7}
 8013616:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013618:	4b04      	ldr	r3, [pc, #16]	; (801362c <vTaskSuspendAll+0x18>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	3301      	adds	r3, #1
 801361e:	4a03      	ldr	r2, [pc, #12]	; (801362c <vTaskSuspendAll+0x18>)
 8013620:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013622:	bf00      	nop
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr
 801362c:	24001888 	.word	0x24001888

08013630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013636:	2300      	movs	r3, #0
 8013638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801363a:	2300      	movs	r3, #0
 801363c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801363e:	4b42      	ldr	r3, [pc, #264]	; (8013748 <xTaskResumeAll+0x118>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d10a      	bne.n	801365c <xTaskResumeAll+0x2c>
	__asm volatile
 8013646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801364a:	f383 8811 	msr	BASEPRI, r3
 801364e:	f3bf 8f6f 	isb	sy
 8013652:	f3bf 8f4f 	dsb	sy
 8013656:	603b      	str	r3, [r7, #0]
}
 8013658:	bf00      	nop
 801365a:	e7fe      	b.n	801365a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801365c:	f001 f9f2 	bl	8014a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013660:	4b39      	ldr	r3, [pc, #228]	; (8013748 <xTaskResumeAll+0x118>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	3b01      	subs	r3, #1
 8013666:	4a38      	ldr	r2, [pc, #224]	; (8013748 <xTaskResumeAll+0x118>)
 8013668:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801366a:	4b37      	ldr	r3, [pc, #220]	; (8013748 <xTaskResumeAll+0x118>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d162      	bne.n	8013738 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013672:	4b36      	ldr	r3, [pc, #216]	; (801374c <xTaskResumeAll+0x11c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d05e      	beq.n	8013738 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801367a:	e02f      	b.n	80136dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801367c:	4b34      	ldr	r3, [pc, #208]	; (8013750 <xTaskResumeAll+0x120>)
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	68db      	ldr	r3, [r3, #12]
 8013682:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	3318      	adds	r3, #24
 8013688:	4618      	mov	r0, r3
 801368a:	f7fe ff7b 	bl	8012584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	3304      	adds	r3, #4
 8013692:	4618      	mov	r0, r3
 8013694:	f7fe ff76 	bl	8012584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369c:	4b2d      	ldr	r3, [pc, #180]	; (8013754 <xTaskResumeAll+0x124>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d903      	bls.n	80136ac <xTaskResumeAll+0x7c>
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a8:	4a2a      	ldr	r2, [pc, #168]	; (8013754 <xTaskResumeAll+0x124>)
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136b0:	4613      	mov	r3, r2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	4413      	add	r3, r2
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	4a27      	ldr	r2, [pc, #156]	; (8013758 <xTaskResumeAll+0x128>)
 80136ba:	441a      	add	r2, r3
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	3304      	adds	r3, #4
 80136c0:	4619      	mov	r1, r3
 80136c2:	4610      	mov	r0, r2
 80136c4:	f7fe ff01 	bl	80124ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136cc:	4b23      	ldr	r3, [pc, #140]	; (801375c <xTaskResumeAll+0x12c>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d302      	bcc.n	80136dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80136d6:	4b22      	ldr	r3, [pc, #136]	; (8013760 <xTaskResumeAll+0x130>)
 80136d8:	2201      	movs	r2, #1
 80136da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80136dc:	4b1c      	ldr	r3, [pc, #112]	; (8013750 <xTaskResumeAll+0x120>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d1cb      	bne.n	801367c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80136ea:	f000 fbfb 	bl	8013ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80136ee:	4b1d      	ldr	r3, [pc, #116]	; (8013764 <xTaskResumeAll+0x134>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d010      	beq.n	801371c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80136fa:	f000 f847 	bl	801378c <xTaskIncrementTick>
 80136fe:	4603      	mov	r3, r0
 8013700:	2b00      	cmp	r3, #0
 8013702:	d002      	beq.n	801370a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013704:	4b16      	ldr	r3, [pc, #88]	; (8013760 <xTaskResumeAll+0x130>)
 8013706:	2201      	movs	r2, #1
 8013708:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	3b01      	subs	r3, #1
 801370e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d1f1      	bne.n	80136fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013716:	4b13      	ldr	r3, [pc, #76]	; (8013764 <xTaskResumeAll+0x134>)
 8013718:	2200      	movs	r2, #0
 801371a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801371c:	4b10      	ldr	r3, [pc, #64]	; (8013760 <xTaskResumeAll+0x130>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d009      	beq.n	8013738 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013724:	2301      	movs	r3, #1
 8013726:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013728:	4b0f      	ldr	r3, [pc, #60]	; (8013768 <xTaskResumeAll+0x138>)
 801372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801372e:	601a      	str	r2, [r3, #0]
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013738:	f001 f9b4 	bl	8014aa4 <vPortExitCritical>

	return xAlreadyYielded;
 801373c:	68bb      	ldr	r3, [r7, #8]
}
 801373e:	4618      	mov	r0, r3
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	24001888 	.word	0x24001888
 801374c:	24001860 	.word	0x24001860
 8013750:	24001820 	.word	0x24001820
 8013754:	24001868 	.word	0x24001868
 8013758:	24001390 	.word	0x24001390
 801375c:	2400138c 	.word	0x2400138c
 8013760:	24001874 	.word	0x24001874
 8013764:	24001870 	.word	0x24001870
 8013768:	e000ed04 	.word	0xe000ed04

0801376c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013772:	4b05      	ldr	r3, [pc, #20]	; (8013788 <xTaskGetTickCount+0x1c>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013778:	687b      	ldr	r3, [r7, #4]
}
 801377a:	4618      	mov	r0, r3
 801377c:	370c      	adds	r7, #12
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	24001864 	.word	0x24001864

0801378c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b086      	sub	sp, #24
 8013790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013792:	2300      	movs	r3, #0
 8013794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013796:	4b53      	ldr	r3, [pc, #332]	; (80138e4 <xTaskIncrementTick+0x158>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	2b00      	cmp	r3, #0
 801379c:	f040 8095 	bne.w	80138ca <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80137a0:	4b51      	ldr	r3, [pc, #324]	; (80138e8 <xTaskIncrementTick+0x15c>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	3301      	adds	r3, #1
 80137a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80137a8:	4a4f      	ldr	r2, [pc, #316]	; (80138e8 <xTaskIncrementTick+0x15c>)
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d120      	bne.n	80137f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80137b4:	4b4d      	ldr	r3, [pc, #308]	; (80138ec <xTaskIncrementTick+0x160>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00a      	beq.n	80137d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80137be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c2:	f383 8811 	msr	BASEPRI, r3
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	f3bf 8f4f 	dsb	sy
 80137ce:	603b      	str	r3, [r7, #0]
}
 80137d0:	bf00      	nop
 80137d2:	e7fe      	b.n	80137d2 <xTaskIncrementTick+0x46>
 80137d4:	4b45      	ldr	r3, [pc, #276]	; (80138ec <xTaskIncrementTick+0x160>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	60fb      	str	r3, [r7, #12]
 80137da:	4b45      	ldr	r3, [pc, #276]	; (80138f0 <xTaskIncrementTick+0x164>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	4a43      	ldr	r2, [pc, #268]	; (80138ec <xTaskIncrementTick+0x160>)
 80137e0:	6013      	str	r3, [r2, #0]
 80137e2:	4a43      	ldr	r2, [pc, #268]	; (80138f0 <xTaskIncrementTick+0x164>)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	6013      	str	r3, [r2, #0]
 80137e8:	4b42      	ldr	r3, [pc, #264]	; (80138f4 <xTaskIncrementTick+0x168>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	3301      	adds	r3, #1
 80137ee:	4a41      	ldr	r2, [pc, #260]	; (80138f4 <xTaskIncrementTick+0x168>)
 80137f0:	6013      	str	r3, [r2, #0]
 80137f2:	f000 fb77 	bl	8013ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80137f6:	4b40      	ldr	r3, [pc, #256]	; (80138f8 <xTaskIncrementTick+0x16c>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	693a      	ldr	r2, [r7, #16]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d349      	bcc.n	8013894 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013800:	4b3a      	ldr	r3, [pc, #232]	; (80138ec <xTaskIncrementTick+0x160>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d104      	bne.n	8013814 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801380a:	4b3b      	ldr	r3, [pc, #236]	; (80138f8 <xTaskIncrementTick+0x16c>)
 801380c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013810:	601a      	str	r2, [r3, #0]
					break;
 8013812:	e03f      	b.n	8013894 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013814:	4b35      	ldr	r3, [pc, #212]	; (80138ec <xTaskIncrementTick+0x160>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013824:	693a      	ldr	r2, [r7, #16]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	429a      	cmp	r2, r3
 801382a:	d203      	bcs.n	8013834 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801382c:	4a32      	ldr	r2, [pc, #200]	; (80138f8 <xTaskIncrementTick+0x16c>)
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013832:	e02f      	b.n	8013894 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	3304      	adds	r3, #4
 8013838:	4618      	mov	r0, r3
 801383a:	f7fe fea3 	bl	8012584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013842:	2b00      	cmp	r3, #0
 8013844:	d004      	beq.n	8013850 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	3318      	adds	r3, #24
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fe9a 	bl	8012584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013854:	4b29      	ldr	r3, [pc, #164]	; (80138fc <xTaskIncrementTick+0x170>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	429a      	cmp	r2, r3
 801385a:	d903      	bls.n	8013864 <xTaskIncrementTick+0xd8>
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013860:	4a26      	ldr	r2, [pc, #152]	; (80138fc <xTaskIncrementTick+0x170>)
 8013862:	6013      	str	r3, [r2, #0]
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013868:	4613      	mov	r3, r2
 801386a:	009b      	lsls	r3, r3, #2
 801386c:	4413      	add	r3, r2
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4a23      	ldr	r2, [pc, #140]	; (8013900 <xTaskIncrementTick+0x174>)
 8013872:	441a      	add	r2, r3
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	3304      	adds	r3, #4
 8013878:	4619      	mov	r1, r3
 801387a:	4610      	mov	r0, r2
 801387c:	f7fe fe25 	bl	80124ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013884:	4b1f      	ldr	r3, [pc, #124]	; (8013904 <xTaskIncrementTick+0x178>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388a:	429a      	cmp	r2, r3
 801388c:	d3b8      	bcc.n	8013800 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801388e:	2301      	movs	r3, #1
 8013890:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013892:	e7b5      	b.n	8013800 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013894:	4b1b      	ldr	r3, [pc, #108]	; (8013904 <xTaskIncrementTick+0x178>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801389a:	4919      	ldr	r1, [pc, #100]	; (8013900 <xTaskIncrementTick+0x174>)
 801389c:	4613      	mov	r3, r2
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	4413      	add	r3, r2
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	440b      	add	r3, r1
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d901      	bls.n	80138b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80138ac:	2301      	movs	r3, #1
 80138ae:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80138b0:	4b15      	ldr	r3, [pc, #84]	; (8013908 <xTaskIncrementTick+0x17c>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d101      	bne.n	80138bc <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80138b8:	f7ed fa4e 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80138bc:	4b13      	ldr	r3, [pc, #76]	; (801390c <xTaskIncrementTick+0x180>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d009      	beq.n	80138d8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80138c4:	2301      	movs	r3, #1
 80138c6:	617b      	str	r3, [r7, #20]
 80138c8:	e006      	b.n	80138d8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80138ca:	4b0f      	ldr	r3, [pc, #60]	; (8013908 <xTaskIncrementTick+0x17c>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	3301      	adds	r3, #1
 80138d0:	4a0d      	ldr	r2, [pc, #52]	; (8013908 <xTaskIncrementTick+0x17c>)
 80138d2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80138d4:	f7ed fa40 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80138d8:	697b      	ldr	r3, [r7, #20]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3718      	adds	r7, #24
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	24001888 	.word	0x24001888
 80138e8:	24001864 	.word	0x24001864
 80138ec:	24001818 	.word	0x24001818
 80138f0:	2400181c 	.word	0x2400181c
 80138f4:	24001878 	.word	0x24001878
 80138f8:	24001880 	.word	0x24001880
 80138fc:	24001868 	.word	0x24001868
 8013900:	24001390 	.word	0x24001390
 8013904:	2400138c 	.word	0x2400138c
 8013908:	24001870 	.word	0x24001870
 801390c:	24001874 	.word	0x24001874

08013910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013910:	b480      	push	{r7}
 8013912:	b085      	sub	sp, #20
 8013914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013916:	4b28      	ldr	r3, [pc, #160]	; (80139b8 <vTaskSwitchContext+0xa8>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d003      	beq.n	8013926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801391e:	4b27      	ldr	r3, [pc, #156]	; (80139bc <vTaskSwitchContext+0xac>)
 8013920:	2201      	movs	r2, #1
 8013922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013924:	e041      	b.n	80139aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013926:	4b25      	ldr	r3, [pc, #148]	; (80139bc <vTaskSwitchContext+0xac>)
 8013928:	2200      	movs	r2, #0
 801392a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801392c:	4b24      	ldr	r3, [pc, #144]	; (80139c0 <vTaskSwitchContext+0xb0>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	e010      	b.n	8013956 <vTaskSwitchContext+0x46>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d10a      	bne.n	8013950 <vTaskSwitchContext+0x40>
	__asm volatile
 801393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393e:	f383 8811 	msr	BASEPRI, r3
 8013942:	f3bf 8f6f 	isb	sy
 8013946:	f3bf 8f4f 	dsb	sy
 801394a:	607b      	str	r3, [r7, #4]
}
 801394c:	bf00      	nop
 801394e:	e7fe      	b.n	801394e <vTaskSwitchContext+0x3e>
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	3b01      	subs	r3, #1
 8013954:	60fb      	str	r3, [r7, #12]
 8013956:	491b      	ldr	r1, [pc, #108]	; (80139c4 <vTaskSwitchContext+0xb4>)
 8013958:	68fa      	ldr	r2, [r7, #12]
 801395a:	4613      	mov	r3, r2
 801395c:	009b      	lsls	r3, r3, #2
 801395e:	4413      	add	r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	440b      	add	r3, r1
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d0e4      	beq.n	8013934 <vTaskSwitchContext+0x24>
 801396a:	68fa      	ldr	r2, [r7, #12]
 801396c:	4613      	mov	r3, r2
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	009b      	lsls	r3, r3, #2
 8013974:	4a13      	ldr	r2, [pc, #76]	; (80139c4 <vTaskSwitchContext+0xb4>)
 8013976:	4413      	add	r3, r2
 8013978:	60bb      	str	r3, [r7, #8]
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	685a      	ldr	r2, [r3, #4]
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	605a      	str	r2, [r3, #4]
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	685a      	ldr	r2, [r3, #4]
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	3308      	adds	r3, #8
 801398c:	429a      	cmp	r2, r3
 801398e:	d104      	bne.n	801399a <vTaskSwitchContext+0x8a>
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	685a      	ldr	r2, [r3, #4]
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	605a      	str	r2, [r3, #4]
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	4a09      	ldr	r2, [pc, #36]	; (80139c8 <vTaskSwitchContext+0xb8>)
 80139a2:	6013      	str	r3, [r2, #0]
 80139a4:	4a06      	ldr	r2, [pc, #24]	; (80139c0 <vTaskSwitchContext+0xb0>)
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	6013      	str	r3, [r2, #0]
}
 80139aa:	bf00      	nop
 80139ac:	3714      	adds	r7, #20
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop
 80139b8:	24001888 	.word	0x24001888
 80139bc:	24001874 	.word	0x24001874
 80139c0:	24001868 	.word	0x24001868
 80139c4:	24001390 	.word	0x24001390
 80139c8:	2400138c 	.word	0x2400138c

080139cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d10a      	bne.n	80139f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80139dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e0:	f383 8811 	msr	BASEPRI, r3
 80139e4:	f3bf 8f6f 	isb	sy
 80139e8:	f3bf 8f4f 	dsb	sy
 80139ec:	60fb      	str	r3, [r7, #12]
}
 80139ee:	bf00      	nop
 80139f0:	e7fe      	b.n	80139f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139f2:	4b07      	ldr	r3, [pc, #28]	; (8013a10 <vTaskPlaceOnEventList+0x44>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	3318      	adds	r3, #24
 80139f8:	4619      	mov	r1, r3
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7fe fd89 	bl	8012512 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013a00:	2101      	movs	r1, #1
 8013a02:	6838      	ldr	r0, [r7, #0]
 8013a04:	f000 fb32 	bl	801406c <prvAddCurrentTaskToDelayedList>
}
 8013a08:	bf00      	nop
 8013a0a:	3710      	adds	r7, #16
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	2400138c 	.word	0x2400138c

08013a14 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b086      	sub	sp, #24
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d10a      	bne.n	8013a3c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8013a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2a:	f383 8811 	msr	BASEPRI, r3
 8013a2e:	f3bf 8f6f 	isb	sy
 8013a32:	f3bf 8f4f 	dsb	sy
 8013a36:	617b      	str	r3, [r7, #20]
}
 8013a38:	bf00      	nop
 8013a3a:	e7fe      	b.n	8013a3a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013a3c:	4b11      	ldr	r3, [pc, #68]	; (8013a84 <vTaskPlaceOnUnorderedEventList+0x70>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10a      	bne.n	8013a5a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a48:	f383 8811 	msr	BASEPRI, r3
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	f3bf 8f4f 	dsb	sy
 8013a54:	613b      	str	r3, [r7, #16]
}
 8013a56:	bf00      	nop
 8013a58:	e7fe      	b.n	8013a58 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013a5a:	4b0b      	ldr	r3, [pc, #44]	; (8013a88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	68ba      	ldr	r2, [r7, #8]
 8013a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013a64:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013a66:	4b08      	ldr	r3, [pc, #32]	; (8013a88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	3318      	adds	r3, #24
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	f7fe fd2b 	bl	80124ca <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013a74:	2101      	movs	r1, #1
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f000 faf8 	bl	801406c <prvAddCurrentTaskToDelayedList>
}
 8013a7c:	bf00      	nop
 8013a7e:	3718      	adds	r7, #24
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	24001888 	.word	0x24001888
 8013a88:	2400138c 	.word	0x2400138c

08013a8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d10a      	bne.n	8013ab4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa2:	f383 8811 	msr	BASEPRI, r3
 8013aa6:	f3bf 8f6f 	isb	sy
 8013aaa:	f3bf 8f4f 	dsb	sy
 8013aae:	617b      	str	r3, [r7, #20]
}
 8013ab0:	bf00      	nop
 8013ab2:	e7fe      	b.n	8013ab2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013ab4:	4b0a      	ldr	r3, [pc, #40]	; (8013ae0 <vTaskPlaceOnEventListRestricted+0x54>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	3318      	adds	r3, #24
 8013aba:	4619      	mov	r1, r3
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7fe fd04 	bl	80124ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d002      	beq.n	8013ace <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013acc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013ace:	6879      	ldr	r1, [r7, #4]
 8013ad0:	68b8      	ldr	r0, [r7, #8]
 8013ad2:	f000 facb 	bl	801406c <prvAddCurrentTaskToDelayedList>
	}
 8013ad6:	bf00      	nop
 8013ad8:	3718      	adds	r7, #24
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	2400138c 	.word	0x2400138c

08013ae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b086      	sub	sp, #24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d10a      	bne.n	8013b10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afe:	f383 8811 	msr	BASEPRI, r3
 8013b02:	f3bf 8f6f 	isb	sy
 8013b06:	f3bf 8f4f 	dsb	sy
 8013b0a:	60fb      	str	r3, [r7, #12]
}
 8013b0c:	bf00      	nop
 8013b0e:	e7fe      	b.n	8013b0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	3318      	adds	r3, #24
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fe fd35 	bl	8012584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b1a:	4b1e      	ldr	r3, [pc, #120]	; (8013b94 <xTaskRemoveFromEventList+0xb0>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d11d      	bne.n	8013b5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	3304      	adds	r3, #4
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7fe fd2c 	bl	8012584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b30:	4b19      	ldr	r3, [pc, #100]	; (8013b98 <xTaskRemoveFromEventList+0xb4>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d903      	bls.n	8013b40 <xTaskRemoveFromEventList+0x5c>
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3c:	4a16      	ldr	r2, [pc, #88]	; (8013b98 <xTaskRemoveFromEventList+0xb4>)
 8013b3e:	6013      	str	r3, [r2, #0]
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b44:	4613      	mov	r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4413      	add	r3, r2
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4a13      	ldr	r2, [pc, #76]	; (8013b9c <xTaskRemoveFromEventList+0xb8>)
 8013b4e:	441a      	add	r2, r3
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	3304      	adds	r3, #4
 8013b54:	4619      	mov	r1, r3
 8013b56:	4610      	mov	r0, r2
 8013b58:	f7fe fcb7 	bl	80124ca <vListInsertEnd>
 8013b5c:	e005      	b.n	8013b6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	3318      	adds	r3, #24
 8013b62:	4619      	mov	r1, r3
 8013b64:	480e      	ldr	r0, [pc, #56]	; (8013ba0 <xTaskRemoveFromEventList+0xbc>)
 8013b66:	f7fe fcb0 	bl	80124ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b6e:	4b0d      	ldr	r3, [pc, #52]	; (8013ba4 <xTaskRemoveFromEventList+0xc0>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d905      	bls.n	8013b84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013b78:	2301      	movs	r3, #1
 8013b7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013b7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <xTaskRemoveFromEventList+0xc4>)
 8013b7e:	2201      	movs	r2, #1
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	e001      	b.n	8013b88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013b84:	2300      	movs	r3, #0
 8013b86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013b88:	697b      	ldr	r3, [r7, #20]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3718      	adds	r7, #24
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	24001888 	.word	0x24001888
 8013b98:	24001868 	.word	0x24001868
 8013b9c:	24001390 	.word	0x24001390
 8013ba0:	24001820 	.word	0x24001820
 8013ba4:	2400138c 	.word	0x2400138c
 8013ba8:	24001874 	.word	0x24001874

08013bac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8013bb6:	4b29      	ldr	r3, [pc, #164]	; (8013c5c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d10a      	bne.n	8013bd4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc2:	f383 8811 	msr	BASEPRI, r3
 8013bc6:	f3bf 8f6f 	isb	sy
 8013bca:	f3bf 8f4f 	dsb	sy
 8013bce:	613b      	str	r3, [r7, #16]
}
 8013bd0:	bf00      	nop
 8013bd2:	e7fe      	b.n	8013bd2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d10a      	bne.n	8013c00 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8013bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bee:	f383 8811 	msr	BASEPRI, r3
 8013bf2:	f3bf 8f6f 	isb	sy
 8013bf6:	f3bf 8f4f 	dsb	sy
 8013bfa:	60fb      	str	r3, [r7, #12]
}
 8013bfc:	bf00      	nop
 8013bfe:	e7fe      	b.n	8013bfe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f7fe fcbf 	bl	8012584 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fcba 	bl	8012584 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c14:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d903      	bls.n	8013c24 <vTaskRemoveFromUnorderedEventList+0x78>
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c20:	4a0f      	ldr	r2, [pc, #60]	; (8013c60 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013c22:	6013      	str	r3, [r2, #0]
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c28:	4613      	mov	r3, r2
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	4413      	add	r3, r2
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	4a0c      	ldr	r2, [pc, #48]	; (8013c64 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8013c32:	441a      	add	r2, r3
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	3304      	adds	r3, #4
 8013c38:	4619      	mov	r1, r3
 8013c3a:	4610      	mov	r0, r2
 8013c3c:	f7fe fc45 	bl	80124ca <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c44:	4b08      	ldr	r3, [pc, #32]	; (8013c68 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d902      	bls.n	8013c54 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013c4e:	4b07      	ldr	r3, [pc, #28]	; (8013c6c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013c50:	2201      	movs	r2, #1
 8013c52:	601a      	str	r2, [r3, #0]
	}
}
 8013c54:	bf00      	nop
 8013c56:	3718      	adds	r7, #24
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	24001888 	.word	0x24001888
 8013c60:	24001868 	.word	0x24001868
 8013c64:	24001390 	.word	0x24001390
 8013c68:	2400138c 	.word	0x2400138c
 8013c6c:	24001874 	.word	0x24001874

08013c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c78:	4b06      	ldr	r3, [pc, #24]	; (8013c94 <vTaskInternalSetTimeOutState+0x24>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013c80:	4b05      	ldr	r3, [pc, #20]	; (8013c98 <vTaskInternalSetTimeOutState+0x28>)
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	605a      	str	r2, [r3, #4]
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr
 8013c94:	24001878 	.word	0x24001878
 8013c98:	24001864 	.word	0x24001864

08013c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b088      	sub	sp, #32
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d10a      	bne.n	8013cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb0:	f383 8811 	msr	BASEPRI, r3
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	613b      	str	r3, [r7, #16]
}
 8013cbe:	bf00      	nop
 8013cc0:	e7fe      	b.n	8013cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10a      	bne.n	8013cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ccc:	f383 8811 	msr	BASEPRI, r3
 8013cd0:	f3bf 8f6f 	isb	sy
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	60fb      	str	r3, [r7, #12]
}
 8013cda:	bf00      	nop
 8013cdc:	e7fe      	b.n	8013cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013cde:	f000 feb1 	bl	8014a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013ce2:	4b1d      	ldr	r3, [pc, #116]	; (8013d58 <xTaskCheckForTimeOut+0xbc>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	69ba      	ldr	r2, [r7, #24]
 8013cee:	1ad3      	subs	r3, r2, r3
 8013cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cfa:	d102      	bne.n	8013d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	61fb      	str	r3, [r7, #28]
 8013d00:	e023      	b.n	8013d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <xTaskCheckForTimeOut+0xc0>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d007      	beq.n	8013d1e <xTaskCheckForTimeOut+0x82>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	69ba      	ldr	r2, [r7, #24]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d302      	bcc.n	8013d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	61fb      	str	r3, [r7, #28]
 8013d1c:	e015      	b.n	8013d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	697a      	ldr	r2, [r7, #20]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d20b      	bcs.n	8013d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	1ad2      	subs	r2, r2, r3
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff ff9b 	bl	8013c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	61fb      	str	r3, [r7, #28]
 8013d3e:	e004      	b.n	8013d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	2200      	movs	r2, #0
 8013d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d46:	2301      	movs	r3, #1
 8013d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d4a:	f000 feab 	bl	8014aa4 <vPortExitCritical>

	return xReturn;
 8013d4e:	69fb      	ldr	r3, [r7, #28]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3720      	adds	r7, #32
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}
 8013d58:	24001864 	.word	0x24001864
 8013d5c:	24001878 	.word	0x24001878

08013d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013d60:	b480      	push	{r7}
 8013d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013d64:	4b03      	ldr	r3, [pc, #12]	; (8013d74 <vTaskMissedYield+0x14>)
 8013d66:	2201      	movs	r2, #1
 8013d68:	601a      	str	r2, [r3, #0]
}
 8013d6a:	bf00      	nop
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr
 8013d74:	24001874 	.word	0x24001874

08013d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013d80:	f000 f852 	bl	8013e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013d84:	4b06      	ldr	r3, [pc, #24]	; (8013da0 <prvIdleTask+0x28>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d9f9      	bls.n	8013d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013d8c:	4b05      	ldr	r3, [pc, #20]	; (8013da4 <prvIdleTask+0x2c>)
 8013d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	f3bf 8f4f 	dsb	sy
 8013d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013d9c:	e7f0      	b.n	8013d80 <prvIdleTask+0x8>
 8013d9e:	bf00      	nop
 8013da0:	24001390 	.word	0x24001390
 8013da4:	e000ed04 	.word	0xe000ed04

08013da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dae:	2300      	movs	r3, #0
 8013db0:	607b      	str	r3, [r7, #4]
 8013db2:	e00c      	b.n	8013dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	4613      	mov	r3, r2
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	4413      	add	r3, r2
 8013dbc:	009b      	lsls	r3, r3, #2
 8013dbe:	4a12      	ldr	r2, [pc, #72]	; (8013e08 <prvInitialiseTaskLists+0x60>)
 8013dc0:	4413      	add	r3, r2
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fe fb54 	bl	8012470 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	607b      	str	r3, [r7, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b37      	cmp	r3, #55	; 0x37
 8013dd2:	d9ef      	bls.n	8013db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013dd4:	480d      	ldr	r0, [pc, #52]	; (8013e0c <prvInitialiseTaskLists+0x64>)
 8013dd6:	f7fe fb4b 	bl	8012470 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013dda:	480d      	ldr	r0, [pc, #52]	; (8013e10 <prvInitialiseTaskLists+0x68>)
 8013ddc:	f7fe fb48 	bl	8012470 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013de0:	480c      	ldr	r0, [pc, #48]	; (8013e14 <prvInitialiseTaskLists+0x6c>)
 8013de2:	f7fe fb45 	bl	8012470 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013de6:	480c      	ldr	r0, [pc, #48]	; (8013e18 <prvInitialiseTaskLists+0x70>)
 8013de8:	f7fe fb42 	bl	8012470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013dec:	480b      	ldr	r0, [pc, #44]	; (8013e1c <prvInitialiseTaskLists+0x74>)
 8013dee:	f7fe fb3f 	bl	8012470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013df2:	4b0b      	ldr	r3, [pc, #44]	; (8013e20 <prvInitialiseTaskLists+0x78>)
 8013df4:	4a05      	ldr	r2, [pc, #20]	; (8013e0c <prvInitialiseTaskLists+0x64>)
 8013df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013df8:	4b0a      	ldr	r3, [pc, #40]	; (8013e24 <prvInitialiseTaskLists+0x7c>)
 8013dfa:	4a05      	ldr	r2, [pc, #20]	; (8013e10 <prvInitialiseTaskLists+0x68>)
 8013dfc:	601a      	str	r2, [r3, #0]
}
 8013dfe:	bf00      	nop
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	24001390 	.word	0x24001390
 8013e0c:	240017f0 	.word	0x240017f0
 8013e10:	24001804 	.word	0x24001804
 8013e14:	24001820 	.word	0x24001820
 8013e18:	24001834 	.word	0x24001834
 8013e1c:	2400184c 	.word	0x2400184c
 8013e20:	24001818 	.word	0x24001818
 8013e24:	2400181c 	.word	0x2400181c

08013e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e2e:	e019      	b.n	8013e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e30:	f000 fe08 	bl	8014a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e34:	4b10      	ldr	r3, [pc, #64]	; (8013e78 <prvCheckTasksWaitingTermination+0x50>)
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	68db      	ldr	r3, [r3, #12]
 8013e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	3304      	adds	r3, #4
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fe fb9f 	bl	8012584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e46:	4b0d      	ldr	r3, [pc, #52]	; (8013e7c <prvCheckTasksWaitingTermination+0x54>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	3b01      	subs	r3, #1
 8013e4c:	4a0b      	ldr	r2, [pc, #44]	; (8013e7c <prvCheckTasksWaitingTermination+0x54>)
 8013e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e50:	4b0b      	ldr	r3, [pc, #44]	; (8013e80 <prvCheckTasksWaitingTermination+0x58>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	3b01      	subs	r3, #1
 8013e56:	4a0a      	ldr	r2, [pc, #40]	; (8013e80 <prvCheckTasksWaitingTermination+0x58>)
 8013e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e5a:	f000 fe23 	bl	8014aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 f810 	bl	8013e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e64:	4b06      	ldr	r3, [pc, #24]	; (8013e80 <prvCheckTasksWaitingTermination+0x58>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d1e1      	bne.n	8013e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013e6c:	bf00      	nop
 8013e6e:	bf00      	nop
 8013e70:	3708      	adds	r7, #8
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	24001834 	.word	0x24001834
 8013e7c:	24001860 	.word	0x24001860
 8013e80:	24001848 	.word	0x24001848

08013e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d108      	bne.n	8013ea8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f000 ffc0 	bl	8014e20 <vPortFree>
				vPortFree( pxTCB );
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f000 ffbd 	bl	8014e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ea6:	e018      	b.n	8013eda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d103      	bne.n	8013eba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 ffb4 	bl	8014e20 <vPortFree>
	}
 8013eb8:	e00f      	b.n	8013eda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013ec0:	2b02      	cmp	r3, #2
 8013ec2:	d00a      	beq.n	8013eda <prvDeleteTCB+0x56>
	__asm volatile
 8013ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec8:	f383 8811 	msr	BASEPRI, r3
 8013ecc:	f3bf 8f6f 	isb	sy
 8013ed0:	f3bf 8f4f 	dsb	sy
 8013ed4:	60fb      	str	r3, [r7, #12]
}
 8013ed6:	bf00      	nop
 8013ed8:	e7fe      	b.n	8013ed8 <prvDeleteTCB+0x54>
	}
 8013eda:	bf00      	nop
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
	...

08013ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013eea:	4b0c      	ldr	r3, [pc, #48]	; (8013f1c <prvResetNextTaskUnblockTime+0x38>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d104      	bne.n	8013efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013ef4:	4b0a      	ldr	r3, [pc, #40]	; (8013f20 <prvResetNextTaskUnblockTime+0x3c>)
 8013ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013efc:	e008      	b.n	8013f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013efe:	4b07      	ldr	r3, [pc, #28]	; (8013f1c <prvResetNextTaskUnblockTime+0x38>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	685b      	ldr	r3, [r3, #4]
 8013f0c:	4a04      	ldr	r2, [pc, #16]	; (8013f20 <prvResetNextTaskUnblockTime+0x3c>)
 8013f0e:	6013      	str	r3, [r2, #0]
}
 8013f10:	bf00      	nop
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr
 8013f1c:	24001818 	.word	0x24001818
 8013f20:	24001880 	.word	0x24001880

08013f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f24:	b480      	push	{r7}
 8013f26:	b083      	sub	sp, #12
 8013f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f2a:	4b0b      	ldr	r3, [pc, #44]	; (8013f58 <xTaskGetSchedulerState+0x34>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d102      	bne.n	8013f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013f32:	2301      	movs	r3, #1
 8013f34:	607b      	str	r3, [r7, #4]
 8013f36:	e008      	b.n	8013f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f38:	4b08      	ldr	r3, [pc, #32]	; (8013f5c <xTaskGetSchedulerState+0x38>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d102      	bne.n	8013f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013f40:	2302      	movs	r3, #2
 8013f42:	607b      	str	r3, [r7, #4]
 8013f44:	e001      	b.n	8013f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013f46:	2300      	movs	r3, #0
 8013f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013f4a:	687b      	ldr	r3, [r7, #4]
	}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr
 8013f58:	2400186c 	.word	0x2400186c
 8013f5c:	24001888 	.word	0x24001888

08013f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b086      	sub	sp, #24
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d056      	beq.n	8014024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013f76:	4b2e      	ldr	r3, [pc, #184]	; (8014030 <xTaskPriorityDisinherit+0xd0>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	693a      	ldr	r2, [r7, #16]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d00a      	beq.n	8013f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f84:	f383 8811 	msr	BASEPRI, r3
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	60fb      	str	r3, [r7, #12]
}
 8013f92:	bf00      	nop
 8013f94:	e7fe      	b.n	8013f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d10a      	bne.n	8013fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa2:	f383 8811 	msr	BASEPRI, r3
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	60bb      	str	r3, [r7, #8]
}
 8013fb0:	bf00      	nop
 8013fb2:	e7fe      	b.n	8013fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fb8:	1e5a      	subs	r2, r3, #1
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d02c      	beq.n	8014024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d128      	bne.n	8014024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	3304      	adds	r3, #4
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fe fad4 	bl	8012584 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff4:	4b0f      	ldr	r3, [pc, #60]	; (8014034 <xTaskPriorityDisinherit+0xd4>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d903      	bls.n	8014004 <xTaskPriorityDisinherit+0xa4>
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014000:	4a0c      	ldr	r2, [pc, #48]	; (8014034 <xTaskPriorityDisinherit+0xd4>)
 8014002:	6013      	str	r3, [r2, #0]
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014008:	4613      	mov	r3, r2
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	4413      	add	r3, r2
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	4a09      	ldr	r2, [pc, #36]	; (8014038 <xTaskPriorityDisinherit+0xd8>)
 8014012:	441a      	add	r2, r3
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	3304      	adds	r3, #4
 8014018:	4619      	mov	r1, r3
 801401a:	4610      	mov	r0, r2
 801401c:	f7fe fa55 	bl	80124ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014020:	2301      	movs	r3, #1
 8014022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014024:	697b      	ldr	r3, [r7, #20]
	}
 8014026:	4618      	mov	r0, r3
 8014028:	3718      	adds	r7, #24
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	2400138c 	.word	0x2400138c
 8014034:	24001868 	.word	0x24001868
 8014038:	24001390 	.word	0x24001390

0801403c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801403c:	b480      	push	{r7}
 801403e:	b083      	sub	sp, #12
 8014040:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014042:	4b09      	ldr	r3, [pc, #36]	; (8014068 <uxTaskResetEventItemValue+0x2c>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	699b      	ldr	r3, [r3, #24]
 8014048:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801404a:	4b07      	ldr	r3, [pc, #28]	; (8014068 <uxTaskResetEventItemValue+0x2c>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014050:	4b05      	ldr	r3, [pc, #20]	; (8014068 <uxTaskResetEventItemValue+0x2c>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014058:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801405a:	687b      	ldr	r3, [r7, #4]
}
 801405c:	4618      	mov	r0, r3
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr
 8014068:	2400138c 	.word	0x2400138c

0801406c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014076:	4b21      	ldr	r3, [pc, #132]	; (80140fc <prvAddCurrentTaskToDelayedList+0x90>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801407c:	4b20      	ldr	r3, [pc, #128]	; (8014100 <prvAddCurrentTaskToDelayedList+0x94>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	3304      	adds	r3, #4
 8014082:	4618      	mov	r0, r3
 8014084:	f7fe fa7e 	bl	8012584 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801408e:	d10a      	bne.n	80140a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d007      	beq.n	80140a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014096:	4b1a      	ldr	r3, [pc, #104]	; (8014100 <prvAddCurrentTaskToDelayedList+0x94>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	3304      	adds	r3, #4
 801409c:	4619      	mov	r1, r3
 801409e:	4819      	ldr	r0, [pc, #100]	; (8014104 <prvAddCurrentTaskToDelayedList+0x98>)
 80140a0:	f7fe fa13 	bl	80124ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80140a4:	e026      	b.n	80140f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80140a6:	68fa      	ldr	r2, [r7, #12]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	4413      	add	r3, r2
 80140ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80140ae:	4b14      	ldr	r3, [pc, #80]	; (8014100 <prvAddCurrentTaskToDelayedList+0x94>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	68ba      	ldr	r2, [r7, #8]
 80140b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80140b6:	68ba      	ldr	r2, [r7, #8]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d209      	bcs.n	80140d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140be:	4b12      	ldr	r3, [pc, #72]	; (8014108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	4b0f      	ldr	r3, [pc, #60]	; (8014100 <prvAddCurrentTaskToDelayedList+0x94>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	3304      	adds	r3, #4
 80140c8:	4619      	mov	r1, r3
 80140ca:	4610      	mov	r0, r2
 80140cc:	f7fe fa21 	bl	8012512 <vListInsert>
}
 80140d0:	e010      	b.n	80140f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140d2:	4b0e      	ldr	r3, [pc, #56]	; (801410c <prvAddCurrentTaskToDelayedList+0xa0>)
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <prvAddCurrentTaskToDelayedList+0x94>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	3304      	adds	r3, #4
 80140dc:	4619      	mov	r1, r3
 80140de:	4610      	mov	r0, r2
 80140e0:	f7fe fa17 	bl	8012512 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80140e4:	4b0a      	ldr	r3, [pc, #40]	; (8014110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	68ba      	ldr	r2, [r7, #8]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d202      	bcs.n	80140f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80140ee:	4a08      	ldr	r2, [pc, #32]	; (8014110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	6013      	str	r3, [r2, #0]
}
 80140f4:	bf00      	nop
 80140f6:	3710      	adds	r7, #16
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	24001864 	.word	0x24001864
 8014100:	2400138c 	.word	0x2400138c
 8014104:	2400184c 	.word	0x2400184c
 8014108:	2400181c 	.word	0x2400181c
 801410c:	24001818 	.word	0x24001818
 8014110:	24001880 	.word	0x24001880

08014114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b08a      	sub	sp, #40	; 0x28
 8014118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801411a:	2300      	movs	r3, #0
 801411c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801411e:	f000 fb07 	bl	8014730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014122:	4b1c      	ldr	r3, [pc, #112]	; (8014194 <xTimerCreateTimerTask+0x80>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d021      	beq.n	801416e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801412a:	2300      	movs	r3, #0
 801412c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801412e:	2300      	movs	r3, #0
 8014130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014132:	1d3a      	adds	r2, r7, #4
 8014134:	f107 0108 	add.w	r1, r7, #8
 8014138:	f107 030c 	add.w	r3, r7, #12
 801413c:	4618      	mov	r0, r3
 801413e:	f7fd ff8f 	bl	8012060 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014142:	6879      	ldr	r1, [r7, #4]
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	68fa      	ldr	r2, [r7, #12]
 8014148:	9202      	str	r2, [sp, #8]
 801414a:	9301      	str	r3, [sp, #4]
 801414c:	2302      	movs	r3, #2
 801414e:	9300      	str	r3, [sp, #0]
 8014150:	2300      	movs	r3, #0
 8014152:	460a      	mov	r2, r1
 8014154:	4910      	ldr	r1, [pc, #64]	; (8014198 <xTimerCreateTimerTask+0x84>)
 8014156:	4811      	ldr	r0, [pc, #68]	; (801419c <xTimerCreateTimerTask+0x88>)
 8014158:	f7ff f820 	bl	801319c <xTaskCreateStatic>
 801415c:	4603      	mov	r3, r0
 801415e:	4a10      	ldr	r2, [pc, #64]	; (80141a0 <xTimerCreateTimerTask+0x8c>)
 8014160:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014162:	4b0f      	ldr	r3, [pc, #60]	; (80141a0 <xTimerCreateTimerTask+0x8c>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801416a:	2301      	movs	r3, #1
 801416c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10a      	bne.n	801418a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014178:	f383 8811 	msr	BASEPRI, r3
 801417c:	f3bf 8f6f 	isb	sy
 8014180:	f3bf 8f4f 	dsb	sy
 8014184:	613b      	str	r3, [r7, #16]
}
 8014186:	bf00      	nop
 8014188:	e7fe      	b.n	8014188 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801418a:	697b      	ldr	r3, [r7, #20]
}
 801418c:	4618      	mov	r0, r3
 801418e:	3718      	adds	r7, #24
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	240018bc 	.word	0x240018bc
 8014198:	08015d40 	.word	0x08015d40
 801419c:	080142d9 	.word	0x080142d9
 80141a0:	240018c0 	.word	0x240018c0

080141a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b08a      	sub	sp, #40	; 0x28
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	607a      	str	r2, [r7, #4]
 80141b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80141b2:	2300      	movs	r3, #0
 80141b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d10a      	bne.n	80141d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80141bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c0:	f383 8811 	msr	BASEPRI, r3
 80141c4:	f3bf 8f6f 	isb	sy
 80141c8:	f3bf 8f4f 	dsb	sy
 80141cc:	623b      	str	r3, [r7, #32]
}
 80141ce:	bf00      	nop
 80141d0:	e7fe      	b.n	80141d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80141d2:	4b1a      	ldr	r3, [pc, #104]	; (801423c <xTimerGenericCommand+0x98>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d02a      	beq.n	8014230 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	2b05      	cmp	r3, #5
 80141ea:	dc18      	bgt.n	801421e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80141ec:	f7ff fe9a 	bl	8013f24 <xTaskGetSchedulerState>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2b02      	cmp	r3, #2
 80141f4:	d109      	bne.n	801420a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80141f6:	4b11      	ldr	r3, [pc, #68]	; (801423c <xTimerGenericCommand+0x98>)
 80141f8:	6818      	ldr	r0, [r3, #0]
 80141fa:	f107 0110 	add.w	r1, r7, #16
 80141fe:	2300      	movs	r3, #0
 8014200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014202:	f7fe fb27 	bl	8012854 <xQueueGenericSend>
 8014206:	6278      	str	r0, [r7, #36]	; 0x24
 8014208:	e012      	b.n	8014230 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801420a:	4b0c      	ldr	r3, [pc, #48]	; (801423c <xTimerGenericCommand+0x98>)
 801420c:	6818      	ldr	r0, [r3, #0]
 801420e:	f107 0110 	add.w	r1, r7, #16
 8014212:	2300      	movs	r3, #0
 8014214:	2200      	movs	r2, #0
 8014216:	f7fe fb1d 	bl	8012854 <xQueueGenericSend>
 801421a:	6278      	str	r0, [r7, #36]	; 0x24
 801421c:	e008      	b.n	8014230 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801421e:	4b07      	ldr	r3, [pc, #28]	; (801423c <xTimerGenericCommand+0x98>)
 8014220:	6818      	ldr	r0, [r3, #0]
 8014222:	f107 0110 	add.w	r1, r7, #16
 8014226:	2300      	movs	r3, #0
 8014228:	683a      	ldr	r2, [r7, #0]
 801422a:	f7fe fc11 	bl	8012a50 <xQueueGenericSendFromISR>
 801422e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014232:	4618      	mov	r0, r3
 8014234:	3728      	adds	r7, #40	; 0x28
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	240018bc 	.word	0x240018bc

08014240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b088      	sub	sp, #32
 8014244:	af02      	add	r7, sp, #8
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801424a:	4b22      	ldr	r3, [pc, #136]	; (80142d4 <prvProcessExpiredTimer+0x94>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	68db      	ldr	r3, [r3, #12]
 8014250:	68db      	ldr	r3, [r3, #12]
 8014252:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	3304      	adds	r3, #4
 8014258:	4618      	mov	r0, r3
 801425a:	f7fe f993 	bl	8012584 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014264:	f003 0304 	and.w	r3, r3, #4
 8014268:	2b00      	cmp	r3, #0
 801426a:	d022      	beq.n	80142b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	699a      	ldr	r2, [r3, #24]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	18d1      	adds	r1, r2, r3
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	683a      	ldr	r2, [r7, #0]
 8014278:	6978      	ldr	r0, [r7, #20]
 801427a:	f000 f8d1 	bl	8014420 <prvInsertTimerInActiveList>
 801427e:	4603      	mov	r3, r0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d01f      	beq.n	80142c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014284:	2300      	movs	r3, #0
 8014286:	9300      	str	r3, [sp, #0]
 8014288:	2300      	movs	r3, #0
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	2100      	movs	r1, #0
 801428e:	6978      	ldr	r0, [r7, #20]
 8014290:	f7ff ff88 	bl	80141a4 <xTimerGenericCommand>
 8014294:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d113      	bne.n	80142c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a0:	f383 8811 	msr	BASEPRI, r3
 80142a4:	f3bf 8f6f 	isb	sy
 80142a8:	f3bf 8f4f 	dsb	sy
 80142ac:	60fb      	str	r3, [r7, #12]
}
 80142ae:	bf00      	nop
 80142b0:	e7fe      	b.n	80142b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80142b8:	f023 0301 	bic.w	r3, r3, #1
 80142bc:	b2da      	uxtb	r2, r3
 80142be:	697b      	ldr	r3, [r7, #20]
 80142c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	6a1b      	ldr	r3, [r3, #32]
 80142c8:	6978      	ldr	r0, [r7, #20]
 80142ca:	4798      	blx	r3
}
 80142cc:	bf00      	nop
 80142ce:	3718      	adds	r7, #24
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	240018b4 	.word	0x240018b4

080142d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80142e0:	f107 0308 	add.w	r3, r7, #8
 80142e4:	4618      	mov	r0, r3
 80142e6:	f000 f857 	bl	8014398 <prvGetNextExpireTime>
 80142ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	4619      	mov	r1, r3
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	f000 f803 	bl	80142fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80142f6:	f000 f8d5 	bl	80144a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80142fa:	e7f1      	b.n	80142e0 <prvTimerTask+0x8>

080142fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014306:	f7ff f985 	bl	8013614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801430a:	f107 0308 	add.w	r3, r7, #8
 801430e:	4618      	mov	r0, r3
 8014310:	f000 f866 	bl	80143e0 <prvSampleTimeNow>
 8014314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d130      	bne.n	801437e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10a      	bne.n	8014338 <prvProcessTimerOrBlockTask+0x3c>
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	429a      	cmp	r2, r3
 8014328:	d806      	bhi.n	8014338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801432a:	f7ff f981 	bl	8013630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801432e:	68f9      	ldr	r1, [r7, #12]
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f7ff ff85 	bl	8014240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014336:	e024      	b.n	8014382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d008      	beq.n	8014350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801433e:	4b13      	ldr	r3, [pc, #76]	; (801438c <prvProcessTimerOrBlockTask+0x90>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <prvProcessTimerOrBlockTask+0x50>
 8014348:	2301      	movs	r3, #1
 801434a:	e000      	b.n	801434e <prvProcessTimerOrBlockTask+0x52>
 801434c:	2300      	movs	r3, #0
 801434e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014350:	4b0f      	ldr	r3, [pc, #60]	; (8014390 <prvProcessTimerOrBlockTask+0x94>)
 8014352:	6818      	ldr	r0, [r3, #0]
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	1ad3      	subs	r3, r2, r3
 801435a:	683a      	ldr	r2, [r7, #0]
 801435c:	4619      	mov	r1, r3
 801435e:	f7fe fee9 	bl	8013134 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014362:	f7ff f965 	bl	8013630 <xTaskResumeAll>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10a      	bne.n	8014382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801436c:	4b09      	ldr	r3, [pc, #36]	; (8014394 <prvProcessTimerOrBlockTask+0x98>)
 801436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014372:	601a      	str	r2, [r3, #0]
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	f3bf 8f6f 	isb	sy
}
 801437c:	e001      	b.n	8014382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801437e:	f7ff f957 	bl	8013630 <xTaskResumeAll>
}
 8014382:	bf00      	nop
 8014384:	3710      	adds	r7, #16
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	240018b8 	.word	0x240018b8
 8014390:	240018bc 	.word	0x240018bc
 8014394:	e000ed04 	.word	0xe000ed04

08014398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014398:	b480      	push	{r7}
 801439a:	b085      	sub	sp, #20
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80143a0:	4b0e      	ldr	r3, [pc, #56]	; (80143dc <prvGetNextExpireTime+0x44>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d101      	bne.n	80143ae <prvGetNextExpireTime+0x16>
 80143aa:	2201      	movs	r2, #1
 80143ac:	e000      	b.n	80143b0 <prvGetNextExpireTime+0x18>
 80143ae:	2200      	movs	r2, #0
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d105      	bne.n	80143c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80143bc:	4b07      	ldr	r3, [pc, #28]	; (80143dc <prvGetNextExpireTime+0x44>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	60fb      	str	r3, [r7, #12]
 80143c6:	e001      	b.n	80143cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80143c8:	2300      	movs	r3, #0
 80143ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80143cc:	68fb      	ldr	r3, [r7, #12]
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3714      	adds	r7, #20
 80143d2:	46bd      	mov	sp, r7
 80143d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop
 80143dc:	240018b4 	.word	0x240018b4

080143e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80143e8:	f7ff f9c0 	bl	801376c <xTaskGetTickCount>
 80143ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80143ee:	4b0b      	ldr	r3, [pc, #44]	; (801441c <prvSampleTimeNow+0x3c>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	68fa      	ldr	r2, [r7, #12]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d205      	bcs.n	8014404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80143f8:	f000 f936 	bl	8014668 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2201      	movs	r2, #1
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	e002      	b.n	801440a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2200      	movs	r2, #0
 8014408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801440a:	4a04      	ldr	r2, [pc, #16]	; (801441c <prvSampleTimeNow+0x3c>)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014410:	68fb      	ldr	r3, [r7, #12]
}
 8014412:	4618      	mov	r0, r3
 8014414:	3710      	adds	r7, #16
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	240018c4 	.word	0x240018c4

08014420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b086      	sub	sp, #24
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
 801442c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801442e:	2300      	movs	r3, #0
 8014430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	68ba      	ldr	r2, [r7, #8]
 8014436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801443e:	68ba      	ldr	r2, [r7, #8]
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	429a      	cmp	r2, r3
 8014444:	d812      	bhi.n	801446c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014446:	687a      	ldr	r2, [r7, #4]
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	1ad2      	subs	r2, r2, r3
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	699b      	ldr	r3, [r3, #24]
 8014450:	429a      	cmp	r2, r3
 8014452:	d302      	bcc.n	801445a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014454:	2301      	movs	r3, #1
 8014456:	617b      	str	r3, [r7, #20]
 8014458:	e01b      	b.n	8014492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801445a:	4b10      	ldr	r3, [pc, #64]	; (801449c <prvInsertTimerInActiveList+0x7c>)
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	3304      	adds	r3, #4
 8014462:	4619      	mov	r1, r3
 8014464:	4610      	mov	r0, r2
 8014466:	f7fe f854 	bl	8012512 <vListInsert>
 801446a:	e012      	b.n	8014492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	429a      	cmp	r2, r3
 8014472:	d206      	bcs.n	8014482 <prvInsertTimerInActiveList+0x62>
 8014474:	68ba      	ldr	r2, [r7, #8]
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	429a      	cmp	r2, r3
 801447a:	d302      	bcc.n	8014482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801447c:	2301      	movs	r3, #1
 801447e:	617b      	str	r3, [r7, #20]
 8014480:	e007      	b.n	8014492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014482:	4b07      	ldr	r3, [pc, #28]	; (80144a0 <prvInsertTimerInActiveList+0x80>)
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	3304      	adds	r3, #4
 801448a:	4619      	mov	r1, r3
 801448c:	4610      	mov	r0, r2
 801448e:	f7fe f840 	bl	8012512 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014492:	697b      	ldr	r3, [r7, #20]
}
 8014494:	4618      	mov	r0, r3
 8014496:	3718      	adds	r7, #24
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	240018b8 	.word	0x240018b8
 80144a0:	240018b4 	.word	0x240018b4

080144a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b08e      	sub	sp, #56	; 0x38
 80144a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80144aa:	e0ca      	b.n	8014642 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	da18      	bge.n	80144e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80144b2:	1d3b      	adds	r3, r7, #4
 80144b4:	3304      	adds	r3, #4
 80144b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80144b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d10a      	bne.n	80144d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80144be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c2:	f383 8811 	msr	BASEPRI, r3
 80144c6:	f3bf 8f6f 	isb	sy
 80144ca:	f3bf 8f4f 	dsb	sy
 80144ce:	61fb      	str	r3, [r7, #28]
}
 80144d0:	bf00      	nop
 80144d2:	e7fe      	b.n	80144d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80144d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144da:	6850      	ldr	r0, [r2, #4]
 80144dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144de:	6892      	ldr	r2, [r2, #8]
 80144e0:	4611      	mov	r1, r2
 80144e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f2c0 80aa 	blt.w	8014640 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80144f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f2:	695b      	ldr	r3, [r3, #20]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d004      	beq.n	8014502 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80144f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144fa:	3304      	adds	r3, #4
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7fe f841 	bl	8012584 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014502:	463b      	mov	r3, r7
 8014504:	4618      	mov	r0, r3
 8014506:	f7ff ff6b 	bl	80143e0 <prvSampleTimeNow>
 801450a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b09      	cmp	r3, #9
 8014510:	f200 8097 	bhi.w	8014642 <prvProcessReceivedCommands+0x19e>
 8014514:	a201      	add	r2, pc, #4	; (adr r2, 801451c <prvProcessReceivedCommands+0x78>)
 8014516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801451a:	bf00      	nop
 801451c:	08014545 	.word	0x08014545
 8014520:	08014545 	.word	0x08014545
 8014524:	08014545 	.word	0x08014545
 8014528:	080145b9 	.word	0x080145b9
 801452c:	080145cd 	.word	0x080145cd
 8014530:	08014617 	.word	0x08014617
 8014534:	08014545 	.word	0x08014545
 8014538:	08014545 	.word	0x08014545
 801453c:	080145b9 	.word	0x080145b9
 8014540:	080145cd 	.word	0x080145cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801454a:	f043 0301 	orr.w	r3, r3, #1
 801454e:	b2da      	uxtb	r2, r3
 8014550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014556:	68ba      	ldr	r2, [r7, #8]
 8014558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801455a:	699b      	ldr	r3, [r3, #24]
 801455c:	18d1      	adds	r1, r2, r3
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014564:	f7ff ff5c 	bl	8014420 <prvInsertTimerInActiveList>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d069      	beq.n	8014642 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014570:	6a1b      	ldr	r3, [r3, #32]
 8014572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014574:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801457c:	f003 0304 	and.w	r3, r3, #4
 8014580:	2b00      	cmp	r3, #0
 8014582:	d05e      	beq.n	8014642 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014584:	68ba      	ldr	r2, [r7, #8]
 8014586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014588:	699b      	ldr	r3, [r3, #24]
 801458a:	441a      	add	r2, r3
 801458c:	2300      	movs	r3, #0
 801458e:	9300      	str	r3, [sp, #0]
 8014590:	2300      	movs	r3, #0
 8014592:	2100      	movs	r1, #0
 8014594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014596:	f7ff fe05 	bl	80141a4 <xTimerGenericCommand>
 801459a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801459c:	6a3b      	ldr	r3, [r7, #32]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d14f      	bne.n	8014642 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80145a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a6:	f383 8811 	msr	BASEPRI, r3
 80145aa:	f3bf 8f6f 	isb	sy
 80145ae:	f3bf 8f4f 	dsb	sy
 80145b2:	61bb      	str	r3, [r7, #24]
}
 80145b4:	bf00      	nop
 80145b6:	e7fe      	b.n	80145b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80145b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145be:	f023 0301 	bic.w	r3, r3, #1
 80145c2:	b2da      	uxtb	r2, r3
 80145c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80145ca:	e03a      	b.n	8014642 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80145cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145d2:	f043 0301 	orr.w	r3, r3, #1
 80145d6:	b2da      	uxtb	r2, r3
 80145d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80145e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e6:	699b      	ldr	r3, [r3, #24]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d10a      	bne.n	8014602 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80145ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f0:	f383 8811 	msr	BASEPRI, r3
 80145f4:	f3bf 8f6f 	isb	sy
 80145f8:	f3bf 8f4f 	dsb	sy
 80145fc:	617b      	str	r3, [r7, #20]
}
 80145fe:	bf00      	nop
 8014600:	e7fe      	b.n	8014600 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014604:	699a      	ldr	r2, [r3, #24]
 8014606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014608:	18d1      	adds	r1, r2, r3
 801460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801460e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014610:	f7ff ff06 	bl	8014420 <prvInsertTimerInActiveList>
					break;
 8014614:	e015      	b.n	8014642 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801461c:	f003 0302 	and.w	r3, r3, #2
 8014620:	2b00      	cmp	r3, #0
 8014622:	d103      	bne.n	801462c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014626:	f000 fbfb 	bl	8014e20 <vPortFree>
 801462a:	e00a      	b.n	8014642 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801462e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014632:	f023 0301 	bic.w	r3, r3, #1
 8014636:	b2da      	uxtb	r2, r3
 8014638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801463a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801463e:	e000      	b.n	8014642 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014640:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014642:	4b08      	ldr	r3, [pc, #32]	; (8014664 <prvProcessReceivedCommands+0x1c0>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	1d39      	adds	r1, r7, #4
 8014648:	2200      	movs	r2, #0
 801464a:	4618      	mov	r0, r3
 801464c:	f7fe fa9c 	bl	8012b88 <xQueueReceive>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	f47f af2a 	bne.w	80144ac <prvProcessReceivedCommands+0x8>
	}
}
 8014658:	bf00      	nop
 801465a:	bf00      	nop
 801465c:	3730      	adds	r7, #48	; 0x30
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	240018bc 	.word	0x240018bc

08014668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b088      	sub	sp, #32
 801466c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801466e:	e048      	b.n	8014702 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014670:	4b2d      	ldr	r3, [pc, #180]	; (8014728 <prvSwitchTimerLists+0xc0>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	68db      	ldr	r3, [r3, #12]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801467a:	4b2b      	ldr	r3, [pc, #172]	; (8014728 <prvSwitchTimerLists+0xc0>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	3304      	adds	r3, #4
 8014688:	4618      	mov	r0, r3
 801468a:	f7fd ff7b 	bl	8012584 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	6a1b      	ldr	r3, [r3, #32]
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801469c:	f003 0304 	and.w	r3, r3, #4
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d02e      	beq.n	8014702 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	699b      	ldr	r3, [r3, #24]
 80146a8:	693a      	ldr	r2, [r7, #16]
 80146aa:	4413      	add	r3, r2
 80146ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80146ae:	68ba      	ldr	r2, [r7, #8]
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d90e      	bls.n	80146d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80146c2:	4b19      	ldr	r3, [pc, #100]	; (8014728 <prvSwitchTimerLists+0xc0>)
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	3304      	adds	r3, #4
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f7fd ff20 	bl	8012512 <vListInsert>
 80146d2:	e016      	b.n	8014702 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80146d4:	2300      	movs	r3, #0
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	2300      	movs	r3, #0
 80146da:	693a      	ldr	r2, [r7, #16]
 80146dc:	2100      	movs	r1, #0
 80146de:	68f8      	ldr	r0, [r7, #12]
 80146e0:	f7ff fd60 	bl	80141a4 <xTimerGenericCommand>
 80146e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d10a      	bne.n	8014702 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80146ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f0:	f383 8811 	msr	BASEPRI, r3
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	f3bf 8f4f 	dsb	sy
 80146fc:	603b      	str	r3, [r7, #0]
}
 80146fe:	bf00      	nop
 8014700:	e7fe      	b.n	8014700 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014702:	4b09      	ldr	r3, [pc, #36]	; (8014728 <prvSwitchTimerLists+0xc0>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d1b1      	bne.n	8014670 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801470c:	4b06      	ldr	r3, [pc, #24]	; (8014728 <prvSwitchTimerLists+0xc0>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014712:	4b06      	ldr	r3, [pc, #24]	; (801472c <prvSwitchTimerLists+0xc4>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	4a04      	ldr	r2, [pc, #16]	; (8014728 <prvSwitchTimerLists+0xc0>)
 8014718:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801471a:	4a04      	ldr	r2, [pc, #16]	; (801472c <prvSwitchTimerLists+0xc4>)
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	6013      	str	r3, [r2, #0]
}
 8014720:	bf00      	nop
 8014722:	3718      	adds	r7, #24
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}
 8014728:	240018b4 	.word	0x240018b4
 801472c:	240018b8 	.word	0x240018b8

08014730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014736:	f000 f985 	bl	8014a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801473a:	4b15      	ldr	r3, [pc, #84]	; (8014790 <prvCheckForValidListAndQueue+0x60>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d120      	bne.n	8014784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014742:	4814      	ldr	r0, [pc, #80]	; (8014794 <prvCheckForValidListAndQueue+0x64>)
 8014744:	f7fd fe94 	bl	8012470 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014748:	4813      	ldr	r0, [pc, #76]	; (8014798 <prvCheckForValidListAndQueue+0x68>)
 801474a:	f7fd fe91 	bl	8012470 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801474e:	4b13      	ldr	r3, [pc, #76]	; (801479c <prvCheckForValidListAndQueue+0x6c>)
 8014750:	4a10      	ldr	r2, [pc, #64]	; (8014794 <prvCheckForValidListAndQueue+0x64>)
 8014752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014754:	4b12      	ldr	r3, [pc, #72]	; (80147a0 <prvCheckForValidListAndQueue+0x70>)
 8014756:	4a10      	ldr	r2, [pc, #64]	; (8014798 <prvCheckForValidListAndQueue+0x68>)
 8014758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801475a:	2300      	movs	r3, #0
 801475c:	9300      	str	r3, [sp, #0]
 801475e:	4b11      	ldr	r3, [pc, #68]	; (80147a4 <prvCheckForValidListAndQueue+0x74>)
 8014760:	4a11      	ldr	r2, [pc, #68]	; (80147a8 <prvCheckForValidListAndQueue+0x78>)
 8014762:	2110      	movs	r1, #16
 8014764:	200a      	movs	r0, #10
 8014766:	f7fd ff9f 	bl	80126a8 <xQueueGenericCreateStatic>
 801476a:	4603      	mov	r3, r0
 801476c:	4a08      	ldr	r2, [pc, #32]	; (8014790 <prvCheckForValidListAndQueue+0x60>)
 801476e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014770:	4b07      	ldr	r3, [pc, #28]	; (8014790 <prvCheckForValidListAndQueue+0x60>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d005      	beq.n	8014784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014778:	4b05      	ldr	r3, [pc, #20]	; (8014790 <prvCheckForValidListAndQueue+0x60>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	490b      	ldr	r1, [pc, #44]	; (80147ac <prvCheckForValidListAndQueue+0x7c>)
 801477e:	4618      	mov	r0, r3
 8014780:	f7fe fcae 	bl	80130e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014784:	f000 f98e 	bl	8014aa4 <vPortExitCritical>
}
 8014788:	bf00      	nop
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	240018bc 	.word	0x240018bc
 8014794:	2400188c 	.word	0x2400188c
 8014798:	240018a0 	.word	0x240018a0
 801479c:	240018b4 	.word	0x240018b4
 80147a0:	240018b8 	.word	0x240018b8
 80147a4:	24001968 	.word	0x24001968
 80147a8:	240018c8 	.word	0x240018c8
 80147ac:	08015d48 	.word	0x08015d48

080147b0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b08a      	sub	sp, #40	; 0x28
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
 80147bc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80147be:	f06f 0301 	mvn.w	r3, #1
 80147c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80147d0:	4b06      	ldr	r3, [pc, #24]	; (80147ec <xTimerPendFunctionCallFromISR+0x3c>)
 80147d2:	6818      	ldr	r0, [r3, #0]
 80147d4:	f107 0114 	add.w	r1, r7, #20
 80147d8:	2300      	movs	r3, #0
 80147da:	683a      	ldr	r2, [r7, #0]
 80147dc:	f7fe f938 	bl	8012a50 <xQueueGenericSendFromISR>
 80147e0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80147e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3728      	adds	r7, #40	; 0x28
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	240018bc 	.word	0x240018bc

080147f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80147f0:	b480      	push	{r7}
 80147f2:	b085      	sub	sp, #20
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	3b04      	subs	r3, #4
 8014800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	3b04      	subs	r3, #4
 801480e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	f023 0201 	bic.w	r2, r3, #1
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	3b04      	subs	r3, #4
 801481e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014820:	4a0c      	ldr	r2, [pc, #48]	; (8014854 <pxPortInitialiseStack+0x64>)
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	3b14      	subs	r3, #20
 801482a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	3b04      	subs	r3, #4
 8014836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	f06f 0202 	mvn.w	r2, #2
 801483e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	3b20      	subs	r3, #32
 8014844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014846:	68fb      	ldr	r3, [r7, #12]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3714      	adds	r7, #20
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr
 8014854:	08014859 	.word	0x08014859

08014858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014858:	b480      	push	{r7}
 801485a:	b085      	sub	sp, #20
 801485c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801485e:	2300      	movs	r3, #0
 8014860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014862:	4b12      	ldr	r3, [pc, #72]	; (80148ac <prvTaskExitError+0x54>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801486a:	d00a      	beq.n	8014882 <prvTaskExitError+0x2a>
	__asm volatile
 801486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014870:	f383 8811 	msr	BASEPRI, r3
 8014874:	f3bf 8f6f 	isb	sy
 8014878:	f3bf 8f4f 	dsb	sy
 801487c:	60fb      	str	r3, [r7, #12]
}
 801487e:	bf00      	nop
 8014880:	e7fe      	b.n	8014880 <prvTaskExitError+0x28>
	__asm volatile
 8014882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014886:	f383 8811 	msr	BASEPRI, r3
 801488a:	f3bf 8f6f 	isb	sy
 801488e:	f3bf 8f4f 	dsb	sy
 8014892:	60bb      	str	r3, [r7, #8]
}
 8014894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014896:	bf00      	nop
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d0fc      	beq.n	8014898 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801489e:	bf00      	nop
 80148a0:	bf00      	nop
 80148a2:	3714      	adds	r7, #20
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr
 80148ac:	2400009c 	.word	0x2400009c

080148b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80148b0:	4b07      	ldr	r3, [pc, #28]	; (80148d0 <pxCurrentTCBConst2>)
 80148b2:	6819      	ldr	r1, [r3, #0]
 80148b4:	6808      	ldr	r0, [r1, #0]
 80148b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ba:	f380 8809 	msr	PSP, r0
 80148be:	f3bf 8f6f 	isb	sy
 80148c2:	f04f 0000 	mov.w	r0, #0
 80148c6:	f380 8811 	msr	BASEPRI, r0
 80148ca:	4770      	bx	lr
 80148cc:	f3af 8000 	nop.w

080148d0 <pxCurrentTCBConst2>:
 80148d0:	2400138c 	.word	0x2400138c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80148d4:	bf00      	nop
 80148d6:	bf00      	nop

080148d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80148d8:	4808      	ldr	r0, [pc, #32]	; (80148fc <prvPortStartFirstTask+0x24>)
 80148da:	6800      	ldr	r0, [r0, #0]
 80148dc:	6800      	ldr	r0, [r0, #0]
 80148de:	f380 8808 	msr	MSP, r0
 80148e2:	f04f 0000 	mov.w	r0, #0
 80148e6:	f380 8814 	msr	CONTROL, r0
 80148ea:	b662      	cpsie	i
 80148ec:	b661      	cpsie	f
 80148ee:	f3bf 8f4f 	dsb	sy
 80148f2:	f3bf 8f6f 	isb	sy
 80148f6:	df00      	svc	0
 80148f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80148fa:	bf00      	nop
 80148fc:	e000ed08 	.word	0xe000ed08

08014900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014906:	4b46      	ldr	r3, [pc, #280]	; (8014a20 <xPortStartScheduler+0x120>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4a46      	ldr	r2, [pc, #280]	; (8014a24 <xPortStartScheduler+0x124>)
 801490c:	4293      	cmp	r3, r2
 801490e:	d10a      	bne.n	8014926 <xPortStartScheduler+0x26>
	__asm volatile
 8014910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014914:	f383 8811 	msr	BASEPRI, r3
 8014918:	f3bf 8f6f 	isb	sy
 801491c:	f3bf 8f4f 	dsb	sy
 8014920:	613b      	str	r3, [r7, #16]
}
 8014922:	bf00      	nop
 8014924:	e7fe      	b.n	8014924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014926:	4b3e      	ldr	r3, [pc, #248]	; (8014a20 <xPortStartScheduler+0x120>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	4a3f      	ldr	r2, [pc, #252]	; (8014a28 <xPortStartScheduler+0x128>)
 801492c:	4293      	cmp	r3, r2
 801492e:	d10a      	bne.n	8014946 <xPortStartScheduler+0x46>
	__asm volatile
 8014930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014934:	f383 8811 	msr	BASEPRI, r3
 8014938:	f3bf 8f6f 	isb	sy
 801493c:	f3bf 8f4f 	dsb	sy
 8014940:	60fb      	str	r3, [r7, #12]
}
 8014942:	bf00      	nop
 8014944:	e7fe      	b.n	8014944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014946:	4b39      	ldr	r3, [pc, #228]	; (8014a2c <xPortStartScheduler+0x12c>)
 8014948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	b2db      	uxtb	r3, r3
 8014950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	22ff      	movs	r2, #255	; 0xff
 8014956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	b2db      	uxtb	r3, r3
 801495e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014960:	78fb      	ldrb	r3, [r7, #3]
 8014962:	b2db      	uxtb	r3, r3
 8014964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014968:	b2da      	uxtb	r2, r3
 801496a:	4b31      	ldr	r3, [pc, #196]	; (8014a30 <xPortStartScheduler+0x130>)
 801496c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801496e:	4b31      	ldr	r3, [pc, #196]	; (8014a34 <xPortStartScheduler+0x134>)
 8014970:	2207      	movs	r2, #7
 8014972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014974:	e009      	b.n	801498a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014976:	4b2f      	ldr	r3, [pc, #188]	; (8014a34 <xPortStartScheduler+0x134>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	3b01      	subs	r3, #1
 801497c:	4a2d      	ldr	r2, [pc, #180]	; (8014a34 <xPortStartScheduler+0x134>)
 801497e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014980:	78fb      	ldrb	r3, [r7, #3]
 8014982:	b2db      	uxtb	r3, r3
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	b2db      	uxtb	r3, r3
 8014988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801498a:	78fb      	ldrb	r3, [r7, #3]
 801498c:	b2db      	uxtb	r3, r3
 801498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014992:	2b80      	cmp	r3, #128	; 0x80
 8014994:	d0ef      	beq.n	8014976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014996:	4b27      	ldr	r3, [pc, #156]	; (8014a34 <xPortStartScheduler+0x134>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f1c3 0307 	rsb	r3, r3, #7
 801499e:	2b04      	cmp	r3, #4
 80149a0:	d00a      	beq.n	80149b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80149a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a6:	f383 8811 	msr	BASEPRI, r3
 80149aa:	f3bf 8f6f 	isb	sy
 80149ae:	f3bf 8f4f 	dsb	sy
 80149b2:	60bb      	str	r3, [r7, #8]
}
 80149b4:	bf00      	nop
 80149b6:	e7fe      	b.n	80149b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80149b8:	4b1e      	ldr	r3, [pc, #120]	; (8014a34 <xPortStartScheduler+0x134>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	021b      	lsls	r3, r3, #8
 80149be:	4a1d      	ldr	r2, [pc, #116]	; (8014a34 <xPortStartScheduler+0x134>)
 80149c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80149c2:	4b1c      	ldr	r3, [pc, #112]	; (8014a34 <xPortStartScheduler+0x134>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80149ca:	4a1a      	ldr	r2, [pc, #104]	; (8014a34 <xPortStartScheduler+0x134>)
 80149cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	b2da      	uxtb	r2, r3
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80149d6:	4b18      	ldr	r3, [pc, #96]	; (8014a38 <xPortStartScheduler+0x138>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4a17      	ldr	r2, [pc, #92]	; (8014a38 <xPortStartScheduler+0x138>)
 80149dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80149e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80149e2:	4b15      	ldr	r3, [pc, #84]	; (8014a38 <xPortStartScheduler+0x138>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	4a14      	ldr	r2, [pc, #80]	; (8014a38 <xPortStartScheduler+0x138>)
 80149e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80149ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80149ee:	f000 f8dd 	bl	8014bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80149f2:	4b12      	ldr	r3, [pc, #72]	; (8014a3c <xPortStartScheduler+0x13c>)
 80149f4:	2200      	movs	r2, #0
 80149f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80149f8:	f000 f8fc 	bl	8014bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80149fc:	4b10      	ldr	r3, [pc, #64]	; (8014a40 <xPortStartScheduler+0x140>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	4a0f      	ldr	r2, [pc, #60]	; (8014a40 <xPortStartScheduler+0x140>)
 8014a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014a08:	f7ff ff66 	bl	80148d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014a0c:	f7fe ff80 	bl	8013910 <vTaskSwitchContext>
	prvTaskExitError();
 8014a10:	f7ff ff22 	bl	8014858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014a14:	2300      	movs	r3, #0
}
 8014a16:	4618      	mov	r0, r3
 8014a18:	3718      	adds	r7, #24
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	e000ed00 	.word	0xe000ed00
 8014a24:	410fc271 	.word	0x410fc271
 8014a28:	410fc270 	.word	0x410fc270
 8014a2c:	e000e400 	.word	0xe000e400
 8014a30:	240019b8 	.word	0x240019b8
 8014a34:	240019bc 	.word	0x240019bc
 8014a38:	e000ed20 	.word	0xe000ed20
 8014a3c:	2400009c 	.word	0x2400009c
 8014a40:	e000ef34 	.word	0xe000ef34

08014a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014a44:	b480      	push	{r7}
 8014a46:	b083      	sub	sp, #12
 8014a48:	af00      	add	r7, sp, #0
	__asm volatile
 8014a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4e:	f383 8811 	msr	BASEPRI, r3
 8014a52:	f3bf 8f6f 	isb	sy
 8014a56:	f3bf 8f4f 	dsb	sy
 8014a5a:	607b      	str	r3, [r7, #4]
}
 8014a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014a5e:	4b0f      	ldr	r3, [pc, #60]	; (8014a9c <vPortEnterCritical+0x58>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	3301      	adds	r3, #1
 8014a64:	4a0d      	ldr	r2, [pc, #52]	; (8014a9c <vPortEnterCritical+0x58>)
 8014a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014a68:	4b0c      	ldr	r3, [pc, #48]	; (8014a9c <vPortEnterCritical+0x58>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d10f      	bne.n	8014a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014a70:	4b0b      	ldr	r3, [pc, #44]	; (8014aa0 <vPortEnterCritical+0x5c>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	b2db      	uxtb	r3, r3
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d00a      	beq.n	8014a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8014a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7e:	f383 8811 	msr	BASEPRI, r3
 8014a82:	f3bf 8f6f 	isb	sy
 8014a86:	f3bf 8f4f 	dsb	sy
 8014a8a:	603b      	str	r3, [r7, #0]
}
 8014a8c:	bf00      	nop
 8014a8e:	e7fe      	b.n	8014a8e <vPortEnterCritical+0x4a>
	}
}
 8014a90:	bf00      	nop
 8014a92:	370c      	adds	r7, #12
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr
 8014a9c:	2400009c 	.word	0x2400009c
 8014aa0:	e000ed04 	.word	0xe000ed04

08014aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014aaa:	4b12      	ldr	r3, [pc, #72]	; (8014af4 <vPortExitCritical+0x50>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d10a      	bne.n	8014ac8 <vPortExitCritical+0x24>
	__asm volatile
 8014ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab6:	f383 8811 	msr	BASEPRI, r3
 8014aba:	f3bf 8f6f 	isb	sy
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	607b      	str	r3, [r7, #4]
}
 8014ac4:	bf00      	nop
 8014ac6:	e7fe      	b.n	8014ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014ac8:	4b0a      	ldr	r3, [pc, #40]	; (8014af4 <vPortExitCritical+0x50>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	3b01      	subs	r3, #1
 8014ace:	4a09      	ldr	r2, [pc, #36]	; (8014af4 <vPortExitCritical+0x50>)
 8014ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014ad2:	4b08      	ldr	r3, [pc, #32]	; (8014af4 <vPortExitCritical+0x50>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d105      	bne.n	8014ae6 <vPortExitCritical+0x42>
 8014ada:	2300      	movs	r3, #0
 8014adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	f383 8811 	msr	BASEPRI, r3
}
 8014ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014ae6:	bf00      	nop
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	2400009c 	.word	0x2400009c
	...

08014b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014b00:	f3ef 8009 	mrs	r0, PSP
 8014b04:	f3bf 8f6f 	isb	sy
 8014b08:	4b15      	ldr	r3, [pc, #84]	; (8014b60 <pxCurrentTCBConst>)
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	f01e 0f10 	tst.w	lr, #16
 8014b10:	bf08      	it	eq
 8014b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1a:	6010      	str	r0, [r2, #0]
 8014b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014b24:	f380 8811 	msr	BASEPRI, r0
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	f3bf 8f6f 	isb	sy
 8014b30:	f7fe feee 	bl	8013910 <vTaskSwitchContext>
 8014b34:	f04f 0000 	mov.w	r0, #0
 8014b38:	f380 8811 	msr	BASEPRI, r0
 8014b3c:	bc09      	pop	{r0, r3}
 8014b3e:	6819      	ldr	r1, [r3, #0]
 8014b40:	6808      	ldr	r0, [r1, #0]
 8014b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b46:	f01e 0f10 	tst.w	lr, #16
 8014b4a:	bf08      	it	eq
 8014b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014b50:	f380 8809 	msr	PSP, r0
 8014b54:	f3bf 8f6f 	isb	sy
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	f3af 8000 	nop.w

08014b60 <pxCurrentTCBConst>:
 8014b60:	2400138c 	.word	0x2400138c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014b64:	bf00      	nop
 8014b66:	bf00      	nop

08014b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8014b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b72:	f383 8811 	msr	BASEPRI, r3
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	f3bf 8f4f 	dsb	sy
 8014b7e:	607b      	str	r3, [r7, #4]
}
 8014b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014b82:	f7fe fe03 	bl	801378c <xTaskIncrementTick>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d003      	beq.n	8014b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014b8c:	4b06      	ldr	r3, [pc, #24]	; (8014ba8 <xPortSysTickHandler+0x40>)
 8014b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b92:	601a      	str	r2, [r3, #0]
 8014b94:	2300      	movs	r3, #0
 8014b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	f383 8811 	msr	BASEPRI, r3
}
 8014b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ba0:	bf00      	nop
 8014ba2:	3708      	adds	r7, #8
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	e000ed04 	.word	0xe000ed04

08014bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014bac:	b480      	push	{r7}
 8014bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014bb0:	4b0b      	ldr	r3, [pc, #44]	; (8014be0 <vPortSetupTimerInterrupt+0x34>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014bb6:	4b0b      	ldr	r3, [pc, #44]	; (8014be4 <vPortSetupTimerInterrupt+0x38>)
 8014bb8:	2200      	movs	r2, #0
 8014bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014bbc:	4b0a      	ldr	r3, [pc, #40]	; (8014be8 <vPortSetupTimerInterrupt+0x3c>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	4a0a      	ldr	r2, [pc, #40]	; (8014bec <vPortSetupTimerInterrupt+0x40>)
 8014bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8014bc6:	099b      	lsrs	r3, r3, #6
 8014bc8:	4a09      	ldr	r2, [pc, #36]	; (8014bf0 <vPortSetupTimerInterrupt+0x44>)
 8014bca:	3b01      	subs	r3, #1
 8014bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014bce:	4b04      	ldr	r3, [pc, #16]	; (8014be0 <vPortSetupTimerInterrupt+0x34>)
 8014bd0:	2207      	movs	r2, #7
 8014bd2:	601a      	str	r2, [r3, #0]
}
 8014bd4:	bf00      	nop
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	e000e010 	.word	0xe000e010
 8014be4:	e000e018 	.word	0xe000e018
 8014be8:	2400008c 	.word	0x2400008c
 8014bec:	10624dd3 	.word	0x10624dd3
 8014bf0:	e000e014 	.word	0xe000e014

08014bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014c04 <vPortEnableVFP+0x10>
 8014bf8:	6801      	ldr	r1, [r0, #0]
 8014bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014bfe:	6001      	str	r1, [r0, #0]
 8014c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014c02:	bf00      	nop
 8014c04:	e000ed88 	.word	0xe000ed88

08014c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014c0e:	f3ef 8305 	mrs	r3, IPSR
 8014c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2b0f      	cmp	r3, #15
 8014c18:	d914      	bls.n	8014c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014c1a:	4a17      	ldr	r2, [pc, #92]	; (8014c78 <vPortValidateInterruptPriority+0x70>)
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	4413      	add	r3, r2
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014c24:	4b15      	ldr	r3, [pc, #84]	; (8014c7c <vPortValidateInterruptPriority+0x74>)
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	7afa      	ldrb	r2, [r7, #11]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d20a      	bcs.n	8014c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c32:	f383 8811 	msr	BASEPRI, r3
 8014c36:	f3bf 8f6f 	isb	sy
 8014c3a:	f3bf 8f4f 	dsb	sy
 8014c3e:	607b      	str	r3, [r7, #4]
}
 8014c40:	bf00      	nop
 8014c42:	e7fe      	b.n	8014c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014c44:	4b0e      	ldr	r3, [pc, #56]	; (8014c80 <vPortValidateInterruptPriority+0x78>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014c4c:	4b0d      	ldr	r3, [pc, #52]	; (8014c84 <vPortValidateInterruptPriority+0x7c>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d90a      	bls.n	8014c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c58:	f383 8811 	msr	BASEPRI, r3
 8014c5c:	f3bf 8f6f 	isb	sy
 8014c60:	f3bf 8f4f 	dsb	sy
 8014c64:	603b      	str	r3, [r7, #0]
}
 8014c66:	bf00      	nop
 8014c68:	e7fe      	b.n	8014c68 <vPortValidateInterruptPriority+0x60>
	}
 8014c6a:	bf00      	nop
 8014c6c:	3714      	adds	r7, #20
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr
 8014c76:	bf00      	nop
 8014c78:	e000e3f0 	.word	0xe000e3f0
 8014c7c:	240019b8 	.word	0x240019b8
 8014c80:	e000ed0c 	.word	0xe000ed0c
 8014c84:	240019bc 	.word	0x240019bc

08014c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b08a      	sub	sp, #40	; 0x28
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014c90:	2300      	movs	r3, #0
 8014c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014c94:	f7fe fcbe 	bl	8013614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014c98:	4b5b      	ldr	r3, [pc, #364]	; (8014e08 <pvPortMalloc+0x180>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d101      	bne.n	8014ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ca0:	f000 f920 	bl	8014ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014ca4:	4b59      	ldr	r3, [pc, #356]	; (8014e0c <pvPortMalloc+0x184>)
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4013      	ands	r3, r2
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f040 8093 	bne.w	8014dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d01d      	beq.n	8014cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014cb8:	2208      	movs	r2, #8
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f003 0307 	and.w	r3, r3, #7
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d014      	beq.n	8014cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f023 0307 	bic.w	r3, r3, #7
 8014cd0:	3308      	adds	r3, #8
 8014cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f003 0307 	and.w	r3, r3, #7
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d00a      	beq.n	8014cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8014cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce2:	f383 8811 	msr	BASEPRI, r3
 8014ce6:	f3bf 8f6f 	isb	sy
 8014cea:	f3bf 8f4f 	dsb	sy
 8014cee:	617b      	str	r3, [r7, #20]
}
 8014cf0:	bf00      	nop
 8014cf2:	e7fe      	b.n	8014cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d06e      	beq.n	8014dd8 <pvPortMalloc+0x150>
 8014cfa:	4b45      	ldr	r3, [pc, #276]	; (8014e10 <pvPortMalloc+0x188>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	687a      	ldr	r2, [r7, #4]
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d869      	bhi.n	8014dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014d04:	4b43      	ldr	r3, [pc, #268]	; (8014e14 <pvPortMalloc+0x18c>)
 8014d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014d08:	4b42      	ldr	r3, [pc, #264]	; (8014e14 <pvPortMalloc+0x18c>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d0e:	e004      	b.n	8014d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	429a      	cmp	r2, r3
 8014d22:	d903      	bls.n	8014d2c <pvPortMalloc+0xa4>
 8014d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d1f1      	bne.n	8014d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014d2c:	4b36      	ldr	r3, [pc, #216]	; (8014e08 <pvPortMalloc+0x180>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d32:	429a      	cmp	r2, r3
 8014d34:	d050      	beq.n	8014dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014d36:	6a3b      	ldr	r3, [r7, #32]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2208      	movs	r2, #8
 8014d3c:	4413      	add	r3, r2
 8014d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	6a3b      	ldr	r3, [r7, #32]
 8014d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4a:	685a      	ldr	r2, [r3, #4]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	1ad2      	subs	r2, r2, r3
 8014d50:	2308      	movs	r3, #8
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d91f      	bls.n	8014d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d60:	69bb      	ldr	r3, [r7, #24]
 8014d62:	f003 0307 	and.w	r3, r3, #7
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00a      	beq.n	8014d80 <pvPortMalloc+0xf8>
	__asm volatile
 8014d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d6e:	f383 8811 	msr	BASEPRI, r3
 8014d72:	f3bf 8f6f 	isb	sy
 8014d76:	f3bf 8f4f 	dsb	sy
 8014d7a:	613b      	str	r3, [r7, #16]
}
 8014d7c:	bf00      	nop
 8014d7e:	e7fe      	b.n	8014d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d82:	685a      	ldr	r2, [r3, #4]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	1ad2      	subs	r2, r2, r3
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014d92:	69b8      	ldr	r0, [r7, #24]
 8014d94:	f000 f908 	bl	8014fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014d98:	4b1d      	ldr	r3, [pc, #116]	; (8014e10 <pvPortMalloc+0x188>)
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	1ad3      	subs	r3, r2, r3
 8014da2:	4a1b      	ldr	r2, [pc, #108]	; (8014e10 <pvPortMalloc+0x188>)
 8014da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014da6:	4b1a      	ldr	r3, [pc, #104]	; (8014e10 <pvPortMalloc+0x188>)
 8014da8:	681a      	ldr	r2, [r3, #0]
 8014daa:	4b1b      	ldr	r3, [pc, #108]	; (8014e18 <pvPortMalloc+0x190>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d203      	bcs.n	8014dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014db2:	4b17      	ldr	r3, [pc, #92]	; (8014e10 <pvPortMalloc+0x188>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a18      	ldr	r2, [pc, #96]	; (8014e18 <pvPortMalloc+0x190>)
 8014db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbc:	685a      	ldr	r2, [r3, #4]
 8014dbe:	4b13      	ldr	r3, [pc, #76]	; (8014e0c <pvPortMalloc+0x184>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	431a      	orrs	r2, r3
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dca:	2200      	movs	r2, #0
 8014dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014dce:	4b13      	ldr	r3, [pc, #76]	; (8014e1c <pvPortMalloc+0x194>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	4a11      	ldr	r2, [pc, #68]	; (8014e1c <pvPortMalloc+0x194>)
 8014dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014dd8:	f7fe fc2a 	bl	8013630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ddc:	69fb      	ldr	r3, [r7, #28]
 8014dde:	f003 0307 	and.w	r3, r3, #7
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d00a      	beq.n	8014dfc <pvPortMalloc+0x174>
	__asm volatile
 8014de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dea:	f383 8811 	msr	BASEPRI, r3
 8014dee:	f3bf 8f6f 	isb	sy
 8014df2:	f3bf 8f4f 	dsb	sy
 8014df6:	60fb      	str	r3, [r7, #12]
}
 8014df8:	bf00      	nop
 8014dfa:	e7fe      	b.n	8014dfa <pvPortMalloc+0x172>
	return pvReturn;
 8014dfc:	69fb      	ldr	r3, [r7, #28]
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3728      	adds	r7, #40	; 0x28
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	240055c8 	.word	0x240055c8
 8014e0c:	240055dc 	.word	0x240055dc
 8014e10:	240055cc 	.word	0x240055cc
 8014e14:	240055c0 	.word	0x240055c0
 8014e18:	240055d0 	.word	0x240055d0
 8014e1c:	240055d4 	.word	0x240055d4

08014e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b086      	sub	sp, #24
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d04d      	beq.n	8014ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014e32:	2308      	movs	r3, #8
 8014e34:	425b      	negs	r3, r3
 8014e36:	697a      	ldr	r2, [r7, #20]
 8014e38:	4413      	add	r3, r2
 8014e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	685a      	ldr	r2, [r3, #4]
 8014e44:	4b24      	ldr	r3, [pc, #144]	; (8014ed8 <vPortFree+0xb8>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	4013      	ands	r3, r2
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d10a      	bne.n	8014e64 <vPortFree+0x44>
	__asm volatile
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	60fb      	str	r3, [r7, #12]
}
 8014e60:	bf00      	nop
 8014e62:	e7fe      	b.n	8014e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00a      	beq.n	8014e82 <vPortFree+0x62>
	__asm volatile
 8014e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e70:	f383 8811 	msr	BASEPRI, r3
 8014e74:	f3bf 8f6f 	isb	sy
 8014e78:	f3bf 8f4f 	dsb	sy
 8014e7c:	60bb      	str	r3, [r7, #8]
}
 8014e7e:	bf00      	nop
 8014e80:	e7fe      	b.n	8014e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	685a      	ldr	r2, [r3, #4]
 8014e86:	4b14      	ldr	r3, [pc, #80]	; (8014ed8 <vPortFree+0xb8>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d01e      	beq.n	8014ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d11a      	bne.n	8014ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	685a      	ldr	r2, [r3, #4]
 8014e9c:	4b0e      	ldr	r3, [pc, #56]	; (8014ed8 <vPortFree+0xb8>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	43db      	mvns	r3, r3
 8014ea2:	401a      	ands	r2, r3
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ea8:	f7fe fbb4 	bl	8013614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	685a      	ldr	r2, [r3, #4]
 8014eb0:	4b0a      	ldr	r3, [pc, #40]	; (8014edc <vPortFree+0xbc>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	4a09      	ldr	r2, [pc, #36]	; (8014edc <vPortFree+0xbc>)
 8014eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014eba:	6938      	ldr	r0, [r7, #16]
 8014ebc:	f000 f874 	bl	8014fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014ec0:	4b07      	ldr	r3, [pc, #28]	; (8014ee0 <vPortFree+0xc0>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	4a06      	ldr	r2, [pc, #24]	; (8014ee0 <vPortFree+0xc0>)
 8014ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014eca:	f7fe fbb1 	bl	8013630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ece:	bf00      	nop
 8014ed0:	3718      	adds	r7, #24
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	240055dc 	.word	0x240055dc
 8014edc:	240055cc 	.word	0x240055cc
 8014ee0:	240055d8 	.word	0x240055d8

08014ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ef0:	4b27      	ldr	r3, [pc, #156]	; (8014f90 <prvHeapInit+0xac>)
 8014ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	f003 0307 	and.w	r3, r3, #7
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00c      	beq.n	8014f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	3307      	adds	r3, #7
 8014f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	f023 0307 	bic.w	r3, r3, #7
 8014f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014f0c:	68ba      	ldr	r2, [r7, #8]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	4a1f      	ldr	r2, [pc, #124]	; (8014f90 <prvHeapInit+0xac>)
 8014f14:	4413      	add	r3, r2
 8014f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f1c:	4a1d      	ldr	r2, [pc, #116]	; (8014f94 <prvHeapInit+0xb0>)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014f22:	4b1c      	ldr	r3, [pc, #112]	; (8014f94 <prvHeapInit+0xb0>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	68ba      	ldr	r2, [r7, #8]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014f30:	2208      	movs	r2, #8
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	1a9b      	subs	r3, r3, r2
 8014f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f023 0307 	bic.w	r3, r3, #7
 8014f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	4a15      	ldr	r2, [pc, #84]	; (8014f98 <prvHeapInit+0xb4>)
 8014f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014f46:	4b14      	ldr	r3, [pc, #80]	; (8014f98 <prvHeapInit+0xb4>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014f4e:	4b12      	ldr	r3, [pc, #72]	; (8014f98 <prvHeapInit+0xb4>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2200      	movs	r2, #0
 8014f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	1ad2      	subs	r2, r2, r3
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f64:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <prvHeapInit+0xb4>)
 8014f66:	681a      	ldr	r2, [r3, #0]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	4a0a      	ldr	r2, [pc, #40]	; (8014f9c <prvHeapInit+0xb8>)
 8014f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	4a09      	ldr	r2, [pc, #36]	; (8014fa0 <prvHeapInit+0xbc>)
 8014f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f7c:	4b09      	ldr	r3, [pc, #36]	; (8014fa4 <prvHeapInit+0xc0>)
 8014f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014f82:	601a      	str	r2, [r3, #0]
}
 8014f84:	bf00      	nop
 8014f86:	3714      	adds	r7, #20
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr
 8014f90:	240019c0 	.word	0x240019c0
 8014f94:	240055c0 	.word	0x240055c0
 8014f98:	240055c8 	.word	0x240055c8
 8014f9c:	240055d0 	.word	0x240055d0
 8014fa0:	240055cc 	.word	0x240055cc
 8014fa4:	240055dc 	.word	0x240055dc

08014fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014fa8:	b480      	push	{r7}
 8014faa:	b085      	sub	sp, #20
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014fb0:	4b28      	ldr	r3, [pc, #160]	; (8015054 <prvInsertBlockIntoFreeList+0xac>)
 8014fb2:	60fb      	str	r3, [r7, #12]
 8014fb4:	e002      	b.n	8014fbc <prvInsertBlockIntoFreeList+0x14>
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	60fb      	str	r3, [r7, #12]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d8f7      	bhi.n	8014fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	685b      	ldr	r3, [r3, #4]
 8014fce:	68ba      	ldr	r2, [r7, #8]
 8014fd0:	4413      	add	r3, r2
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d108      	bne.n	8014fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	685a      	ldr	r2, [r3, #4]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	441a      	add	r2, r3
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	441a      	add	r2, r3
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d118      	bne.n	8015030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	4b15      	ldr	r3, [pc, #84]	; (8015058 <prvInsertBlockIntoFreeList+0xb0>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	429a      	cmp	r2, r3
 8015008:	d00d      	beq.n	8015026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	685a      	ldr	r2, [r3, #4]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	441a      	add	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	601a      	str	r2, [r3, #0]
 8015024:	e008      	b.n	8015038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015026:	4b0c      	ldr	r3, [pc, #48]	; (8015058 <prvInsertBlockIntoFreeList+0xb0>)
 8015028:	681a      	ldr	r2, [r3, #0]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	601a      	str	r2, [r3, #0]
 801502e:	e003      	b.n	8015038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	429a      	cmp	r2, r3
 801503e:	d002      	beq.n	8015046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015046:	bf00      	nop
 8015048:	3714      	adds	r7, #20
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	240055c0 	.word	0x240055c0
 8015058:	240055c8 	.word	0x240055c8

0801505c <__errno>:
 801505c:	4b01      	ldr	r3, [pc, #4]	; (8015064 <__errno+0x8>)
 801505e:	6818      	ldr	r0, [r3, #0]
 8015060:	4770      	bx	lr
 8015062:	bf00      	nop
 8015064:	240000a0 	.word	0x240000a0

08015068 <__libc_init_array>:
 8015068:	b570      	push	{r4, r5, r6, lr}
 801506a:	4d0d      	ldr	r5, [pc, #52]	; (80150a0 <__libc_init_array+0x38>)
 801506c:	4c0d      	ldr	r4, [pc, #52]	; (80150a4 <__libc_init_array+0x3c>)
 801506e:	1b64      	subs	r4, r4, r5
 8015070:	10a4      	asrs	r4, r4, #2
 8015072:	2600      	movs	r6, #0
 8015074:	42a6      	cmp	r6, r4
 8015076:	d109      	bne.n	801508c <__libc_init_array+0x24>
 8015078:	4d0b      	ldr	r5, [pc, #44]	; (80150a8 <__libc_init_array+0x40>)
 801507a:	4c0c      	ldr	r4, [pc, #48]	; (80150ac <__libc_init_array+0x44>)
 801507c:	f000 fd3c 	bl	8015af8 <_init>
 8015080:	1b64      	subs	r4, r4, r5
 8015082:	10a4      	asrs	r4, r4, #2
 8015084:	2600      	movs	r6, #0
 8015086:	42a6      	cmp	r6, r4
 8015088:	d105      	bne.n	8015096 <__libc_init_array+0x2e>
 801508a:	bd70      	pop	{r4, r5, r6, pc}
 801508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015090:	4798      	blx	r3
 8015092:	3601      	adds	r6, #1
 8015094:	e7ee      	b.n	8015074 <__libc_init_array+0xc>
 8015096:	f855 3b04 	ldr.w	r3, [r5], #4
 801509a:	4798      	blx	r3
 801509c:	3601      	adds	r6, #1
 801509e:	e7f2      	b.n	8015086 <__libc_init_array+0x1e>
 80150a0:	08015fac 	.word	0x08015fac
 80150a4:	08015fac 	.word	0x08015fac
 80150a8:	08015fac 	.word	0x08015fac
 80150ac:	08015fb0 	.word	0x08015fb0

080150b0 <malloc>:
 80150b0:	4b02      	ldr	r3, [pc, #8]	; (80150bc <malloc+0xc>)
 80150b2:	4601      	mov	r1, r0
 80150b4:	6818      	ldr	r0, [r3, #0]
 80150b6:	f000 b88d 	b.w	80151d4 <_malloc_r>
 80150ba:	bf00      	nop
 80150bc:	240000a0 	.word	0x240000a0

080150c0 <free>:
 80150c0:	4b02      	ldr	r3, [pc, #8]	; (80150cc <free+0xc>)
 80150c2:	4601      	mov	r1, r0
 80150c4:	6818      	ldr	r0, [r3, #0]
 80150c6:	f000 b819 	b.w	80150fc <_free_r>
 80150ca:	bf00      	nop
 80150cc:	240000a0 	.word	0x240000a0

080150d0 <memcpy>:
 80150d0:	440a      	add	r2, r1
 80150d2:	4291      	cmp	r1, r2
 80150d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80150d8:	d100      	bne.n	80150dc <memcpy+0xc>
 80150da:	4770      	bx	lr
 80150dc:	b510      	push	{r4, lr}
 80150de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80150e6:	4291      	cmp	r1, r2
 80150e8:	d1f9      	bne.n	80150de <memcpy+0xe>
 80150ea:	bd10      	pop	{r4, pc}

080150ec <memset>:
 80150ec:	4402      	add	r2, r0
 80150ee:	4603      	mov	r3, r0
 80150f0:	4293      	cmp	r3, r2
 80150f2:	d100      	bne.n	80150f6 <memset+0xa>
 80150f4:	4770      	bx	lr
 80150f6:	f803 1b01 	strb.w	r1, [r3], #1
 80150fa:	e7f9      	b.n	80150f0 <memset+0x4>

080150fc <_free_r>:
 80150fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150fe:	2900      	cmp	r1, #0
 8015100:	d044      	beq.n	801518c <_free_r+0x90>
 8015102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015106:	9001      	str	r0, [sp, #4]
 8015108:	2b00      	cmp	r3, #0
 801510a:	f1a1 0404 	sub.w	r4, r1, #4
 801510e:	bfb8      	it	lt
 8015110:	18e4      	addlt	r4, r4, r3
 8015112:	f000 fc39 	bl	8015988 <__malloc_lock>
 8015116:	4a1e      	ldr	r2, [pc, #120]	; (8015190 <_free_r+0x94>)
 8015118:	9801      	ldr	r0, [sp, #4]
 801511a:	6813      	ldr	r3, [r2, #0]
 801511c:	b933      	cbnz	r3, 801512c <_free_r+0x30>
 801511e:	6063      	str	r3, [r4, #4]
 8015120:	6014      	str	r4, [r2, #0]
 8015122:	b003      	add	sp, #12
 8015124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015128:	f000 bc34 	b.w	8015994 <__malloc_unlock>
 801512c:	42a3      	cmp	r3, r4
 801512e:	d908      	bls.n	8015142 <_free_r+0x46>
 8015130:	6825      	ldr	r5, [r4, #0]
 8015132:	1961      	adds	r1, r4, r5
 8015134:	428b      	cmp	r3, r1
 8015136:	bf01      	itttt	eq
 8015138:	6819      	ldreq	r1, [r3, #0]
 801513a:	685b      	ldreq	r3, [r3, #4]
 801513c:	1949      	addeq	r1, r1, r5
 801513e:	6021      	streq	r1, [r4, #0]
 8015140:	e7ed      	b.n	801511e <_free_r+0x22>
 8015142:	461a      	mov	r2, r3
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	b10b      	cbz	r3, 801514c <_free_r+0x50>
 8015148:	42a3      	cmp	r3, r4
 801514a:	d9fa      	bls.n	8015142 <_free_r+0x46>
 801514c:	6811      	ldr	r1, [r2, #0]
 801514e:	1855      	adds	r5, r2, r1
 8015150:	42a5      	cmp	r5, r4
 8015152:	d10b      	bne.n	801516c <_free_r+0x70>
 8015154:	6824      	ldr	r4, [r4, #0]
 8015156:	4421      	add	r1, r4
 8015158:	1854      	adds	r4, r2, r1
 801515a:	42a3      	cmp	r3, r4
 801515c:	6011      	str	r1, [r2, #0]
 801515e:	d1e0      	bne.n	8015122 <_free_r+0x26>
 8015160:	681c      	ldr	r4, [r3, #0]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	6053      	str	r3, [r2, #4]
 8015166:	4421      	add	r1, r4
 8015168:	6011      	str	r1, [r2, #0]
 801516a:	e7da      	b.n	8015122 <_free_r+0x26>
 801516c:	d902      	bls.n	8015174 <_free_r+0x78>
 801516e:	230c      	movs	r3, #12
 8015170:	6003      	str	r3, [r0, #0]
 8015172:	e7d6      	b.n	8015122 <_free_r+0x26>
 8015174:	6825      	ldr	r5, [r4, #0]
 8015176:	1961      	adds	r1, r4, r5
 8015178:	428b      	cmp	r3, r1
 801517a:	bf04      	itt	eq
 801517c:	6819      	ldreq	r1, [r3, #0]
 801517e:	685b      	ldreq	r3, [r3, #4]
 8015180:	6063      	str	r3, [r4, #4]
 8015182:	bf04      	itt	eq
 8015184:	1949      	addeq	r1, r1, r5
 8015186:	6021      	streq	r1, [r4, #0]
 8015188:	6054      	str	r4, [r2, #4]
 801518a:	e7ca      	b.n	8015122 <_free_r+0x26>
 801518c:	b003      	add	sp, #12
 801518e:	bd30      	pop	{r4, r5, pc}
 8015190:	240055e0 	.word	0x240055e0

08015194 <sbrk_aligned>:
 8015194:	b570      	push	{r4, r5, r6, lr}
 8015196:	4e0e      	ldr	r6, [pc, #56]	; (80151d0 <sbrk_aligned+0x3c>)
 8015198:	460c      	mov	r4, r1
 801519a:	6831      	ldr	r1, [r6, #0]
 801519c:	4605      	mov	r5, r0
 801519e:	b911      	cbnz	r1, 80151a6 <sbrk_aligned+0x12>
 80151a0:	f000 f902 	bl	80153a8 <_sbrk_r>
 80151a4:	6030      	str	r0, [r6, #0]
 80151a6:	4621      	mov	r1, r4
 80151a8:	4628      	mov	r0, r5
 80151aa:	f000 f8fd 	bl	80153a8 <_sbrk_r>
 80151ae:	1c43      	adds	r3, r0, #1
 80151b0:	d00a      	beq.n	80151c8 <sbrk_aligned+0x34>
 80151b2:	1cc4      	adds	r4, r0, #3
 80151b4:	f024 0403 	bic.w	r4, r4, #3
 80151b8:	42a0      	cmp	r0, r4
 80151ba:	d007      	beq.n	80151cc <sbrk_aligned+0x38>
 80151bc:	1a21      	subs	r1, r4, r0
 80151be:	4628      	mov	r0, r5
 80151c0:	f000 f8f2 	bl	80153a8 <_sbrk_r>
 80151c4:	3001      	adds	r0, #1
 80151c6:	d101      	bne.n	80151cc <sbrk_aligned+0x38>
 80151c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80151cc:	4620      	mov	r0, r4
 80151ce:	bd70      	pop	{r4, r5, r6, pc}
 80151d0:	240055e4 	.word	0x240055e4

080151d4 <_malloc_r>:
 80151d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151d8:	1ccd      	adds	r5, r1, #3
 80151da:	f025 0503 	bic.w	r5, r5, #3
 80151de:	3508      	adds	r5, #8
 80151e0:	2d0c      	cmp	r5, #12
 80151e2:	bf38      	it	cc
 80151e4:	250c      	movcc	r5, #12
 80151e6:	2d00      	cmp	r5, #0
 80151e8:	4607      	mov	r7, r0
 80151ea:	db01      	blt.n	80151f0 <_malloc_r+0x1c>
 80151ec:	42a9      	cmp	r1, r5
 80151ee:	d905      	bls.n	80151fc <_malloc_r+0x28>
 80151f0:	230c      	movs	r3, #12
 80151f2:	603b      	str	r3, [r7, #0]
 80151f4:	2600      	movs	r6, #0
 80151f6:	4630      	mov	r0, r6
 80151f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151fc:	4e2e      	ldr	r6, [pc, #184]	; (80152b8 <_malloc_r+0xe4>)
 80151fe:	f000 fbc3 	bl	8015988 <__malloc_lock>
 8015202:	6833      	ldr	r3, [r6, #0]
 8015204:	461c      	mov	r4, r3
 8015206:	bb34      	cbnz	r4, 8015256 <_malloc_r+0x82>
 8015208:	4629      	mov	r1, r5
 801520a:	4638      	mov	r0, r7
 801520c:	f7ff ffc2 	bl	8015194 <sbrk_aligned>
 8015210:	1c43      	adds	r3, r0, #1
 8015212:	4604      	mov	r4, r0
 8015214:	d14d      	bne.n	80152b2 <_malloc_r+0xde>
 8015216:	6834      	ldr	r4, [r6, #0]
 8015218:	4626      	mov	r6, r4
 801521a:	2e00      	cmp	r6, #0
 801521c:	d140      	bne.n	80152a0 <_malloc_r+0xcc>
 801521e:	6823      	ldr	r3, [r4, #0]
 8015220:	4631      	mov	r1, r6
 8015222:	4638      	mov	r0, r7
 8015224:	eb04 0803 	add.w	r8, r4, r3
 8015228:	f000 f8be 	bl	80153a8 <_sbrk_r>
 801522c:	4580      	cmp	r8, r0
 801522e:	d13a      	bne.n	80152a6 <_malloc_r+0xd2>
 8015230:	6821      	ldr	r1, [r4, #0]
 8015232:	3503      	adds	r5, #3
 8015234:	1a6d      	subs	r5, r5, r1
 8015236:	f025 0503 	bic.w	r5, r5, #3
 801523a:	3508      	adds	r5, #8
 801523c:	2d0c      	cmp	r5, #12
 801523e:	bf38      	it	cc
 8015240:	250c      	movcc	r5, #12
 8015242:	4629      	mov	r1, r5
 8015244:	4638      	mov	r0, r7
 8015246:	f7ff ffa5 	bl	8015194 <sbrk_aligned>
 801524a:	3001      	adds	r0, #1
 801524c:	d02b      	beq.n	80152a6 <_malloc_r+0xd2>
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	442b      	add	r3, r5
 8015252:	6023      	str	r3, [r4, #0]
 8015254:	e00e      	b.n	8015274 <_malloc_r+0xa0>
 8015256:	6822      	ldr	r2, [r4, #0]
 8015258:	1b52      	subs	r2, r2, r5
 801525a:	d41e      	bmi.n	801529a <_malloc_r+0xc6>
 801525c:	2a0b      	cmp	r2, #11
 801525e:	d916      	bls.n	801528e <_malloc_r+0xba>
 8015260:	1961      	adds	r1, r4, r5
 8015262:	42a3      	cmp	r3, r4
 8015264:	6025      	str	r5, [r4, #0]
 8015266:	bf18      	it	ne
 8015268:	6059      	strne	r1, [r3, #4]
 801526a:	6863      	ldr	r3, [r4, #4]
 801526c:	bf08      	it	eq
 801526e:	6031      	streq	r1, [r6, #0]
 8015270:	5162      	str	r2, [r4, r5]
 8015272:	604b      	str	r3, [r1, #4]
 8015274:	4638      	mov	r0, r7
 8015276:	f104 060b 	add.w	r6, r4, #11
 801527a:	f000 fb8b 	bl	8015994 <__malloc_unlock>
 801527e:	f026 0607 	bic.w	r6, r6, #7
 8015282:	1d23      	adds	r3, r4, #4
 8015284:	1af2      	subs	r2, r6, r3
 8015286:	d0b6      	beq.n	80151f6 <_malloc_r+0x22>
 8015288:	1b9b      	subs	r3, r3, r6
 801528a:	50a3      	str	r3, [r4, r2]
 801528c:	e7b3      	b.n	80151f6 <_malloc_r+0x22>
 801528e:	6862      	ldr	r2, [r4, #4]
 8015290:	42a3      	cmp	r3, r4
 8015292:	bf0c      	ite	eq
 8015294:	6032      	streq	r2, [r6, #0]
 8015296:	605a      	strne	r2, [r3, #4]
 8015298:	e7ec      	b.n	8015274 <_malloc_r+0xa0>
 801529a:	4623      	mov	r3, r4
 801529c:	6864      	ldr	r4, [r4, #4]
 801529e:	e7b2      	b.n	8015206 <_malloc_r+0x32>
 80152a0:	4634      	mov	r4, r6
 80152a2:	6876      	ldr	r6, [r6, #4]
 80152a4:	e7b9      	b.n	801521a <_malloc_r+0x46>
 80152a6:	230c      	movs	r3, #12
 80152a8:	603b      	str	r3, [r7, #0]
 80152aa:	4638      	mov	r0, r7
 80152ac:	f000 fb72 	bl	8015994 <__malloc_unlock>
 80152b0:	e7a1      	b.n	80151f6 <_malloc_r+0x22>
 80152b2:	6025      	str	r5, [r4, #0]
 80152b4:	e7de      	b.n	8015274 <_malloc_r+0xa0>
 80152b6:	bf00      	nop
 80152b8:	240055e0 	.word	0x240055e0

080152bc <_puts_r>:
 80152bc:	b570      	push	{r4, r5, r6, lr}
 80152be:	460e      	mov	r6, r1
 80152c0:	4605      	mov	r5, r0
 80152c2:	b118      	cbz	r0, 80152cc <_puts_r+0x10>
 80152c4:	6983      	ldr	r3, [r0, #24]
 80152c6:	b90b      	cbnz	r3, 80152cc <_puts_r+0x10>
 80152c8:	f000 fa58 	bl	801577c <__sinit>
 80152cc:	69ab      	ldr	r3, [r5, #24]
 80152ce:	68ac      	ldr	r4, [r5, #8]
 80152d0:	b913      	cbnz	r3, 80152d8 <_puts_r+0x1c>
 80152d2:	4628      	mov	r0, r5
 80152d4:	f000 fa52 	bl	801577c <__sinit>
 80152d8:	4b2c      	ldr	r3, [pc, #176]	; (801538c <_puts_r+0xd0>)
 80152da:	429c      	cmp	r4, r3
 80152dc:	d120      	bne.n	8015320 <_puts_r+0x64>
 80152de:	686c      	ldr	r4, [r5, #4]
 80152e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152e2:	07db      	lsls	r3, r3, #31
 80152e4:	d405      	bmi.n	80152f2 <_puts_r+0x36>
 80152e6:	89a3      	ldrh	r3, [r4, #12]
 80152e8:	0598      	lsls	r0, r3, #22
 80152ea:	d402      	bmi.n	80152f2 <_puts_r+0x36>
 80152ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152ee:	f000 fae3 	bl	80158b8 <__retarget_lock_acquire_recursive>
 80152f2:	89a3      	ldrh	r3, [r4, #12]
 80152f4:	0719      	lsls	r1, r3, #28
 80152f6:	d51d      	bpl.n	8015334 <_puts_r+0x78>
 80152f8:	6923      	ldr	r3, [r4, #16]
 80152fa:	b1db      	cbz	r3, 8015334 <_puts_r+0x78>
 80152fc:	3e01      	subs	r6, #1
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015304:	3b01      	subs	r3, #1
 8015306:	60a3      	str	r3, [r4, #8]
 8015308:	bb39      	cbnz	r1, 801535a <_puts_r+0x9e>
 801530a:	2b00      	cmp	r3, #0
 801530c:	da38      	bge.n	8015380 <_puts_r+0xc4>
 801530e:	4622      	mov	r2, r4
 8015310:	210a      	movs	r1, #10
 8015312:	4628      	mov	r0, r5
 8015314:	f000 f858 	bl	80153c8 <__swbuf_r>
 8015318:	3001      	adds	r0, #1
 801531a:	d011      	beq.n	8015340 <_puts_r+0x84>
 801531c:	250a      	movs	r5, #10
 801531e:	e011      	b.n	8015344 <_puts_r+0x88>
 8015320:	4b1b      	ldr	r3, [pc, #108]	; (8015390 <_puts_r+0xd4>)
 8015322:	429c      	cmp	r4, r3
 8015324:	d101      	bne.n	801532a <_puts_r+0x6e>
 8015326:	68ac      	ldr	r4, [r5, #8]
 8015328:	e7da      	b.n	80152e0 <_puts_r+0x24>
 801532a:	4b1a      	ldr	r3, [pc, #104]	; (8015394 <_puts_r+0xd8>)
 801532c:	429c      	cmp	r4, r3
 801532e:	bf08      	it	eq
 8015330:	68ec      	ldreq	r4, [r5, #12]
 8015332:	e7d5      	b.n	80152e0 <_puts_r+0x24>
 8015334:	4621      	mov	r1, r4
 8015336:	4628      	mov	r0, r5
 8015338:	f000 f898 	bl	801546c <__swsetup_r>
 801533c:	2800      	cmp	r0, #0
 801533e:	d0dd      	beq.n	80152fc <_puts_r+0x40>
 8015340:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015346:	07da      	lsls	r2, r3, #31
 8015348:	d405      	bmi.n	8015356 <_puts_r+0x9a>
 801534a:	89a3      	ldrh	r3, [r4, #12]
 801534c:	059b      	lsls	r3, r3, #22
 801534e:	d402      	bmi.n	8015356 <_puts_r+0x9a>
 8015350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015352:	f000 fab2 	bl	80158ba <__retarget_lock_release_recursive>
 8015356:	4628      	mov	r0, r5
 8015358:	bd70      	pop	{r4, r5, r6, pc}
 801535a:	2b00      	cmp	r3, #0
 801535c:	da04      	bge.n	8015368 <_puts_r+0xac>
 801535e:	69a2      	ldr	r2, [r4, #24]
 8015360:	429a      	cmp	r2, r3
 8015362:	dc06      	bgt.n	8015372 <_puts_r+0xb6>
 8015364:	290a      	cmp	r1, #10
 8015366:	d004      	beq.n	8015372 <_puts_r+0xb6>
 8015368:	6823      	ldr	r3, [r4, #0]
 801536a:	1c5a      	adds	r2, r3, #1
 801536c:	6022      	str	r2, [r4, #0]
 801536e:	7019      	strb	r1, [r3, #0]
 8015370:	e7c5      	b.n	80152fe <_puts_r+0x42>
 8015372:	4622      	mov	r2, r4
 8015374:	4628      	mov	r0, r5
 8015376:	f000 f827 	bl	80153c8 <__swbuf_r>
 801537a:	3001      	adds	r0, #1
 801537c:	d1bf      	bne.n	80152fe <_puts_r+0x42>
 801537e:	e7df      	b.n	8015340 <_puts_r+0x84>
 8015380:	6823      	ldr	r3, [r4, #0]
 8015382:	250a      	movs	r5, #10
 8015384:	1c5a      	adds	r2, r3, #1
 8015386:	6022      	str	r2, [r4, #0]
 8015388:	701d      	strb	r5, [r3, #0]
 801538a:	e7db      	b.n	8015344 <_puts_r+0x88>
 801538c:	08015f64 	.word	0x08015f64
 8015390:	08015f84 	.word	0x08015f84
 8015394:	08015f44 	.word	0x08015f44

08015398 <puts>:
 8015398:	4b02      	ldr	r3, [pc, #8]	; (80153a4 <puts+0xc>)
 801539a:	4601      	mov	r1, r0
 801539c:	6818      	ldr	r0, [r3, #0]
 801539e:	f7ff bf8d 	b.w	80152bc <_puts_r>
 80153a2:	bf00      	nop
 80153a4:	240000a0 	.word	0x240000a0

080153a8 <_sbrk_r>:
 80153a8:	b538      	push	{r3, r4, r5, lr}
 80153aa:	4d06      	ldr	r5, [pc, #24]	; (80153c4 <_sbrk_r+0x1c>)
 80153ac:	2300      	movs	r3, #0
 80153ae:	4604      	mov	r4, r0
 80153b0:	4608      	mov	r0, r1
 80153b2:	602b      	str	r3, [r5, #0]
 80153b4:	f7ed fa3c 	bl	8002830 <_sbrk>
 80153b8:	1c43      	adds	r3, r0, #1
 80153ba:	d102      	bne.n	80153c2 <_sbrk_r+0x1a>
 80153bc:	682b      	ldr	r3, [r5, #0]
 80153be:	b103      	cbz	r3, 80153c2 <_sbrk_r+0x1a>
 80153c0:	6023      	str	r3, [r4, #0]
 80153c2:	bd38      	pop	{r3, r4, r5, pc}
 80153c4:	240055ec 	.word	0x240055ec

080153c8 <__swbuf_r>:
 80153c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ca:	460e      	mov	r6, r1
 80153cc:	4614      	mov	r4, r2
 80153ce:	4605      	mov	r5, r0
 80153d0:	b118      	cbz	r0, 80153da <__swbuf_r+0x12>
 80153d2:	6983      	ldr	r3, [r0, #24]
 80153d4:	b90b      	cbnz	r3, 80153da <__swbuf_r+0x12>
 80153d6:	f000 f9d1 	bl	801577c <__sinit>
 80153da:	4b21      	ldr	r3, [pc, #132]	; (8015460 <__swbuf_r+0x98>)
 80153dc:	429c      	cmp	r4, r3
 80153de:	d12b      	bne.n	8015438 <__swbuf_r+0x70>
 80153e0:	686c      	ldr	r4, [r5, #4]
 80153e2:	69a3      	ldr	r3, [r4, #24]
 80153e4:	60a3      	str	r3, [r4, #8]
 80153e6:	89a3      	ldrh	r3, [r4, #12]
 80153e8:	071a      	lsls	r2, r3, #28
 80153ea:	d52f      	bpl.n	801544c <__swbuf_r+0x84>
 80153ec:	6923      	ldr	r3, [r4, #16]
 80153ee:	b36b      	cbz	r3, 801544c <__swbuf_r+0x84>
 80153f0:	6923      	ldr	r3, [r4, #16]
 80153f2:	6820      	ldr	r0, [r4, #0]
 80153f4:	1ac0      	subs	r0, r0, r3
 80153f6:	6963      	ldr	r3, [r4, #20]
 80153f8:	b2f6      	uxtb	r6, r6
 80153fa:	4283      	cmp	r3, r0
 80153fc:	4637      	mov	r7, r6
 80153fe:	dc04      	bgt.n	801540a <__swbuf_r+0x42>
 8015400:	4621      	mov	r1, r4
 8015402:	4628      	mov	r0, r5
 8015404:	f000 f926 	bl	8015654 <_fflush_r>
 8015408:	bb30      	cbnz	r0, 8015458 <__swbuf_r+0x90>
 801540a:	68a3      	ldr	r3, [r4, #8]
 801540c:	3b01      	subs	r3, #1
 801540e:	60a3      	str	r3, [r4, #8]
 8015410:	6823      	ldr	r3, [r4, #0]
 8015412:	1c5a      	adds	r2, r3, #1
 8015414:	6022      	str	r2, [r4, #0]
 8015416:	701e      	strb	r6, [r3, #0]
 8015418:	6963      	ldr	r3, [r4, #20]
 801541a:	3001      	adds	r0, #1
 801541c:	4283      	cmp	r3, r0
 801541e:	d004      	beq.n	801542a <__swbuf_r+0x62>
 8015420:	89a3      	ldrh	r3, [r4, #12]
 8015422:	07db      	lsls	r3, r3, #31
 8015424:	d506      	bpl.n	8015434 <__swbuf_r+0x6c>
 8015426:	2e0a      	cmp	r6, #10
 8015428:	d104      	bne.n	8015434 <__swbuf_r+0x6c>
 801542a:	4621      	mov	r1, r4
 801542c:	4628      	mov	r0, r5
 801542e:	f000 f911 	bl	8015654 <_fflush_r>
 8015432:	b988      	cbnz	r0, 8015458 <__swbuf_r+0x90>
 8015434:	4638      	mov	r0, r7
 8015436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015438:	4b0a      	ldr	r3, [pc, #40]	; (8015464 <__swbuf_r+0x9c>)
 801543a:	429c      	cmp	r4, r3
 801543c:	d101      	bne.n	8015442 <__swbuf_r+0x7a>
 801543e:	68ac      	ldr	r4, [r5, #8]
 8015440:	e7cf      	b.n	80153e2 <__swbuf_r+0x1a>
 8015442:	4b09      	ldr	r3, [pc, #36]	; (8015468 <__swbuf_r+0xa0>)
 8015444:	429c      	cmp	r4, r3
 8015446:	bf08      	it	eq
 8015448:	68ec      	ldreq	r4, [r5, #12]
 801544a:	e7ca      	b.n	80153e2 <__swbuf_r+0x1a>
 801544c:	4621      	mov	r1, r4
 801544e:	4628      	mov	r0, r5
 8015450:	f000 f80c 	bl	801546c <__swsetup_r>
 8015454:	2800      	cmp	r0, #0
 8015456:	d0cb      	beq.n	80153f0 <__swbuf_r+0x28>
 8015458:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801545c:	e7ea      	b.n	8015434 <__swbuf_r+0x6c>
 801545e:	bf00      	nop
 8015460:	08015f64 	.word	0x08015f64
 8015464:	08015f84 	.word	0x08015f84
 8015468:	08015f44 	.word	0x08015f44

0801546c <__swsetup_r>:
 801546c:	4b32      	ldr	r3, [pc, #200]	; (8015538 <__swsetup_r+0xcc>)
 801546e:	b570      	push	{r4, r5, r6, lr}
 8015470:	681d      	ldr	r5, [r3, #0]
 8015472:	4606      	mov	r6, r0
 8015474:	460c      	mov	r4, r1
 8015476:	b125      	cbz	r5, 8015482 <__swsetup_r+0x16>
 8015478:	69ab      	ldr	r3, [r5, #24]
 801547a:	b913      	cbnz	r3, 8015482 <__swsetup_r+0x16>
 801547c:	4628      	mov	r0, r5
 801547e:	f000 f97d 	bl	801577c <__sinit>
 8015482:	4b2e      	ldr	r3, [pc, #184]	; (801553c <__swsetup_r+0xd0>)
 8015484:	429c      	cmp	r4, r3
 8015486:	d10f      	bne.n	80154a8 <__swsetup_r+0x3c>
 8015488:	686c      	ldr	r4, [r5, #4]
 801548a:	89a3      	ldrh	r3, [r4, #12]
 801548c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015490:	0719      	lsls	r1, r3, #28
 8015492:	d42c      	bmi.n	80154ee <__swsetup_r+0x82>
 8015494:	06dd      	lsls	r5, r3, #27
 8015496:	d411      	bmi.n	80154bc <__swsetup_r+0x50>
 8015498:	2309      	movs	r3, #9
 801549a:	6033      	str	r3, [r6, #0]
 801549c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80154a0:	81a3      	strh	r3, [r4, #12]
 80154a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154a6:	e03e      	b.n	8015526 <__swsetup_r+0xba>
 80154a8:	4b25      	ldr	r3, [pc, #148]	; (8015540 <__swsetup_r+0xd4>)
 80154aa:	429c      	cmp	r4, r3
 80154ac:	d101      	bne.n	80154b2 <__swsetup_r+0x46>
 80154ae:	68ac      	ldr	r4, [r5, #8]
 80154b0:	e7eb      	b.n	801548a <__swsetup_r+0x1e>
 80154b2:	4b24      	ldr	r3, [pc, #144]	; (8015544 <__swsetup_r+0xd8>)
 80154b4:	429c      	cmp	r4, r3
 80154b6:	bf08      	it	eq
 80154b8:	68ec      	ldreq	r4, [r5, #12]
 80154ba:	e7e6      	b.n	801548a <__swsetup_r+0x1e>
 80154bc:	0758      	lsls	r0, r3, #29
 80154be:	d512      	bpl.n	80154e6 <__swsetup_r+0x7a>
 80154c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154c2:	b141      	cbz	r1, 80154d6 <__swsetup_r+0x6a>
 80154c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154c8:	4299      	cmp	r1, r3
 80154ca:	d002      	beq.n	80154d2 <__swsetup_r+0x66>
 80154cc:	4630      	mov	r0, r6
 80154ce:	f7ff fe15 	bl	80150fc <_free_r>
 80154d2:	2300      	movs	r3, #0
 80154d4:	6363      	str	r3, [r4, #52]	; 0x34
 80154d6:	89a3      	ldrh	r3, [r4, #12]
 80154d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80154dc:	81a3      	strh	r3, [r4, #12]
 80154de:	2300      	movs	r3, #0
 80154e0:	6063      	str	r3, [r4, #4]
 80154e2:	6923      	ldr	r3, [r4, #16]
 80154e4:	6023      	str	r3, [r4, #0]
 80154e6:	89a3      	ldrh	r3, [r4, #12]
 80154e8:	f043 0308 	orr.w	r3, r3, #8
 80154ec:	81a3      	strh	r3, [r4, #12]
 80154ee:	6923      	ldr	r3, [r4, #16]
 80154f0:	b94b      	cbnz	r3, 8015506 <__swsetup_r+0x9a>
 80154f2:	89a3      	ldrh	r3, [r4, #12]
 80154f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80154f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154fc:	d003      	beq.n	8015506 <__swsetup_r+0x9a>
 80154fe:	4621      	mov	r1, r4
 8015500:	4630      	mov	r0, r6
 8015502:	f000 fa01 	bl	8015908 <__smakebuf_r>
 8015506:	89a0      	ldrh	r0, [r4, #12]
 8015508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801550c:	f010 0301 	ands.w	r3, r0, #1
 8015510:	d00a      	beq.n	8015528 <__swsetup_r+0xbc>
 8015512:	2300      	movs	r3, #0
 8015514:	60a3      	str	r3, [r4, #8]
 8015516:	6963      	ldr	r3, [r4, #20]
 8015518:	425b      	negs	r3, r3
 801551a:	61a3      	str	r3, [r4, #24]
 801551c:	6923      	ldr	r3, [r4, #16]
 801551e:	b943      	cbnz	r3, 8015532 <__swsetup_r+0xc6>
 8015520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015524:	d1ba      	bne.n	801549c <__swsetup_r+0x30>
 8015526:	bd70      	pop	{r4, r5, r6, pc}
 8015528:	0781      	lsls	r1, r0, #30
 801552a:	bf58      	it	pl
 801552c:	6963      	ldrpl	r3, [r4, #20]
 801552e:	60a3      	str	r3, [r4, #8]
 8015530:	e7f4      	b.n	801551c <__swsetup_r+0xb0>
 8015532:	2000      	movs	r0, #0
 8015534:	e7f7      	b.n	8015526 <__swsetup_r+0xba>
 8015536:	bf00      	nop
 8015538:	240000a0 	.word	0x240000a0
 801553c:	08015f64 	.word	0x08015f64
 8015540:	08015f84 	.word	0x08015f84
 8015544:	08015f44 	.word	0x08015f44

08015548 <__sflush_r>:
 8015548:	898a      	ldrh	r2, [r1, #12]
 801554a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801554e:	4605      	mov	r5, r0
 8015550:	0710      	lsls	r0, r2, #28
 8015552:	460c      	mov	r4, r1
 8015554:	d458      	bmi.n	8015608 <__sflush_r+0xc0>
 8015556:	684b      	ldr	r3, [r1, #4]
 8015558:	2b00      	cmp	r3, #0
 801555a:	dc05      	bgt.n	8015568 <__sflush_r+0x20>
 801555c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801555e:	2b00      	cmp	r3, #0
 8015560:	dc02      	bgt.n	8015568 <__sflush_r+0x20>
 8015562:	2000      	movs	r0, #0
 8015564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801556a:	2e00      	cmp	r6, #0
 801556c:	d0f9      	beq.n	8015562 <__sflush_r+0x1a>
 801556e:	2300      	movs	r3, #0
 8015570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015574:	682f      	ldr	r7, [r5, #0]
 8015576:	602b      	str	r3, [r5, #0]
 8015578:	d032      	beq.n	80155e0 <__sflush_r+0x98>
 801557a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801557c:	89a3      	ldrh	r3, [r4, #12]
 801557e:	075a      	lsls	r2, r3, #29
 8015580:	d505      	bpl.n	801558e <__sflush_r+0x46>
 8015582:	6863      	ldr	r3, [r4, #4]
 8015584:	1ac0      	subs	r0, r0, r3
 8015586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015588:	b10b      	cbz	r3, 801558e <__sflush_r+0x46>
 801558a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801558c:	1ac0      	subs	r0, r0, r3
 801558e:	2300      	movs	r3, #0
 8015590:	4602      	mov	r2, r0
 8015592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015594:	6a21      	ldr	r1, [r4, #32]
 8015596:	4628      	mov	r0, r5
 8015598:	47b0      	blx	r6
 801559a:	1c43      	adds	r3, r0, #1
 801559c:	89a3      	ldrh	r3, [r4, #12]
 801559e:	d106      	bne.n	80155ae <__sflush_r+0x66>
 80155a0:	6829      	ldr	r1, [r5, #0]
 80155a2:	291d      	cmp	r1, #29
 80155a4:	d82c      	bhi.n	8015600 <__sflush_r+0xb8>
 80155a6:	4a2a      	ldr	r2, [pc, #168]	; (8015650 <__sflush_r+0x108>)
 80155a8:	40ca      	lsrs	r2, r1
 80155aa:	07d6      	lsls	r6, r2, #31
 80155ac:	d528      	bpl.n	8015600 <__sflush_r+0xb8>
 80155ae:	2200      	movs	r2, #0
 80155b0:	6062      	str	r2, [r4, #4]
 80155b2:	04d9      	lsls	r1, r3, #19
 80155b4:	6922      	ldr	r2, [r4, #16]
 80155b6:	6022      	str	r2, [r4, #0]
 80155b8:	d504      	bpl.n	80155c4 <__sflush_r+0x7c>
 80155ba:	1c42      	adds	r2, r0, #1
 80155bc:	d101      	bne.n	80155c2 <__sflush_r+0x7a>
 80155be:	682b      	ldr	r3, [r5, #0]
 80155c0:	b903      	cbnz	r3, 80155c4 <__sflush_r+0x7c>
 80155c2:	6560      	str	r0, [r4, #84]	; 0x54
 80155c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155c6:	602f      	str	r7, [r5, #0]
 80155c8:	2900      	cmp	r1, #0
 80155ca:	d0ca      	beq.n	8015562 <__sflush_r+0x1a>
 80155cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155d0:	4299      	cmp	r1, r3
 80155d2:	d002      	beq.n	80155da <__sflush_r+0x92>
 80155d4:	4628      	mov	r0, r5
 80155d6:	f7ff fd91 	bl	80150fc <_free_r>
 80155da:	2000      	movs	r0, #0
 80155dc:	6360      	str	r0, [r4, #52]	; 0x34
 80155de:	e7c1      	b.n	8015564 <__sflush_r+0x1c>
 80155e0:	6a21      	ldr	r1, [r4, #32]
 80155e2:	2301      	movs	r3, #1
 80155e4:	4628      	mov	r0, r5
 80155e6:	47b0      	blx	r6
 80155e8:	1c41      	adds	r1, r0, #1
 80155ea:	d1c7      	bne.n	801557c <__sflush_r+0x34>
 80155ec:	682b      	ldr	r3, [r5, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d0c4      	beq.n	801557c <__sflush_r+0x34>
 80155f2:	2b1d      	cmp	r3, #29
 80155f4:	d001      	beq.n	80155fa <__sflush_r+0xb2>
 80155f6:	2b16      	cmp	r3, #22
 80155f8:	d101      	bne.n	80155fe <__sflush_r+0xb6>
 80155fa:	602f      	str	r7, [r5, #0]
 80155fc:	e7b1      	b.n	8015562 <__sflush_r+0x1a>
 80155fe:	89a3      	ldrh	r3, [r4, #12]
 8015600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015604:	81a3      	strh	r3, [r4, #12]
 8015606:	e7ad      	b.n	8015564 <__sflush_r+0x1c>
 8015608:	690f      	ldr	r7, [r1, #16]
 801560a:	2f00      	cmp	r7, #0
 801560c:	d0a9      	beq.n	8015562 <__sflush_r+0x1a>
 801560e:	0793      	lsls	r3, r2, #30
 8015610:	680e      	ldr	r6, [r1, #0]
 8015612:	bf08      	it	eq
 8015614:	694b      	ldreq	r3, [r1, #20]
 8015616:	600f      	str	r7, [r1, #0]
 8015618:	bf18      	it	ne
 801561a:	2300      	movne	r3, #0
 801561c:	eba6 0807 	sub.w	r8, r6, r7
 8015620:	608b      	str	r3, [r1, #8]
 8015622:	f1b8 0f00 	cmp.w	r8, #0
 8015626:	dd9c      	ble.n	8015562 <__sflush_r+0x1a>
 8015628:	6a21      	ldr	r1, [r4, #32]
 801562a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801562c:	4643      	mov	r3, r8
 801562e:	463a      	mov	r2, r7
 8015630:	4628      	mov	r0, r5
 8015632:	47b0      	blx	r6
 8015634:	2800      	cmp	r0, #0
 8015636:	dc06      	bgt.n	8015646 <__sflush_r+0xfe>
 8015638:	89a3      	ldrh	r3, [r4, #12]
 801563a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801563e:	81a3      	strh	r3, [r4, #12]
 8015640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015644:	e78e      	b.n	8015564 <__sflush_r+0x1c>
 8015646:	4407      	add	r7, r0
 8015648:	eba8 0800 	sub.w	r8, r8, r0
 801564c:	e7e9      	b.n	8015622 <__sflush_r+0xda>
 801564e:	bf00      	nop
 8015650:	20400001 	.word	0x20400001

08015654 <_fflush_r>:
 8015654:	b538      	push	{r3, r4, r5, lr}
 8015656:	690b      	ldr	r3, [r1, #16]
 8015658:	4605      	mov	r5, r0
 801565a:	460c      	mov	r4, r1
 801565c:	b913      	cbnz	r3, 8015664 <_fflush_r+0x10>
 801565e:	2500      	movs	r5, #0
 8015660:	4628      	mov	r0, r5
 8015662:	bd38      	pop	{r3, r4, r5, pc}
 8015664:	b118      	cbz	r0, 801566e <_fflush_r+0x1a>
 8015666:	6983      	ldr	r3, [r0, #24]
 8015668:	b90b      	cbnz	r3, 801566e <_fflush_r+0x1a>
 801566a:	f000 f887 	bl	801577c <__sinit>
 801566e:	4b14      	ldr	r3, [pc, #80]	; (80156c0 <_fflush_r+0x6c>)
 8015670:	429c      	cmp	r4, r3
 8015672:	d11b      	bne.n	80156ac <_fflush_r+0x58>
 8015674:	686c      	ldr	r4, [r5, #4]
 8015676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d0ef      	beq.n	801565e <_fflush_r+0xa>
 801567e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015680:	07d0      	lsls	r0, r2, #31
 8015682:	d404      	bmi.n	801568e <_fflush_r+0x3a>
 8015684:	0599      	lsls	r1, r3, #22
 8015686:	d402      	bmi.n	801568e <_fflush_r+0x3a>
 8015688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801568a:	f000 f915 	bl	80158b8 <__retarget_lock_acquire_recursive>
 801568e:	4628      	mov	r0, r5
 8015690:	4621      	mov	r1, r4
 8015692:	f7ff ff59 	bl	8015548 <__sflush_r>
 8015696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015698:	07da      	lsls	r2, r3, #31
 801569a:	4605      	mov	r5, r0
 801569c:	d4e0      	bmi.n	8015660 <_fflush_r+0xc>
 801569e:	89a3      	ldrh	r3, [r4, #12]
 80156a0:	059b      	lsls	r3, r3, #22
 80156a2:	d4dd      	bmi.n	8015660 <_fflush_r+0xc>
 80156a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156a6:	f000 f908 	bl	80158ba <__retarget_lock_release_recursive>
 80156aa:	e7d9      	b.n	8015660 <_fflush_r+0xc>
 80156ac:	4b05      	ldr	r3, [pc, #20]	; (80156c4 <_fflush_r+0x70>)
 80156ae:	429c      	cmp	r4, r3
 80156b0:	d101      	bne.n	80156b6 <_fflush_r+0x62>
 80156b2:	68ac      	ldr	r4, [r5, #8]
 80156b4:	e7df      	b.n	8015676 <_fflush_r+0x22>
 80156b6:	4b04      	ldr	r3, [pc, #16]	; (80156c8 <_fflush_r+0x74>)
 80156b8:	429c      	cmp	r4, r3
 80156ba:	bf08      	it	eq
 80156bc:	68ec      	ldreq	r4, [r5, #12]
 80156be:	e7da      	b.n	8015676 <_fflush_r+0x22>
 80156c0:	08015f64 	.word	0x08015f64
 80156c4:	08015f84 	.word	0x08015f84
 80156c8:	08015f44 	.word	0x08015f44

080156cc <std>:
 80156cc:	2300      	movs	r3, #0
 80156ce:	b510      	push	{r4, lr}
 80156d0:	4604      	mov	r4, r0
 80156d2:	e9c0 3300 	strd	r3, r3, [r0]
 80156d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80156da:	6083      	str	r3, [r0, #8]
 80156dc:	8181      	strh	r1, [r0, #12]
 80156de:	6643      	str	r3, [r0, #100]	; 0x64
 80156e0:	81c2      	strh	r2, [r0, #14]
 80156e2:	6183      	str	r3, [r0, #24]
 80156e4:	4619      	mov	r1, r3
 80156e6:	2208      	movs	r2, #8
 80156e8:	305c      	adds	r0, #92	; 0x5c
 80156ea:	f7ff fcff 	bl	80150ec <memset>
 80156ee:	4b05      	ldr	r3, [pc, #20]	; (8015704 <std+0x38>)
 80156f0:	6263      	str	r3, [r4, #36]	; 0x24
 80156f2:	4b05      	ldr	r3, [pc, #20]	; (8015708 <std+0x3c>)
 80156f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80156f6:	4b05      	ldr	r3, [pc, #20]	; (801570c <std+0x40>)
 80156f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80156fa:	4b05      	ldr	r3, [pc, #20]	; (8015710 <std+0x44>)
 80156fc:	6224      	str	r4, [r4, #32]
 80156fe:	6323      	str	r3, [r4, #48]	; 0x30
 8015700:	bd10      	pop	{r4, pc}
 8015702:	bf00      	nop
 8015704:	080159a1 	.word	0x080159a1
 8015708:	080159c3 	.word	0x080159c3
 801570c:	080159fb 	.word	0x080159fb
 8015710:	08015a1f 	.word	0x08015a1f

08015714 <_cleanup_r>:
 8015714:	4901      	ldr	r1, [pc, #4]	; (801571c <_cleanup_r+0x8>)
 8015716:	f000 b8af 	b.w	8015878 <_fwalk_reent>
 801571a:	bf00      	nop
 801571c:	08015655 	.word	0x08015655

08015720 <__sfmoreglue>:
 8015720:	b570      	push	{r4, r5, r6, lr}
 8015722:	2268      	movs	r2, #104	; 0x68
 8015724:	1e4d      	subs	r5, r1, #1
 8015726:	4355      	muls	r5, r2
 8015728:	460e      	mov	r6, r1
 801572a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801572e:	f7ff fd51 	bl	80151d4 <_malloc_r>
 8015732:	4604      	mov	r4, r0
 8015734:	b140      	cbz	r0, 8015748 <__sfmoreglue+0x28>
 8015736:	2100      	movs	r1, #0
 8015738:	e9c0 1600 	strd	r1, r6, [r0]
 801573c:	300c      	adds	r0, #12
 801573e:	60a0      	str	r0, [r4, #8]
 8015740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015744:	f7ff fcd2 	bl	80150ec <memset>
 8015748:	4620      	mov	r0, r4
 801574a:	bd70      	pop	{r4, r5, r6, pc}

0801574c <__sfp_lock_acquire>:
 801574c:	4801      	ldr	r0, [pc, #4]	; (8015754 <__sfp_lock_acquire+0x8>)
 801574e:	f000 b8b3 	b.w	80158b8 <__retarget_lock_acquire_recursive>
 8015752:	bf00      	nop
 8015754:	240055e9 	.word	0x240055e9

08015758 <__sfp_lock_release>:
 8015758:	4801      	ldr	r0, [pc, #4]	; (8015760 <__sfp_lock_release+0x8>)
 801575a:	f000 b8ae 	b.w	80158ba <__retarget_lock_release_recursive>
 801575e:	bf00      	nop
 8015760:	240055e9 	.word	0x240055e9

08015764 <__sinit_lock_acquire>:
 8015764:	4801      	ldr	r0, [pc, #4]	; (801576c <__sinit_lock_acquire+0x8>)
 8015766:	f000 b8a7 	b.w	80158b8 <__retarget_lock_acquire_recursive>
 801576a:	bf00      	nop
 801576c:	240055ea 	.word	0x240055ea

08015770 <__sinit_lock_release>:
 8015770:	4801      	ldr	r0, [pc, #4]	; (8015778 <__sinit_lock_release+0x8>)
 8015772:	f000 b8a2 	b.w	80158ba <__retarget_lock_release_recursive>
 8015776:	bf00      	nop
 8015778:	240055ea 	.word	0x240055ea

0801577c <__sinit>:
 801577c:	b510      	push	{r4, lr}
 801577e:	4604      	mov	r4, r0
 8015780:	f7ff fff0 	bl	8015764 <__sinit_lock_acquire>
 8015784:	69a3      	ldr	r3, [r4, #24]
 8015786:	b11b      	cbz	r3, 8015790 <__sinit+0x14>
 8015788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801578c:	f7ff bff0 	b.w	8015770 <__sinit_lock_release>
 8015790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015794:	6523      	str	r3, [r4, #80]	; 0x50
 8015796:	4b13      	ldr	r3, [pc, #76]	; (80157e4 <__sinit+0x68>)
 8015798:	4a13      	ldr	r2, [pc, #76]	; (80157e8 <__sinit+0x6c>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	62a2      	str	r2, [r4, #40]	; 0x28
 801579e:	42a3      	cmp	r3, r4
 80157a0:	bf04      	itt	eq
 80157a2:	2301      	moveq	r3, #1
 80157a4:	61a3      	streq	r3, [r4, #24]
 80157a6:	4620      	mov	r0, r4
 80157a8:	f000 f820 	bl	80157ec <__sfp>
 80157ac:	6060      	str	r0, [r4, #4]
 80157ae:	4620      	mov	r0, r4
 80157b0:	f000 f81c 	bl	80157ec <__sfp>
 80157b4:	60a0      	str	r0, [r4, #8]
 80157b6:	4620      	mov	r0, r4
 80157b8:	f000 f818 	bl	80157ec <__sfp>
 80157bc:	2200      	movs	r2, #0
 80157be:	60e0      	str	r0, [r4, #12]
 80157c0:	2104      	movs	r1, #4
 80157c2:	6860      	ldr	r0, [r4, #4]
 80157c4:	f7ff ff82 	bl	80156cc <std>
 80157c8:	68a0      	ldr	r0, [r4, #8]
 80157ca:	2201      	movs	r2, #1
 80157cc:	2109      	movs	r1, #9
 80157ce:	f7ff ff7d 	bl	80156cc <std>
 80157d2:	68e0      	ldr	r0, [r4, #12]
 80157d4:	2202      	movs	r2, #2
 80157d6:	2112      	movs	r1, #18
 80157d8:	f7ff ff78 	bl	80156cc <std>
 80157dc:	2301      	movs	r3, #1
 80157de:	61a3      	str	r3, [r4, #24]
 80157e0:	e7d2      	b.n	8015788 <__sinit+0xc>
 80157e2:	bf00      	nop
 80157e4:	08015f40 	.word	0x08015f40
 80157e8:	08015715 	.word	0x08015715

080157ec <__sfp>:
 80157ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ee:	4607      	mov	r7, r0
 80157f0:	f7ff ffac 	bl	801574c <__sfp_lock_acquire>
 80157f4:	4b1e      	ldr	r3, [pc, #120]	; (8015870 <__sfp+0x84>)
 80157f6:	681e      	ldr	r6, [r3, #0]
 80157f8:	69b3      	ldr	r3, [r6, #24]
 80157fa:	b913      	cbnz	r3, 8015802 <__sfp+0x16>
 80157fc:	4630      	mov	r0, r6
 80157fe:	f7ff ffbd 	bl	801577c <__sinit>
 8015802:	3648      	adds	r6, #72	; 0x48
 8015804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015808:	3b01      	subs	r3, #1
 801580a:	d503      	bpl.n	8015814 <__sfp+0x28>
 801580c:	6833      	ldr	r3, [r6, #0]
 801580e:	b30b      	cbz	r3, 8015854 <__sfp+0x68>
 8015810:	6836      	ldr	r6, [r6, #0]
 8015812:	e7f7      	b.n	8015804 <__sfp+0x18>
 8015814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015818:	b9d5      	cbnz	r5, 8015850 <__sfp+0x64>
 801581a:	4b16      	ldr	r3, [pc, #88]	; (8015874 <__sfp+0x88>)
 801581c:	60e3      	str	r3, [r4, #12]
 801581e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015822:	6665      	str	r5, [r4, #100]	; 0x64
 8015824:	f000 f847 	bl	80158b6 <__retarget_lock_init_recursive>
 8015828:	f7ff ff96 	bl	8015758 <__sfp_lock_release>
 801582c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015834:	6025      	str	r5, [r4, #0]
 8015836:	61a5      	str	r5, [r4, #24]
 8015838:	2208      	movs	r2, #8
 801583a:	4629      	mov	r1, r5
 801583c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015840:	f7ff fc54 	bl	80150ec <memset>
 8015844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801584c:	4620      	mov	r0, r4
 801584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015850:	3468      	adds	r4, #104	; 0x68
 8015852:	e7d9      	b.n	8015808 <__sfp+0x1c>
 8015854:	2104      	movs	r1, #4
 8015856:	4638      	mov	r0, r7
 8015858:	f7ff ff62 	bl	8015720 <__sfmoreglue>
 801585c:	4604      	mov	r4, r0
 801585e:	6030      	str	r0, [r6, #0]
 8015860:	2800      	cmp	r0, #0
 8015862:	d1d5      	bne.n	8015810 <__sfp+0x24>
 8015864:	f7ff ff78 	bl	8015758 <__sfp_lock_release>
 8015868:	230c      	movs	r3, #12
 801586a:	603b      	str	r3, [r7, #0]
 801586c:	e7ee      	b.n	801584c <__sfp+0x60>
 801586e:	bf00      	nop
 8015870:	08015f40 	.word	0x08015f40
 8015874:	ffff0001 	.word	0xffff0001

08015878 <_fwalk_reent>:
 8015878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801587c:	4606      	mov	r6, r0
 801587e:	4688      	mov	r8, r1
 8015880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015884:	2700      	movs	r7, #0
 8015886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801588a:	f1b9 0901 	subs.w	r9, r9, #1
 801588e:	d505      	bpl.n	801589c <_fwalk_reent+0x24>
 8015890:	6824      	ldr	r4, [r4, #0]
 8015892:	2c00      	cmp	r4, #0
 8015894:	d1f7      	bne.n	8015886 <_fwalk_reent+0xe>
 8015896:	4638      	mov	r0, r7
 8015898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801589c:	89ab      	ldrh	r3, [r5, #12]
 801589e:	2b01      	cmp	r3, #1
 80158a0:	d907      	bls.n	80158b2 <_fwalk_reent+0x3a>
 80158a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80158a6:	3301      	adds	r3, #1
 80158a8:	d003      	beq.n	80158b2 <_fwalk_reent+0x3a>
 80158aa:	4629      	mov	r1, r5
 80158ac:	4630      	mov	r0, r6
 80158ae:	47c0      	blx	r8
 80158b0:	4307      	orrs	r7, r0
 80158b2:	3568      	adds	r5, #104	; 0x68
 80158b4:	e7e9      	b.n	801588a <_fwalk_reent+0x12>

080158b6 <__retarget_lock_init_recursive>:
 80158b6:	4770      	bx	lr

080158b8 <__retarget_lock_acquire_recursive>:
 80158b8:	4770      	bx	lr

080158ba <__retarget_lock_release_recursive>:
 80158ba:	4770      	bx	lr

080158bc <__swhatbuf_r>:
 80158bc:	b570      	push	{r4, r5, r6, lr}
 80158be:	460e      	mov	r6, r1
 80158c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158c4:	2900      	cmp	r1, #0
 80158c6:	b096      	sub	sp, #88	; 0x58
 80158c8:	4614      	mov	r4, r2
 80158ca:	461d      	mov	r5, r3
 80158cc:	da08      	bge.n	80158e0 <__swhatbuf_r+0x24>
 80158ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80158d2:	2200      	movs	r2, #0
 80158d4:	602a      	str	r2, [r5, #0]
 80158d6:	061a      	lsls	r2, r3, #24
 80158d8:	d410      	bmi.n	80158fc <__swhatbuf_r+0x40>
 80158da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158de:	e00e      	b.n	80158fe <__swhatbuf_r+0x42>
 80158e0:	466a      	mov	r2, sp
 80158e2:	f000 f8c3 	bl	8015a6c <_fstat_r>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	dbf1      	blt.n	80158ce <__swhatbuf_r+0x12>
 80158ea:	9a01      	ldr	r2, [sp, #4]
 80158ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80158f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80158f4:	425a      	negs	r2, r3
 80158f6:	415a      	adcs	r2, r3
 80158f8:	602a      	str	r2, [r5, #0]
 80158fa:	e7ee      	b.n	80158da <__swhatbuf_r+0x1e>
 80158fc:	2340      	movs	r3, #64	; 0x40
 80158fe:	2000      	movs	r0, #0
 8015900:	6023      	str	r3, [r4, #0]
 8015902:	b016      	add	sp, #88	; 0x58
 8015904:	bd70      	pop	{r4, r5, r6, pc}
	...

08015908 <__smakebuf_r>:
 8015908:	898b      	ldrh	r3, [r1, #12]
 801590a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801590c:	079d      	lsls	r5, r3, #30
 801590e:	4606      	mov	r6, r0
 8015910:	460c      	mov	r4, r1
 8015912:	d507      	bpl.n	8015924 <__smakebuf_r+0x1c>
 8015914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015918:	6023      	str	r3, [r4, #0]
 801591a:	6123      	str	r3, [r4, #16]
 801591c:	2301      	movs	r3, #1
 801591e:	6163      	str	r3, [r4, #20]
 8015920:	b002      	add	sp, #8
 8015922:	bd70      	pop	{r4, r5, r6, pc}
 8015924:	ab01      	add	r3, sp, #4
 8015926:	466a      	mov	r2, sp
 8015928:	f7ff ffc8 	bl	80158bc <__swhatbuf_r>
 801592c:	9900      	ldr	r1, [sp, #0]
 801592e:	4605      	mov	r5, r0
 8015930:	4630      	mov	r0, r6
 8015932:	f7ff fc4f 	bl	80151d4 <_malloc_r>
 8015936:	b948      	cbnz	r0, 801594c <__smakebuf_r+0x44>
 8015938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801593c:	059a      	lsls	r2, r3, #22
 801593e:	d4ef      	bmi.n	8015920 <__smakebuf_r+0x18>
 8015940:	f023 0303 	bic.w	r3, r3, #3
 8015944:	f043 0302 	orr.w	r3, r3, #2
 8015948:	81a3      	strh	r3, [r4, #12]
 801594a:	e7e3      	b.n	8015914 <__smakebuf_r+0xc>
 801594c:	4b0d      	ldr	r3, [pc, #52]	; (8015984 <__smakebuf_r+0x7c>)
 801594e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015950:	89a3      	ldrh	r3, [r4, #12]
 8015952:	6020      	str	r0, [r4, #0]
 8015954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015958:	81a3      	strh	r3, [r4, #12]
 801595a:	9b00      	ldr	r3, [sp, #0]
 801595c:	6163      	str	r3, [r4, #20]
 801595e:	9b01      	ldr	r3, [sp, #4]
 8015960:	6120      	str	r0, [r4, #16]
 8015962:	b15b      	cbz	r3, 801597c <__smakebuf_r+0x74>
 8015964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015968:	4630      	mov	r0, r6
 801596a:	f000 f891 	bl	8015a90 <_isatty_r>
 801596e:	b128      	cbz	r0, 801597c <__smakebuf_r+0x74>
 8015970:	89a3      	ldrh	r3, [r4, #12]
 8015972:	f023 0303 	bic.w	r3, r3, #3
 8015976:	f043 0301 	orr.w	r3, r3, #1
 801597a:	81a3      	strh	r3, [r4, #12]
 801597c:	89a0      	ldrh	r0, [r4, #12]
 801597e:	4305      	orrs	r5, r0
 8015980:	81a5      	strh	r5, [r4, #12]
 8015982:	e7cd      	b.n	8015920 <__smakebuf_r+0x18>
 8015984:	08015715 	.word	0x08015715

08015988 <__malloc_lock>:
 8015988:	4801      	ldr	r0, [pc, #4]	; (8015990 <__malloc_lock+0x8>)
 801598a:	f7ff bf95 	b.w	80158b8 <__retarget_lock_acquire_recursive>
 801598e:	bf00      	nop
 8015990:	240055e8 	.word	0x240055e8

08015994 <__malloc_unlock>:
 8015994:	4801      	ldr	r0, [pc, #4]	; (801599c <__malloc_unlock+0x8>)
 8015996:	f7ff bf90 	b.w	80158ba <__retarget_lock_release_recursive>
 801599a:	bf00      	nop
 801599c:	240055e8 	.word	0x240055e8

080159a0 <__sread>:
 80159a0:	b510      	push	{r4, lr}
 80159a2:	460c      	mov	r4, r1
 80159a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159a8:	f000 f894 	bl	8015ad4 <_read_r>
 80159ac:	2800      	cmp	r0, #0
 80159ae:	bfab      	itete	ge
 80159b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80159b2:	89a3      	ldrhlt	r3, [r4, #12]
 80159b4:	181b      	addge	r3, r3, r0
 80159b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80159ba:	bfac      	ite	ge
 80159bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80159be:	81a3      	strhlt	r3, [r4, #12]
 80159c0:	bd10      	pop	{r4, pc}

080159c2 <__swrite>:
 80159c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c6:	461f      	mov	r7, r3
 80159c8:	898b      	ldrh	r3, [r1, #12]
 80159ca:	05db      	lsls	r3, r3, #23
 80159cc:	4605      	mov	r5, r0
 80159ce:	460c      	mov	r4, r1
 80159d0:	4616      	mov	r6, r2
 80159d2:	d505      	bpl.n	80159e0 <__swrite+0x1e>
 80159d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159d8:	2302      	movs	r3, #2
 80159da:	2200      	movs	r2, #0
 80159dc:	f000 f868 	bl	8015ab0 <_lseek_r>
 80159e0:	89a3      	ldrh	r3, [r4, #12]
 80159e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80159ea:	81a3      	strh	r3, [r4, #12]
 80159ec:	4632      	mov	r2, r6
 80159ee:	463b      	mov	r3, r7
 80159f0:	4628      	mov	r0, r5
 80159f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159f6:	f000 b817 	b.w	8015a28 <_write_r>

080159fa <__sseek>:
 80159fa:	b510      	push	{r4, lr}
 80159fc:	460c      	mov	r4, r1
 80159fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a02:	f000 f855 	bl	8015ab0 <_lseek_r>
 8015a06:	1c43      	adds	r3, r0, #1
 8015a08:	89a3      	ldrh	r3, [r4, #12]
 8015a0a:	bf15      	itete	ne
 8015a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015a16:	81a3      	strheq	r3, [r4, #12]
 8015a18:	bf18      	it	ne
 8015a1a:	81a3      	strhne	r3, [r4, #12]
 8015a1c:	bd10      	pop	{r4, pc}

08015a1e <__sclose>:
 8015a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a22:	f000 b813 	b.w	8015a4c <_close_r>
	...

08015a28 <_write_r>:
 8015a28:	b538      	push	{r3, r4, r5, lr}
 8015a2a:	4d07      	ldr	r5, [pc, #28]	; (8015a48 <_write_r+0x20>)
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	4608      	mov	r0, r1
 8015a30:	4611      	mov	r1, r2
 8015a32:	2200      	movs	r2, #0
 8015a34:	602a      	str	r2, [r5, #0]
 8015a36:	461a      	mov	r2, r3
 8015a38:	f7ec fea9 	bl	800278e <_write>
 8015a3c:	1c43      	adds	r3, r0, #1
 8015a3e:	d102      	bne.n	8015a46 <_write_r+0x1e>
 8015a40:	682b      	ldr	r3, [r5, #0]
 8015a42:	b103      	cbz	r3, 8015a46 <_write_r+0x1e>
 8015a44:	6023      	str	r3, [r4, #0]
 8015a46:	bd38      	pop	{r3, r4, r5, pc}
 8015a48:	240055ec 	.word	0x240055ec

08015a4c <_close_r>:
 8015a4c:	b538      	push	{r3, r4, r5, lr}
 8015a4e:	4d06      	ldr	r5, [pc, #24]	; (8015a68 <_close_r+0x1c>)
 8015a50:	2300      	movs	r3, #0
 8015a52:	4604      	mov	r4, r0
 8015a54:	4608      	mov	r0, r1
 8015a56:	602b      	str	r3, [r5, #0]
 8015a58:	f7ec feb5 	bl	80027c6 <_close>
 8015a5c:	1c43      	adds	r3, r0, #1
 8015a5e:	d102      	bne.n	8015a66 <_close_r+0x1a>
 8015a60:	682b      	ldr	r3, [r5, #0]
 8015a62:	b103      	cbz	r3, 8015a66 <_close_r+0x1a>
 8015a64:	6023      	str	r3, [r4, #0]
 8015a66:	bd38      	pop	{r3, r4, r5, pc}
 8015a68:	240055ec 	.word	0x240055ec

08015a6c <_fstat_r>:
 8015a6c:	b538      	push	{r3, r4, r5, lr}
 8015a6e:	4d07      	ldr	r5, [pc, #28]	; (8015a8c <_fstat_r+0x20>)
 8015a70:	2300      	movs	r3, #0
 8015a72:	4604      	mov	r4, r0
 8015a74:	4608      	mov	r0, r1
 8015a76:	4611      	mov	r1, r2
 8015a78:	602b      	str	r3, [r5, #0]
 8015a7a:	f7ec feb0 	bl	80027de <_fstat>
 8015a7e:	1c43      	adds	r3, r0, #1
 8015a80:	d102      	bne.n	8015a88 <_fstat_r+0x1c>
 8015a82:	682b      	ldr	r3, [r5, #0]
 8015a84:	b103      	cbz	r3, 8015a88 <_fstat_r+0x1c>
 8015a86:	6023      	str	r3, [r4, #0]
 8015a88:	bd38      	pop	{r3, r4, r5, pc}
 8015a8a:	bf00      	nop
 8015a8c:	240055ec 	.word	0x240055ec

08015a90 <_isatty_r>:
 8015a90:	b538      	push	{r3, r4, r5, lr}
 8015a92:	4d06      	ldr	r5, [pc, #24]	; (8015aac <_isatty_r+0x1c>)
 8015a94:	2300      	movs	r3, #0
 8015a96:	4604      	mov	r4, r0
 8015a98:	4608      	mov	r0, r1
 8015a9a:	602b      	str	r3, [r5, #0]
 8015a9c:	f7ec feaf 	bl	80027fe <_isatty>
 8015aa0:	1c43      	adds	r3, r0, #1
 8015aa2:	d102      	bne.n	8015aaa <_isatty_r+0x1a>
 8015aa4:	682b      	ldr	r3, [r5, #0]
 8015aa6:	b103      	cbz	r3, 8015aaa <_isatty_r+0x1a>
 8015aa8:	6023      	str	r3, [r4, #0]
 8015aaa:	bd38      	pop	{r3, r4, r5, pc}
 8015aac:	240055ec 	.word	0x240055ec

08015ab0 <_lseek_r>:
 8015ab0:	b538      	push	{r3, r4, r5, lr}
 8015ab2:	4d07      	ldr	r5, [pc, #28]	; (8015ad0 <_lseek_r+0x20>)
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	4608      	mov	r0, r1
 8015ab8:	4611      	mov	r1, r2
 8015aba:	2200      	movs	r2, #0
 8015abc:	602a      	str	r2, [r5, #0]
 8015abe:	461a      	mov	r2, r3
 8015ac0:	f7ec fea8 	bl	8002814 <_lseek>
 8015ac4:	1c43      	adds	r3, r0, #1
 8015ac6:	d102      	bne.n	8015ace <_lseek_r+0x1e>
 8015ac8:	682b      	ldr	r3, [r5, #0]
 8015aca:	b103      	cbz	r3, 8015ace <_lseek_r+0x1e>
 8015acc:	6023      	str	r3, [r4, #0]
 8015ace:	bd38      	pop	{r3, r4, r5, pc}
 8015ad0:	240055ec 	.word	0x240055ec

08015ad4 <_read_r>:
 8015ad4:	b538      	push	{r3, r4, r5, lr}
 8015ad6:	4d07      	ldr	r5, [pc, #28]	; (8015af4 <_read_r+0x20>)
 8015ad8:	4604      	mov	r4, r0
 8015ada:	4608      	mov	r0, r1
 8015adc:	4611      	mov	r1, r2
 8015ade:	2200      	movs	r2, #0
 8015ae0:	602a      	str	r2, [r5, #0]
 8015ae2:	461a      	mov	r2, r3
 8015ae4:	f7ec fe36 	bl	8002754 <_read>
 8015ae8:	1c43      	adds	r3, r0, #1
 8015aea:	d102      	bne.n	8015af2 <_read_r+0x1e>
 8015aec:	682b      	ldr	r3, [r5, #0]
 8015aee:	b103      	cbz	r3, 8015af2 <_read_r+0x1e>
 8015af0:	6023      	str	r3, [r4, #0]
 8015af2:	bd38      	pop	{r3, r4, r5, pc}
 8015af4:	240055ec 	.word	0x240055ec

08015af8 <_init>:
 8015af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afa:	bf00      	nop
 8015afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015afe:	bc08      	pop	{r3}
 8015b00:	469e      	mov	lr, r3
 8015b02:	4770      	bx	lr

08015b04 <_fini>:
 8015b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b06:	bf00      	nop
 8015b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b0a:	bc08      	pop	{r3}
 8015b0c:	469e      	mov	lr, r3
 8015b0e:	4770      	bx	lr
