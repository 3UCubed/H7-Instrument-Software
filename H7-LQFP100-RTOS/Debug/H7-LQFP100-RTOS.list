
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a700  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a9a0  0801a9a0  0002a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ae38  0801ae38  0002ae38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ae40  0801ae40  0002ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ae44  0801ae44  0002ae44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  0801ae48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000681c  24000120  0801af50  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400693c  0801af50  0003693c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   000411a5  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007da0  00000000  00000000  000712db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ba8  00000000  00000000  00079080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002860  00000000  00000000  0007bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000431c1  00000000  00000000  000c4c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196a5c  00000000  00000000  00107e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e888  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc80  00000000  00000000  0029e8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a988 	.word	0x0801a988

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0801a988 	.word	0x0801a988

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fb6b 	bl	8005d44 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f916 	bl	80038a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fc86 	bl	8006f94 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f909 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fdc9 	bl	800624c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f8f0 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fdbb 	bl	800624c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f8e2 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fdad 	bl	800624c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f8d4 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fd9f 	bl	800624c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f8c6 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fd90 	bl	800624c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f8b7 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fd81 	bl	800624c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f8a8 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fd72 	bl	800624c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f899 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fd63 	bl	800624c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f88a 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fd54 	bl	800624c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f87b 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fd45 	bl	800624c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f86c 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fd36 	bl	800624c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f85d 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fa53 	bl	8005d44 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 fffe 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fcbe 	bl	800624c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 ffe5 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fcb0 	bl	800624c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 ffd7 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fca2 	bl	800624c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 ffc9 	bl	80038a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fc94 	bl	800624c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 ffbb 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fa36 	bl	800ae6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fa2a 	bl	800ae6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fa1e 	bl	800ae6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f8c9 	bl	8007c0c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ff10 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 ff0c 	bl	80058fc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 ff06 	bl	80058fc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 f869 	bl	8007c0c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 feb0 	bl	80038a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 f9f5 	bl	8019f7c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fc31 	bl	8007400 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fe7e 	bl	80038a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fe4c 	bl	8007860 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fe69 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f909 	bl	800ae6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 ffb4 	bl	8007c0c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fdfb 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fafe 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fb15 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fad5 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 faec 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 facd 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fae4 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fac5 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fadc 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fabd 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fad4 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fab5 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 facc 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 faad 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fac4 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 faa5 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fabc 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fa9d 	bl	80072c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fab4 	bl	80072f4 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 f8d6 	bl	8019f7c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fe8c 	bl	800ab88 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fe31 	bl	800ab88 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fc7e 	bl	800a8b8 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000380 	.word	0x24000380
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fbd2 	bl	800a8b8 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fcde 	bl	800ab88 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fc7b 	bl	800ab88 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fac8 	bl	800a8b8 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fba6 	bl	800ab88 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b05      	cmp	r3, #5
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f9b1 	bl	800a8b8 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fabe 	bl	800ab88 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000380 	.word	0x24000380
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fbc2 	bl	8019f7c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f999 	bl	800ab88 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f008 ffe7 	bl	800a8b8 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f8fb 	bl	800ab88 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fa5d 	bl	8019f7c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fa54 	bl	8019f7c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 feb3 	bl	800a8b8 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 fea0 	bl	800a8b8 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f99f 	bl	8019f7c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f998 	bl	8019f7c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fdf9 	bl	800a8b8 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fe11 	bl	800a9dc <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 feb9 	bl	800ab88 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fd05 	bl	800a8b8 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000380 	.word	0x24000380
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
#include "eeprom.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { 0x5555, 0x6666, 0x7777, 0x8888, 0x9999, 0xAAAA };
uint16_t VarDataTab[NB_OF_VAR] = { 0, 0, 0, 0, 0, 0 };

void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]


	switch (error.category) {
 8001f64:	793b      	ldrb	r3, [r7, #4]
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d838      	bhi.n	8001fdc <handle_error+0x80>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <handle_error+0x14>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001fa7 	.word	0x08001fa7
 8001f78:	08001fb3 	.word	0x08001fb3
 8001f7c:	08001fbf 	.word	0x08001fbf
 8001f80:	08001fc9 	.word	0x08001fc9
 8001f84:	08001fd3 	.word	0x08001fd3
	case EC_power_supply_rail:
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <handle_error+0x90>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f014 ff2c 	bl	8016dec <osEventFlagsSet>
		increment_error_counter(error.category);
 8001f94:	793b      	ldrb	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f837 	bl	800200a <increment_error_counter>
		send_error_packet(error);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8b1 	bl	8002104 <send_error_packet>
		NVIC_SystemReset();
 8001fa2:	f7ff ffc5 	bl	8001f30 <__NVIC_SystemReset>
		break;
	case EC_seu:
		increment_error_counter(error.category);
 8001fa6:	793b      	ldrb	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f82e 	bl	800200a <increment_error_counter>
		NVIC_SystemReset();
 8001fae:	f7ff ffbf 	bl	8001f30 <__NVIC_SystemReset>
		break;
	case EC_peripheral:
		increment_error_counter(error.category);
 8001fb2:	793b      	ldrb	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f828 	bl	800200a <increment_error_counter>
		NVIC_SystemReset();
 8001fba:	f7ff ffb9 	bl	8001f30 <__NVIC_SystemReset>
		break;
	case EC_brownout:
		increment_error_counter(error.category);
 8001fbe:	793b      	ldrb	r3, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f822 	bl	800200a <increment_error_counter>
		break;
 8001fc6:	e00d      	b.n	8001fe4 <handle_error+0x88>
	case EC_software_reset:
		increment_error_counter(error.category);
 8001fc8:	793b      	ldrb	r3, [r7, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f81d 	bl	800200a <increment_error_counter>
		break;
 8001fd0:	e008      	b.n	8001fe4 <handle_error+0x88>
	case EC_watchdog:
		increment_error_counter(error.category);
 8001fd2:	793b      	ldrb	r3, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f818 	bl	800200a <increment_error_counter>
		break;
 8001fda:	e003      	b.n	8001fe4 <handle_error+0x88>
	default:
		send_error_packet(error);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f891 	bl	8002104 <send_error_packet>
		break;
 8001fe2:	bf00      	nop
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	24001a4c 	.word	0x24001a4c

08001ff0 <error_counter_init>:

void error_counter_init() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001ff4:	f008 fcf2 	bl	800a9dc <HAL_FLASH_Unlock>
	  if( EE_Init() != EE_OK)
 8001ff8:	f7fe fece 	bl	8000d98 <EE_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <error_counter_init+0x16>
	  {
		Error_Handler();
 8002002:	f001 fc4f 	bl	80038a4 <Error_Handler>
	  }
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}

0800200a <increment_error_counter>:

void increment_error_counter(ERROR_CATEGORY category) {
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
	uint16_t counter_value;
	counter_value = get_eeprom_error_counter(category);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f810 	bl	800203c <get_eeprom_error_counter>
 800201c:	4603      	mov	r3, r0
 800201e:	81fb      	strh	r3, [r7, #14]
	counter_value++;
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	3301      	adds	r3, #1
 8002024:	81fb      	strh	r3, [r7, #14]
	set_eeprom_error_counter(category, counter_value);
 8002026:	89fa      	ldrh	r2, [r7, #14]
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f823 	bl	8002078 <set_eeprom_error_counter>

}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <get_eeprom_error_counter>:

uint16_t get_eeprom_error_counter(ERROR_CATEGORY category) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
	uint16_t retval = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	81fb      	strh	r3, [r7, #14]
	if ((EE_ReadVariable(VirtAddVarTab[category], &retval)) != HAL_OK) {
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4a09      	ldr	r2, [pc, #36]	; (8002074 <get_eeprom_error_counter+0x38>)
 800204e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002052:	f107 020e 	add.w	r2, r7, #14
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fb55 	bl	8001708 <EE_ReadVariable>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <get_eeprom_error_counter+0x2c>
		Error_Handler();
 8002064:	f001 fc1e 	bl	80038a4 <Error_Handler>
	}
	return retval;
 8002068:	89fb      	ldrh	r3, [r7, #14]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	24000000 	.word	0x24000000

08002078 <set_eeprom_error_counter>:

void set_eeprom_error_counter(ERROR_CATEGORY category, uint16_t new_counter_value) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	80bb      	strh	r3, [r7, #4]
	VarDataTab[category] = new_counter_value;
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	490c      	ldr	r1, [pc, #48]	; (80020bc <set_eeprom_error_counter+0x44>)
 800208c:	88ba      	ldrh	r2, [r7, #4]
 800208e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if ((EE_WriteVariable(VirtAddVarTab[category], VarDataTab[category]))
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <set_eeprom_error_counter+0x48>)
 8002096:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <set_eeprom_error_counter+0x44>)
 800209e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f7ff fb77 	bl	8001798 <EE_WriteVariable>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <set_eeprom_error_counter+0x3c>
			!= HAL_OK) {
		Error_Handler();
 80020b0:	f001 fbf8 	bl	80038a4 <Error_Handler>
	}
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000384 	.word	0x24000384
 80020c0:	24000000 	.word	0x24000000

080020c4 <reset_eeprom_error_counters>:


void reset_eeprom_error_counters() {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_VAR; i++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	e00f      	b.n	80020f0 <reset_eeprom_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0x00))
 80020d0:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <reset_eeprom_error_counters+0x3c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fb5c 	bl	8001798 <EE_WriteVariable>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <reset_eeprom_error_counters+0x26>
				!= HAL_OK) {
			Error_Handler();
 80020e6:	f001 fbdd 	bl	80038a4 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3301      	adds	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	ddec      	ble.n	80020d0 <reset_eeprom_error_counters+0xc>
		}
	}
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	24000000 	.word	0x24000000

08002104 <send_error_packet>:


void send_error_packet(ERROR_STRUCT error) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[ERROR_PACKET_SIZE];

	buffer[0] = ERROR_PACKET_SYNC;
 800210c:	23dd      	movs	r3, #221	; 0xdd
 800210e:	733b      	strb	r3, [r7, #12]
	buffer[1] = ERROR_PACKET_SYNC;
 8002110:	23dd      	movs	r3, #221	; 0xdd
 8002112:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002114:	793b      	ldrb	r3, [r7, #4]
 8002116:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002118:	797b      	ldrb	r3, [r7, #5]
 800211a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, ERROR_PACKET_SIZE, 100);
 800211c:	f107 010c 	add.w	r1, r7, #12
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	2204      	movs	r2, #4
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <send_error_packet+0x34>)
 8002126:	f011 fefd 	bl	8013f24 <HAL_UART_Transmit>
	send_junk_packet();
 800212a:	f000 f807 	bl	800213c <send_junk_packet>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24001dfc 	.word	0x24001dfc

0800213c <send_junk_packet>:

void send_junk_packet() {
 800213c:	b580      	push	{r7, lr}
 800213e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8002142:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800214a:	e00d      	b.n	8002168 <send_junk_packet+0x2c>
		buffer[i] = 0xEE;
 800214c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002150:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002154:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002158:	4413      	add	r3, r2
 800215a:	22ee      	movs	r2, #238	; 0xee
 800215c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800215e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002162:	3301      	adds	r3, #1
 8002164:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002168:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800216c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002170:	dbec      	blt.n	800214c <send_junk_packet+0x10>
	}
	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 8002172:	1d39      	adds	r1, r7, #4
 8002174:	2364      	movs	r3, #100	; 0x64
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	4804      	ldr	r0, [pc, #16]	; (800218c <send_junk_packet+0x50>)
 800217c:	f011 fed2 	bl	8013f24 <HAL_UART_Transmit>
}
 8002180:	bf00      	nop
 8002182:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	24001dfc 	.word	0x24001dfc

08002190 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <vApplicationTickHook+0x18>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <vApplicationTickHook+0x18>)
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	24001a94 	.word	0x24001a94

080021ac <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80021c8:	4a24      	ldr	r2, [pc, #144]	; (800225c <MX_FREERTOS_Init+0x98>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4824      	ldr	r0, [pc, #144]	; (8002260 <MX_FREERTOS_Init+0x9c>)
 80021ce:	f014 fd01 	bl	8016bd4 <osThreadNew>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <MX_FREERTOS_Init+0xa0>)
 80021d6:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <MX_FREERTOS_Init+0xa4>)
 80021da:	2100      	movs	r1, #0
 80021dc:	4823      	ldr	r0, [pc, #140]	; (800226c <MX_FREERTOS_Init+0xa8>)
 80021de:	f014 fcf9 	bl	8016bd4 <osThreadNew>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <MX_FREERTOS_Init+0xac>)
 80021e6:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <MX_FREERTOS_Init+0xb0>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	4822      	ldr	r0, [pc, #136]	; (8002278 <MX_FREERTOS_Init+0xb4>)
 80021ee:	f014 fcf1 	bl	8016bd4 <osThreadNew>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a21      	ldr	r2, [pc, #132]	; (800227c <MX_FREERTOS_Init+0xb8>)
 80021f6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <MX_FREERTOS_Init+0xbc>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	4821      	ldr	r0, [pc, #132]	; (8002284 <MX_FREERTOS_Init+0xc0>)
 80021fe:	f014 fce9 	bl	8016bd4 <osThreadNew>
 8002202:	4603      	mov	r3, r0
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <MX_FREERTOS_Init+0xc4>)
 8002206:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002208:	4a20      	ldr	r2, [pc, #128]	; (800228c <MX_FREERTOS_Init+0xc8>)
 800220a:	2100      	movs	r1, #0
 800220c:	4820      	ldr	r0, [pc, #128]	; (8002290 <MX_FREERTOS_Init+0xcc>)
 800220e:	f014 fce1 	bl	8016bd4 <osThreadNew>
 8002212:	4603      	mov	r3, r0
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <MX_FREERTOS_Init+0xd0>)
 8002216:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002218:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <MX_FREERTOS_Init+0xd4>)
 800221a:	2100      	movs	r1, #0
 800221c:	481f      	ldr	r0, [pc, #124]	; (800229c <MX_FREERTOS_Init+0xd8>)
 800221e:	f014 fcd9 	bl	8016bd4 <osThreadNew>
 8002222:	4603      	mov	r3, r0
 8002224:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <MX_FREERTOS_Init+0xdc>)
 8002226:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002228:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <MX_FREERTOS_Init+0xe0>)
 800222a:	2100      	movs	r1, #0
 800222c:	481e      	ldr	r0, [pc, #120]	; (80022a8 <MX_FREERTOS_Init+0xe4>)
 800222e:	f014 fcd1 	bl	8016bd4 <osThreadNew>
 8002232:	4603      	mov	r3, r0
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <MX_FREERTOS_Init+0xe8>)
 8002236:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <MX_FREERTOS_Init+0xec>)
 800223a:	2100      	movs	r1, #0
 800223c:	481d      	ldr	r0, [pc, #116]	; (80022b4 <MX_FREERTOS_Init+0xf0>)
 800223e:	f014 fcc9 	bl	8016bd4 <osThreadNew>
 8002242:	4603      	mov	r3, r0
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <MX_FREERTOS_Init+0xf4>)
 8002246:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002248:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <MX_FREERTOS_Init+0xf8>)
 800224a:	2100      	movs	r1, #0
 800224c:	481c      	ldr	r0, [pc, #112]	; (80022c0 <MX_FREERTOS_Init+0xfc>)
 800224e:	f014 fcc1 	bl	8016bd4 <osThreadNew>
 8002252:	4603      	mov	r3, r0
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <MX_FREERTOS_Init+0x100>)
 8002256:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	0801ac08 	.word	0x0801ac08
 8002260:	080022c9 	.word	0x080022c9
 8002264:	24000390 	.word	0x24000390
 8002268:	0801ac2c 	.word	0x0801ac2c
 800226c:	080022f1 	.word	0x080022f1
 8002270:	240005f0 	.word	0x240005f0
 8002274:	0801ac50 	.word	0x0801ac50
 8002278:	08002319 	.word	0x08002319
 800227c:	24000850 	.word	0x24000850
 8002280:	0801ac74 	.word	0x0801ac74
 8002284:	08002341 	.word	0x08002341
 8002288:	24000ab0 	.word	0x24000ab0
 800228c:	0801ac98 	.word	0x0801ac98
 8002290:	080023b9 	.word	0x080023b9
 8002294:	24000d10 	.word	0x24000d10
 8002298:	0801acbc 	.word	0x0801acbc
 800229c:	08002431 	.word	0x08002431
 80022a0:	24000f70 	.word	0x24000f70
 80022a4:	0801ace0 	.word	0x0801ace0
 80022a8:	08002461 	.word	0x08002461
 80022ac:	240011d0 	.word	0x240011d0
 80022b0:	0801ad04 	.word	0x0801ad04
 80022b4:	08002491 	.word	0x08002491
 80022b8:	24001430 	.word	0x24001430
 80022bc:	0801ad28 	.word	0x0801ad28
 80022c0:	08002561 	.word	0x08002561
 80022c4:	24001690 	.word	0x24001690

080022c8 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <PMT_init+0x24>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	f014 fdfc 	bl	8016ed8 <osEventFlagsWait>

		create_pmt_packet();
 80022e0:	f001 fae6 	bl	80038b0 <create_pmt_packet>

		osThreadYield();
 80022e4:	f014 fd08 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80022e8:	e7f2      	b.n	80022d0 <PMT_init+0x8>
 80022ea:	bf00      	nop
 80022ec:	24001a44 	.word	0x24001a44

080022f0 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <ERPA_init+0x24>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002300:	2200      	movs	r2, #0
 8002302:	2102      	movs	r1, #2
 8002304:	f014 fde8 	bl	8016ed8 <osEventFlagsWait>

		create_erpa_packet();
 8002308:	f001 fb18 	bl	800393c <create_erpa_packet>

		osThreadYield();
 800230c:	f014 fcf4 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002310:	e7f2      	b.n	80022f8 <ERPA_init+0x8>
 8002312:	bf00      	nop
 8002314:	24001a44 	.word	0x24001a44

08002318 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HK_init+0x24>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002328:	2200      	movs	r2, #0
 800232a:	2104      	movs	r1, #4
 800232c:	f014 fdd4 	bl	8016ed8 <osEventFlagsWait>

		create_hk_packet();
 8002330:	f001 fb62 	bl	80039f8 <create_hk_packet>

		osThreadYield();
 8002334:	f014 fce0 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002338:	e7f2      	b.n	8002320 <HK_init+0x8>
 800233a:	bf00      	nop
 800233c:	24001a44 	.word	0x24001a44

08002340 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <AUTOINIT_init+0x70>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002350:	2200      	movs	r2, #0
 8002352:	2104      	movs	r1, #4
 8002354:	f014 fdc0 	bl	8016ed8 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e012      	b.n	8002384 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <AUTOINIT_init+0x74>)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <AUTOINIT_init+0x74>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	889b      	ldrh	r3, [r3, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	4619      	mov	r1, r3
 8002374:	f008 ff42 	bl	800b1fc <HAL_GPIO_WritePin>
			osDelay(100);
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	f014 fcdd 	bl	8016d38 <osDelay>
		for (int i = 0; i < 7; i++) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3301      	adds	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b06      	cmp	r3, #6
 8002388:	dde9      	ble.n	800235e <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800238a:	2308      	movs	r3, #8
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	e008      	b.n	80023a2 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2101      	movs	r1, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f003 f8aa 	bl	80054f0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3301      	adds	r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b0d      	cmp	r3, #13
 80023a6:	ddf3      	ble.n	8002390 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80023a8:	f014 fca6 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80023ac:	e7cc      	b.n	8002348 <AUTOINIT_init+0x8>
 80023ae:	bf00      	nop
 80023b0:	24001a48 	.word	0x24001a48
 80023b4:	0801ad4c 	.word	0x0801ad4c

080023b8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <AUTODEINIT_init+0x70>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c8:	2200      	movs	r2, #0
 80023ca:	2108      	movs	r1, #8
 80023cc:	f014 fd84 	bl	8016ed8 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80023d0:	230d      	movs	r3, #13
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e008      	b.n	80023e8 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 f887 	bl	80054f0 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	dcf3      	bgt.n	80023d6 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80023ee:	2306      	movs	r3, #6
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	e012      	b.n	800241a <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <AUTODEINIT_init+0x74>)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80023fc:	4a0b      	ldr	r2, [pc, #44]	; (800242c <AUTODEINIT_init+0x74>)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	889b      	ldrh	r3, [r3, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	4619      	mov	r1, r3
 800240a:	f008 fef7 	bl	800b1fc <HAL_GPIO_WritePin>
			osDelay(100);
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	f014 fc92 	bl	8016d38 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b01      	subs	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	dae9      	bge.n	80023f4 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002420:	f014 fc6a 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002424:	e7cc      	b.n	80023c0 <AUTODEINIT_init+0x8>
 8002426:	bf00      	nop
 8002428:	24001a48 	.word	0x24001a48
 800242c:	0801ad4c 	.word	0x0801ad4c

08002430 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <Voltage_Monitor_init+0x28>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	f014 fd48 	bl	8016ed8 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <Voltage_Monitor_init+0x2c>)
 800244a:	f00b faa4 	bl	800d996 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 800244e:	f003 f86f 	bl	8005530 <set_rail_monitor>
	  monitor_rails();
 8002452:	f003 f8f1 	bl	8005638 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002456:	e7ef      	b.n	8002438 <Voltage_Monitor_init+0x8>
 8002458:	24001a48 	.word	0x24001a48
 800245c:	24001a34 	.word	0x24001a34

08002460 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <STOP_init+0x2c>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002470:	2200      	movs	r2, #0
 8002472:	2102      	movs	r1, #2
 8002474:	f014 fd30 	bl	8016ed8 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <STOP_init+0x2c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2102      	movs	r1, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f014 fcf8 	bl	8016e74 <osEventFlagsClear>

	  enter_stop();
 8002484:	f001 f9ae 	bl	80037e4 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002488:	e7ee      	b.n	8002468 <STOP_init+0x8>
 800248a:	bf00      	nop
 800248c:	24001a48 	.word	0x24001a48

08002490 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <Science_init+0xb0>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a0:	2200      	movs	r2, #0
 80024a2:	2101      	movs	r1, #1
 80024a4:	f014 fd18 	bl	8016ed8 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e012      	b.n	80024d4 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80024ae:	4a25      	ldr	r2, [pc, #148]	; (8002544 <Science_init+0xb4>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024b6:	4a23      	ldr	r2, [pc, #140]	; (8002544 <Science_init+0xb4>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	889b      	ldrh	r3, [r3, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4619      	mov	r1, r3
 80024c4:	f008 fe9a 	bl	800b1fc <HAL_GPIO_WritePin>
			osDelay(200);
 80024c8:	20c8      	movs	r0, #200	; 0xc8
 80024ca:	f014 fc35 	bl	8016d38 <osDelay>
		for (int i = 0; i < 9; i++) {
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3301      	adds	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	dde9      	ble.n	80024ae <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80024da:	2308      	movs	r3, #8
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	e008      	b.n	80024f2 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 f802 	bl	80054f0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	ddf3      	ble.n	80024e0 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2320      	movs	r3, #32
 8002502:	4a11      	ldr	r2, [pc, #68]	; (8002548 <Science_init+0xb8>)
 8002504:	2100      	movs	r1, #0
 8002506:	4811      	ldr	r0, [pc, #68]	; (800254c <Science_init+0xbc>)
 8002508:	f004 fff4 	bl	80074f4 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <Science_init+0xc0>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <Science_init+0xc4>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <Science_init+0xc8>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800251e:	f001 fbb9 	bl	8003c94 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 8002522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002526:	f44f 729c 	mov.w	r2, #312	; 0x138
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800252c:	2100      	movs	r1, #0
 800252e:	480b      	ldr	r0, [pc, #44]	; (800255c <Science_init+0xcc>)
 8002530:	f010 f96e 	bl	8012810 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002534:	b662      	cpsie	i
}
 8002536:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002538:	f014 fbde 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800253c:	e7ac      	b.n	8002498 <Science_init+0x8>
 800253e:	bf00      	nop
 8002540:	24001a4c 	.word	0x24001a4c
 8002544:	0801ad4c 	.word	0x0801ad4c
 8002548:	2400000c 	.word	0x2400000c
 800254c:	240002f4 	.word	0x240002f4
 8002550:	24001a90 	.word	0x24001a90
 8002554:	24001a91 	.word	0x24001a91
 8002558:	24001a94 	.word	0x24001a94
 800255c:	24001d64 	.word	0x24001d64

08002560 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <Idle_init+0x94>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002570:	2200      	movs	r2, #0
 8002572:	2102      	movs	r1, #2
 8002574:	f014 fcb0 	bl	8016ed8 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <Idle_init+0x98>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 800257e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8002586:	2100      	movs	r1, #0
 8002588:	481c      	ldr	r0, [pc, #112]	; (80025fc <Idle_init+0x9c>)
 800258a:	f010 fa9b 	bl	8012ac4 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <Idle_init+0xa0>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002594:	2100      	movs	r1, #0
 8002596:	481b      	ldr	r0, [pc, #108]	; (8002604 <Idle_init+0xa4>)
 8002598:	f005 f86c 	bl	8007674 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800259c:	2310      	movs	r3, #16
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e008      	b.n	80025b4 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 ffa1 	bl	80054f0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	dcf3      	bgt.n	80025a2 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80025ba:	2308      	movs	r3, #8
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	e012      	b.n	80025e6 <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <Idle_init+0xa8>)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <Idle_init+0xa8>)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	889b      	ldrh	r3, [r3, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	4619      	mov	r1, r3
 80025d6:	f008 fe11 	bl	800b1fc <HAL_GPIO_WritePin>
			osDelay(200);
 80025da:	20c8      	movs	r0, #200	; 0xc8
 80025dc:	f014 fbac 	bl	8016d38 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dae9      	bge.n	80025c0 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 80025ec:	f014 fb84 	bl	8016cf8 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80025f0:	e7ba      	b.n	8002568 <Idle_init+0x8>
 80025f2:	bf00      	nop
 80025f4:	24001a4c 	.word	0x24001a4c
 80025f8:	24001a91 	.word	0x24001a91
 80025fc:	24001d64 	.word	0x24001d64
 8002600:	24001a90 	.word	0x24001a90
 8002604:	240002f4 	.word	0x240002f4
 8002608:	0801ad4c 	.word	0x0801ad4c

0800260c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002628:	4a32      	ldr	r2, [pc, #200]	; (80026f4 <MX_GPIO_Init+0xe8>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002646:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_GPIO_Init+0xe8>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <MX_GPIO_Init+0xe8>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <MX_GPIO_Init+0xe8>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80026a0:	4815      	ldr	r0, [pc, #84]	; (80026f8 <MX_GPIO_Init+0xec>)
 80026a2:	f008 fdab 	bl	800b1fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2164      	movs	r1, #100	; 0x64
 80026aa:	4814      	ldr	r0, [pc, #80]	; (80026fc <MX_GPIO_Init+0xf0>)
 80026ac:	f008 fda6 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80026b0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80026b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	480b      	ldr	r0, [pc, #44]	; (80026f8 <MX_GPIO_Init+0xec>)
 80026ca:	f008 fbcf 	bl	800ae6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_GPIO_Init+0xf0>)
 80026e6:	f008 fbc1 	bl	800ae6c <HAL_GPIO_Init>

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58020800 	.word	0x58020800
 80026fc:	58020400 	.word	0x58020400

08002700 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_I2C1_Init+0x78>)
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <MX_I2C1_Init+0x7c>)
 8002708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <MX_I2C1_Init+0x78>)
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <MX_I2C1_Init+0x80>)
 800270e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <MX_I2C1_Init+0x78>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_I2C1_Init+0x78>)
 8002718:	2201      	movs	r2, #1
 800271a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_I2C1_Init+0x78>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_I2C1_Init+0x78>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_I2C1_Init+0x78>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_I2C1_Init+0x78>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_I2C1_Init+0x78>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800273a:	480f      	ldr	r0, [pc, #60]	; (8002778 <MX_I2C1_Init+0x78>)
 800273c:	f008 fd78 	bl	800b230 <HAL_I2C_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002746:	f001 f8ad 	bl	80038a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800274a:	2100      	movs	r1, #0
 800274c:	480a      	ldr	r0, [pc, #40]	; (8002778 <MX_I2C1_Init+0x78>)
 800274e:	f00b f817 	bl	800d780 <HAL_I2CEx_ConfigAnalogFilter>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002758:	f001 f8a4 	bl	80038a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800275c:	2100      	movs	r1, #0
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <MX_I2C1_Init+0x78>)
 8002760:	f00b f859 	bl	800d816 <HAL_I2CEx_ConfigDigitalFilter>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800276a:	f001 f89b 	bl	80038a4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800276e:	2001      	movs	r0, #1
 8002770:	f00b f89e 	bl	800d8b0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	240018f0 	.word	0x240018f0
 800277c:	40005400 	.word	0x40005400
 8002780:	00100517 	.word	0x00100517

08002784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b0ba      	sub	sp, #232	; 0xe8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	22c0      	movs	r2, #192	; 0xc0
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f017 fbe9 	bl	8019f7c <memset>
  if(i2cHandle->Instance==I2C1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_I2C_MspInit+0x1a0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f040 80b3 	bne.w	800291c <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027b6:	f04f 0208 	mov.w	r2, #8
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f00c f991 	bl	800eaf4 <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80027d8:	f001 f864 	bl	80038a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_I2C_MspInit+0x1a4>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e2:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_I2C_MspInit+0x1a4>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ec:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <HAL_I2C_MspInit+0x1a4>)
 80027ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002802:	2312      	movs	r3, #18
 8002804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002814:	2304      	movs	r3, #4
 8002816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800281e:	4619      	mov	r1, r3
 8002820:	4842      	ldr	r0, [pc, #264]	; (800292c <HAL_I2C_MspInit+0x1a8>)
 8002822:	f008 fb23 	bl	800ae6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_I2C_MspInit+0x1a4>)
 8002828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282c:	4a3e      	ldr	r2, [pc, #248]	; (8002928 <HAL_I2C_MspInit+0x1a4>)
 800282e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_I2C_MspInit+0x1a4>)
 8002838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002846:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <HAL_I2C_MspInit+0x1b0>)
 8002848:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 800284c:	2222      	movs	r2, #34	; 0x22
 800284e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 800285e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002862:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002866:	2200      	movs	r2, #0
 8002868:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002870:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002878:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800287c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002884:	482a      	ldr	r0, [pc, #168]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002886:	f005 f9c1 	bl	8007c0c <HAL_DMA_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002890:	f001 f808 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
 800289a:	4a25      	ldr	r2, [pc, #148]	; (8002930 <HAL_I2C_MspInit+0x1ac>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028a2:	4a26      	ldr	r2, [pc, #152]	; (800293c <HAL_I2C_MspInit+0x1b8>)
 80028a4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028a8:	2221      	movs	r2, #33	; 0x21
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028d8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028e0:	4815      	ldr	r0, [pc, #84]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028e2:	f005 f993 	bl	8007c0c <HAL_DMA_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 80028ec:	f000 ffda 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80028f6:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_I2C_MspInit+0x1b4>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2105      	movs	r1, #5
 8002900:	201f      	movs	r0, #31
 8002902:	f004 fcdd 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002906:	201f      	movs	r0, #31
 8002908:	f004 fcf4 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2105      	movs	r1, #5
 8002910:	2020      	movs	r0, #32
 8002912:	f004 fcd5 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002916:	2020      	movs	r0, #32
 8002918:	f004 fcec 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800291c:	bf00      	nop
 800291e:	37e8      	adds	r7, #232	; 0xe8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40005400 	.word	0x40005400
 8002928:	58024400 	.word	0x58024400
 800292c:	58020400 	.word	0x58020400
 8002930:	24001944 	.word	0x24001944
 8002934:	400200a0 	.word	0x400200a0
 8002938:	240019bc 	.word	0x240019bc
 800293c:	400200b8 	.word	0x400200b8

08002940 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <MX_IWDG1_Init+0x34>)
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <MX_IWDG1_Init+0x38>)
 8002948:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <MX_IWDG1_Init+0x34>)
 800294c:	2204      	movs	r2, #4
 800294e:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <MX_IWDG1_Init+0x34>)
 8002952:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002956:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_IWDG1_Init+0x34>)
 800295a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800295e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <MX_IWDG1_Init+0x34>)
 8002962:	f00a ffc9 	bl	800d8f8 <HAL_IWDG_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 800296c:	f000 ff9a 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	24001a34 	.word	0x24001a34
 8002978:	58004800 	.word	0x58004800

0800297c <__NVIC_SystemReset>:
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002980:	f3bf 8f4f 	dsb	sy
}
 8002984:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <__NVIC_SystemReset+0x24>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <__NVIC_SystemReset+0x24>)
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_SystemReset+0x28>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002996:	f3bf 8f4f 	dsb	sy
}
 800299a:	bf00      	nop
    __NOP();
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <__NVIC_SystemReset+0x20>
 80029a0:	e000ed00 	.word	0xe000ed00
 80029a4:	05fa0004 	.word	0x05fa0004

080029a8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d106      	bne.n	80029c6 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f014 fa14 	bl	8016dec <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80029c4:	e032      	b.n	8002a2c <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12b      	bne.n	8002a26 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f014 fa04 	bl	8016dec <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d113      	bne.n	8002a16 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f014 f9f9 	bl	8016dec <osEventFlagsSet>
			if (HK_ENABLED){
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f014 f9ee 	bl	8016dec <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a22:	701a      	strb	r2, [r3, #0]
}
 8002a24:	e002      	b.n	8002a2c <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002a26:	480a      	ldr	r0, [pc, #40]	; (8002a50 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002a28:	f017 fb1e 	bl	801a068 <puts>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	24001d64 	.word	0x24001d64
 8002a38:	24001a44 	.word	0x24001a44
 8002a3c:	24001db0 	.word	0x24001db0
 8002a40:	24001a91 	.word	0x24001a91
 8002a44:	24001a98 	.word	0x24001a98
 8002a48:	24001a48 	.word	0x24001a48
 8002a4c:	24001a90 	.word	0x24001a90
 8002a50:	0801aa18 	.word	0x0801aa18

08002a54 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	49f2      	ldr	r1, [pc, #968]	; (8002e28 <HAL_UART_RxCpltCallback+0x3d4>)
 8002a60:	48f2      	ldr	r0, [pc, #968]	; (8002e2c <HAL_UART_RxCpltCallback+0x3d8>)
 8002a62:	f011 fbb5 	bl	80141d0 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002a66:	4bf0      	ldr	r3, [pc, #960]	; (8002e28 <HAL_UART_RxCpltCallback+0x3d4>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2be0      	cmp	r3, #224	; 0xe0
 8002a70:	f200 8424 	bhi.w	80032bc <HAL_UART_RxCpltCallback+0x868>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <HAL_UART_RxCpltCallback+0x28>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002e15 	.word	0x08002e15
 8002a80:	08002e59 	.word	0x08002e59
 8002a84:	08002ec9 	.word	0x08002ec9
 8002a88:	08002f03 	.word	0x08002f03
 8002a8c:	08002f3b 	.word	0x08002f3b
 8002a90:	08002f75 	.word	0x08002f75
 8002a94:	08002fb1 	.word	0x08002fb1
 8002a98:	08002fed 	.word	0x08002fed
 8002a9c:	08003027 	.word	0x08003027
 8002aa0:	0800305b 	.word	0x0800305b
 8002aa4:	0800308f 	.word	0x0800308f
 8002aa8:	080030c1 	.word	0x080030c1
 8002aac:	080030eb 	.word	0x080030eb
 8002ab0:	080031c9 	.word	0x080031c9
 8002ab4:	08003231 	.word	0x08003231
 8002ab8:	08003259 	.word	0x08003259
 8002abc:	08002e01 	.word	0x08002e01
 8002ac0:	08002e3d 	.word	0x08002e3d
 8002ac4:	08002eab 	.word	0x08002eab
 8002ac8:	08002ee7 	.word	0x08002ee7
 8002acc:	08002f1f 	.word	0x08002f1f
 8002ad0:	08002f57 	.word	0x08002f57
 8002ad4:	08002f93 	.word	0x08002f93
 8002ad8:	08002fcf 	.word	0x08002fcf
 8002adc:	0800300b 	.word	0x0800300b
 8002ae0:	08003043 	.word	0x08003043
 8002ae4:	0800306b 	.word	0x0800306b
 8002ae8:	080030a5 	.word	0x080030a5
 8002aec:	080030d1 	.word	0x080030d1
 8002af0:	080030f9 	.word	0x080030f9
 8002af4:	08003209 	.word	0x08003209
 8002af8:	080032bd 	.word	0x080032bd
 8002afc:	080032bd 	.word	0x080032bd
 8002b00:	080032bd 	.word	0x080032bd
 8002b04:	080032bd 	.word	0x080032bd
 8002b08:	080032bd 	.word	0x080032bd
 8002b0c:	080032bd 	.word	0x080032bd
 8002b10:	080032bd 	.word	0x080032bd
 8002b14:	080032bd 	.word	0x080032bd
 8002b18:	080032bd 	.word	0x080032bd
 8002b1c:	080032bd 	.word	0x080032bd
 8002b20:	080032bd 	.word	0x080032bd
 8002b24:	080032bd 	.word	0x080032bd
 8002b28:	080032bd 	.word	0x080032bd
 8002b2c:	080032bd 	.word	0x080032bd
 8002b30:	080032bd 	.word	0x080032bd
 8002b34:	080032bd 	.word	0x080032bd
 8002b38:	080032bd 	.word	0x080032bd
 8002b3c:	080032bd 	.word	0x080032bd
 8002b40:	080032bd 	.word	0x080032bd
 8002b44:	080032bd 	.word	0x080032bd
 8002b48:	080032bd 	.word	0x080032bd
 8002b4c:	080032bd 	.word	0x080032bd
 8002b50:	080032bd 	.word	0x080032bd
 8002b54:	080032bd 	.word	0x080032bd
 8002b58:	080032bd 	.word	0x080032bd
 8002b5c:	080032bd 	.word	0x080032bd
 8002b60:	080032bd 	.word	0x080032bd
 8002b64:	080032bd 	.word	0x080032bd
 8002b68:	080032bd 	.word	0x080032bd
 8002b6c:	080032bd 	.word	0x080032bd
 8002b70:	080032bd 	.word	0x080032bd
 8002b74:	080032bd 	.word	0x080032bd
 8002b78:	080032bd 	.word	0x080032bd
 8002b7c:	080032bd 	.word	0x080032bd
 8002b80:	080032bd 	.word	0x080032bd
 8002b84:	080032bd 	.word	0x080032bd
 8002b88:	080032bd 	.word	0x080032bd
 8002b8c:	080032bd 	.word	0x080032bd
 8002b90:	080032bd 	.word	0x080032bd
 8002b94:	080032bd 	.word	0x080032bd
 8002b98:	080032bd 	.word	0x080032bd
 8002b9c:	080032bd 	.word	0x080032bd
 8002ba0:	080032bd 	.word	0x080032bd
 8002ba4:	080032bd 	.word	0x080032bd
 8002ba8:	080032bd 	.word	0x080032bd
 8002bac:	080032bd 	.word	0x080032bd
 8002bb0:	080032bd 	.word	0x080032bd
 8002bb4:	080032bd 	.word	0x080032bd
 8002bb8:	080032bd 	.word	0x080032bd
 8002bbc:	080032bd 	.word	0x080032bd
 8002bc0:	080032bd 	.word	0x080032bd
 8002bc4:	080032bd 	.word	0x080032bd
 8002bc8:	080032bd 	.word	0x080032bd
 8002bcc:	080032bd 	.word	0x080032bd
 8002bd0:	080032bd 	.word	0x080032bd
 8002bd4:	080032bd 	.word	0x080032bd
 8002bd8:	080032bd 	.word	0x080032bd
 8002bdc:	080032bd 	.word	0x080032bd
 8002be0:	080032bd 	.word	0x080032bd
 8002be4:	080032bd 	.word	0x080032bd
 8002be8:	080032bd 	.word	0x080032bd
 8002bec:	080032bd 	.word	0x080032bd
 8002bf0:	080032bd 	.word	0x080032bd
 8002bf4:	080032bd 	.word	0x080032bd
 8002bf8:	080032bd 	.word	0x080032bd
 8002bfc:	080032bd 	.word	0x080032bd
 8002c00:	080032bd 	.word	0x080032bd
 8002c04:	080032bd 	.word	0x080032bd
 8002c08:	080032bd 	.word	0x080032bd
 8002c0c:	080032bd 	.word	0x080032bd
 8002c10:	080032bd 	.word	0x080032bd
 8002c14:	080032bd 	.word	0x080032bd
 8002c18:	080032bd 	.word	0x080032bd
 8002c1c:	080032bd 	.word	0x080032bd
 8002c20:	080032bd 	.word	0x080032bd
 8002c24:	080032bd 	.word	0x080032bd
 8002c28:	080032bd 	.word	0x080032bd
 8002c2c:	080032bd 	.word	0x080032bd
 8002c30:	080032bd 	.word	0x080032bd
 8002c34:	080032bd 	.word	0x080032bd
 8002c38:	080032bd 	.word	0x080032bd
 8002c3c:	080032bd 	.word	0x080032bd
 8002c40:	080032bd 	.word	0x080032bd
 8002c44:	080032bd 	.word	0x080032bd
 8002c48:	080032bd 	.word	0x080032bd
 8002c4c:	080032bd 	.word	0x080032bd
 8002c50:	080032bd 	.word	0x080032bd
 8002c54:	080032bd 	.word	0x080032bd
 8002c58:	080032bd 	.word	0x080032bd
 8002c5c:	080032bd 	.word	0x080032bd
 8002c60:	080032bd 	.word	0x080032bd
 8002c64:	080032bd 	.word	0x080032bd
 8002c68:	080032bd 	.word	0x080032bd
 8002c6c:	080032bd 	.word	0x080032bd
 8002c70:	080032bd 	.word	0x080032bd
 8002c74:	080032bd 	.word	0x080032bd
 8002c78:	080032bd 	.word	0x080032bd
 8002c7c:	080032bd 	.word	0x080032bd
 8002c80:	080032bd 	.word	0x080032bd
 8002c84:	080032bd 	.word	0x080032bd
 8002c88:	080032bd 	.word	0x080032bd
 8002c8c:	080032bd 	.word	0x080032bd
 8002c90:	080032bd 	.word	0x080032bd
 8002c94:	080032bd 	.word	0x080032bd
 8002c98:	080032bd 	.word	0x080032bd
 8002c9c:	080032bd 	.word	0x080032bd
 8002ca0:	080032bd 	.word	0x080032bd
 8002ca4:	080032bd 	.word	0x080032bd
 8002ca8:	080032bd 	.word	0x080032bd
 8002cac:	080032bd 	.word	0x080032bd
 8002cb0:	080032bd 	.word	0x080032bd
 8002cb4:	080032bd 	.word	0x080032bd
 8002cb8:	080032bd 	.word	0x080032bd
 8002cbc:	080032bd 	.word	0x080032bd
 8002cc0:	080032bd 	.word	0x080032bd
 8002cc4:	080032bd 	.word	0x080032bd
 8002cc8:	080032bd 	.word	0x080032bd
 8002ccc:	080032bd 	.word	0x080032bd
 8002cd0:	080032bd 	.word	0x080032bd
 8002cd4:	080032bd 	.word	0x080032bd
 8002cd8:	080032bd 	.word	0x080032bd
 8002cdc:	080032bd 	.word	0x080032bd
 8002ce0:	080032bd 	.word	0x080032bd
 8002ce4:	080032bd 	.word	0x080032bd
 8002ce8:	080032bd 	.word	0x080032bd
 8002cec:	080032bd 	.word	0x080032bd
 8002cf0:	080032bd 	.word	0x080032bd
 8002cf4:	080032bd 	.word	0x080032bd
 8002cf8:	080032bd 	.word	0x080032bd
 8002cfc:	080032bd 	.word	0x080032bd
 8002d00:	080032bd 	.word	0x080032bd
 8002d04:	080032bd 	.word	0x080032bd
 8002d08:	080032bd 	.word	0x080032bd
 8002d0c:	080032bd 	.word	0x080032bd
 8002d10:	080032bd 	.word	0x080032bd
 8002d14:	080032bd 	.word	0x080032bd
 8002d18:	080032bd 	.word	0x080032bd
 8002d1c:	080032bd 	.word	0x080032bd
 8002d20:	080032bd 	.word	0x080032bd
 8002d24:	080032bd 	.word	0x080032bd
 8002d28:	080032bd 	.word	0x080032bd
 8002d2c:	080032bd 	.word	0x080032bd
 8002d30:	080032bd 	.word	0x080032bd
 8002d34:	080032bd 	.word	0x080032bd
 8002d38:	08003295 	.word	0x08003295
 8002d3c:	080032bd 	.word	0x080032bd
 8002d40:	080032bd 	.word	0x080032bd
 8002d44:	080032bd 	.word	0x080032bd
 8002d48:	080032bd 	.word	0x080032bd
 8002d4c:	080032bd 	.word	0x080032bd
 8002d50:	080032bd 	.word	0x080032bd
 8002d54:	080032bd 	.word	0x080032bd
 8002d58:	080032bd 	.word	0x080032bd
 8002d5c:	080032bd 	.word	0x080032bd
 8002d60:	080032bd 	.word	0x080032bd
 8002d64:	080032bd 	.word	0x080032bd
 8002d68:	080032bd 	.word	0x080032bd
 8002d6c:	080032bd 	.word	0x080032bd
 8002d70:	080032bd 	.word	0x080032bd
 8002d74:	080032bd 	.word	0x080032bd
 8002d78:	0800329b 	.word	0x0800329b
 8002d7c:	080032bd 	.word	0x080032bd
 8002d80:	080032bd 	.word	0x080032bd
 8002d84:	080032bd 	.word	0x080032bd
 8002d88:	080032bd 	.word	0x080032bd
 8002d8c:	080032bd 	.word	0x080032bd
 8002d90:	080032bd 	.word	0x080032bd
 8002d94:	080032bd 	.word	0x080032bd
 8002d98:	080032bd 	.word	0x080032bd
 8002d9c:	080032bd 	.word	0x080032bd
 8002da0:	080032bd 	.word	0x080032bd
 8002da4:	080032bd 	.word	0x080032bd
 8002da8:	080032bd 	.word	0x080032bd
 8002dac:	080032bd 	.word	0x080032bd
 8002db0:	080032bd 	.word	0x080032bd
 8002db4:	080032bd 	.word	0x080032bd
 8002db8:	080032a9 	.word	0x080032a9
 8002dbc:	08003281 	.word	0x08003281
 8002dc0:	080032bd 	.word	0x080032bd
 8002dc4:	080032bd 	.word	0x080032bd
 8002dc8:	080032bd 	.word	0x080032bd
 8002dcc:	080032bd 	.word	0x080032bd
 8002dd0:	080032bd 	.word	0x080032bd
 8002dd4:	080032bd 	.word	0x080032bd
 8002dd8:	080032bd 	.word	0x080032bd
 8002ddc:	080032bd 	.word	0x080032bd
 8002de0:	080032bd 	.word	0x080032bd
 8002de4:	080032bd 	.word	0x080032bd
 8002de8:	080032bd 	.word	0x080032bd
 8002dec:	080032bd 	.word	0x080032bd
 8002df0:	080032bd 	.word	0x080032bd
 8002df4:	080032bd 	.word	0x080032bd
 8002df8:	080032b7 	.word	0x080032b7
 8002dfc:	0800326d 	.word	0x0800326d
	case 0x10: {
		printf("SDN1 ON\n");
 8002e00:	480b      	ldr	r0, [pc, #44]	; (8002e30 <HAL_UART_RxCpltCallback+0x3dc>)
 8002e02:	f017 f931 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_UART_RxCpltCallback+0x3e0>)
 8002e08:	2104      	movs	r1, #4
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f008 f9f5 	bl	800b1fc <HAL_GPIO_WritePin>
		break;
 8002e12:	e25e      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002e14:	4808      	ldr	r0, [pc, #32]	; (8002e38 <HAL_UART_RxCpltCallback+0x3e4>)
 8002e16:	f017 f927 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_UART_RxCpltCallback+0x3e0>)
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f008 f9eb 	bl	800b1fc <HAL_GPIO_WritePin>
		break;
 8002e26:	e254      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
 8002e28:	24001a50 	.word	0x24001a50
 8002e2c:	24001dfc 	.word	0x24001dfc
 8002e30:	0801aa30 	.word	0x0801aa30
 8002e34:	58020400 	.word	0x58020400
 8002e38:	0801aa38 	.word	0x0801aa38
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002e3c:	48bf      	ldr	r0, [pc, #764]	; (800313c <HAL_UART_RxCpltCallback+0x6e8>)
 8002e3e:	f017 f913 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002e42:	4bbf      	ldr	r3, [pc, #764]	; (8003140 <HAL_UART_RxCpltCallback+0x6ec>)
 8002e44:	2120      	movs	r1, #32
 8002e46:	2201      	movs	r2, #1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f008 f9d7 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	2008      	movs	r0, #8
 8002e52:	f002 fb4d 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8002e56:	e23c      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002e58:	48ba      	ldr	r0, [pc, #744]	; (8003144 <HAL_UART_RxCpltCallback+0x6f0>)
 8002e5a:	f017 f905 	bl	801a068 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002e5e:	2308      	movs	r3, #8
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e00f      	b.n	8002e84 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002e64:	4ab8      	ldr	r2, [pc, #736]	; (8003148 <HAL_UART_RxCpltCallback+0x6f4>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e6c:	4ab6      	ldr	r2, [pc, #728]	; (8003148 <HAL_UART_RxCpltCallback+0x6f4>)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	889b      	ldrh	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f008 f9bf 	bl	800b1fc <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dcec      	bgt.n	8002e64 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	e008      	b.n	8002ea2 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 fb2a 	bl	80054f0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	dcf3      	bgt.n	8002e90 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002ea8:	e213      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002eaa:	48a8      	ldr	r0, [pc, #672]	; (800314c <HAL_UART_RxCpltCallback+0x6f8>)
 8002eac:	f017 f8dc 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002eb0:	4ba7      	ldr	r3, [pc, #668]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f008 f99f 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2009      	movs	r0, #9
 8002ec2:	f002 fb15 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8002ec6:	e204      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002ec8:	48a2      	ldr	r0, [pc, #648]	; (8003154 <HAL_UART_RxCpltCallback+0x700>)
 8002eca:	f017 f8cd 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002ece:	4ba0      	ldr	r3, [pc, #640]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f008 f990 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002edc:	2100      	movs	r1, #0
 8002ede:	2009      	movs	r0, #9
 8002ee0:	f002 fb06 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8002ee4:	e1f5      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002ee6:	489c      	ldr	r0, [pc, #624]	; (8003158 <HAL_UART_RxCpltCallback+0x704>)
 8002ee8:	f017 f8be 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002eec:	4b98      	ldr	r3, [pc, #608]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f008 f982 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002ef8:	2101      	movs	r1, #1
 8002efa:	200a      	movs	r0, #10
 8002efc:	f002 faf8 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8002f00:	e1e7      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002f02:	4896      	ldr	r0, [pc, #600]	; (800315c <HAL_UART_RxCpltCallback+0x708>)
 8002f04:	f017 f8b0 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002f08:	4b91      	ldr	r3, [pc, #580]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f008 f974 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002f14:	2100      	movs	r1, #0
 8002f16:	200a      	movs	r0, #10
 8002f18:	f002 faea 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8002f1c:	e1d9      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002f1e:	4890      	ldr	r0, [pc, #576]	; (8003160 <HAL_UART_RxCpltCallback+0x70c>)
 8002f20:	f017 f8a2 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002f24:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f26:	2140      	movs	r1, #64	; 0x40
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f008 f966 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002f30:	2101      	movs	r1, #1
 8002f32:	200b      	movs	r0, #11
 8002f34:	f002 fadc 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8002f38:	e1cb      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8002f3a:	488a      	ldr	r0, [pc, #552]	; (8003164 <HAL_UART_RxCpltCallback+0x710>)
 8002f3c:	f017 f894 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002f40:	4b83      	ldr	r3, [pc, #524]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	2200      	movs	r2, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f008 f958 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	200b      	movs	r0, #11
 8002f50:	f002 face 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8002f54:	e1bd      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002f56:	4884      	ldr	r0, [pc, #528]	; (8003168 <HAL_UART_RxCpltCallback+0x714>)
 8002f58:	f017 f886 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002f5c:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f62:	2201      	movs	r2, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f008 f949 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	200c      	movs	r0, #12
 8002f6e:	f002 fabf 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8002f72:	e1ae      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002f74:	487d      	ldr	r0, [pc, #500]	; (800316c <HAL_UART_RxCpltCallback+0x718>)
 8002f76:	f017 f877 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002f7a:	4b75      	ldr	r3, [pc, #468]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f80:	2200      	movs	r2, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f008 f93a 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002f88:	2100      	movs	r1, #0
 8002f8a:	200c      	movs	r0, #12
 8002f8c:	f002 fab0 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8002f90:	e19f      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002f92:	4877      	ldr	r0, [pc, #476]	; (8003170 <HAL_UART_RxCpltCallback+0x71c>)
 8002f94:	f017 f868 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002f98:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f008 f92b 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	200d      	movs	r0, #13
 8002faa:	f002 faa1 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8002fae:	e190      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002fb0:	4870      	ldr	r0, [pc, #448]	; (8003174 <HAL_UART_RxCpltCallback+0x720>)
 8002fb2:	f017 f859 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f008 f91c 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	200d      	movs	r0, #13
 8002fc8:	f002 fa92 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8002fcc:	e181      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002fce:	486a      	ldr	r0, [pc, #424]	; (8003178 <HAL_UART_RxCpltCallback+0x724>)
 8002fd0:	f017 f84a 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002fd4:	4b5e      	ldr	r3, [pc, #376]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f008 f90d 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	200f      	movs	r0, #15
 8002fe6:	f002 fa83 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8002fea:	e172      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002fec:	4863      	ldr	r0, [pc, #396]	; (800317c <HAL_UART_RxCpltCallback+0x728>)
 8002fee:	f017 f83b 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002ff2:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_UART_RxCpltCallback+0x6fc>)
 8002ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f008 f8fe 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003000:	2100      	movs	r1, #0
 8003002:	200f      	movs	r0, #15
 8003004:	f002 fa74 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8003008:	e163      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800300a:	485d      	ldr	r0, [pc, #372]	; (8003180 <HAL_UART_RxCpltCallback+0x72c>)
 800300c:	f017 f82c 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <HAL_UART_RxCpltCallback+0x6ec>)
 8003012:	2140      	movs	r1, #64	; 0x40
 8003014:	2201      	movs	r2, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f008 f8f0 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800301c:	2101      	movs	r1, #1
 800301e:	2010      	movs	r0, #16
 8003020:	f002 fa66 	bl	80054f0 <set_rail_monitor_enable>

		break;
 8003024:	e155      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8003026:	4857      	ldr	r0, [pc, #348]	; (8003184 <HAL_UART_RxCpltCallback+0x730>)
 8003028:	f017 f81e 	bl	801a068 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800302c:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_UART_RxCpltCallback+0x6ec>)
 800302e:	2140      	movs	r1, #64	; 0x40
 8003030:	2200      	movs	r2, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f008 f8e2 	bl	800b1fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003038:	2100      	movs	r1, #0
 800303a:	2010      	movs	r0, #16
 800303c:	f002 fa58 	bl	80054f0 <set_rail_monitor_enable>
		break;
 8003040:	e147      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8003042:	4851      	ldr	r0, [pc, #324]	; (8003188 <HAL_UART_RxCpltCallback+0x734>)
 8003044:	f017 f810 	bl	801a068 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2320      	movs	r3, #32
 800304e:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_UART_RxCpltCallback+0x738>)
 8003050:	2100      	movs	r1, #0
 8003052:	484f      	ldr	r0, [pc, #316]	; (8003190 <HAL_UART_RxCpltCallback+0x73c>)
 8003054:	f004 fa4e 	bl	80074f4 <HAL_DAC_Start_DMA>
		break;
 8003058:	e13b      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800305a:	484e      	ldr	r0, [pc, #312]	; (8003194 <HAL_UART_RxCpltCallback+0x740>)
 800305c:	f017 f804 	bl	801a068 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003060:	2100      	movs	r1, #0
 8003062:	484b      	ldr	r0, [pc, #300]	; (8003190 <HAL_UART_RxCpltCallback+0x73c>)
 8003064:	f004 fb06 	bl	8007674 <HAL_DAC_Stop_DMA>
		break;
 8003068:	e133      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 800306a:	484b      	ldr	r0, [pc, #300]	; (8003198 <HAL_UART_RxCpltCallback+0x744>)
 800306c:	f016 fffc 	bl	801a068 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <HAL_UART_RxCpltCallback+0x748>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2102      	movs	r1, #2
 8003076:	4618      	mov	r0, r3
 8003078:	f013 feb8 	bl	8016dec <osEventFlagsSet>
		TIM2->CCR4 = 312;
 800307c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003080:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8003086:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <HAL_UART_RxCpltCallback+0x74c>)
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]

		break;
 800308c:	e121      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 800308e:	4845      	ldr	r0, [pc, #276]	; (80031a4 <HAL_UART_RxCpltCallback+0x750>)
 8003090:	f016 ffea 	bl	801a068 <puts>
		ERPA_ENABLED = 0;
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_UART_RxCpltCallback+0x74c>)
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 800309a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80030a2:	e116      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80030a4:	4840      	ldr	r0, [pc, #256]	; (80031a8 <HAL_UART_RxCpltCallback+0x754>)
 80030a6:	f016 ffdf 	bl	801a068 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80030aa:	2100      	movs	r1, #0
 80030ac:	483f      	ldr	r0, [pc, #252]	; (80031ac <HAL_UART_RxCpltCallback+0x758>)
 80030ae:	f00f fbaf 	bl	8012810 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_UART_RxCpltCallback+0x748>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f013 fe97 	bl	8016dec <osEventFlagsSet>
		break;
 80030be:	e108      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80030c0:	483b      	ldr	r0, [pc, #236]	; (80031b0 <HAL_UART_RxCpltCallback+0x75c>)
 80030c2:	f016 ffd1 	bl	801a068 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80030c6:	2100      	movs	r1, #0
 80030c8:	4838      	ldr	r0, [pc, #224]	; (80031ac <HAL_UART_RxCpltCallback+0x758>)
 80030ca:	f00f fcfb 	bl	8012ac4 <HAL_TIM_OC_Stop_IT>
		break;
 80030ce:	e100      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 80030d0:	4838      	ldr	r0, [pc, #224]	; (80031b4 <HAL_UART_RxCpltCallback+0x760>)
 80030d2:	f016 ffc9 	bl	801a068 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_UART_RxCpltCallback+0x748>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2104      	movs	r1, #4
 80030dc:	4618      	mov	r0, r3
 80030de:	f013 fe85 	bl	8016dec <osEventFlagsSet>
		HK_ENABLED = 1;
 80030e2:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_UART_RxCpltCallback+0x764>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
		break;
 80030e8:	e0f3      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80030ea:	4834      	ldr	r0, [pc, #208]	; (80031bc <HAL_UART_RxCpltCallback+0x768>)
 80030ec:	f016 ffbc 	bl	801a068 <puts>
		HK_ENABLED = 0;
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_UART_RxCpltCallback+0x764>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
		break;
 80030f6:	e0ec      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 80030f8:	4831      	ldr	r0, [pc, #196]	; (80031c0 <HAL_UART_RxCpltCallback+0x76c>)
 80030fa:	f016 ffb5 	bl	801a068 <puts>
		if (step < 14) {
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_UART_RxCpltCallback+0x770>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b0d      	cmp	r3, #13
 8003106:	f200 80dd 	bhi.w	80032c4 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <HAL_UART_RxCpltCallback+0x770>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3302      	adds	r3, #2
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_UART_RxCpltCallback+0x770>)
 8003116:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003118:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_UART_RxCpltCallback+0x770>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_UART_RxCpltCallback+0x738>)
 8003122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	4819      	ldr	r0, [pc, #100]	; (8003190 <HAL_UART_RxCpltCallback+0x73c>)
 800312c:	f004 fb45 	bl	80077ba <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003130:	2100      	movs	r1, #0
 8003132:	4817      	ldr	r0, [pc, #92]	; (8003190 <HAL_UART_RxCpltCallback+0x73c>)
 8003134:	f004 f986 	bl	8007444 <HAL_DAC_Start>
		}
		break;
 8003138:	e0c4      	b.n	80032c4 <HAL_UART_RxCpltCallback+0x870>
 800313a:	bf00      	nop
 800313c:	0801aa44 	.word	0x0801aa44
 8003140:	58020400 	.word	0x58020400
 8003144:	0801aa50 	.word	0x0801aa50
 8003148:	0801ad4c 	.word	0x0801ad4c
 800314c:	0801aa5c 	.word	0x0801aa5c
 8003150:	58020800 	.word	0x58020800
 8003154:	0801aa68 	.word	0x0801aa68
 8003158:	0801aa78 	.word	0x0801aa78
 800315c:	0801aa84 	.word	0x0801aa84
 8003160:	0801aa90 	.word	0x0801aa90
 8003164:	0801aa9c 	.word	0x0801aa9c
 8003168:	0801aaac 	.word	0x0801aaac
 800316c:	0801aab8 	.word	0x0801aab8
 8003170:	0801aac4 	.word	0x0801aac4
 8003174:	0801aad0 	.word	0x0801aad0
 8003178:	0801aadc 	.word	0x0801aadc
 800317c:	0801aaec 	.word	0x0801aaec
 8003180:	0801aafc 	.word	0x0801aafc
 8003184:	0801ab08 	.word	0x0801ab08
 8003188:	0801ab18 	.word	0x0801ab18
 800318c:	2400000c 	.word	0x2400000c
 8003190:	240002f4 	.word	0x240002f4
 8003194:	0801ab28 	.word	0x0801ab28
 8003198:	0801ab38 	.word	0x0801ab38
 800319c:	24001a44 	.word	0x24001a44
 80031a0:	24001a91 	.word	0x24001a91
 80031a4:	0801ab40 	.word	0x0801ab40
 80031a8:	0801ab4c 	.word	0x0801ab4c
 80031ac:	24001d64 	.word	0x24001d64
 80031b0:	0801ab54 	.word	0x0801ab54
 80031b4:	0801ab5c 	.word	0x0801ab5c
 80031b8:	24001a90 	.word	0x24001a90
 80031bc:	0801ab64 	.word	0x0801ab64
 80031c0:	0801ab6c 	.word	0x0801ab6c
 80031c4:	24001a92 	.word	0x24001a92
	}
	case 0x0D: {
		printf("Step Down\n");
 80031c8:	4844      	ldr	r0, [pc, #272]	; (80032dc <HAL_UART_RxCpltCallback+0x888>)
 80031ca:	f016 ff4d 	bl	801a068 <puts>
		if (step > 1) {
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_UART_RxCpltCallback+0x88c>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d977      	bls.n	80032c8 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 80031d8:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_UART_RxCpltCallback+0x88c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b02      	subs	r3, #2
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_UART_RxCpltCallback+0x88c>)
 80031e4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_UART_RxCpltCallback+0x88c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_UART_RxCpltCallback+0x890>)
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	483b      	ldr	r0, [pc, #236]	; (80032e8 <HAL_UART_RxCpltCallback+0x894>)
 80031fa:	f004 fade 	bl	80077ba <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80031fe:	2100      	movs	r1, #0
 8003200:	4839      	ldr	r0, [pc, #228]	; (80032e8 <HAL_UART_RxCpltCallback+0x894>)
 8003202:	f004 f91f 	bl	8007444 <HAL_DAC_Start>
		}
		break;
 8003206:	e05f      	b.n	80032c8 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003208:	4838      	ldr	r0, [pc, #224]	; (80032ec <HAL_UART_RxCpltCallback+0x898>)
 800320a:	f016 ff2d 	bl	801a068 <puts>
		if (cadence <= 50000) {
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003216:	4293      	cmp	r3, r2
 8003218:	d858      	bhi.n	80032cc <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 800321a:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4a33      	ldr	r2, [pc, #204]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 8003222:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800322e:	e04d      	b.n	80032cc <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003230:	4830      	ldr	r0, [pc, #192]	; (80032f4 <HAL_UART_RxCpltCallback+0x8a0>)
 8003232:	f016 ff19 	bl	801a068 <puts>
		if (cadence >= 6250) {
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f641 0269 	movw	r2, #6249	; 0x1869
 800323e:	4293      	cmp	r3, r2
 8003240:	d946      	bls.n	80032d0 <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 8003242:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 800324a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800324c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_UART_RxCpltCallback+0x89c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003256:	e03b      	b.n	80032d0 <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8003258:	4827      	ldr	r0, [pc, #156]	; (80032f8 <HAL_UART_RxCpltCallback+0x8a4>)
 800325a:	f016 ff05 	bl	801a068 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 800325e:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_UART_RxCpltCallback+0x8a8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2102      	movs	r1, #2
 8003264:	4618      	mov	r0, r3
 8003266:	f013 fdc1 	bl	8016dec <osEventFlagsSet>
		break;
 800326a:	e032      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 800326c:	4824      	ldr	r0, [pc, #144]	; (8003300 <HAL_UART_RxCpltCallback+0x8ac>)
 800326e:	f016 fefb 	bl	801a068 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_UART_RxCpltCallback+0x8a8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2104      	movs	r1, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f013 fdb7 	bl	8016dec <osEventFlagsSet>
		break;
 800327e:	e028      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8003280:	4820      	ldr	r0, [pc, #128]	; (8003304 <HAL_UART_RxCpltCallback+0x8b0>)
 8003282:	f016 fef1 	bl	801a068 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_UART_RxCpltCallback+0x8a8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2108      	movs	r1, #8
 800328c:	4618      	mov	r0, r3
 800328e:	f013 fdad 	bl	8016dec <osEventFlagsSet>
		break;
 8003292:	e01e      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 8003294:	f000 fa0e 	bl	80036b4 <sync>
		break;
 8003298:	e01b      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_UART_RxCpltCallback+0x8b4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	4618      	mov	r0, r3
 80032a2:	f013 fda3 	bl	8016dec <osEventFlagsSet>
		break;
 80032a6:	e014      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_UART_RxCpltCallback+0x8b4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2102      	movs	r1, #2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f013 fd9c 	bl	8016dec <osEventFlagsSet>
		break;
 80032b4:	e00d      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_eeprom_error_counters();
 80032b6:	f7fe ff05 	bl	80020c4 <reset_eeprom_error_counters>
		break;
 80032ba:	e00a      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 80032bc:	4813      	ldr	r0, [pc, #76]	; (800330c <HAL_UART_RxCpltCallback+0x8b8>)
 80032be:	f016 fed3 	bl	801a068 <puts>
		break;
 80032c2:	e006      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032c4:	bf00      	nop
 80032c6:	e004      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032d0:	bf00      	nop
	}
	}
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	0801ab74 	.word	0x0801ab74
 80032e0:	24001a92 	.word	0x24001a92
 80032e4:	2400000c 	.word	0x2400000c
 80032e8:	240002f4 	.word	0x240002f4
 80032ec:	0801ab80 	.word	0x0801ab80
 80032f0:	2400008c 	.word	0x2400008c
 80032f4:	0801ab8c 	.word	0x0801ab8c
 80032f8:	0801ab98 	.word	0x0801ab98
 80032fc:	24001a48 	.word	0x24001a48
 8003300:	0801aba8 	.word	0x0801aba8
 8003304:	0801abb4 	.word	0x0801abb4
 8003308:	24001a4c 	.word	0x24001a4c
 800330c:	0801abc0 	.word	0x0801abc0

08003310 <get_reset_cause>:

void get_reset_cause()
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <get_reset_cause+0x78>)
 8003318:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800331c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003324:	2305      	movs	r3, #5
 8003326:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003328:	2314      	movs	r3, #20
 800332a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fe fe15 	bl	8001f5c <handle_error>
 8003332:	e01c      	b.n	800336e <get_reset_cause+0x5e>
    }
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <get_reset_cause+0x78>)
 8003336:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800333a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <get_reset_cause+0x42>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        error.category = EC_software_reset;
 8003342:	2304      	movs	r3, #4
 8003344:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003346:	2314      	movs	r3, #20
 8003348:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fe06 	bl	8001f5c <handle_error>
 8003350:	e00d      	b.n	800336e <get_reset_cause+0x5e>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <get_reset_cause+0x78>)
 8003354:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <get_reset_cause+0x5e>
    {
        error.category = EC_brownout;
 8003360:	2303      	movs	r3, #3
 8003362:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003364:	2314      	movs	r3, #20
 8003366:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fe fdf7 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <get_reset_cause+0x78>)
 8003370:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <get_reset_cause+0x78>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	58024400 	.word	0x58024400

0800338c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003392:	f000 fa33 	bl	80037fc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <main+0x128>)
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11b      	bne.n	80033da <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80033a2:	f3bf 8f4f 	dsb	sy
}
 80033a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033a8:	f3bf 8f6f 	isb	sy
}
 80033ac:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <main+0x128>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80033b6:	f3bf 8f4f 	dsb	sy
}
 80033ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033bc:	f3bf 8f6f 	isb	sy
}
 80033c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80033c2:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <main+0x128>)
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <main+0x128>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80033ce:	f3bf 8f4f 	dsb	sy
}
 80033d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033d4:	f3bf 8f6f 	isb	sy
}
 80033d8:	e000      	b.n	80033dc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80033da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <main+0x128>)
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d138      	bne.n	800345a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <main+0x128>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033f0:	f3bf 8f4f 	dsb	sy
}
 80033f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80033f6:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <main+0x128>)
 80033f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0b5b      	lsrs	r3, r3, #13
 8003402:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003406:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	08db      	lsrs	r3, r3, #3
 800340c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003410:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800341a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003420:	4924      	ldr	r1, [pc, #144]	; (80034b4 <main+0x128>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ef      	bne.n	8003412 <main+0x86>
    } while(sets-- != 0U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	60ba      	str	r2, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e5      	bne.n	8003408 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800343c:	f3bf 8f4f 	dsb	sy
}
 8003440:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <main+0x128>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <main+0x128>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800344e:	f3bf 8f4f 	dsb	sy
}
 8003452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003454:	f3bf 8f6f 	isb	sy
}
 8003458:	e000      	b.n	800345c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800345a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800345c:	f002 f9e6 	bl	800582c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003460:	f000 f82a 	bl	80034b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003464:	f000 f8aa 	bl	80035bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003468:	f7ff f8d0 	bl	800260c <MX_GPIO_Init>
  MX_DMA_Init();
 800346c:	f7fd fc3c 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003470:	f001 fd76 	bl	8004f60 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003474:	f7ff f944 	bl	8002700 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003478:	f000 feac 	bl	80041d4 <MX_SPI2_Init>
  MX_TIM2_Init();
 800347c:	f001 fb98 	bl	8004bb0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003480:	f001 fae8 	bl	8004a54 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003484:	f7fd f9d0 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003488:	f7fd f8ac 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 800348c:	f7fd fb78 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003490:	f000 fe48 	bl	8004124 <MX_SPI1_Init>
  MX_RTC_Init();
 8003494:	f000 fc14 	bl	8003cc0 <MX_RTC_Init>
  MX_IWDG1_Init();
 8003498:	f7ff fa52 	bl	8002940 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  get_reset_cause();
 800349c:	f7ff ff38 	bl	8003310 <get_reset_cause>
  system_setup();
 80034a0:	f000 f8bc 	bl	800361c <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80034a4:	f013 fb4c 	bl	8016b40 <osKernelInitialize>
  MX_FREERTOS_Init();
 80034a8:	f7fe fe8c 	bl	80021c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80034ac:	f013 fb6c 	bl	8016b88 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80034b0:	e7fe      	b.n	80034b0 <main+0x124>
 80034b2:	bf00      	nop
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b09c      	sub	sp, #112	; 0x70
 80034bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	224c      	movs	r2, #76	; 0x4c
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f016 fd58 	bl	8019f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	2220      	movs	r2, #32
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f016 fd52 	bl	8019f7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80034d8:	2002      	movs	r0, #2
 80034da:	f00a faa9 	bl	800da30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80034de:	2300      	movs	r3, #0
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <SystemClock_Config+0xfc>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	4a33      	ldr	r2, [pc, #204]	; (80035b4 <SystemClock_Config+0xfc>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <SystemClock_Config+0xfc>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <SystemClock_Config+0x100>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003500:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <SystemClock_Config+0x100>)
 8003502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003506:	6193      	str	r3, [r2, #24]
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <SystemClock_Config+0x100>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003514:	bf00      	nop
 8003516:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <SystemClock_Config+0x100>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003522:	d1f8      	bne.n	8003516 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003524:	230b      	movs	r3, #11
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800352e:	2309      	movs	r3, #9
 8003530:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003536:	2301      	movs	r3, #1
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800353a:	2302      	movs	r3, #2
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800353e:	2302      	movs	r3, #2
 8003540:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003542:	2304      	movs	r3, #4
 8003544:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003546:	2318      	movs	r3, #24
 8003548:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800354a:	2302      	movs	r3, #2
 800354c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800354e:	2302      	movs	r3, #2
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003552:	2302      	movs	r3, #2
 8003554:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003556:	2308      	movs	r3, #8
 8003558:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800355a:	2302      	movs	r3, #2
 800355c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003566:	4618      	mov	r0, r3
 8003568:	f00a fa9c 	bl	800daa4 <HAL_RCC_OscConfig>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003572:	f000 f997 	bl	80038a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003576:	233f      	movs	r3, #63	; 0x3f
 8003578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800357a:	2303      	movs	r3, #3
 800357c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800358a:	2340      	movs	r3, #64	; 0x40
 800358c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	2101      	movs	r1, #1
 800359a:	4618      	mov	r0, r3
 800359c:	f00a fedc 	bl	800e358 <HAL_RCC_ClockConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80035a6:	f000 f97d 	bl	80038a4 <Error_Handler>
  }
}
 80035aa:	bf00      	nop
 80035ac:	3770      	adds	r7, #112	; 0x70
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	58000400 	.word	0x58000400
 80035b8:	58024800 	.word	0x58024800

080035bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0b0      	sub	sp, #192	; 0xc0
 80035c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035c2:	463b      	mov	r3, r7
 80035c4:	22c0      	movs	r2, #192	; 0xc0
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f016 fcd7 	bl	8019f7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80035ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80035da:	2304      	movs	r3, #4
 80035dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80035de:	2318      	movs	r3, #24
 80035e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80035e2:	2308      	movs	r3, #8
 80035e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80035e6:	2302      	movs	r3, #2
 80035e8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80035ea:	2302      	movs	r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80035f2:	2320      	movs	r3, #32
 80035f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003600:	463b      	mov	r3, r7
 8003602:	4618      	mov	r0, r3
 8003604:	f00b fa76 	bl	800eaf4 <HAL_RCCEx_PeriphCLKConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800360e:	f000 f949 	bl	80038a4 <Error_Handler>
  }
}
 8003612:	bf00      	nop
 8003614:	37c0      	adds	r7, #192	; 0xc0
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003620:	f7fe fce6 	bl	8001ff0 <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003624:	2000      	movs	r0, #0
 8003626:	f013 fba2 	bl	8016d6e <osEventFlagsNew>
 800362a:	4603      	mov	r3, r0
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <system_setup+0x80>)
 800362e:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <system_setup+0x80>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d100      	bne.n	800363a <system_setup+0x1e>
        while (1);
 8003638:	e7fe      	b.n	8003638 <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800363a:	2000      	movs	r0, #0
 800363c:	f013 fb97 	bl	8016d6e <osEventFlagsNew>
 8003640:	4603      	mov	r3, r0
 8003642:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <system_setup+0x84>)
 8003644:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <system_setup+0x84>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d100      	bne.n	8003650 <system_setup+0x34>
        while (1);
 800364e:	e7fe      	b.n	800364e <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003650:	2000      	movs	r0, #0
 8003652:	f013 fb8c 	bl	8016d6e <osEventFlagsNew>
 8003656:	4603      	mov	r3, r0
 8003658:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <system_setup+0x88>)
 800365a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <system_setup+0x88>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d100      	bne.n	8003666 <system_setup+0x4a>
        while (1);
 8003664:	e7fe      	b.n	8003664 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 8003666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800366e:	210c      	movs	r1, #12
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <system_setup+0x8c>)
 8003672:	f00f f8cd 	bl	8012810 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8003676:	f001 fd7d 	bl	8005174 <voltage_monitor_init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d100      	bne.n	8003682 <system_setup+0x66>
		while (1);
 8003680:	e7fe      	b.n	8003680 <system_setup+0x64>
	}




	if (!init_adc_dma()) {
 8003682:	f000 fbaf 	bl	8003de4 <init_adc_dma>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d100      	bne.n	800368e <system_setup+0x72>
		while (1);
 800368c:	e7fe      	b.n	800368c <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800368e:	2201      	movs	r2, #1
 8003690:	4906      	ldr	r1, [pc, #24]	; (80036ac <system_setup+0x90>)
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <system_setup+0x94>)
 8003694:	f010 fd9c 	bl	80141d0 <HAL_UART_Receive_IT>

}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	24001a44 	.word	0x24001a44
 80036a0:	24001a48 	.word	0x24001a48
 80036a4:	24001a4c 	.word	0x24001a4c
 80036a8:	24001db0 	.word	0x24001db0
 80036ac:	24001a50 	.word	0x24001a50
 80036b0:	24001dfc 	.word	0x24001dfc

080036b4 <sync>:

void sync() {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	send_ACK();
 80036ba:	f000 f81f 	bl	80036fc <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80036be:	480d      	ldr	r0, [pc, #52]	; (80036f4 <sync+0x40>)
 80036c0:	f010 fdd2 	bl	8014268 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80036c4:	2364      	movs	r3, #100	; 0x64
 80036c6:	2209      	movs	r2, #9
 80036c8:	490b      	ldr	r1, [pc, #44]	; (80036f8 <sync+0x44>)
 80036ca:	480a      	ldr	r0, [pc, #40]	; (80036f4 <sync+0x40>)
 80036cc:	f010 fcb8 	bl	8014040 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <sync+0x44>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2bff      	cmp	r3, #255	; 0xff
 80036da:	d1f3      	bne.n	80036c4 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80036dc:	2201      	movs	r2, #1
 80036de:	4906      	ldr	r1, [pc, #24]	; (80036f8 <sync+0x44>)
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <sync+0x40>)
 80036e2:	f010 fd75 	bl	80141d0 <HAL_UART_Receive_IT>

	send_ACK();
 80036e6:	f000 f809 	bl	80036fc <send_ACK>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	24001dfc 	.word	0x24001dfc
 80036f8:	24001a50 	.word	0x24001a50

080036fc <send_ACK>:

void send_ACK() {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <send_ACK+0x1c>)
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003706:	2364      	movs	r3, #100	; 0x64
 8003708:	2201      	movs	r2, #1
 800370a:	4903      	ldr	r1, [pc, #12]	; (8003718 <send_ACK+0x1c>)
 800370c:	4803      	ldr	r0, [pc, #12]	; (800371c <send_ACK+0x20>)
 800370e:	f010 fc09 	bl	8013f24 <HAL_UART_Transmit>
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	24001a9c 	.word	0x24001a9c
 800371c:	24001dfc 	.word	0x24001dfc

08003720 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <get_current_step+0xc0>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003732:	4293      	cmp	r3, r2
 8003734:	d04a      	beq.n	80037cc <get_current_step+0xac>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	da48      	bge.n	80037d0 <get_current_step+0xb0>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003744:	4293      	cmp	r3, r2
 8003746:	d03f      	beq.n	80037c8 <get_current_step+0xa8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800374e:	4293      	cmp	r3, r2
 8003750:	dc3e      	bgt.n	80037d0 <get_current_step+0xb0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003758:	4293      	cmp	r3, r2
 800375a:	d033      	beq.n	80037c4 <get_current_step+0xa4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003762:	da35      	bge.n	80037d0 <get_current_step+0xb0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800376a:	4293      	cmp	r3, r2
 800376c:	d028      	beq.n	80037c0 <get_current_step+0xa0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003774:	4293      	cmp	r3, r2
 8003776:	dc2b      	bgt.n	80037d0 <get_current_step+0xb0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f240 7245 	movw	r2, #1861	; 0x745
 800377e:	4293      	cmp	r3, r2
 8003780:	d01c      	beq.n	80037bc <get_current_step+0x9c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f240 7245 	movw	r2, #1861	; 0x745
 8003788:	4293      	cmp	r3, r2
 800378a:	dc21      	bgt.n	80037d0 <get_current_step+0xb0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003792:	4293      	cmp	r3, r2
 8003794:	d010      	beq.n	80037b8 <get_current_step+0x98>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800379c:	4293      	cmp	r3, r2
 800379e:	dc17      	bgt.n	80037d0 <get_current_step+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <get_current_step+0x90>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80037ac:	d002      	beq.n	80037b4 <get_current_step+0x94>
 80037ae:	e00f      	b.n	80037d0 <get_current_step+0xb0>
	case 0:
		return 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e00e      	b.n	80037d2 <get_current_step+0xb2>
	case 620:
		return 1;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e00c      	b.n	80037d2 <get_current_step+0xb2>
	case 1241:
		return 2;
 80037b8:	2302      	movs	r3, #2
 80037ba:	e00a      	b.n	80037d2 <get_current_step+0xb2>
	case 1861:
		return 3;
 80037bc:	2303      	movs	r3, #3
 80037be:	e008      	b.n	80037d2 <get_current_step+0xb2>
	case 2482:
		return 4;
 80037c0:	2304      	movs	r3, #4
 80037c2:	e006      	b.n	80037d2 <get_current_step+0xb2>
	case 3103:
		return 5;
 80037c4:	2305      	movs	r3, #5
 80037c6:	e004      	b.n	80037d2 <get_current_step+0xb2>
	case 3723:
		return 6;
 80037c8:	2306      	movs	r3, #6
 80037ca:	e002      	b.n	80037d2 <get_current_step+0xb2>
	case 4095:
		return 7;
 80037cc:	2307      	movs	r3, #7
 80037ce:	e000      	b.n	80037d2 <get_current_step+0xb2>
	default:
		return -1;
 80037d0:	23ff      	movs	r3, #255	; 0xff
	}
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007400 	.word	0x40007400

080037e4 <enter_stop>:

void enter_stop() {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	  send_ACK();
 80037e8:	f7ff ff88 	bl	80036fc <send_ACK>

	  vTaskSuspendAll();
 80037ec:	f014 fe56 	bl	801849c <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80037f0:	2101      	movs	r1, #1
 80037f2:	2001      	movs	r0, #1
 80037f4:	f00a f8e0 	bl	800d9b8 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80037f8:	f7ff f8c0 	bl	800297c <__NVIC_SystemReset>

080037fc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003802:	463b      	mov	r3, r7
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800380e:	f003 fd7f 	bl	8007310 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003812:	2301      	movs	r3, #1
 8003814:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003816:	2300      	movs	r3, #0
 8003818:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800381e:	231f      	movs	r3, #31
 8003820:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003822:	2387      	movs	r3, #135	; 0x87
 8003824:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003826:	2300      	movs	r3, #0
 8003828:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800382a:	2300      	movs	r3, #0
 800382c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800382e:	2301      	movs	r3, #1
 8003830:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003832:	2301      	movs	r3, #1
 8003834:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003836:	2300      	movs	r3, #0
 8003838:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800383e:	463b      	mov	r3, r7
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fd9d 	bl	8007380 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003846:	2301      	movs	r3, #1
 8003848:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <MPU_Config+0x80>)
 800384c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800384e:	2311      	movs	r3, #17
 8003850:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8003852:	2300      	movs	r3, #0
 8003854:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003856:	2301      	movs	r3, #1
 8003858:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800385a:	2303      	movs	r3, #3
 800385c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800385e:	2300      	movs	r3, #0
 8003860:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003866:	463b      	mov	r3, r7
 8003868:	4618      	mov	r0, r3
 800386a:	f003 fd89 	bl	8007380 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800386e:	2004      	movs	r0, #4
 8003870:	f003 fd66 	bl	8007340 <HAL_MPU_Enable>

}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	081c0000 	.word	0x081c0000

08003880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003892:	f002 f807 	bl	80058a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40001000 	.word	0x40001000

080038a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80038ac:	e7fe      	b.n	80038ac <Error_Handler+0x8>
	...

080038b0 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80038b6:	bf00      	nop
 80038b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038bc:	481c      	ldr	r0, [pc, #112]	; (8003930 <create_pmt_packet+0x80>)
 80038be:	f007 fc85 	bl	800b1cc <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f7      	bne.n	80038b8 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 faa8 	bl	8004e20 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fad9 	bl	8003e8c <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80038da:	23bb      	movs	r3, #187	; 0xbb
 80038dc:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80038de:	23bb      	movs	r3, #187	; 0xbb
 80038e0:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <create_pmt_packet+0x84>)
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <create_pmt_packet+0x84>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80038f6:	7a3b      	ldrb	r3, [r7, #8]
 80038f8:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80038fa:	7a7b      	ldrb	r3, [r7, #9]
 80038fc:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80038fe:	793b      	ldrb	r3, [r7, #4]
 8003900:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003902:	797b      	ldrb	r3, [r7, #5]
 8003904:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800390e:	f107 010c 	add.w	r1, r7, #12
 8003912:	2364      	movs	r3, #100	; 0x64
 8003914:	220a      	movs	r2, #10
 8003916:	4808      	ldr	r0, [pc, #32]	; (8003938 <create_pmt_packet+0x88>)
 8003918:	f010 fb04 	bl	8013f24 <HAL_UART_Transmit>

	pmt_seq++;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <create_pmt_packet+0x84>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <create_pmt_packet+0x84>)
 8003926:	801a      	strh	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58020000 	.word	0x58020000
 8003934:	24001a9e 	.word	0x24001a9e
 8003938:	24001dfc 	.word	0x24001dfc

0800393c <create_erpa_packet>:


void create_erpa_packet() {
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003942:	bf00      	nop
 8003944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003948:	4828      	ldr	r0, [pc, #160]	; (80039ec <create_erpa_packet+0xb0>)
 800394a:	f007 fc3f 	bl	800b1cc <HAL_GPIO_ReadPin>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f7      	bne.n	8003944 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003954:	23ff      	movs	r3, #255	; 0xff
 8003956:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fa60 	bl	8004e20 <get_uptime>
	sweep_step = get_current_step();
 8003960:	f7ff fede 	bl	8003720 <get_current_step>
 8003964:	4603      	mov	r3, r0
 8003966:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003968:	f107 030c 	add.w	r3, r7, #12
 800396c:	4618      	mov	r0, r3
 800396e:	f000 faad 	bl	8003ecc <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fac8 	bl	8003f0c <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 800397c:	23aa      	movs	r3, #170	; 0xaa
 800397e:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003980:	23aa      	movs	r3, #170	; 0xaa
 8003982:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <create_erpa_packet+0xb4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <create_erpa_packet+0xb4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b2db      	uxtb	r3, r3
 8003996:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <create_erpa_packet+0xb4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80039a4:	893b      	ldrh	r3, [r7, #8]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80039ae:	893b      	ldrh	r3, [r7, #8]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80039b8:	7b7b      	ldrb	r3, [r7, #13]
 80039ba:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80039bc:	793b      	ldrb	r3, [r7, #4]
 80039be:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80039c0:	797b      	ldrb	r3, [r7, #5]
 80039c2:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80039c4:	79bb      	ldrb	r3, [r7, #6]
 80039c6:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80039cc:	f107 0110 	add.w	r1, r7, #16
 80039d0:	2364      	movs	r3, #100	; 0x64
 80039d2:	220e      	movs	r2, #14
 80039d4:	4807      	ldr	r0, [pc, #28]	; (80039f4 <create_erpa_packet+0xb8>)
 80039d6:	f010 faa5 	bl	8013f24 <HAL_UART_Transmit>

	erpa_seq++;
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <create_erpa_packet+0xb4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <create_erpa_packet+0xb4>)
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	bf00      	nop
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	58020400 	.word	0x58020400
 80039f0:	24001aa0 	.word	0x24001aa0
 80039f4:	24001dfc 	.word	0x24001dfc

080039f8 <create_hk_packet>:


void create_hk_packet() {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b094      	sub	sp, #80	; 0x50
 80039fc:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 fa0d 	bl	8004e20 <get_uptime>
	get_timestamp(timestamp);
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fa58 	bl	8004ec0 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003a10:	f001 fdf0 	bl	80055f4 <get_rail_monitor>
 8003a14:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003a16:	23cc      	movs	r3, #204	; 0xcc
 8003a18:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003a1a:	23cc      	movs	r3, #204	; 0xcc
 8003a1c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003a1e:	4b9b      	ldr	r3, [pc, #620]	; (8003c8c <create_hk_packet+0x294>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003a2a:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <create_hk_packet+0x294>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	889b      	ldrh	r3, [r3, #4]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	889b      	ldrh	r3, [r3, #4]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	330a      	adds	r3, #10
 8003a4a:	889b      	ldrh	r3, [r3, #4]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	330a      	adds	r3, #10
 8003a58:	889b      	ldrh	r3, [r3, #4]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	3314      	adds	r3, #20
 8003a62:	889b      	ldrh	r3, [r3, #4]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	3314      	adds	r3, #20
 8003a70:	889b      	ldrh	r3, [r3, #4]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	331e      	adds	r3, #30
 8003a7a:	889b      	ldrh	r3, [r3, #4]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	331e      	adds	r3, #30
 8003a88:	889b      	ldrh	r3, [r3, #4]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	3328      	adds	r3, #40	; 0x28
 8003a92:	889b      	ldrh	r3, [r3, #4]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa0:	3328      	adds	r3, #40	; 0x28
 8003aa2:	889b      	ldrh	r3, [r3, #4]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	3332      	adds	r3, #50	; 0x32
 8003aae:	889b      	ldrh	r3, [r3, #4]
 8003ab0:	0a1b      	lsrs	r3, r3, #8
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	889b      	ldrh	r3, [r3, #4]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	333c      	adds	r3, #60	; 0x3c
 8003aca:	889b      	ldrh	r3, [r3, #4]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	333c      	adds	r3, #60	; 0x3c
 8003ada:	889b      	ldrh	r3, [r3, #4]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae4:	3346      	adds	r3, #70	; 0x46
 8003ae6:	889b      	ldrh	r3, [r3, #4]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	3346      	adds	r3, #70	; 0x46
 8003af6:	889b      	ldrh	r3, [r3, #4]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	3350      	adds	r3, #80	; 0x50
 8003b02:	889b      	ldrh	r3, [r3, #4]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b10:	3350      	adds	r3, #80	; 0x50
 8003b12:	889b      	ldrh	r3, [r3, #4]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1c:	335a      	adds	r3, #90	; 0x5a
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	335a      	adds	r3, #90	; 0x5a
 8003b2e:	889b      	ldrh	r3, [r3, #4]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	3364      	adds	r3, #100	; 0x64
 8003b3a:	889b      	ldrh	r3, [r3, #4]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	3364      	adds	r3, #100	; 0x64
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	336e      	adds	r3, #110	; 0x6e
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	336e      	adds	r3, #110	; 0x6e
 8003b66:	889b      	ldrh	r3, [r3, #4]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	3378      	adds	r3, #120	; 0x78
 8003b72:	889b      	ldrh	r3, [r3, #4]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b80:	3378      	adds	r3, #120	; 0x78
 8003b82:	889b      	ldrh	r3, [r3, #4]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	3382      	adds	r3, #130	; 0x82
 8003b8e:	889b      	ldrh	r3, [r3, #4]
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9c:	3382      	adds	r3, #130	; 0x82
 8003b9e:	889b      	ldrh	r3, [r3, #4]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	338c      	adds	r3, #140	; 0x8c
 8003baa:	889b      	ldrh	r3, [r3, #4]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb8:	338c      	adds	r3, #140	; 0x8c
 8003bba:	889b      	ldrh	r3, [r3, #4]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	3396      	adds	r3, #150	; 0x96
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	3396      	adds	r3, #150	; 0x96
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	33a0      	adds	r3, #160	; 0xa0
 8003be2:	889b      	ldrh	r3, [r3, #4]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	33a0      	adds	r3, #160	; 0xa0
 8003bf2:	889b      	ldrh	r3, [r3, #4]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	33aa      	adds	r3, #170	; 0xaa
 8003bfe:	889b      	ldrh	r3, [r3, #4]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0c:	33aa      	adds	r3, #170	; 0xaa
 8003c0e:	889b      	ldrh	r3, [r3, #4]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003c16:	7a3b      	ldrb	r3, [r7, #8]
 8003c18:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003c1c:	7a7b      	ldrb	r3, [r7, #9]
 8003c1e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003c22:	7abb      	ldrb	r3, [r7, #10]
 8003c24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003c2e:	7b3b      	ldrb	r3, [r7, #12]
 8003c30:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003c34:	7b7b      	ldrb	r3, [r7, #13]
 8003c36:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003c3a:	7bbb      	ldrb	r3, [r7, #14]
 8003c3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003c46:	7c3b      	ldrb	r3, [r7, #16]
 8003c48:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003c4c:	7c7b      	ldrb	r3, [r7, #17]
 8003c4e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003c52:	793b      	ldrb	r3, [r7, #4]
 8003c54:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003c58:	797b      	ldrb	r3, [r7, #5]
 8003c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003c5e:	79bb      	ldrb	r3, [r7, #6]
 8003c60:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003c6a:	f107 0114 	add.w	r1, r7, #20
 8003c6e:	2364      	movs	r3, #100	; 0x64
 8003c70:	2236      	movs	r2, #54	; 0x36
 8003c72:	4807      	ldr	r0, [pc, #28]	; (8003c90 <create_hk_packet+0x298>)
 8003c74:	f010 f956 	bl	8013f24 <HAL_UART_Transmit>

	hk_seq++;
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <create_hk_packet+0x294>)
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <create_hk_packet+0x294>)
 8003c82:	801a      	strh	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	3750      	adds	r7, #80	; 0x50
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	24001aa4 	.word	0x24001aa4
 8003c90:	24001dfc 	.word	0x24001dfc

08003c94 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <reset_packet_sequence_numbers+0x20>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <reset_packet_sequence_numbers+0x24>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <reset_packet_sequence_numbers+0x28>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	24001a9e 	.word	0x24001a9e
 8003cb8:	24001aa0 	.word	0x24001aa0
 8003cbc:	24001aa4 	.word	0x24001aa4

08003cc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003cda:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <MX_RTC_Init+0xb8>)
 8003cdc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003ce6:	2263      	movs	r2, #99	; 0x63
 8003ce8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003cea:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003cec:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cf0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d0a:	481a      	ldr	r0, [pc, #104]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003d0c:	f00d fbf0 	bl	80114f0 <HAL_RTC_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003d16:	f7ff fdc5 	bl	80038a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	2201      	movs	r2, #1
 8003d32:	4619      	mov	r1, r3
 8003d34:	480f      	ldr	r0, [pc, #60]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003d36:	f00d fc5d 	bl	80115f4 <HAL_RTC_SetTime>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003d40:	f7ff fdb0 	bl	80038a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d44:	2301      	movs	r3, #1
 8003d46:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003d54:	463b      	mov	r3, r7
 8003d56:	2201      	movs	r2, #1
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4806      	ldr	r0, [pc, #24]	; (8003d74 <MX_RTC_Init+0xb4>)
 8003d5c:	f00d fd44 	bl	80117e8 <HAL_RTC_SetDate>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003d66:	f7ff fd9d 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	24001aa8 	.word	0x24001aa8
 8003d78:	58004000 	.word	0x58004000

08003d7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b0b2      	sub	sp, #200	; 0xc8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	22c0      	movs	r2, #192	; 0xc0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f016 f8f5 	bl	8019f7c <memset>
  if(rtcHandle->Instance==RTC)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <HAL_RTC_MspInit+0x5c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d118      	bne.n	8003dce <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RTC_MspInit+0x60>)
 8003daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00a fe9e 	bl	800eaf4 <HAL_RCCEx_PeriphCLKConfig>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003dbe:	f7ff fd71 	bl	80038a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_RTC_MspInit+0x64>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <HAL_RTC_MspInit+0x64>)
 8003dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003dce:	bf00      	nop
 8003dd0:	37c8      	adds	r7, #200	; 0xc8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	58004000 	.word	0x58004000
 8003ddc:	00019300 	.word	0x00019300
 8003de0:	58024400 	.word	0x58024400

08003de4 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003dee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df6:	481f      	ldr	r0, [pc, #124]	; (8003e74 <init_adc_dma+0x90>)
 8003df8:	f003 f868 	bl	8006ecc <HAL_ADCEx_Calibration_Start>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003e02:	f7ff fd4f 	bl	80038a4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003e06:	220b      	movs	r2, #11
 8003e08:	491b      	ldr	r1, [pc, #108]	; (8003e78 <init_adc_dma+0x94>)
 8003e0a:	481a      	ldr	r0, [pc, #104]	; (8003e74 <init_adc_dma+0x90>)
 8003e0c:	f002 f93c 	bl	8006088 <HAL_ADC_Start_DMA>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003e16:	f7ff fd45 	bl	80038a4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003e1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e22:	4816      	ldr	r0, [pc, #88]	; (8003e7c <init_adc_dma+0x98>)
 8003e24:	f003 f852 	bl	8006ecc <HAL_ADCEx_Calibration_Start>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003e2e:	f7ff fd39 	bl	80038a4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003e32:	2204      	movs	r2, #4
 8003e34:	4912      	ldr	r1, [pc, #72]	; (8003e80 <init_adc_dma+0x9c>)
 8003e36:	4811      	ldr	r0, [pc, #68]	; (8003e7c <init_adc_dma+0x98>)
 8003e38:	f002 f926 	bl	8006088 <HAL_ADC_Start_DMA>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003e42:	f7ff fd2f 	bl	80038a4 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <init_adc_dma+0xa0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <init_adc_dma+0xa0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <init_adc_dma+0xa4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <init_adc_dma+0xa4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e64:	601a      	str	r2, [r3, #0]


	status = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	71fb      	strb	r3, [r7, #7]

	return status;
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	2400013c 	.word	0x2400013c
 8003e78:	24001ae0 	.word	0x24001ae0
 8003e7c:	240001a0 	.word	0x240001a0
 8003e80:	24001b00 	.word	0x24001b00
 8003e84:	24001b9c 	.word	0x24001b9c
 8003e88:	24001b14 	.word	0x24001b14

08003e8c <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003e94:	2201      	movs	r2, #1
 8003e96:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <sample_pmt_spi+0x38>)
 8003e98:	480b      	ldr	r0, [pc, #44]	; (8003ec8 <sample_pmt_spi+0x3c>)
 8003e9a:	f00d ff6f 	bl	8011d7c <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <sample_pmt_spi+0x38>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <sample_pmt_spi+0x38>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	7bba      	ldrb	r2, [r7, #14]
 8003eba:	701a      	strb	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	24001b0c 	.word	0x24001b0c
 8003ec8:	24001b14 	.word	0x24001b14

08003ecc <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	490b      	ldr	r1, [pc, #44]	; (8003f04 <sample_erpa_spi+0x38>)
 8003ed8:	480b      	ldr	r0, [pc, #44]	; (8003f08 <sample_erpa_spi+0x3c>)
 8003eda:	f00d ff4f 	bl	8011d7c <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <sample_erpa_spi+0x38>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <sample_erpa_spi+0x38>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	7bba      	ldrb	r2, [r7, #14]
 8003efa:	701a      	strb	r2, [r3, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	24001b08 	.word	0x24001b08
 8003f08:	24001b9c 	.word	0x24001b9c

08003f0c <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <sample_erpa_adc+0x20>)
 8003f16:	885b      	ldrh	r3, [r3, #2]
 8003f18:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	89fa      	ldrh	r2, [r7, #14]
 8003f1e:	801a      	strh	r2, [r3, #0]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	24001ae0 	.word	0x24001ae0

08003f30 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003f38:	2390      	movs	r3, #144	; 0x90
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8a2 	bl	8004084 <poll_i2c_sensor>
 8003f40:	4603      	mov	r3, r0
 8003f42:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003f44:	2394      	movs	r3, #148	; 0x94
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f89c 	bl	8004084 <poll_i2c_sensor>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003f50:	2392      	movs	r3, #146	; 0x92
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f896 	bl	8004084 <poll_i2c_sensor>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003f5c:	2396      	movs	r3, #150	; 0x96
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f890 	bl	8004084 <poll_i2c_sensor>
 8003f64:	4603      	mov	r3, r0
 8003f66:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	89fa      	ldrh	r2, [r7, #14]
 8003f6c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3302      	adds	r3, #2
 8003f72:	89ba      	ldrh	r2, [r7, #12]
 8003f74:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	897a      	ldrh	r2, [r7, #10]
 8003f7c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3306      	adds	r3, #6
 8003f82:	893a      	ldrh	r2, [r7, #8]
 8003f84:	801a      	strh	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <sample_hk_adc1+0xa0>)
 8003f9a:	8a9b      	ldrh	r3, [r3, #20]
 8003f9c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fa0:	8a1b      	ldrh	r3, [r3, #16]
 8003fa2:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fa6:	899b      	ldrh	r3, [r3, #12]
 8003fa8:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003faa:	4b21      	ldr	r3, [pc, #132]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fac:	8a5b      	ldrh	r3, [r3, #18]
 8003fae:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fb2:	889b      	ldrh	r3, [r3, #4]
 8003fb4:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fb8:	88db      	ldrh	r3, [r3, #6]
 8003fba:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fbe:	89db      	ldrh	r3, [r3, #14]
 8003fc0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fc4:	891b      	ldrh	r3, [r3, #8]
 8003fc6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <sample_hk_adc1+0xa0>)
 8003fd0:	895b      	ldrh	r3, [r3, #10]
 8003fd2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8bfa      	ldrh	r2, [r7, #30]
 8003fd8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3302      	adds	r3, #2
 8003fde:	8bba      	ldrh	r2, [r7, #28]
 8003fe0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	8b7a      	ldrh	r2, [r7, #26]
 8003fe8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3306      	adds	r3, #6
 8003fee:	8b3a      	ldrh	r2, [r7, #24]
 8003ff0:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	8afa      	ldrh	r2, [r7, #22]
 8003ff8:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	330a      	adds	r3, #10
 8003ffe:	8aba      	ldrh	r2, [r7, #20]
 8004000:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	330c      	adds	r3, #12
 8004006:	8a7a      	ldrh	r2, [r7, #18]
 8004008:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	330e      	adds	r3, #14
 800400e:	8a3a      	ldrh	r2, [r7, #16]
 8004010:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3310      	adds	r3, #16
 8004016:	89fa      	ldrh	r2, [r7, #14]
 8004018:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3312      	adds	r3, #18
 800401e:	89ba      	ldrh	r2, [r7, #12]
 8004020:	801a      	strh	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	24001ae0 	.word	0x24001ae0

08004034 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <sample_hk_adc3+0x4c>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <sample_hk_adc3+0x4c>)
 8004044:	885b      	ldrh	r3, [r3, #2]
 8004046:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <sample_hk_adc3+0x4c>)
 800404a:	889b      	ldrh	r3, [r3, #4]
 800404c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <sample_hk_adc3+0x4c>)
 8004050:	88db      	ldrh	r3, [r3, #6]
 8004052:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	89fa      	ldrh	r2, [r7, #14]
 8004058:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3302      	adds	r3, #2
 800405e:	89ba      	ldrh	r2, [r7, #12]
 8004060:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	897a      	ldrh	r2, [r7, #10]
 8004068:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3306      	adds	r3, #6
 800406e:	893a      	ldrh	r2, [r7, #8]
 8004070:	801a      	strh	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	24001b00 	.word	0x24001b00

08004084 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 800408e:	2200      	movs	r2, #0
 8004090:	4b20      	ldr	r3, [pc, #128]	; (8004114 <poll_i2c_sensor+0x90>)
 8004092:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	b299      	uxth	r1, r3
 8004098:	2301      	movs	r3, #1
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <poll_i2c_sensor+0x90>)
 800409c:	481e      	ldr	r0, [pc, #120]	; (8004118 <poll_i2c_sensor+0x94>)
 800409e:	f007 f963 	bl	800b368 <HAL_I2C_Master_Transmit_DMA>
 80040a2:	4603      	mov	r3, r0
 80040a4:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80040a6:	7b7b      	ldrb	r3, [r7, #13]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80040ac:	481b      	ldr	r0, [pc, #108]	; (800411c <poll_i2c_sensor+0x98>)
 80040ae:	f015 ffdb 	bl	801a068 <puts>
 80040b2:	e028      	b.n	8004106 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80040b4:	bf00      	nop
 80040b6:	4818      	ldr	r0, [pc, #96]	; (8004118 <poll_i2c_sensor+0x94>)
 80040b8:	f007 fc3d 	bl	800b936 <HAL_I2C_GetState>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d1f9      	bne.n	80040b6 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	b299      	uxth	r1, r3
 80040c6:	2302      	movs	r3, #2
 80040c8:	4a12      	ldr	r2, [pc, #72]	; (8004114 <poll_i2c_sensor+0x90>)
 80040ca:	4813      	ldr	r0, [pc, #76]	; (8004118 <poll_i2c_sensor+0x94>)
 80040cc:	f007 fa60 	bl	800b590 <HAL_I2C_Master_Receive_DMA>
 80040d0:	4603      	mov	r3, r0
 80040d2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80040d4:	7b7b      	ldrb	r3, [r7, #13]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80040da:	4811      	ldr	r0, [pc, #68]	; (8004120 <poll_i2c_sensor+0x9c>)
 80040dc:	f015 ffc4 	bl	801a068 <puts>
 80040e0:	e011      	b.n	8004106 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80040e2:	bf00      	nop
 80040e4:	480c      	ldr	r0, [pc, #48]	; (8004118 <poll_i2c_sensor+0x94>)
 80040e6:	f007 fc26 	bl	800b936 <HAL_I2C_GetState>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d1f9      	bne.n	80040e4 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <poll_i2c_sensor+0x90>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80040f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040fc:	4a05      	ldr	r2, [pc, #20]	; (8004114 <poll_i2c_sensor+0x90>)
 80040fe:	7852      	ldrb	r2, [r2, #1]
 8004100:	4313      	orrs	r3, r2
 8004102:	10db      	asrs	r3, r3, #3
 8004104:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	24001b10 	.word	0x24001b10
 8004118:	240018f0 	.word	0x240018f0
 800411c:	0801abd0 	.word	0x0801abd0
 8004120:	0801abe0 	.word	0x0801abe0

08004124 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004128:	4b28      	ldr	r3, [pc, #160]	; (80041cc <MX_SPI1_Init+0xa8>)
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <MX_SPI1_Init+0xac>)
 800412c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800412e:	4b27      	ldr	r3, [pc, #156]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004130:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004134:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004136:	4b25      	ldr	r3, [pc, #148]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004138:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800413c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004140:	220f      	movs	r2, #15
 8004142:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <MX_SPI1_Init+0xa8>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004152:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004156:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <MX_SPI1_Init+0xa8>)
 800415a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800415e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004162:	2200      	movs	r2, #0
 8004164:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004168:	2200      	movs	r2, #0
 800416a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <MX_SPI1_Init+0xa8>)
 800416e:	2200      	movs	r2, #0
 8004170:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004174:	2200      	movs	r2, #0
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004178:	4b14      	ldr	r3, [pc, #80]	; (80041cc <MX_SPI1_Init+0xa8>)
 800417a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800417e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004182:	2200      	movs	r2, #0
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004188:	2200      	movs	r2, #0
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <MX_SPI1_Init+0xa8>)
 800418e:	2200      	movs	r2, #0
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004192:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <MX_SPI1_Init+0xa8>)
 8004194:	2200      	movs	r2, #0
 8004196:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <MX_SPI1_Init+0xa8>)
 800419a:	2200      	movs	r2, #0
 800419c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <MX_SPI1_Init+0xa8>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <MX_SPI1_Init+0xa8>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <MX_SPI1_Init+0xa8>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <MX_SPI1_Init+0xa8>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041b6:	4805      	ldr	r0, [pc, #20]	; (80041cc <MX_SPI1_Init+0xa8>)
 80041b8:	f00d fcbc 	bl	8011b34 <HAL_SPI_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80041c2:	f7ff fb6f 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	24001b14 	.word	0x24001b14
 80041d0:	40013000 	.word	0x40013000

080041d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <MX_SPI2_Init+0xa8>)
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <MX_SPI2_Init+0xac>)
 80041dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041de:	4b27      	ldr	r3, [pc, #156]	; (800427c <MX_SPI2_Init+0xa8>)
 80041e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80041e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80041e6:	4b25      	ldr	r3, [pc, #148]	; (800427c <MX_SPI2_Init+0xa8>)
 80041e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80041ec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <MX_SPI2_Init+0xa8>)
 80041f0:	220f      	movs	r2, #15
 80041f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <MX_SPI2_Init+0xa8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <MX_SPI2_Init+0xa8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <MX_SPI2_Init+0xa8>)
 8004202:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004206:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <MX_SPI2_Init+0xa8>)
 800420a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800420e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <MX_SPI2_Init+0xa8>)
 8004212:	2200      	movs	r2, #0
 8004214:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004216:	4b19      	ldr	r3, [pc, #100]	; (800427c <MX_SPI2_Init+0xa8>)
 8004218:	2200      	movs	r2, #0
 800421a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <MX_SPI2_Init+0xa8>)
 800421e:	2200      	movs	r2, #0
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <MX_SPI2_Init+0xa8>)
 8004224:	2200      	movs	r2, #0
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004228:	4b14      	ldr	r3, [pc, #80]	; (800427c <MX_SPI2_Init+0xa8>)
 800422a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800422e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <MX_SPI2_Init+0xa8>)
 8004232:	2200      	movs	r2, #0
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <MX_SPI2_Init+0xa8>)
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <MX_SPI2_Init+0xa8>)
 800423e:	2200      	movs	r2, #0
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <MX_SPI2_Init+0xa8>)
 8004244:	2200      	movs	r2, #0
 8004246:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <MX_SPI2_Init+0xa8>)
 800424a:	2200      	movs	r2, #0
 800424c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <MX_SPI2_Init+0xa8>)
 8004250:	2200      	movs	r2, #0
 8004252:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <MX_SPI2_Init+0xa8>)
 8004256:	2200      	movs	r2, #0
 8004258:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <MX_SPI2_Init+0xa8>)
 800425c:	2200      	movs	r2, #0
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <MX_SPI2_Init+0xa8>)
 8004262:	2200      	movs	r2, #0
 8004264:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <MX_SPI2_Init+0xa8>)
 8004268:	f00d fc64 	bl	8011b34 <HAL_SPI_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004272:	f7ff fb17 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	24001b9c 	.word	0x24001b9c
 8004280:	40003800 	.word	0x40003800

08004284 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b0bc      	sub	sp, #240	; 0xf0
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800429c:	f107 0318 	add.w	r3, r7, #24
 80042a0:	22c0      	movs	r2, #192	; 0xc0
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f015 fe69 	bl	8019f7c <memset>
  if(spiHandle->Instance==SPI1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a83      	ldr	r2, [pc, #524]	; (80044bc <HAL_SPI_MspInit+0x238>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d17c      	bne.n	80043ae <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80042b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042c4:	f107 0318 	add.w	r3, r7, #24
 80042c8:	4618      	mov	r0, r3
 80042ca:	f00a fc13 	bl	800eaf4 <HAL_RCCEx_PeriphCLKConfig>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80042d4:	f7ff fae6 	bl	80038a4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042d8:	4b79      	ldr	r3, [pc, #484]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80042da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042de:	4a78      	ldr	r2, [pc, #480]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80042e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80042ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f6:	4b72      	ldr	r3, [pc, #456]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80042f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fc:	4a70      	ldr	r2, [pc, #448]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004306:	4b6e      	ldr	r3, [pc, #440]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 8004308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004314:	2318      	movs	r3, #24
 8004316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800432c:	2305      	movs	r3, #5
 800432e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004332:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004336:	4619      	mov	r1, r3
 8004338:	4862      	ldr	r0, [pc, #392]	; (80044c4 <HAL_SPI_MspInit+0x240>)
 800433a:	f006 fd97 	bl	800ae6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800433e:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004340:	4a62      	ldr	r2, [pc, #392]	; (80044cc <HAL_SPI_MspInit+0x248>)
 8004342:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004344:	4b60      	ldr	r3, [pc, #384]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004346:	2225      	movs	r2, #37	; 0x25
 8004348:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800434a:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004350:	4b5d      	ldr	r3, [pc, #372]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004356:	4b5c      	ldr	r3, [pc, #368]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800435c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800435e:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004364:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004366:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004368:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800436c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800436e:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004370:	2200      	movs	r2, #0
 8004372:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004374:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004376:	2200      	movs	r2, #0
 8004378:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800437a:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 800437c:	2200      	movs	r2, #0
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004380:	4851      	ldr	r0, [pc, #324]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004382:	f003 fc43 	bl	8007c0c <HAL_DMA_Init>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 800438c:	f7ff fa8a 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a4d      	ldr	r2, [pc, #308]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c
 8004396:	4a4c      	ldr	r2, [pc, #304]	; (80044c8 <HAL_SPI_MspInit+0x244>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800439c:	2200      	movs	r2, #0
 800439e:	2105      	movs	r1, #5
 80043a0:	2023      	movs	r0, #35	; 0x23
 80043a2:	f002 ff8d 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80043a6:	2023      	movs	r0, #35	; 0x23
 80043a8:	f002 ffa4 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80043ac:	e081      	b.n	80044b2 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a47      	ldr	r2, [pc, #284]	; (80044d0 <HAL_SPI_MspInit+0x24c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d17c      	bne.n	80044b2 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80043b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043c8:	f107 0318 	add.w	r3, r7, #24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f00a fb91 	bl	800eaf4 <HAL_RCCEx_PeriphCLKConfig>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80043d8:	f7ff fa64 	bl	80038a4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043dc:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80043de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e2:	4a37      	ldr	r2, [pc, #220]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043ec:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80043ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 80043fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004400:	4a2f      	ldr	r2, [pc, #188]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800440a:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <HAL_SPI_MspInit+0x23c>)
 800440c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004418:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800441c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004420:	2302      	movs	r3, #2
 8004422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004432:	2305      	movs	r3, #5
 8004434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004438:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800443c:	4619      	mov	r1, r3
 800443e:	4821      	ldr	r0, [pc, #132]	; (80044c4 <HAL_SPI_MspInit+0x240>)
 8004440:	f006 fd14 	bl	800ae6c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004446:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <HAL_SPI_MspInit+0x254>)
 8004448:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 800444c:	2227      	movs	r2, #39	; 0x27
 800444e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004456:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004458:	2200      	movs	r2, #0
 800445a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 800445e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004462:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800446a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 800446e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004472:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800447a:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 800447c:	2200      	movs	r2, #0
 800447e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004482:	2200      	movs	r2, #0
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004486:	4813      	ldr	r0, [pc, #76]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 8004488:	f003 fbc0 	bl	8007c0c <HAL_DMA_Init>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004492:	f7ff fa07 	bl	80038a4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 800449a:	67da      	str	r2, [r3, #124]	; 0x7c
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <HAL_SPI_MspInit+0x250>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80044a2:	2200      	movs	r2, #0
 80044a4:	2105      	movs	r1, #5
 80044a6:	2024      	movs	r0, #36	; 0x24
 80044a8:	f002 ff0a 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80044ac:	2024      	movs	r0, #36	; 0x24
 80044ae:	f002 ff21 	bl	80072f4 <HAL_NVIC_EnableIRQ>
}
 80044b2:	bf00      	nop
 80044b4:	37f0      	adds	r7, #240	; 0xf0
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40013000 	.word	0x40013000
 80044c0:	58024400 	.word	0x58024400
 80044c4:	58020400 	.word	0x58020400
 80044c8:	24001c24 	.word	0x24001c24
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40003800 	.word	0x40003800
 80044d4:	24001c9c 	.word	0x24001c9c
 80044d8:	40020058 	.word	0x40020058

080044dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <HAL_MspInit+0x38>)
 80044e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044e8:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <HAL_MspInit+0x38>)
 80044ea:	f043 0302 	orr.w	r3, r3, #2
 80044ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <HAL_MspInit+0x38>)
 80044f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004500:	2200      	movs	r2, #0
 8004502:	210f      	movs	r1, #15
 8004504:	f06f 0001 	mvn.w	r0, #1
 8004508:	f002 feda 	bl	80072c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400

08004518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b090      	sub	sp, #64	; 0x40
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b0f      	cmp	r3, #15
 8004524:	d827      	bhi.n	8004576 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004526:	2200      	movs	r2, #0
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	2036      	movs	r0, #54	; 0x36
 800452c:	f002 fec8 	bl	80072c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004530:	2036      	movs	r0, #54	; 0x36
 8004532:	f002 fedf 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_InitTick+0xc4>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800453c:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <HAL_InitTick+0xc8>)
 800453e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004542:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <HAL_InitTick+0xc8>)
 8004544:	f043 0310 	orr.w	r3, r3, #16
 8004548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_InitTick+0xc8>)
 800454e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800455a:	f107 0210 	add.w	r2, r7, #16
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	4611      	mov	r1, r2
 8004564:	4618      	mov	r0, r3
 8004566:	f00a fa83 	bl	800ea70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_InitTick+0x6a>
 8004574:	e001      	b.n	800457a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e02b      	b.n	80045d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800457a:	f00a fa4d 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 800457e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004580:	e004      	b.n	800458c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004582:	f00a fa49 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 8004586:	4603      	mov	r3, r0
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_InitTick+0xcc>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	0c9b      	lsrs	r3, r3, #18
 8004596:	3b01      	subs	r3, #1
 8004598:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_InitTick+0xd0>)
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <HAL_InitTick+0xd4>)
 800459e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_InitTick+0xd0>)
 80045a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80045a8:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <HAL_InitTick+0xd0>)
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_InitTick+0xd0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_InitTick+0xd0>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80045ba:	480b      	ldr	r0, [pc, #44]	; (80045e8 <HAL_InitTick+0xd0>)
 80045bc:	f00e f859 	bl	8012672 <HAL_TIM_Base_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80045c6:	4808      	ldr	r0, [pc, #32]	; (80045e8 <HAL_InitTick+0xd0>)
 80045c8:	f00e f8aa 	bl	8012720 <HAL_TIM_Base_Start_IT>
 80045cc:	4603      	mov	r3, r0
 80045ce:	e000      	b.n	80045d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3740      	adds	r7, #64	; 0x40
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	24000098 	.word	0x24000098
 80045e0:	58024400 	.word	0x58024400
 80045e4:	431bde83 	.word	0x431bde83
 80045e8:	24001d14 	.word	0x24001d14
 80045ec:	40001000 	.word	0x40001000

080045f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80045f4:	e7fe      	b.n	80045f4 <NMI_Handler+0x4>

080045f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045fa:	e7fe      	b.n	80045fa <HardFault_Handler+0x4>

080045fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <MemManage_Handler+0x4>

08004602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004606:	e7fe      	b.n	8004606 <BusFault_Handler+0x4>

08004608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800460c:	e7fe      	b.n	800460c <UsageFault_Handler+0x4>

0800460e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <DMA1_Stream0_IRQHandler+0x10>)
 8004622:	f004 fe1d 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	24000204 	.word	0x24000204

08004630 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004634:	4802      	ldr	r0, [pc, #8]	; (8004640 <DMA1_Stream1_IRQHandler+0x10>)
 8004636:	f004 fe13 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2400027c 	.word	0x2400027c

08004644 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004648:	4802      	ldr	r0, [pc, #8]	; (8004654 <DMA1_Stream2_IRQHandler+0x10>)
 800464a:	f004 fe09 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	24001e90 	.word	0x24001e90

08004658 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800465c:	4802      	ldr	r0, [pc, #8]	; (8004668 <DMA1_Stream3_IRQHandler+0x10>)
 800465e:	f004 fdff 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	24001c9c 	.word	0x24001c9c

0800466c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004670:	4802      	ldr	r0, [pc, #8]	; (800467c <DMA1_Stream4_IRQHandler+0x10>)
 8004672:	f004 fdf5 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	24001c24 	.word	0x24001c24

08004680 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <DMA1_Stream5_IRQHandler+0x10>)
 8004686:	f004 fdeb 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	24000308 	.word	0x24000308

08004694 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <DMA1_Stream6_IRQHandler+0x10>)
 800469a:	f004 fde1 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	24001944 	.word	0x24001944

080046a8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046ac:	4802      	ldr	r0, [pc, #8]	; (80046b8 <TIM1_BRK_IRQHandler+0x10>)
 80046ae:	f00e fb4e 	bl	8012d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	24001d64 	.word	0x24001d64

080046bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046c0:	4802      	ldr	r0, [pc, #8]	; (80046cc <TIM1_UP_IRQHandler+0x10>)
 80046c2:	f00e fb44 	bl	8012d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	24001d64 	.word	0x24001d64

080046d0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046d4:	4802      	ldr	r0, [pc, #8]	; (80046e0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80046d6:	f00e fb3a 	bl	8012d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	24001d64 	.word	0x24001d64

080046e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <TIM1_CC_IRQHandler+0x10>)
 80046ea:	f00e fb30 	bl	8012d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	24001d64 	.word	0x24001d64

080046f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046fc:	4802      	ldr	r0, [pc, #8]	; (8004708 <TIM2_IRQHandler+0x10>)
 80046fe:	f00e fb26 	bl	8012d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	24001db0 	.word	0x24001db0

0800470c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004710:	4802      	ldr	r0, [pc, #8]	; (800471c <I2C1_EV_IRQHandler+0x10>)
 8004712:	f007 f82d 	bl	800b770 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	240018f0 	.word	0x240018f0

08004720 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004724:	4802      	ldr	r0, [pc, #8]	; (8004730 <I2C1_ER_IRQHandler+0x10>)
 8004726:	f007 f83d 	bl	800b7a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800472a:	bf00      	nop
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	240018f0 	.word	0x240018f0

08004734 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004738:	4802      	ldr	r0, [pc, #8]	; (8004744 <SPI1_IRQHandler+0x10>)
 800473a:	f00d fc67 	bl	801200c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	24001b14 	.word	0x24001b14

08004748 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800474c:	4802      	ldr	r0, [pc, #8]	; (8004758 <SPI2_IRQHandler+0x10>)
 800474e:	f00d fc5d 	bl	801200c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004752:	bf00      	nop
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	24001b9c 	.word	0x24001b9c

0800475c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004760:	4802      	ldr	r0, [pc, #8]	; (800476c <USART1_IRQHandler+0x10>)
 8004762:	f00f fe37 	bl	80143d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004766:	bf00      	nop
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	24001dfc 	.word	0x24001dfc

08004770 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004774:	4802      	ldr	r0, [pc, #8]	; (8004780 <DMA1_Stream7_IRQHandler+0x10>)
 8004776:	f004 fd73 	bl	8009260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	240019bc 	.word	0x240019bc

08004784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <TIM6_DAC_IRQHandler+0x20>)
 800478a:	791b      	ldrb	r3, [r3, #4]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004792:	4804      	ldr	r0, [pc, #16]	; (80047a4 <TIM6_DAC_IRQHandler+0x20>)
 8004794:	f002 ffbb 	bl	800770e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004798:	4803      	ldr	r0, [pc, #12]	; (80047a8 <TIM6_DAC_IRQHandler+0x24>)
 800479a:	f00e fad8 	bl	8012d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	240002f4 	.word	0x240002f4
 80047a8:	24001d14 	.word	0x24001d14

080047ac <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <ITM_SendChar+0x48>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <ITM_SendChar+0x48>)
 80047bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c0:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <ITM_SendChar+0x4c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <ITM_SendChar+0x4c>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80047ce:	bf00      	nop
 80047d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f8      	beq.n	80047d0 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80047de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	6013      	str	r3, [r2, #0]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000edfc 	.word	0xe000edfc
 80047f8:	e0000e00 	.word	0xe0000e00

080047fc <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e00a      	b.n	8004824 <_read+0x28>
		*ptr++ = __io_getchar();
 800480e:	f3af 8000 	nop.w
 8004812:	4601      	mov	r1, r0
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	60ba      	str	r2, [r7, #8]
 800481a:	b2ca      	uxtb	r2, r1
 800481c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3301      	adds	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	dbf0      	blt.n	800480e <_read+0x12>
	}

	return len;
 800482c:	687b      	ldr	r3, [r7, #4]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e009      	b.n	800485c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	60ba      	str	r2, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ffab 	bl	80047ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3301      	adds	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	dbf1      	blt.n	8004848 <_write+0x12>
	}
	return len;
 8004864:	687b      	ldr	r3, [r7, #4]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_close>:

int _close(int file) {
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004896:	605a      	str	r2, [r3, #4]
	return 0;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <_isatty>:

int _isatty(int file) {
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80048ae:	2301      	movs	r3, #1
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <_sbrk+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <_sbrk+0x64>)
 80048f6:	4a12      	ldr	r2, [pc, #72]	; (8004940 <_sbrk+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <_sbrk+0x64>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d207      	bcs.n	8004918 <_sbrk+0x40>
		errno = ENOMEM;
 8004908:	f015 fb00 	bl	8019f0c <__errno>
 800490c:	4603      	mov	r3, r0
 800490e:	220c      	movs	r2, #12
 8004910:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004916:	e009      	b.n	800492c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <_sbrk+0x64>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800491e:	4b07      	ldr	r3, [pc, #28]	; (800493c <_sbrk+0x64>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	4a05      	ldr	r2, [pc, #20]	; (800493c <_sbrk+0x64>)
 8004928:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	24080000 	.word	0x24080000
 8004938:	00000400 	.word	0x00000400
 800493c:	24001d60 	.word	0x24001d60
 8004940:	24006940 	.word	0x24006940

08004944 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004948:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <SystemInit+0xe4>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	4a36      	ldr	r2, [pc, #216]	; (8004a28 <SystemInit+0xe4>)
 8004950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004958:	4b34      	ldr	r3, [pc, #208]	; (8004a2c <SystemInit+0xe8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	2b06      	cmp	r3, #6
 8004962:	d807      	bhi.n	8004974 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004964:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <SystemInit+0xe8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 030f 	bic.w	r3, r3, #15
 800496c:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <SystemInit+0xe8>)
 800496e:	f043 0307 	orr.w	r3, r3, #7
 8004972:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004974:	4b2e      	ldr	r3, [pc, #184]	; (8004a30 <SystemInit+0xec>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <SystemInit+0xec>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <SystemInit+0xec>)
 8004982:	2200      	movs	r2, #0
 8004984:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <SystemInit+0xec>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4929      	ldr	r1, [pc, #164]	; (8004a30 <SystemInit+0xec>)
 800498c:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <SystemInit+0xf0>)
 800498e:	4013      	ands	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <SystemInit+0xe8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <SystemInit+0xe8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 030f 	bic.w	r3, r3, #15
 80049a6:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <SystemInit+0xe8>)
 80049a8:	f043 0307 	orr.w	r3, r3, #7
 80049ac:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <SystemInit+0xec>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <SystemInit+0xec>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <SystemInit+0xec>)
 80049bc:	2200      	movs	r2, #0
 80049be:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <SystemInit+0xec>)
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <SystemInit+0xf4>)
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80049c6:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <SystemInit+0xec>)
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <SystemInit+0xf8>)
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80049cc:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <SystemInit+0xec>)
 80049ce:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <SystemInit+0xfc>)
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80049d2:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <SystemInit+0xec>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80049d8:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <SystemInit+0xec>)
 80049da:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <SystemInit+0xfc>)
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <SystemInit+0xec>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <SystemInit+0xec>)
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <SystemInit+0xfc>)
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <SystemInit+0xec>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <SystemInit+0xec>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <SystemInit+0xec>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <SystemInit+0xec>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <SystemInit+0x100>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <SystemInit+0x104>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a0e:	d202      	bcs.n	8004a16 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <SystemInit+0x108>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <SystemInit+0x10c>)
 8004a18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004a1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00
 8004a2c:	52002000 	.word	0x52002000
 8004a30:	58024400 	.word	0x58024400
 8004a34:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a38:	02020200 	.word	0x02020200
 8004a3c:	01ff0000 	.word	0x01ff0000
 8004a40:	01010280 	.word	0x01010280
 8004a44:	5c001000 	.word	0x5c001000
 8004a48:	ffff0000 	.word	0xffff0000
 8004a4c:	51008108 	.word	0x51008108
 8004a50:	52004000 	.word	0x52004000

08004a54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b09a      	sub	sp, #104	; 0x68
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	609a      	str	r2, [r3, #8]
 8004a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	611a      	str	r2, [r3, #16]
 8004a84:	615a      	str	r2, [r3, #20]
 8004a86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	222c      	movs	r2, #44	; 0x2c
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f015 fa74 	bl	8019f7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a94:	4b44      	ldr	r3, [pc, #272]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004a96:	4a45      	ldr	r2, [pc, #276]	; (8004bac <MX_TIM1_Init+0x158>)
 8004a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004a9a:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004a9c:	224a      	movs	r2, #74	; 0x4a
 8004a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aa0:	4b41      	ldr	r3, [pc, #260]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004aa6:	4b40      	ldr	r3, [pc, #256]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004aa8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aae:	4b3e      	ldr	r3, [pc, #248]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ab4:	4b3c      	ldr	r3, [pc, #240]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aba:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004ac0:	4839      	ldr	r0, [pc, #228]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004ac2:	f00d fdd6 	bl	8012672 <HAL_TIM_Base_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004acc:	f7fe feea 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ada:	4619      	mov	r1, r3
 8004adc:	4832      	ldr	r0, [pc, #200]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004ade:	f00e fb51 	bl	8013184 <HAL_TIM_ConfigClockSource>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004ae8:	f7fe fedc 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004aec:	482e      	ldr	r0, [pc, #184]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004aee:	f00e f8cd 	bl	8012c8c <HAL_TIM_PWM_Init>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004af8:	f7fe fed4 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4826      	ldr	r0, [pc, #152]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004b10:	f00f f88e 	bl	8013c30 <HAL_TIMEx_MasterConfigSynchronization>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004b1a:	f7fe fec3 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b1e:	2360      	movs	r3, #96	; 0x60
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004b22:	f240 13df 	movw	r3, #479	; 0x1df
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b34:	2300      	movs	r3, #0
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b40:	2200      	movs	r2, #0
 8004b42:	4619      	mov	r1, r3
 8004b44:	4818      	ldr	r0, [pc, #96]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004b46:	f00e fa09 	bl	8012f5c <HAL_TIM_PWM_ConfigChannel>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004b50:	f7fe fea8 	bl	80038a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4807      	ldr	r0, [pc, #28]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004b8a:	f00f f8df 	bl	8013d4c <HAL_TIMEx_ConfigBreakDeadTime>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004b94:	f7fe fe86 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b98:	4803      	ldr	r0, [pc, #12]	; (8004ba8 <MX_TIM1_Init+0x154>)
 8004b9a:	f000 f8dd 	bl	8004d58 <HAL_TIM_MspPostInit>

}
 8004b9e:	bf00      	nop
 8004ba0:	3768      	adds	r7, #104	; 0x68
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	24001d64 	.word	0x24001d64
 8004bac:	40010000 	.word	0x40010000

08004bb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08e      	sub	sp, #56	; 0x38
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	60da      	str	r2, [r3, #12]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	615a      	str	r2, [r3, #20]
 8004be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004be2:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004bec:	224a      	movs	r2, #74	; 0x4a
 8004bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004bf6:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004bf8:	f640 4234 	movw	r2, #3124	; 0xc34
 8004bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c0a:	4823      	ldr	r0, [pc, #140]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c0c:	f00d fd31 	bl	8012672 <HAL_TIM_Base_Init>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004c16:	f7fe fe45 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c24:	4619      	mov	r1, r3
 8004c26:	481c      	ldr	r0, [pc, #112]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c28:	f00e faac 	bl	8013184 <HAL_TIM_ConfigClockSource>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004c32:	f7fe fe37 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c36:	4818      	ldr	r0, [pc, #96]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c38:	f00e f828 	bl	8012c8c <HAL_TIM_PWM_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004c42:	f7fe fe2f 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c46:	2320      	movs	r3, #32
 8004c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c4e:	f107 031c 	add.w	r3, r7, #28
 8004c52:	4619      	mov	r1, r3
 8004c54:	4810      	ldr	r0, [pc, #64]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c56:	f00e ffeb 	bl	8013c30 <HAL_TIMEx_MasterConfigSynchronization>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004c60:	f7fe fe20 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c64:	2360      	movs	r3, #96	; 0x60
 8004c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c74:	463b      	mov	r3, r7
 8004c76:	220c      	movs	r2, #12
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4807      	ldr	r0, [pc, #28]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c7c:	f00e f96e 	bl	8012f5c <HAL_TIM_PWM_ConfigChannel>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004c86:	f7fe fe0d 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c8a:	4803      	ldr	r0, [pc, #12]	; (8004c98 <MX_TIM2_Init+0xe8>)
 8004c8c:	f000 f864 	bl	8004d58 <HAL_TIM_MspPostInit>

}
 8004c90:	bf00      	nop
 8004c92:	3738      	adds	r7, #56	; 0x38
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	24001db0 	.word	0x24001db0

08004c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <HAL_TIM_Base_MspInit+0xb4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d12f      	bne.n	8004d0e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004cbe:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2105      	movs	r1, #5
 8004cd0:	2018      	movs	r0, #24
 8004cd2:	f002 faf5 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004cd6:	2018      	movs	r0, #24
 8004cd8:	f002 fb0c 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2105      	movs	r1, #5
 8004ce0:	2019      	movs	r0, #25
 8004ce2:	f002 faed 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004ce6:	2019      	movs	r0, #25
 8004ce8:	f002 fb04 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2105      	movs	r1, #5
 8004cf0:	201a      	movs	r0, #26
 8004cf2:	f002 fae5 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004cf6:	201a      	movs	r0, #26
 8004cf8:	f002 fafc 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2105      	movs	r1, #5
 8004d00:	201b      	movs	r0, #27
 8004d02:	f002 fadd 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004d06:	201b      	movs	r0, #27
 8004d08:	f002 faf4 	bl	80072f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004d0c:	e01b      	b.n	8004d46 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d116      	bne.n	8004d46 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d1e:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	2105      	movs	r1, #5
 8004d3a:	201c      	movs	r0, #28
 8004d3c:	f002 fac0 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d40:	201c      	movs	r0, #28
 8004d42:	f002 fad7 	bl	80072f4 <HAL_NVIC_EnableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	58024400 	.word	0x58024400

08004d58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d60:	f107 0314 	add.w	r3, r7, #20
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <HAL_TIM_MspPostInit+0xb8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d120      	bne.n	8004dbc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <HAL_TIM_MspPostInit+0xbc>)
 8004d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d80:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_TIM_MspPostInit+0xbc>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d8a:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <HAL_TIM_MspPostInit+0xbc>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da6:	2300      	movs	r3, #0
 8004da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dae:	f107 0314 	add.w	r3, r7, #20
 8004db2:	4619      	mov	r1, r3
 8004db4:	4818      	ldr	r0, [pc, #96]	; (8004e18 <HAL_TIM_MspPostInit+0xc0>)
 8004db6:	f006 f859 	bl	800ae6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004dba:	e024      	b.n	8004e06 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d11f      	bne.n	8004e06 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <HAL_TIM_MspPostInit+0xbc>)
 8004dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dcc:	4a11      	ldr	r2, [pc, #68]	; (8004e14 <HAL_TIM_MspPostInit+0xbc>)
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_TIM_MspPostInit+0xbc>)
 8004dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004df6:	2301      	movs	r3, #1
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4806      	ldr	r0, [pc, #24]	; (8004e1c <HAL_TIM_MspPostInit+0xc4>)
 8004e02:	f006 f833 	bl	800ae6c <HAL_GPIO_Init>
}
 8004e06:	bf00      	nop
 8004e08:	3728      	adds	r7, #40	; 0x28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	58024400 	.word	0x58024400
 8004e18:	58020000 	.word	0x58020000
 8004e1c:	58020400 	.word	0x58020400

08004e20 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004e2c:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <get_uptime+0x94>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <get_uptime+0x98>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <get_uptime+0x94>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d005      	beq.n	8004e4e <get_uptime+0x2e>
		ms = uptime_millis;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <get_uptime+0x94>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <get_uptime+0x98>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e54:	fb03 f202 	mul.w	r2, r3, r2
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <get_uptime+0x98>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	4917      	ldr	r1, [pc, #92]	; (8004ebc <get_uptime+0x9c>)
 8004e60:	fba1 1303 	umull	r1, r3, r1, r3
 8004e64:	099b      	lsrs	r3, r3, #6
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <get_uptime+0x5a>
		uptime = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0e1b      	lsrs	r3, r3, #24
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	0c1a      	lsrs	r2, r3, #16
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	0a1a      	lsrs	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3302      	adds	r3, #2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3303      	adds	r3, #3
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	24001a94 	.word	0x24001a94
 8004eb8:	e000e010 	.word	0xe000e010
 8004ebc:	10624dd3 	.word	0x10624dd3

08004ec0 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4821      	ldr	r0, [pc, #132]	; (8004f58 <get_timestamp+0x98>)
 8004ed2:	f00c fc2d 	bl	8011730 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004ed6:	f107 030c 	add.w	r3, r7, #12
 8004eda:	2200      	movs	r2, #0
 8004edc:	4619      	mov	r1, r3
 8004ede:	481e      	ldr	r0, [pc, #120]	; (8004f58 <get_timestamp+0x98>)
 8004ee0:	f00c fd0a 	bl	80118f8 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2264      	movs	r2, #100	; 0x64
 8004ee8:	fb03 f202 	mul.w	r2, r3, r2
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <get_timestamp+0x9c>)
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	7b7a      	ldrb	r2, [r7, #13]
 8004efe:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3302      	adds	r3, #2
 8004f04:	7bba      	ldrb	r2, [r7, #14]
 8004f06:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3303      	adds	r3, #3
 8004f0c:	7c3a      	ldrb	r2, [r7, #16]
 8004f0e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	7c7a      	ldrb	r2, [r7, #17]
 8004f16:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3305      	adds	r3, #5
 8004f1c:	7cba      	ldrb	r2, [r7, #18]
 8004f1e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	0e1a      	lsrs	r2, r3, #24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3306      	adds	r3, #6
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	0c1a      	lsrs	r2, r3, #16
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3307      	adds	r3, #7
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	0a1a      	lsrs	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3309      	adds	r3, #9
 8004f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	24001aa8 	.word	0x24001aa8
 8004f5c:	000f4240 	.word	0x000f4240

08004f60 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f64:	4b30      	ldr	r3, [pc, #192]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f66:	4a31      	ldr	r2, [pc, #196]	; (800502c <MX_USART1_UART_Init+0xcc>)
 8004f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f6c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f72:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f86:	220c      	movs	r2, #12
 8004f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f8a:	4b27      	ldr	r3, [pc, #156]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fa2:	4b21      	ldr	r3, [pc, #132]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fa8:	481f      	ldr	r0, [pc, #124]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004faa:	f00e ff6b 	bl	8013e84 <HAL_UART_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004fb4:	f7fe fc76 	bl	80038a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fb8:	2100      	movs	r1, #0
 8004fba:	481b      	ldr	r0, [pc, #108]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004fbc:	f011 fcb1 	bl	8016922 <HAL_UARTEx_SetTxFifoThreshold>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004fc6:	f7fe fc6d 	bl	80038a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4816      	ldr	r0, [pc, #88]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004fce:	f011 fce6 	bl	801699e <HAL_UARTEx_SetRxFifoThreshold>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004fd8:	f7fe fc64 	bl	80038a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004fdc:	4812      	ldr	r0, [pc, #72]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004fde:	f011 fc67 	bl	80168b0 <HAL_UARTEx_DisableFifoMode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004fe8:	f7fe fc5c 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8004fec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ff0:	480d      	ldr	r0, [pc, #52]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004ff2:	f011 fcd4 	bl	801699e <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8004ff6:	480c      	ldr	r0, [pc, #48]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004ff8:	f011 fc1f 	bl	801683a <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8004ffc:	480a      	ldr	r0, [pc, #40]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8004ffe:	f011 fbe9 	bl	80167d4 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005010:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <MX_USART1_UART_Init+0xc8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005020:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	24001dfc 	.word	0x24001dfc
 800502c:	40011000 	.word	0x40011000

08005030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ba      	sub	sp, #232	; 0xe8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	22c0      	movs	r2, #192	; 0xc0
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f014 ff93 	bl	8019f7c <memset>
  if(uartHandle->Instance==USART1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a41      	ldr	r2, [pc, #260]	; (8005160 <HAL_UART_MspInit+0x130>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d17b      	bne.n	8005158 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005060:	f04f 0201 	mov.w	r2, #1
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800506c:	2318      	movs	r3, #24
 800506e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	4618      	mov	r0, r3
 8005078:	f009 fd3c 	bl	800eaf4 <HAL_RCCEx_PeriphCLKConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005082:	f7fe fc0f 	bl	80038a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005086:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_UART_MspInit+0x134>)
 8005088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800508c:	4a35      	ldr	r2, [pc, #212]	; (8005164 <HAL_UART_MspInit+0x134>)
 800508e:	f043 0310 	orr.w	r3, r3, #16
 8005092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005096:	4b33      	ldr	r3, [pc, #204]	; (8005164 <HAL_UART_MspInit+0x134>)
 8005098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a4:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <HAL_UART_MspInit+0x134>)
 80050a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050aa:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <HAL_UART_MspInit+0x134>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050b4:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <HAL_UART_MspInit+0x134>)
 80050b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050dc:	2307      	movs	r3, #7
 80050de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80050e6:	4619      	mov	r1, r3
 80050e8:	481f      	ldr	r0, [pc, #124]	; (8005168 <HAL_UART_MspInit+0x138>)
 80050ea:	f005 febf 	bl	800ae6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80050ee:	4b1f      	ldr	r3, [pc, #124]	; (800516c <HAL_UART_MspInit+0x13c>)
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_UART_MspInit+0x140>)
 80050f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_UART_MspInit+0x13c>)
 80050f6:	222a      	movs	r2, #42	; 0x2a
 80050f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050fa:	4b1c      	ldr	r3, [pc, #112]	; (800516c <HAL_UART_MspInit+0x13c>)
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005100:	4b1a      	ldr	r3, [pc, #104]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005102:	2200      	movs	r2, #0
 8005104:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005106:	4b19      	ldr	r3, [pc, #100]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800510c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800510e:	4b17      	ldr	r3, [pc, #92]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005110:	2200      	movs	r2, #0
 8005112:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005116:	2200      	movs	r2, #0
 8005118:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_UART_MspInit+0x13c>)
 800511c:	2200      	movs	r2, #0
 800511e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005122:	2200      	movs	r2, #0
 8005124:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005128:	2200      	movs	r2, #0
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800512c:	480f      	ldr	r0, [pc, #60]	; (800516c <HAL_UART_MspInit+0x13c>)
 800512e:	f002 fd6d 	bl	8007c0c <HAL_DMA_Init>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005138:	f7fe fbb4 	bl	80038a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a0b      	ldr	r2, [pc, #44]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005140:	67da      	str	r2, [r3, #124]	; 0x7c
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <HAL_UART_MspInit+0x13c>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005148:	2200      	movs	r2, #0
 800514a:	2105      	movs	r1, #5
 800514c:	2025      	movs	r0, #37	; 0x25
 800514e:	f002 f8b7 	bl	80072c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005152:	2025      	movs	r0, #37	; 0x25
 8005154:	f002 f8ce 	bl	80072f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005158:	bf00      	nop
 800515a:	37e8      	adds	r7, #232	; 0xe8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40011000 	.word	0x40011000
 8005164:	58024400 	.word	0x58024400
 8005168:	58020000 	.word	0x58020000
 800516c:	24001e90 	.word	0x24001e90
 8005170:	40020040 	.word	0x40020040

08005174 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 800517e:	4bc2      	ldr	r3, [pc, #776]	; (8005488 <voltage_monitor_init+0x314>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005184:	4bc0      	ldr	r3, [pc, #768]	; (8005488 <voltage_monitor_init+0x314>)
 8005186:	2200      	movs	r2, #0
 8005188:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800518a:	4bbf      	ldr	r3, [pc, #764]	; (8005488 <voltage_monitor_init+0x314>)
 800518c:	2201      	movs	r2, #1
 800518e:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005190:	4bbd      	ldr	r3, [pc, #756]	; (8005488 <voltage_monitor_init+0x314>)
 8005192:	2200      	movs	r2, #0
 8005194:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005196:	4bbc      	ldr	r3, [pc, #752]	; (8005488 <voltage_monitor_init+0x314>)
 8005198:	f242 7210 	movw	r2, #10000	; 0x2710
 800519c:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 800519e:	4bba      	ldr	r3, [pc, #744]	; (8005488 <voltage_monitor_init+0x314>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80051a4:	4bb8      	ldr	r3, [pc, #736]	; (8005488 <voltage_monitor_init+0x314>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80051aa:	4bb7      	ldr	r3, [pc, #732]	; (8005488 <voltage_monitor_init+0x314>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80051b0:	4bb5      	ldr	r3, [pc, #724]	; (8005488 <voltage_monitor_init+0x314>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80051b6:	4bb4      	ldr	r3, [pc, #720]	; (8005488 <voltage_monitor_init+0x314>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80051bc:	4bb2      	ldr	r3, [pc, #712]	; (8005488 <voltage_monitor_init+0x314>)
 80051be:	f242 7210 	movw	r2, #10000	; 0x2710
 80051c2:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80051c4:	4bb0      	ldr	r3, [pc, #704]	; (8005488 <voltage_monitor_init+0x314>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80051ca:	4baf      	ldr	r3, [pc, #700]	; (8005488 <voltage_monitor_init+0x314>)
 80051cc:	2202      	movs	r2, #2
 80051ce:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80051d0:	4bad      	ldr	r3, [pc, #692]	; (8005488 <voltage_monitor_init+0x314>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80051d6:	4bac      	ldr	r3, [pc, #688]	; (8005488 <voltage_monitor_init+0x314>)
 80051d8:	2201      	movs	r2, #1
 80051da:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80051dc:	4baa      	ldr	r3, [pc, #680]	; (8005488 <voltage_monitor_init+0x314>)
 80051de:	2200      	movs	r2, #0
 80051e0:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80051e2:	4ba9      	ldr	r3, [pc, #676]	; (8005488 <voltage_monitor_init+0x314>)
 80051e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80051e8:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80051ea:	4ba7      	ldr	r3, [pc, #668]	; (8005488 <voltage_monitor_init+0x314>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80051f0:	4ba5      	ldr	r3, [pc, #660]	; (8005488 <voltage_monitor_init+0x314>)
 80051f2:	2203      	movs	r2, #3
 80051f4:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80051f6:	4ba4      	ldr	r3, [pc, #656]	; (8005488 <voltage_monitor_init+0x314>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80051fc:	4ba2      	ldr	r3, [pc, #648]	; (8005488 <voltage_monitor_init+0x314>)
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005204:	4ba0      	ldr	r3, [pc, #640]	; (8005488 <voltage_monitor_init+0x314>)
 8005206:	2200      	movs	r2, #0
 8005208:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800520a:	4b9f      	ldr	r3, [pc, #636]	; (8005488 <voltage_monitor_init+0x314>)
 800520c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005210:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005212:	4b9d      	ldr	r3, [pc, #628]	; (8005488 <voltage_monitor_init+0x314>)
 8005214:	2200      	movs	r2, #0
 8005216:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005218:	4b9b      	ldr	r3, [pc, #620]	; (8005488 <voltage_monitor_init+0x314>)
 800521a:	2204      	movs	r2, #4
 800521c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005220:	4b99      	ldr	r3, [pc, #612]	; (8005488 <voltage_monitor_init+0x314>)
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005228:	4b97      	ldr	r3, [pc, #604]	; (8005488 <voltage_monitor_init+0x314>)
 800522a:	2201      	movs	r2, #1
 800522c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005230:	4b95      	ldr	r3, [pc, #596]	; (8005488 <voltage_monitor_init+0x314>)
 8005232:	2200      	movs	r2, #0
 8005234:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005236:	4b94      	ldr	r3, [pc, #592]	; (8005488 <voltage_monitor_init+0x314>)
 8005238:	f242 7210 	movw	r2, #10000	; 0x2710
 800523c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 800523e:	4b92      	ldr	r3, [pc, #584]	; (8005488 <voltage_monitor_init+0x314>)
 8005240:	2200      	movs	r2, #0
 8005242:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005244:	4b90      	ldr	r3, [pc, #576]	; (8005488 <voltage_monitor_init+0x314>)
 8005246:	2205      	movs	r2, #5
 8005248:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 800524c:	4b8e      	ldr	r3, [pc, #568]	; (8005488 <voltage_monitor_init+0x314>)
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005254:	4b8c      	ldr	r3, [pc, #560]	; (8005488 <voltage_monitor_init+0x314>)
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 800525c:	4b8a      	ldr	r3, [pc, #552]	; (8005488 <voltage_monitor_init+0x314>)
 800525e:	2200      	movs	r2, #0
 8005260:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005262:	4b89      	ldr	r3, [pc, #548]	; (8005488 <voltage_monitor_init+0x314>)
 8005264:	f242 7210 	movw	r2, #10000	; 0x2710
 8005268:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800526a:	4b87      	ldr	r3, [pc, #540]	; (8005488 <voltage_monitor_init+0x314>)
 800526c:	2200      	movs	r2, #0
 800526e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005270:	4b85      	ldr	r3, [pc, #532]	; (8005488 <voltage_monitor_init+0x314>)
 8005272:	2206      	movs	r2, #6
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8005278:	4b83      	ldr	r3, [pc, #524]	; (8005488 <voltage_monitor_init+0x314>)
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8005280:	4b81      	ldr	r3, [pc, #516]	; (8005488 <voltage_monitor_init+0x314>)
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8005288:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <voltage_monitor_init+0x314>)
 800528a:	2200      	movs	r2, #0
 800528c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005290:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <voltage_monitor_init+0x314>)
 8005292:	f242 7210 	movw	r2, #10000	; 0x2710
 8005296:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 800529a:	4b7b      	ldr	r3, [pc, #492]	; (8005488 <voltage_monitor_init+0x314>)
 800529c:	2200      	movs	r2, #0
 800529e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80052a2:	4b79      	ldr	r3, [pc, #484]	; (8005488 <voltage_monitor_init+0x314>)
 80052a4:	2207      	movs	r2, #7
 80052a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80052aa:	4b77      	ldr	r3, [pc, #476]	; (8005488 <voltage_monitor_init+0x314>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80052b2:	4b75      	ldr	r3, [pc, #468]	; (8005488 <voltage_monitor_init+0x314>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80052ba:	4b73      	ldr	r3, [pc, #460]	; (8005488 <voltage_monitor_init+0x314>)
 80052bc:	2200      	movs	r2, #0
 80052be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052c2:	4b71      	ldr	r3, [pc, #452]	; (8005488 <voltage_monitor_init+0x314>)
 80052c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80052c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80052cc:	4b6e      	ldr	r3, [pc, #440]	; (8005488 <voltage_monitor_init+0x314>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80052d4:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <voltage_monitor_init+0x314>)
 80052d6:	2208      	movs	r2, #8
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80052dc:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <voltage_monitor_init+0x314>)
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80052e4:	4b68      	ldr	r3, [pc, #416]	; (8005488 <voltage_monitor_init+0x314>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80052ec:	4b66      	ldr	r3, [pc, #408]	; (8005488 <voltage_monitor_init+0x314>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80052f4:	4b64      	ldr	r3, [pc, #400]	; (8005488 <voltage_monitor_init+0x314>)
 80052f6:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80052fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80052fe:	4b62      	ldr	r3, [pc, #392]	; (8005488 <voltage_monitor_init+0x314>)
 8005300:	f640 3283 	movw	r2, #2947	; 0xb83
 8005304:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005308:	4b5f      	ldr	r3, [pc, #380]	; (8005488 <voltage_monitor_init+0x314>)
 800530a:	2209      	movs	r2, #9
 800530c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005310:	4b5d      	ldr	r3, [pc, #372]	; (8005488 <voltage_monitor_init+0x314>)
 8005312:	2200      	movs	r2, #0
 8005314:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005318:	4b5b      	ldr	r3, [pc, #364]	; (8005488 <voltage_monitor_init+0x314>)
 800531a:	2200      	movs	r2, #0
 800531c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005320:	4b59      	ldr	r3, [pc, #356]	; (8005488 <voltage_monitor_init+0x314>)
 8005322:	2200      	movs	r2, #0
 8005324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005328:	4b57      	ldr	r3, [pc, #348]	; (8005488 <voltage_monitor_init+0x314>)
 800532a:	f640 7245 	movw	r2, #3909	; 0xf45
 800532e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005332:	4b55      	ldr	r3, [pc, #340]	; (8005488 <voltage_monitor_init+0x314>)
 8005334:	2200      	movs	r2, #0
 8005336:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800533a:	4b53      	ldr	r3, [pc, #332]	; (8005488 <voltage_monitor_init+0x314>)
 800533c:	220a      	movs	r2, #10
 800533e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005342:	4b51      	ldr	r3, [pc, #324]	; (8005488 <voltage_monitor_init+0x314>)
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800534a:	4b4f      	ldr	r3, [pc, #316]	; (8005488 <voltage_monitor_init+0x314>)
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005352:	4b4d      	ldr	r3, [pc, #308]	; (8005488 <voltage_monitor_init+0x314>)
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800535a:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <voltage_monitor_init+0x314>)
 800535c:	f640 7245 	movw	r2, #3909	; 0xf45
 8005360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8005364:	4b48      	ldr	r3, [pc, #288]	; (8005488 <voltage_monitor_init+0x314>)
 8005366:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800536a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 800536e:	4b46      	ldr	r3, [pc, #280]	; (8005488 <voltage_monitor_init+0x314>)
 8005370:	220b      	movs	r2, #11
 8005372:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8005376:	4b44      	ldr	r3, [pc, #272]	; (8005488 <voltage_monitor_init+0x314>)
 8005378:	2200      	movs	r2, #0
 800537a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <voltage_monitor_init+0x314>)
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8005386:	4b40      	ldr	r3, [pc, #256]	; (8005488 <voltage_monitor_init+0x314>)
 8005388:	2200      	movs	r2, #0
 800538a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 800538e:	4b3e      	ldr	r3, [pc, #248]	; (8005488 <voltage_monitor_init+0x314>)
 8005390:	f640 72fb 	movw	r2, #4091	; 0xffb
 8005394:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8005398:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <voltage_monitor_init+0x314>)
 800539a:	f640 6276 	movw	r2, #3702	; 0xe76
 800539e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <voltage_monitor_init+0x314>)
 80053a4:	220c      	movs	r2, #12
 80053a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80053aa:	4b37      	ldr	r3, [pc, #220]	; (8005488 <voltage_monitor_init+0x314>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80053b2:	4b35      	ldr	r3, [pc, #212]	; (8005488 <voltage_monitor_init+0x314>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80053ba:	4b33      	ldr	r3, [pc, #204]	; (8005488 <voltage_monitor_init+0x314>)
 80053bc:	2200      	movs	r2, #0
 80053be:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80053c2:	4b31      	ldr	r3, [pc, #196]	; (8005488 <voltage_monitor_init+0x314>)
 80053c4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80053c8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80053cc:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <voltage_monitor_init+0x314>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80053d4:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <voltage_monitor_init+0x314>)
 80053d6:	220d      	movs	r2, #13
 80053d8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80053dc:	4b2a      	ldr	r3, [pc, #168]	; (8005488 <voltage_monitor_init+0x314>)
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80053e4:	4b28      	ldr	r3, [pc, #160]	; (8005488 <voltage_monitor_init+0x314>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <voltage_monitor_init+0x314>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80053f4:	4b24      	ldr	r3, [pc, #144]	; (8005488 <voltage_monitor_init+0x314>)
 80053f6:	f640 7238 	movw	r2, #3896	; 0xf38
 80053fa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80053fe:	4b22      	ldr	r3, [pc, #136]	; (8005488 <voltage_monitor_init+0x314>)
 8005400:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005404:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <voltage_monitor_init+0x314>)
 800540a:	220e      	movs	r2, #14
 800540c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <voltage_monitor_init+0x314>)
 8005412:	2200      	movs	r2, #0
 8005414:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <voltage_monitor_init+0x314>)
 800541a:	2200      	movs	r2, #0
 800541c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005420:	4b19      	ldr	r3, [pc, #100]	; (8005488 <voltage_monitor_init+0x314>)
 8005422:	2200      	movs	r2, #0
 8005424:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005428:	4b17      	ldr	r3, [pc, #92]	; (8005488 <voltage_monitor_init+0x314>)
 800542a:	f640 7245 	movw	r2, #3909	; 0xf45
 800542e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <voltage_monitor_init+0x314>)
 8005434:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005438:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800543c:	4b12      	ldr	r3, [pc, #72]	; (8005488 <voltage_monitor_init+0x314>)
 800543e:	220f      	movs	r2, #15
 8005440:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <voltage_monitor_init+0x314>)
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <voltage_monitor_init+0x314>)
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <voltage_monitor_init+0x314>)
 8005456:	2200      	movs	r2, #0
 8005458:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <voltage_monitor_init+0x314>)
 800545e:	f241 0264 	movw	r2, #4196	; 0x1064
 8005462:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <voltage_monitor_init+0x314>)
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <voltage_monitor_init+0x314>)
 8005470:	2210      	movs	r2, #16
 8005472:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8005476:	4b04      	ldr	r3, [pc, #16]	; (8005488 <voltage_monitor_init+0x314>)
 8005478:	2200      	movs	r2, #0
 800547a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 800547e:	4b02      	ldr	r3, [pc, #8]	; (8005488 <voltage_monitor_init+0x314>)
 8005480:	2200      	movs	r2, #0
 8005482:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8005486:	e001      	b.n	800548c <voltage_monitor_init+0x318>
 8005488:	24001f08 	.word	0x24001f08
	rail_monitor[RAIL_n800v].data = 0;
 800548c:	4b17      	ldr	r3, [pc, #92]	; (80054ec <voltage_monitor_init+0x378>)
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <voltage_monitor_init+0x378>)
 8005496:	f640 5208 	movw	r2, #3336	; 0xd08
 800549a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <voltage_monitor_init+0x378>)
 80054a0:	f640 32ca 	movw	r2, #3018	; 0xbca
 80054a4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80054a8:	4b10      	ldr	r3, [pc, #64]	; (80054ec <voltage_monitor_init+0x378>)
 80054aa:	2211      	movs	r2, #17
 80054ac:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80054b0:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <voltage_monitor_init+0x378>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <voltage_monitor_init+0x378>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <voltage_monitor_init+0x378>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <voltage_monitor_init+0x378>)
 80054ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80054ce:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <voltage_monitor_init+0x378>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	71fb      	strb	r3, [r7, #7]

	return status;
 80054de:	79fb      	ldrb	r3, [r7, #7]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	24001f08 	.word	0x24001f08

080054f0 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	460a      	mov	r2, r1
 80054fa:	71fb      	strb	r3, [r7, #7]
 80054fc:	4613      	mov	r3, r2
 80054fe:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005504:	79fa      	ldrb	r2, [r7, #7]
 8005506:	4909      	ldr	r1, [pc, #36]	; (800552c <set_rail_monitor_enable+0x3c>)
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	440b      	add	r3, r1
 8005512:	3302      	adds	r3, #2
 8005514:	79ba      	ldrb	r2, [r7, #6]
 8005516:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]

	return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	24001f08 	.word	0x24001f08

08005530 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 800553c:	463b      	mov	r3, r7
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fcf6 	bl	8003f30 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005544:	f107 0310 	add.w	r3, r7, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fd21 	bl	8003f90 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fd6e 	bl	8004034 <sample_hk_adc3>
 8005558:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 800555a:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <set_rail_monitor+0xc0>)
 800555c:	809a      	strh	r2, [r3, #4]
 800555e:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <set_rail_monitor+0xc0>)
 8005562:	81da      	strh	r2, [r3, #14]
 8005564:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <set_rail_monitor+0xc0>)
 8005568:	831a      	strh	r2, [r3, #24]
 800556a:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 800556c:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <set_rail_monitor+0xc0>)
 800556e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005570:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005572:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <set_rail_monitor+0xc0>)
 8005574:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005576:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <set_rail_monitor+0xc0>)
 800557a:	86da      	strh	r2, [r3, #54]	; 0x36
 800557c:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <set_rail_monitor+0xc0>)
 8005580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005584:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <set_rail_monitor+0xc0>)
 8005588:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800558c:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <set_rail_monitor+0xc0>)
 8005590:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005594:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <set_rail_monitor+0xc0>)
 8005598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800559c:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <set_rail_monitor+0xc0>)
 80055a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80055a4:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <set_rail_monitor+0xc0>)
 80055a8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80055ac:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <set_rail_monitor+0xc0>)
 80055b0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80055b4:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <set_rail_monitor+0xc0>)
 80055b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80055bc:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <set_rail_monitor+0xc0>)
 80055c0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80055c4:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <set_rail_monitor+0xc0>)
 80055c8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80055cc:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <set_rail_monitor+0xc0>)
 80055d0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80055d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <set_rail_monitor+0xc0>)
 80055d8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 80055e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3728      	adds	r7, #40	; 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	24001f08 	.word	0x24001f08

080055f4 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
	return rail_monitor;
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <get_rail_monitor+0x10>)
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	24001f08 	.word	0x24001f08

08005608 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	db05      	blt.n	800562a <in_range+0x22>
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	dc01      	bgt.n	800562a <in_range+0x22>
		return 1;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <in_range+0x24>
	}
	return 0;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <monitor_rails>:


void monitor_rails() {
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e062      	b.n	800570a <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005644:	4935      	ldr	r1, [pc, #212]	; (800571c <monitor_rails+0xe4>)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	440b      	add	r3, r1
 8005652:	3302      	adds	r3, #2
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d054      	beq.n	8005704 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 800565a:	4930      	ldr	r1, [pc, #192]	; (800571c <monitor_rails+0xe4>)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	440b      	add	r3, r1
 8005668:	3304      	adds	r3, #4
 800566a:	8818      	ldrh	r0, [r3, #0]
 800566c:	492b      	ldr	r1, [pc, #172]	; (800571c <monitor_rails+0xe4>)
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	440b      	add	r3, r1
 800567a:	3308      	adds	r3, #8
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	461c      	mov	r4, r3
 8005680:	4926      	ldr	r1, [pc, #152]	; (800571c <monitor_rails+0xe4>)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	440b      	add	r3, r1
 800568e:	3306      	adds	r3, #6
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	4621      	mov	r1, r4
 8005696:	f7ff ffb7 	bl	8005608 <in_range>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d131      	bne.n	8005704 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80056a0:	491e      	ldr	r1, [pc, #120]	; (800571c <monitor_rails+0xe4>)
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	440b      	add	r3, r1
 80056ae:	3301      	adds	r3, #1
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	b2d8      	uxtb	r0, r3
 80056b6:	4919      	ldr	r1, [pc, #100]	; (800571c <monitor_rails+0xe4>)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	440b      	add	r3, r1
 80056c4:	3301      	adds	r3, #1
 80056c6:	4602      	mov	r2, r0
 80056c8:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 80056ca:	4914      	ldr	r1, [pc, #80]	; (800571c <monitor_rails+0xe4>)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	440b      	add	r3, r1
 80056d8:	3301      	adds	r3, #1
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d111      	bne.n	8005704 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 80056e0:	490e      	ldr	r1, [pc, #56]	; (800571c <monitor_rails+0xe4>)
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	440b      	add	r3, r1
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f815 	bl	8005720 <get_rail_name_error_detail>
 80056f6:	4603      	mov	r3, r0
 80056f8:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 80056fa:	2300      	movs	r3, #0
 80056fc:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 80056fe:	6838      	ldr	r0, [r7, #0]
 8005700:	f7fc fc2c 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3301      	adds	r3, #1
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b11      	cmp	r3, #17
 800570e:	dd99      	ble.n	8005644 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bd90      	pop	{r4, r7, pc}
 800571a:	bf00      	nop
 800571c:	24001f08 	.word	0x24001f08

08005720 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b11      	cmp	r3, #17
 800572e:	d84b      	bhi.n	80057c8 <get_rail_name_error_detail+0xa8>
 8005730:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <get_rail_name_error_detail+0x18>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	08005781 	.word	0x08005781
 800573c:	08005785 	.word	0x08005785
 8005740:	08005789 	.word	0x08005789
 8005744:	0800578d 	.word	0x0800578d
 8005748:	08005791 	.word	0x08005791
 800574c:	08005795 	.word	0x08005795
 8005750:	08005799 	.word	0x08005799
 8005754:	0800579d 	.word	0x0800579d
 8005758:	080057a1 	.word	0x080057a1
 800575c:	080057a5 	.word	0x080057a5
 8005760:	080057a9 	.word	0x080057a9
 8005764:	080057ad 	.word	0x080057ad
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057b5 	.word	0x080057b5
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057c1 	.word	0x080057c1
 800577c:	080057c5 	.word	0x080057c5
	case RAIL_vsense:
		return ED_vsense;
 8005780:	2300      	movs	r3, #0
 8005782:	e022      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005784:	2301      	movs	r3, #1
 8005786:	e020      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005788:	2302      	movs	r3, #2
 800578a:	e01e      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 800578c:	2303      	movs	r3, #3
 800578e:	e01c      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005790:	2304      	movs	r3, #4
 8005792:	e01a      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005794:	2305      	movs	r3, #5
 8005796:	e018      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005798:	2306      	movs	r3, #6
 800579a:	e016      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 800579c:	2307      	movs	r3, #7
 800579e:	e014      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80057a0:	2308      	movs	r3, #8
 80057a2:	e012      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80057a4:	2309      	movs	r3, #9
 80057a6:	e010      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80057a8:	230a      	movs	r3, #10
 80057aa:	e00e      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80057ac:	230b      	movs	r3, #11
 80057ae:	e00c      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80057b0:	230c      	movs	r3, #12
 80057b2:	e00a      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80057b4:	230d      	movs	r3, #13
 80057b6:	e008      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80057b8:	230e      	movs	r3, #14
 80057ba:	e006      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80057bc:	230f      	movs	r3, #15
 80057be:	e004      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80057c0:	2310      	movs	r3, #16
 80057c2:	e002      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80057c4:	2311      	movs	r3, #17
 80057c6:	e000      	b.n	80057ca <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80057c8:	2314      	movs	r3, #20
	}
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <Reset_Handler>:
 80057d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005810 <LoopFillZerobss+0xe>
 80057dc:	f7ff f8b2 	bl	8004944 <SystemInit>
 80057e0:	480c      	ldr	r0, [pc, #48]	; (8005814 <LoopFillZerobss+0x12>)
 80057e2:	490d      	ldr	r1, [pc, #52]	; (8005818 <LoopFillZerobss+0x16>)
 80057e4:	4a0d      	ldr	r2, [pc, #52]	; (800581c <LoopFillZerobss+0x1a>)
 80057e6:	2300      	movs	r3, #0
 80057e8:	e002      	b.n	80057f0 <LoopCopyDataInit>

080057ea <CopyDataInit>:
 80057ea:	58d4      	ldr	r4, [r2, r3]
 80057ec:	50c4      	str	r4, [r0, r3]
 80057ee:	3304      	adds	r3, #4

080057f0 <LoopCopyDataInit>:
 80057f0:	18c4      	adds	r4, r0, r3
 80057f2:	428c      	cmp	r4, r1
 80057f4:	d3f9      	bcc.n	80057ea <CopyDataInit>
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <LoopFillZerobss+0x1e>)
 80057f8:	4c0a      	ldr	r4, [pc, #40]	; (8005824 <LoopFillZerobss+0x22>)
 80057fa:	2300      	movs	r3, #0
 80057fc:	e001      	b.n	8005802 <LoopFillZerobss>

080057fe <FillZerobss>:
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	3204      	adds	r2, #4

08005802 <LoopFillZerobss>:
 8005802:	42a2      	cmp	r2, r4
 8005804:	d3fb      	bcc.n	80057fe <FillZerobss>
 8005806:	f014 fb87 	bl	8019f18 <__libc_init_array>
 800580a:	f7fd fdbf 	bl	800338c <main>
 800580e:	4770      	bx	lr
 8005810:	24080000 	.word	0x24080000
 8005814:	24000000 	.word	0x24000000
 8005818:	24000108 	.word	0x24000108
 800581c:	0801ae48 	.word	0x0801ae48
 8005820:	24000120 	.word	0x24000120
 8005824:	2400693c 	.word	0x2400693c

08005828 <ADC3_IRQHandler>:
 8005828:	e7fe      	b.n	8005828 <ADC3_IRQHandler>
	...

0800582c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005832:	2003      	movs	r0, #3
 8005834:	f001 fd39 	bl	80072aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005838:	f008 ff44 	bl	800e6c4 <HAL_RCC_GetSysClockFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <HAL_Init+0x68>)
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	4913      	ldr	r1, [pc, #76]	; (8005898 <HAL_Init+0x6c>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <HAL_Init+0x68>)
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <HAL_Init+0x6c>)
 8005860:	5cd3      	ldrb	r3, [r2, r3]
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	4a0b      	ldr	r2, [pc, #44]	; (800589c <HAL_Init+0x70>)
 800586e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005870:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <HAL_Init+0x74>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005876:	2005      	movs	r0, #5
 8005878:	f7fe fe4e 	bl	8004518 <HAL_InitTick>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e002      	b.n	800588c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005886:	f7fe fe29 	bl	80044dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	58024400 	.word	0x58024400
 8005898:	0801ad94 	.word	0x0801ad94
 800589c:	24000094 	.word	0x24000094
 80058a0:	24000090 	.word	0x24000090

080058a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_IncTick+0x20>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_IncTick+0x24>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4413      	add	r3, r2
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <HAL_IncTick+0x24>)
 80058b6:	6013      	str	r3, [r2, #0]
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2400009c 	.word	0x2400009c
 80058c8:	24001fbc 	.word	0x24001fbc

080058cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return uwTick;
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <HAL_GetTick+0x14>)
 80058d2:	681b      	ldr	r3, [r3, #0]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	24001fbc 	.word	0x24001fbc

080058e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_GetREVID+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	0c1b      	lsrs	r3, r3, #16
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	5c001000 	.word	0x5c001000

080058fc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005906:	4b07      	ldr	r3, [pc, #28]	; (8005924 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	4904      	ldr	r1, [pc, #16]	; (8005924 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	604b      	str	r3, [r1, #4]
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	58000400 	.word	0x58000400

08005928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	609a      	str	r2, [r3, #8]
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	609a      	str	r2, [r3, #8]
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3360      	adds	r3, #96	; 0x60
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	430b      	orrs	r3, r1
 80059be:	431a      	orrs	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	611a      	str	r2, [r3, #16]
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3360      	adds	r3, #96	; 0x60
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	601a      	str	r2, [r3, #0]
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b087      	sub	sp, #28
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3330      	adds	r3, #48	; 0x30
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	4413      	add	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	211f      	movs	r1, #31
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	401a      	ands	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0e9b      	lsrs	r3, r3, #26
 8005a96:	f003 011f 	and.w	r1, r3, #31
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f023 0203 	bic.w	r2, r3, #3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60da      	str	r2, [r3, #12]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3314      	adds	r3, #20
 8005aec:	461a      	mov	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	0e5b      	lsrs	r3, r3, #25
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	4413      	add	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	0d1b      	lsrs	r3, r3, #20
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2107      	movs	r1, #7
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	401a      	ands	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0d1b      	lsrs	r3, r3, #20
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	431a      	orrs	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	401a      	ands	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0318 	and.w	r3, r3, #24
 8005b56:	4908      	ldr	r1, [pc, #32]	; (8005b78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b58:	40d9      	lsrs	r1, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	000fffff 	.word	0x000fffff

08005b7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 031f 	and.w	r3, r3, #31
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6093      	str	r3, [r2, #8]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	5fffffc0 	.word	0x5fffffc0

08005bbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd0:	d101      	bne.n	8005bd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <LL_ADC_EnableInternalRegulator+0x24>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	6fffffc0 	.word	0x6fffffc0

08005c0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c20:	d101      	bne.n	8005c26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <LL_ADC_Enable+0x24>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	f043 0201 	orr.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	7fffffc0 	.word	0x7fffffc0

08005c5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <LL_ADC_Disable+0x24>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	f043 0202 	orr.w	r2, r3, #2
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	7fffffc0 	.word	0x7fffffc0

08005c84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <LL_ADC_IsEnabled+0x18>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <LL_ADC_IsEnabled+0x1a>
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d101      	bne.n	8005cc2 <LL_ADC_IsDisableOngoing+0x18>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <LL_ADC_IsDisableOngoing+0x1a>
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <LL_ADC_REG_StartConversion+0x24>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	f043 0204 	orr.w	r2, r3, #4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	7fffffc0 	.word	0x7fffffc0

08005cf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d101      	bne.n	8005d10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d101      	bne.n	8005d36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e18f      	b.n	800607e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fa fded 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff ff19 	bl	8005bbc <LL_ADC_IsDeepPowerDownEnabled>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff feff 	bl	8005b98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff ff34 	bl	8005c0c <LL_ADC_IsInternalRegulatorEnabled>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d114      	bne.n	8005dd4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff ff18 	bl	8005be4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005db4:	4b87      	ldr	r3, [pc, #540]	; (8005fd4 <HAL_ADC_Init+0x290>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	099b      	lsrs	r3, r3, #6
 8005dba:	4a87      	ldr	r2, [pc, #540]	; (8005fd8 <HAL_ADC_Init+0x294>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005dc6:	e002      	b.n	8005dce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f9      	bne.n	8005dc8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff ff17 	bl	8005c0c <LL_ADC_IsInternalRegulatorEnabled>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	f043 0210 	orr.w	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f043 0201 	orr.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff ff77 	bl	8005cf8 <LL_ADC_REG_IsConversionOngoing>
 8005e0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 8129 	bne.w	800606c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f040 8125 	bne.w	800606c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005e2a:	f043 0202 	orr.w	r2, r3, #2
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ff24 	bl	8005c84 <LL_ADC_IsEnabled>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d136      	bne.n	8005eb0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a65      	ldr	r2, [pc, #404]	; (8005fdc <HAL_ADC_Init+0x298>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_ADC_Init+0x112>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a63      	ldr	r2, [pc, #396]	; (8005fe0 <HAL_ADC_Init+0x29c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10e      	bne.n	8005e74 <HAL_ADC_Init+0x130>
 8005e56:	4861      	ldr	r0, [pc, #388]	; (8005fdc <HAL_ADC_Init+0x298>)
 8005e58:	f7ff ff14 	bl	8005c84 <LL_ADC_IsEnabled>
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4860      	ldr	r0, [pc, #384]	; (8005fe0 <HAL_ADC_Init+0x29c>)
 8005e60:	f7ff ff10 	bl	8005c84 <LL_ADC_IsEnabled>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4323      	orrs	r3, r4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e008      	b.n	8005e86 <HAL_ADC_Init+0x142>
 8005e74:	485b      	ldr	r0, [pc, #364]	; (8005fe4 <HAL_ADC_Init+0x2a0>)
 8005e76:	f7ff ff05 	bl	8005c84 <LL_ADC_IsEnabled>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d012      	beq.n	8005eb0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a53      	ldr	r2, [pc, #332]	; (8005fdc <HAL_ADC_Init+0x298>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_ADC_Init+0x15a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a51      	ldr	r2, [pc, #324]	; (8005fe0 <HAL_ADC_Init+0x29c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_ADC_Init+0x15e>
 8005e9e:	4a52      	ldr	r2, [pc, #328]	; (8005fe8 <HAL_ADC_Init+0x2a4>)
 8005ea0:	e000      	b.n	8005ea4 <HAL_ADC_Init+0x160>
 8005ea2:	4a52      	ldr	r2, [pc, #328]	; (8005fec <HAL_ADC_Init+0x2a8>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7ff fd3c 	bl	8005928 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005eb0:	f7ff fd18 	bl	80058e4 <HAL_GetREVID>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d914      	bls.n	8005ee8 <HAL_ADC_Init+0x1a4>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d110      	bne.n	8005ee8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7d5b      	ldrb	r3, [r3, #21]
 8005eca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ed0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005ed6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7f1b      	ldrb	r3, [r3, #28]
 8005edc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005ede:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ee0:	f043 030c 	orr.w	r3, r3, #12
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e00d      	b.n	8005f04 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7d5b      	ldrb	r3, [r3, #21]
 8005eec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ef2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005ef8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7f1b      	ldrb	r3, [r3, #28]
 8005efe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	7f1b      	ldrb	r3, [r3, #28]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d106      	bne.n	8005f1a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	045b      	lsls	r3, r3, #17
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <HAL_ADC_Init+0x2ac>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fed2 	bl	8005cf8 <LL_ADC_REG_IsConversionOngoing>
 8005f54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fedf 	bl	8005d1e <LL_ADC_INJ_IsConversionOngoing>
 8005f60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d15f      	bne.n	8006028 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d15c      	bne.n	8006028 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7d1b      	ldrb	r3, [r3, #20]
 8005f72:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <HAL_ADC_Init+0x2b0>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	69b9      	ldr	r1, [r7, #24]
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d130      	bne.n	8005ffc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_ADC_Init+0x2b4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fae:	3a01      	subs	r2, #1
 8005fb0:	0411      	lsls	r1, r2, #16
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	611a      	str	r2, [r3, #16]
 8005fd0:	e01c      	b.n	800600c <HAL_ADC_Init+0x2c8>
 8005fd2:	bf00      	nop
 8005fd4:	24000090 	.word	0x24000090
 8005fd8:	053e2d63 	.word	0x053e2d63
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	40022100 	.word	0x40022100
 8005fe4:	58026000 	.word	0x58026000
 8005fe8:	40022300 	.word	0x40022300
 8005fec:	58026300 	.word	0x58026300
 8005ff0:	fff0c003 	.word	0xfff0c003
 8005ff4:	ffffbffc 	.word	0xffffbffc
 8005ff8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fdec 	bl	8006c00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d10c      	bne.n	800604a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f023 010f 	bic.w	r1, r3, #15
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	1e5a      	subs	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
 8006048:	e007      	b.n	800605a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 020f 	bic.w	r2, r2, #15
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
 800606a:	e007      	b.n	800607c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f043 0210 	orr.w	r2, r3, #16
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800607c:	7ffb      	ldrb	r3, [r7, #31]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3724      	adds	r7, #36	; 0x24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}
 8006086:	bf00      	nop

08006088 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a55      	ldr	r2, [pc, #340]	; (80061f0 <HAL_ADC_Start_DMA+0x168>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_ADC_Start_DMA+0x20>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a54      	ldr	r2, [pc, #336]	; (80061f4 <HAL_ADC_Start_DMA+0x16c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d101      	bne.n	80060ac <HAL_ADC_Start_DMA+0x24>
 80060a8:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <HAL_ADC_Start_DMA+0x170>)
 80060aa:	e000      	b.n	80060ae <HAL_ADC_Start_DMA+0x26>
 80060ac:	4b53      	ldr	r3, [pc, #332]	; (80061fc <HAL_ADC_Start_DMA+0x174>)
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fd64 	bl	8005b7c <LL_ADC_GetMultimode>
 80060b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fe1c 	bl	8005cf8 <LL_ADC_REG_IsConversionOngoing>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 808c 	bne.w	80061e0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_ADC_Start_DMA+0x4e>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e087      	b.n	80061e6 <HAL_ADC_Start_DMA+0x15e>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d002      	beq.n	80060f0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	d170      	bne.n	80061d2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fc07 	bl	8006904 <ADC_Enable>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d163      	bne.n	80061c8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006104:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <HAL_ADC_Start_DMA+0x178>)
 8006106:	4013      	ands	r3, r2
 8006108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <HAL_ADC_Start_DMA+0x16c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d002      	beq.n	8006120 <HAL_ADC_Start_DMA+0x98>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	e000      	b.n	8006122 <HAL_ADC_Start_DMA+0x9a>
 8006120:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <HAL_ADC_Start_DMA+0x168>)
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	4293      	cmp	r3, r2
 8006128:	d002      	beq.n	8006130 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	f023 0206 	bic.w	r2, r3, #6
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	659a      	str	r2, [r3, #88]	; 0x58
 8006154:	e002      	b.n	800615c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	4a28      	ldr	r2, [pc, #160]	; (8006204 <HAL_ADC_Start_DMA+0x17c>)
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006168:	4a27      	ldr	r2, [pc, #156]	; (8006208 <HAL_ADC_Start_DMA+0x180>)
 800616a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006170:	4a26      	ldr	r2, [pc, #152]	; (800620c <HAL_ADC_Start_DMA+0x184>)
 8006172:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	221c      	movs	r2, #28
 800617a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0210 	orr.w	r2, r2, #16
 8006192:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7ff fc89 	bl	8005ab6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3340      	adds	r3, #64	; 0x40
 80061ae:	4619      	mov	r1, r3
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f002 f886 	bl	80082c4 <HAL_DMA_Start_IT>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff fd85 	bl	8005cd0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80061c6:	e00d      	b.n	80061e4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80061d0:	e008      	b.n	80061e4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80061de:	e001      	b.n	80061e4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	40022000 	.word	0x40022000
 80061f4:	40022100 	.word	0x40022100
 80061f8:	40022300 	.word	0x40022300
 80061fc:	58026300 	.word	0x58026300
 8006200:	fffff0fe 	.word	0xfffff0fe
 8006204:	08006ad7 	.word	0x08006ad7
 8006208:	08006baf 	.word	0x08006baf
 800620c:	08006bcb 	.word	0x08006bcb

08006210 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b0a1      	sub	sp, #132	; 0x84
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4a65      	ldr	r2, [pc, #404]	; (80063fc <HAL_ADC_ConfigChannel+0x1b0>)
 8006266:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x2a>
 8006272:	2302      	movs	r3, #2
 8006274:	e32e      	b.n	80068d4 <HAL_ADC_ConfigChannel+0x688>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fd38 	bl	8005cf8 <LL_ADC_REG_IsConversionOngoing>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 8313 	bne.w	80068b6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	db2c      	blt.n	80062f2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d108      	bne.n	80062b6 <HAL_ADC_ConfigChannel+0x6a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	0e9b      	lsrs	r3, r3, #26
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2201      	movs	r2, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	e016      	b.n	80062e4 <HAL_ADC_ConfigChannel+0x98>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062be:	fa93 f3a3 	rbit	r3, r3
 80062c2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80062ce:	2320      	movs	r3, #32
 80062d0:	e003      	b.n	80062da <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80062d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d4:	fab3 f383 	clz	r3, r3
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2201      	movs	r2, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	69d1      	ldr	r1, [r2, #28]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	430b      	orrs	r3, r1
 80062f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	f7ff fbad 	bl	8005a5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fcf5 	bl	8005cf8 <LL_ADC_REG_IsConversionOngoing>
 800630e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fd02 	bl	8005d1e <LL_ADC_INJ_IsConversionOngoing>
 800631a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800631c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 80b8 	bne.w	8006494 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 80b4 	bne.w	8006494 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	461a      	mov	r2, r3
 800633a:	f7ff fbcf 	bl	8005adc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800633e:	4b30      	ldr	r3, [pc, #192]	; (8006400 <HAL_ADC_ConfigChannel+0x1b4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800634a:	d10b      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x118>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	e01d      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x154>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <HAL_ADC_ConfigChannel+0x13e>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	089b      	lsrs	r3, r3, #2
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	e00a      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x154>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	089b      	lsrs	r3, r3, #2
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d02c      	beq.n	8006404 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6919      	ldr	r1, [r3, #16]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b8:	f7ff faea 	bl	8005990 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6919      	ldr	r1, [r3, #16]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	7e5b      	ldrb	r3, [r3, #25]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x186>
 80063cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063d0:	e000      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x188>
 80063d2:	2300      	movs	r3, #0
 80063d4:	461a      	mov	r2, r3
 80063d6:	f7ff fb14 	bl	8005a02 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6919      	ldr	r1, [r3, #16]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	7e1b      	ldrb	r3, [r3, #24]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d102      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1a4>
 80063ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ee:	e000      	b.n	80063f2 <HAL_ADC_ConfigChannel+0x1a6>
 80063f0:	2300      	movs	r3, #0
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7ff faec 	bl	80059d0 <LL_ADC_SetDataRightShift>
 80063f8:	e04c      	b.n	8006494 <HAL_ADC_ConfigChannel+0x248>
 80063fa:	bf00      	nop
 80063fc:	47ff0000 	.word	0x47ff0000
 8006400:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	069b      	lsls	r3, r3, #26
 8006414:	429a      	cmp	r2, r3
 8006416:	d107      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006426:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	069b      	lsls	r3, r3, #26
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800644a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	069b      	lsls	r3, r3, #26
 800645c:	429a      	cmp	r2, r3
 800645e:	d107      	bne.n	8006470 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800646e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	069b      	lsls	r3, r3, #26
 8006480:	429a      	cmp	r2, r3
 8006482:	d107      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006492:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fbf3 	bl	8005c84 <LL_ADC_IsEnabled>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 8211 	bne.w	80068c8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6819      	ldr	r1, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7ff fb3e 	bl	8005b34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4aa1      	ldr	r2, [pc, #644]	; (8006744 <HAL_ADC_ConfigChannel+0x4f8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	f040 812e 	bne.w	8006720 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x2a0>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	0e9b      	lsrs	r3, r3, #26
 80064da:	3301      	adds	r3, #1
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2b09      	cmp	r3, #9
 80064e2:	bf94      	ite	ls
 80064e4:	2301      	movls	r3, #1
 80064e6:	2300      	movhi	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e019      	b.n	8006520 <HAL_ADC_ConfigChannel+0x2d4>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064f4:	fa93 f3a3 	rbit	r3, r3
 80064f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80064fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006504:	2320      	movs	r3, #32
 8006506:	e003      	b.n	8006510 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800650a:	fab3 f383 	clz	r3, r3
 800650e:	b2db      	uxtb	r3, r3
 8006510:	3301      	adds	r3, #1
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	2b09      	cmp	r3, #9
 8006518:	bf94      	ite	ls
 800651a:	2301      	movls	r3, #1
 800651c:	2300      	movhi	r3, #0
 800651e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006520:	2b00      	cmp	r3, #0
 8006522:	d079      	beq.n	8006618 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x2f4>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	0e9b      	lsrs	r3, r3, #26
 8006536:	3301      	adds	r3, #1
 8006538:	069b      	lsls	r3, r3, #26
 800653a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800653e:	e015      	b.n	800656c <HAL_ADC_ConfigChannel+0x320>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006548:	fa93 f3a3 	rbit	r3, r3
 800654c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800654e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006550:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006558:	2320      	movs	r3, #32
 800655a:	e003      	b.n	8006564 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655e:	fab3 f383 	clz	r3, r3
 8006562:	b2db      	uxtb	r3, r3
 8006564:	3301      	adds	r3, #1
 8006566:	069b      	lsls	r3, r3, #26
 8006568:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <HAL_ADC_ConfigChannel+0x340>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	0e9b      	lsrs	r3, r3, #26
 800657e:	3301      	adds	r3, #1
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2101      	movs	r1, #1
 8006586:	fa01 f303 	lsl.w	r3, r1, r3
 800658a:	e017      	b.n	80065bc <HAL_ADC_ConfigChannel+0x370>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006594:	fa93 f3a3 	rbit	r3, r3
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800659a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800659e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80065a4:	2320      	movs	r3, #32
 80065a6:	e003      	b.n	80065b0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80065a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065aa:	fab3 f383 	clz	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	3301      	adds	r3, #1
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2101      	movs	r1, #1
 80065b8:	fa01 f303 	lsl.w	r3, r1, r3
 80065bc:	ea42 0103 	orr.w	r1, r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x396>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	0e9b      	lsrs	r3, r3, #26
 80065d2:	3301      	adds	r3, #1
 80065d4:	f003 021f 	and.w	r2, r3, #31
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	051b      	lsls	r3, r3, #20
 80065e0:	e018      	b.n	8006614 <HAL_ADC_ConfigChannel+0x3c8>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	fa93 f3a3 	rbit	r3, r3
 80065ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80065fa:	2320      	movs	r3, #32
 80065fc:	e003      	b.n	8006606 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	3301      	adds	r3, #1
 8006608:	f003 021f 	and.w	r2, r3, #31
 800660c:	4613      	mov	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006614:	430b      	orrs	r3, r1
 8006616:	e07e      	b.n	8006716 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006620:	2b00      	cmp	r3, #0
 8006622:	d107      	bne.n	8006634 <HAL_ADC_ConfigChannel+0x3e8>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	0e9b      	lsrs	r3, r3, #26
 800662a:	3301      	adds	r3, #1
 800662c:	069b      	lsls	r3, r3, #26
 800662e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006632:	e015      	b.n	8006660 <HAL_ADC_ConfigChannel+0x414>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	fa93 f3a3 	rbit	r3, r3
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800664c:	2320      	movs	r3, #32
 800664e:	e003      	b.n	8006658 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	fab3 f383 	clz	r3, r3
 8006656:	b2db      	uxtb	r3, r3
 8006658:	3301      	adds	r3, #1
 800665a:	069b      	lsls	r3, r3, #26
 800665c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x434>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	0e9b      	lsrs	r3, r3, #26
 8006672:	3301      	adds	r3, #1
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2101      	movs	r1, #1
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	e017      	b.n	80066b0 <HAL_ADC_ConfigChannel+0x464>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	fa93 f3a3 	rbit	r3, r3
 800668c:	61bb      	str	r3, [r7, #24]
  return result;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006698:	2320      	movs	r3, #32
 800669a:	e003      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	fab3 f383 	clz	r3, r3
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	3301      	adds	r3, #1
 80066a6:	f003 031f 	and.w	r3, r3, #31
 80066aa:	2101      	movs	r1, #1
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	ea42 0103 	orr.w	r1, r2, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10d      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x490>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	0e9b      	lsrs	r3, r3, #26
 80066c6:	3301      	adds	r3, #1
 80066c8:	f003 021f 	and.w	r2, r3, #31
 80066cc:	4613      	mov	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	3b1e      	subs	r3, #30
 80066d4:	051b      	lsls	r3, r3, #20
 80066d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066da:	e01b      	b.n	8006714 <HAL_ADC_ConfigChannel+0x4c8>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	fa93 f3a3 	rbit	r3, r3
 80066e8:	60fb      	str	r3, [r7, #12]
  return result;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80066f4:	2320      	movs	r3, #32
 80066f6:	e003      	b.n	8006700 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	fab3 f383 	clz	r3, r3
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	3301      	adds	r3, #1
 8006702:	f003 021f 	and.w	r2, r3, #31
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	3b1e      	subs	r3, #30
 800670e:	051b      	lsls	r3, r3, #20
 8006710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006714:	430b      	orrs	r3, r1
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	6892      	ldr	r2, [r2, #8]
 800671a:	4619      	mov	r1, r3
 800671c:	f7ff f9de 	bl	8005adc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f280 80cf 	bge.w	80068c8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a06      	ldr	r2, [pc, #24]	; (8006748 <HAL_ADC_ConfigChannel+0x4fc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_ADC_ConfigChannel+0x4f2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a04      	ldr	r2, [pc, #16]	; (800674c <HAL_ADC_ConfigChannel+0x500>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d10a      	bne.n	8006754 <HAL_ADC_ConfigChannel+0x508>
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <HAL_ADC_ConfigChannel+0x504>)
 8006740:	e009      	b.n	8006756 <HAL_ADC_ConfigChannel+0x50a>
 8006742:	bf00      	nop
 8006744:	47ff0000 	.word	0x47ff0000
 8006748:	40022000 	.word	0x40022000
 800674c:	40022100 	.word	0x40022100
 8006750:	40022300 	.word	0x40022300
 8006754:	4b61      	ldr	r3, [pc, #388]	; (80068dc <HAL_ADC_ConfigChannel+0x690>)
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff f90c 	bl	8005974 <LL_ADC_GetCommonPathInternalCh>
 800675c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a5f      	ldr	r2, [pc, #380]	; (80068e0 <HAL_ADC_ConfigChannel+0x694>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_ADC_ConfigChannel+0x526>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5d      	ldr	r2, [pc, #372]	; (80068e4 <HAL_ADC_ConfigChannel+0x698>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10e      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x544>
 8006772:	485b      	ldr	r0, [pc, #364]	; (80068e0 <HAL_ADC_ConfigChannel+0x694>)
 8006774:	f7ff fa86 	bl	8005c84 <LL_ADC_IsEnabled>
 8006778:	4604      	mov	r4, r0
 800677a:	485a      	ldr	r0, [pc, #360]	; (80068e4 <HAL_ADC_ConfigChannel+0x698>)
 800677c:	f7ff fa82 	bl	8005c84 <LL_ADC_IsEnabled>
 8006780:	4603      	mov	r3, r0
 8006782:	4323      	orrs	r3, r4
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e008      	b.n	80067a2 <HAL_ADC_ConfigChannel+0x556>
 8006790:	4855      	ldr	r0, [pc, #340]	; (80068e8 <HAL_ADC_ConfigChannel+0x69c>)
 8006792:	f7ff fa77 	bl	8005c84 <LL_ADC_IsEnabled>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d07d      	beq.n	80068a2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a50      	ldr	r2, [pc, #320]	; (80068ec <HAL_ADC_ConfigChannel+0x6a0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d130      	bne.n	8006812 <HAL_ADC_ConfigChannel+0x5c6>
 80067b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d12b      	bne.n	8006812 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a4a      	ldr	r2, [pc, #296]	; (80068e8 <HAL_ADC_ConfigChannel+0x69c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	f040 8081 	bne.w	80068c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a45      	ldr	r2, [pc, #276]	; (80068e0 <HAL_ADC_ConfigChannel+0x694>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_ADC_ConfigChannel+0x58e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a43      	ldr	r2, [pc, #268]	; (80068e4 <HAL_ADC_ConfigChannel+0x698>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d101      	bne.n	80067de <HAL_ADC_ConfigChannel+0x592>
 80067da:	4a45      	ldr	r2, [pc, #276]	; (80068f0 <HAL_ADC_ConfigChannel+0x6a4>)
 80067dc:	e000      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x594>
 80067de:	4a3f      	ldr	r2, [pc, #252]	; (80068dc <HAL_ADC_ConfigChannel+0x690>)
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7ff f8b0 	bl	800594e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067ee:	4b41      	ldr	r3, [pc, #260]	; (80068f4 <HAL_ADC_ConfigChannel+0x6a8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	099b      	lsrs	r3, r3, #6
 80067f4:	4a40      	ldr	r2, [pc, #256]	; (80068f8 <HAL_ADC_ConfigChannel+0x6ac>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	3301      	adds	r3, #1
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006802:	e002      	b.n	800680a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	3b01      	subs	r3, #1
 8006808:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f9      	bne.n	8006804 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006810:	e05a      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a39      	ldr	r2, [pc, #228]	; (80068fc <HAL_ADC_ConfigChannel+0x6b0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d11e      	bne.n	800685a <HAL_ADC_ConfigChannel+0x60e>
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d119      	bne.n	800685a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2f      	ldr	r2, [pc, #188]	; (80068e8 <HAL_ADC_ConfigChannel+0x69c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d14b      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <HAL_ADC_ConfigChannel+0x694>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_ADC_ConfigChannel+0x5f8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a29      	ldr	r2, [pc, #164]	; (80068e4 <HAL_ADC_ConfigChannel+0x698>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d101      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x5fc>
 8006844:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <HAL_ADC_ConfigChannel+0x6a4>)
 8006846:	e000      	b.n	800684a <HAL_ADC_ConfigChannel+0x5fe>
 8006848:	4a24      	ldr	r2, [pc, #144]	; (80068dc <HAL_ADC_ConfigChannel+0x690>)
 800684a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7ff f87b 	bl	800594e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006858:	e036      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a28      	ldr	r2, [pc, #160]	; (8006900 <HAL_ADC_ConfigChannel+0x6b4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d131      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
 8006864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d12c      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <HAL_ADC_ConfigChannel+0x69c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d127      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <HAL_ADC_ConfigChannel+0x694>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_ADC_ConfigChannel+0x640>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <HAL_ADC_ConfigChannel+0x698>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d101      	bne.n	8006890 <HAL_ADC_ConfigChannel+0x644>
 800688c:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_ADC_ConfigChannel+0x6a4>)
 800688e:	e000      	b.n	8006892 <HAL_ADC_ConfigChannel+0x646>
 8006890:	4a12      	ldr	r2, [pc, #72]	; (80068dc <HAL_ADC_ConfigChannel+0x690>)
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7ff f857 	bl	800594e <LL_ADC_SetCommonPathInternalCh>
 80068a0:	e012      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80068b4:	e008      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	f043 0220 	orr.w	r2, r3, #32
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80068d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3784      	adds	r7, #132	; 0x84
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd90      	pop	{r4, r7, pc}
 80068dc:	58026300 	.word	0x58026300
 80068e0:	40022000 	.word	0x40022000
 80068e4:	40022100 	.word	0x40022100
 80068e8:	58026000 	.word	0x58026000
 80068ec:	cb840000 	.word	0xcb840000
 80068f0:	40022300 	.word	0x40022300
 80068f4:	24000090 	.word	0x24000090
 80068f8:	053e2d63 	.word	0x053e2d63
 80068fc:	c7520000 	.word	0xc7520000
 8006900:	cfb80000 	.word	0xcfb80000

08006904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff f9b7 	bl	8005c84 <LL_ADC_IsEnabled>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d16e      	bne.n	80069fa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	4b38      	ldr	r3, [pc, #224]	; (8006a04 <ADC_Enable+0x100>)
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00d      	beq.n	8006946 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692e:	f043 0210 	orr.w	r2, r3, #16
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693a:	f043 0201 	orr.w	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e05a      	b.n	80069fc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f972 	bl	8005c34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006950:	f7fe ffbc 	bl	80058cc <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a2b      	ldr	r2, [pc, #172]	; (8006a08 <ADC_Enable+0x104>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <ADC_Enable+0x66>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a29      	ldr	r2, [pc, #164]	; (8006a0c <ADC_Enable+0x108>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d101      	bne.n	800696e <ADC_Enable+0x6a>
 800696a:	4b29      	ldr	r3, [pc, #164]	; (8006a10 <ADC_Enable+0x10c>)
 800696c:	e000      	b.n	8006970 <ADC_Enable+0x6c>
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <ADC_Enable+0x110>)
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff f903 	bl	8005b7c <LL_ADC_GetMultimode>
 8006976:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <ADC_Enable+0x108>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d002      	beq.n	8006988 <ADC_Enable+0x84>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	e000      	b.n	800698a <ADC_Enable+0x86>
 8006988:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <ADC_Enable+0x104>)
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	4293      	cmp	r3, r2
 8006990:	d02c      	beq.n	80069ec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d130      	bne.n	80069fa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006998:	e028      	b.n	80069ec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff f970 	bl	8005c84 <LL_ADC_IsEnabled>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff f940 	bl	8005c34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069b4:	f7fe ff8a 	bl	80058cc <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d914      	bls.n	80069ec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d00d      	beq.n	80069ec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	f043 0210 	orr.w	r2, r3, #16
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	f043 0201 	orr.w	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e007      	b.n	80069fc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d1cf      	bne.n	800699a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	8000003f 	.word	0x8000003f
 8006a08:	40022000 	.word	0x40022000
 8006a0c:	40022100 	.word	0x40022100
 8006a10:	40022300 	.word	0x40022300
 8006a14:	58026300 	.word	0x58026300

08006a18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff f940 	bl	8005caa <LL_ADC_IsDisableOngoing>
 8006a2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff f927 	bl	8005c84 <LL_ADC_IsEnabled>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d047      	beq.n	8006acc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d144      	bne.n	8006acc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 030d 	and.w	r3, r3, #13
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10c      	bne.n	8006a6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff f901 	bl	8005c5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a62:	f7fe ff33 	bl	80058cc <HAL_GetTick>
 8006a66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a68:	e029      	b.n	8006abe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f043 0210 	orr.w	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	f043 0201 	orr.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e023      	b.n	8006ace <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a86:	f7fe ff21 	bl	80058cc <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d914      	bls.n	8006abe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	f043 0210 	orr.w	r2, r3, #16
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab2:	f043 0201 	orr.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e007      	b.n	8006ace <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1dc      	bne.n	8006a86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d14b      	bne.n	8006b88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d021      	beq.n	8006b4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe ff92 	bl	8005a38 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d032      	beq.n	8006b80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d12b      	bne.n	8006b80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11f      	bne.n	8006b80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b44:	f043 0201 	orr.w	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
 8006b4c:	e018      	b.n	8006b80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d111      	bne.n	8006b80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f043 0201 	orr.w	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fb45 	bl	8006210 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b86:	e00e      	b.n	8006ba6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7ff fb4f 	bl	8006238 <HAL_ADC_ErrorCallback>
}
 8006b9a:	e004      	b.n	8006ba6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f7ff fb31 	bl	8006224 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be8:	f043 0204 	orr.w	r2, r3, #4
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff fb21 	bl	8006238 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a7a      	ldr	r2, [pc, #488]	; (8006df8 <ADC_ConfigureBoostMode+0x1f8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <ADC_ConfigureBoostMode+0x1c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a79      	ldr	r2, [pc, #484]	; (8006dfc <ADC_ConfigureBoostMode+0x1fc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d109      	bne.n	8006c30 <ADC_ConfigureBoostMode+0x30>
 8006c1c:	4b78      	ldr	r3, [pc, #480]	; (8006e00 <ADC_ConfigureBoostMode+0x200>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	e008      	b.n	8006c42 <ADC_ConfigureBoostMode+0x42>
 8006c30:	4b74      	ldr	r3, [pc, #464]	; (8006e04 <ADC_ConfigureBoostMode+0x204>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01c      	beq.n	8006c80 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006c46:	f007 feb7 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 8006c4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c54:	d010      	beq.n	8006c78 <ADC_ConfigureBoostMode+0x78>
 8006c56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c5a:	d873      	bhi.n	8006d44 <ADC_ConfigureBoostMode+0x144>
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d002      	beq.n	8006c68 <ADC_ConfigureBoostMode+0x68>
 8006c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c66:	d16d      	bne.n	8006d44 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c74:	60fb      	str	r3, [r7, #12]
        break;
 8006c76:	e068      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	089b      	lsrs	r3, r3, #2
 8006c7c:	60fb      	str	r3, [r7, #12]
        break;
 8006c7e:	e064      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006c84:	f04f 0100 	mov.w	r1, #0
 8006c88:	f009 f93e 	bl	800ff08 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c8c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006c96:	d051      	beq.n	8006d3c <ADC_ConfigureBoostMode+0x13c>
 8006c98:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006c9c:	d854      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006c9e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ca2:	d047      	beq.n	8006d34 <ADC_ConfigureBoostMode+0x134>
 8006ca4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ca8:	d84e      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006caa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006cae:	d03d      	beq.n	8006d2c <ADC_ConfigureBoostMode+0x12c>
 8006cb0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006cb4:	d848      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cba:	d033      	beq.n	8006d24 <ADC_ConfigureBoostMode+0x124>
 8006cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc0:	d842      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006cc2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006cc6:	d029      	beq.n	8006d1c <ADC_ConfigureBoostMode+0x11c>
 8006cc8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ccc:	d83c      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006cce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006cd2:	d01a      	beq.n	8006d0a <ADC_ConfigureBoostMode+0x10a>
 8006cd4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006cd8:	d836      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006cda:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006cde:	d014      	beq.n	8006d0a <ADC_ConfigureBoostMode+0x10a>
 8006ce0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006ce4:	d830      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cea:	d00e      	beq.n	8006d0a <ADC_ConfigureBoostMode+0x10a>
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf0:	d82a      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006cf2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cf6:	d008      	beq.n	8006d0a <ADC_ConfigureBoostMode+0x10a>
 8006cf8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cfc:	d824      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x148>
 8006cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d02:	d002      	beq.n	8006d0a <ADC_ConfigureBoostMode+0x10a>
 8006d04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d08:	d11e      	bne.n	8006d48 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	0c9b      	lsrs	r3, r3, #18
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	60fb      	str	r3, [r7, #12]
        break;
 8006d1a:	e016      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	091b      	lsrs	r3, r3, #4
 8006d20:	60fb      	str	r3, [r7, #12]
        break;
 8006d22:	e012      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	60fb      	str	r3, [r7, #12]
        break;
 8006d2a:	e00e      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	099b      	lsrs	r3, r3, #6
 8006d30:	60fb      	str	r3, [r7, #12]
        break;
 8006d32:	e00a      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	09db      	lsrs	r3, r3, #7
 8006d38:	60fb      	str	r3, [r7, #12]
        break;
 8006d3a:	e006      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	60fb      	str	r3, [r7, #12]
        break;
 8006d42:	e002      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006d44:	bf00      	nop
 8006d46:	e000      	b.n	8006d4a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006d48:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006d4a:	f7fe fdcb 	bl	80058e4 <HAL_GetREVID>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d815      	bhi.n	8006d84 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <ADC_ConfigureBoostMode+0x208>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d908      	bls.n	8006d72 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d6e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006d70:	e03e      	b.n	8006df0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d80:	609a      	str	r2, [r3, #8]
}
 8006d82:	e035      	b.n	8006df0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <ADC_ConfigureBoostMode+0x20c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d808      	bhi.n	8006da4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006da0:	609a      	str	r2, [r3, #8]
}
 8006da2:	e025      	b.n	8006df0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <ADC_ConfigureBoostMode+0x210>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d80a      	bhi.n	8006dc2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	e016      	b.n	8006df0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <ADC_ConfigureBoostMode+0x214>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d80a      	bhi.n	8006de0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ddc:	609a      	str	r2, [r3, #8]
}
 8006dde:	e007      	b.n	8006df0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40022000 	.word	0x40022000
 8006dfc:	40022100 	.word	0x40022100
 8006e00:	40022300 	.word	0x40022300
 8006e04:	58026300 	.word	0x58026300
 8006e08:	01312d00 	.word	0x01312d00
 8006e0c:	005f5e10 	.word	0x005f5e10
 8006e10:	00bebc20 	.word	0x00bebc20
 8006e14:	017d7840 	.word	0x017d7840

08006e18 <LL_ADC_IsEnabled>:
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <LL_ADC_IsEnabled+0x18>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <LL_ADC_IsEnabled+0x1a>
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <LL_ADC_StartCalibration>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <LL_ADC_StartCalibration+0x38>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006e60:	430a      	orrs	r2, r1
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	3ffeffc0 	.word	0x3ffeffc0

08006e7c <LL_ADC_IsCalibrationOnGoing>:
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e90:	d101      	bne.n	8006e96 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d101      	bne.n	8006ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_ADCEx_Calibration_Start+0x1e>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e04c      	b.n	8006f84 <HAL_ADCEx_Calibration_Start+0xb8>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fd90 	bl	8006a18 <ADC_Disable>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d135      	bne.n	8006f6e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f06:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_ADCEx_Calibration_Start+0xc0>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	f043 0202 	orr.w	r2, r3, #2
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff ff90 	bl	8006e40 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f20:	e014      	b.n	8006f4c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3301      	adds	r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d30d      	bcc.n	8006f4c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	f023 0312 	bic.w	r3, r3, #18
 8006f38:	f043 0210 	orr.w	r2, r3, #16
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e01b      	b.n	8006f84 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff ff93 	bl	8006e7c <LL_ADC_IsCalibrationOnGoing>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e2      	bne.n	8006f22 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	f043 0201 	orr.w	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54
 8006f6c:	e005      	b.n	8006f7a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f043 0210 	orr.w	r2, r3, #16
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	ffffeefd 	.word	0xffffeefd
 8006f90:	25c3f800 	.word	0x25c3f800

08006f94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b09f      	sub	sp, #124	; 0x7c
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e0be      	b.n	8007130 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a5c      	ldr	r2, [pc, #368]	; (8007138 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d102      	bne.n	8006fd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006fcc:	4b5b      	ldr	r3, [pc, #364]	; (800713c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	e001      	b.n	8006fd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e09d      	b.n	8007130 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff ff54 	bl	8006ea4 <LL_ADC_REG_IsConversionOngoing>
 8006ffc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff ff4e 	bl	8006ea4 <LL_ADC_REG_IsConversionOngoing>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d17f      	bne.n	800710e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800700e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007010:	2b00      	cmp	r3, #0
 8007012:	d17c      	bne.n	800710e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a47      	ldr	r2, [pc, #284]	; (8007138 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a46      	ldr	r2, [pc, #280]	; (800713c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d101      	bne.n	800702c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007028:	4b45      	ldr	r3, [pc, #276]	; (8007140 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800702a:	e000      	b.n	800702e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800702c:	4b45      	ldr	r3, [pc, #276]	; (8007144 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800702e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d039      	beq.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	431a      	orrs	r2, r3
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a3a      	ldr	r2, [pc, #232]	; (8007138 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d004      	beq.n	800705e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a38      	ldr	r2, [pc, #224]	; (800713c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d10e      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800705e:	4836      	ldr	r0, [pc, #216]	; (8007138 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007060:	f7ff feda 	bl	8006e18 <LL_ADC_IsEnabled>
 8007064:	4604      	mov	r4, r0
 8007066:	4835      	ldr	r0, [pc, #212]	; (800713c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007068:	f7ff fed6 	bl	8006e18 <LL_ADC_IsEnabled>
 800706c:	4603      	mov	r3, r0
 800706e:	4323      	orrs	r3, r4
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e008      	b.n	800708e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800707c:	4832      	ldr	r0, [pc, #200]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800707e:	f7ff fecb 	bl	8006e18 <LL_ADC_IsEnabled>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d047      	beq.n	8007122 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	4b2d      	ldr	r3, [pc, #180]	; (800714c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007098:	4013      	ands	r3, r2
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	6892      	ldr	r2, [r2, #8]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	431a      	orrs	r2, r3
 80070a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070aa:	e03a      	b.n	8007122 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d004      	beq.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1d      	ldr	r2, [pc, #116]	; (800713c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10e      	bne.n	80070ea <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80070cc:	481a      	ldr	r0, [pc, #104]	; (8007138 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80070ce:	f7ff fea3 	bl	8006e18 <LL_ADC_IsEnabled>
 80070d2:	4604      	mov	r4, r0
 80070d4:	4819      	ldr	r0, [pc, #100]	; (800713c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80070d6:	f7ff fe9f 	bl	8006e18 <LL_ADC_IsEnabled>
 80070da:	4603      	mov	r3, r0
 80070dc:	4323      	orrs	r3, r4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	e008      	b.n	80070fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80070ea:	4817      	ldr	r0, [pc, #92]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80070ec:	f7ff fe94 	bl	8006e18 <LL_ADC_IsEnabled>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d010      	beq.n	8007122 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007106:	4013      	ands	r3, r2
 8007108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800710a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800710c:	e009      	b.n	8007122 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	f043 0220 	orr.w	r2, r3, #32
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007120:	e000      	b.n	8007124 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007122:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800712c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007130:	4618      	mov	r0, r3
 8007132:	377c      	adds	r7, #124	; 0x7c
 8007134:	46bd      	mov	sp, r7
 8007136:	bd90      	pop	{r4, r7, pc}
 8007138:	40022000 	.word	0x40022000
 800713c:	40022100 	.word	0x40022100
 8007140:	40022300 	.word	0x40022300
 8007144:	58026300 	.word	0x58026300
 8007148:	58026000 	.word	0x58026000
 800714c:	fffff0e0 	.word	0xfffff0e0

08007150 <__NVIC_SetPriorityGrouping>:
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <__NVIC_SetPriorityGrouping+0x40>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800716c:	4013      	ands	r3, r2
 800716e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007178:	4b06      	ldr	r3, [pc, #24]	; (8007194 <__NVIC_SetPriorityGrouping+0x44>)
 800717a:	4313      	orrs	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800717e:	4a04      	ldr	r2, [pc, #16]	; (8007190 <__NVIC_SetPriorityGrouping+0x40>)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	60d3      	str	r3, [r2, #12]
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	e000ed00 	.word	0xe000ed00
 8007194:	05fa0000 	.word	0x05fa0000

08007198 <__NVIC_GetPriorityGrouping>:
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <__NVIC_GetPriorityGrouping+0x18>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	f003 0307 	and.w	r3, r3, #7
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <__NVIC_EnableIRQ>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	db0b      	blt.n	80071de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	f003 021f 	and.w	r2, r3, #31
 80071cc:	4907      	ldr	r1, [pc, #28]	; (80071ec <__NVIC_EnableIRQ+0x38>)
 80071ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	2001      	movs	r0, #1
 80071d6:	fa00 f202 	lsl.w	r2, r0, r2
 80071da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	e000e100 	.word	0xe000e100

080071f0 <__NVIC_SetPriority>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	db0a      	blt.n	800721a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	490c      	ldr	r1, [pc, #48]	; (800723c <__NVIC_SetPriority+0x4c>)
 800720a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800720e:	0112      	lsls	r2, r2, #4
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	440b      	add	r3, r1
 8007214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007218:	e00a      	b.n	8007230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	b2da      	uxtb	r2, r3
 800721e:	4908      	ldr	r1, [pc, #32]	; (8007240 <__NVIC_SetPriority+0x50>)
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	3b04      	subs	r3, #4
 8007228:	0112      	lsls	r2, r2, #4
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	440b      	add	r3, r1
 800722e:	761a      	strb	r2, [r3, #24]
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	e000e100 	.word	0xe000e100
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <NVIC_EncodePriority>:
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	; 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	f1c3 0307 	rsb	r3, r3, #7
 800725e:	2b04      	cmp	r3, #4
 8007260:	bf28      	it	cs
 8007262:	2304      	movcs	r3, #4
 8007264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	3304      	adds	r3, #4
 800726a:	2b06      	cmp	r3, #6
 800726c:	d902      	bls.n	8007274 <NVIC_EncodePriority+0x30>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3b03      	subs	r3, #3
 8007272:	e000      	b.n	8007276 <NVIC_EncodePriority+0x32>
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	43da      	mvns	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	401a      	ands	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800728c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	fa01 f303 	lsl.w	r3, r1, r3
 8007296:	43d9      	mvns	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800729c:	4313      	orrs	r3, r2
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3724      	adds	r7, #36	; 0x24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff ff4c 	bl	8007150 <__NVIC_SetPriorityGrouping>
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072ce:	f7ff ff63 	bl	8007198 <__NVIC_GetPriorityGrouping>
 80072d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	6978      	ldr	r0, [r7, #20]
 80072da:	f7ff ffb3 	bl	8007244 <NVIC_EncodePriority>
 80072de:	4602      	mov	r2, r0
 80072e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ff82 	bl	80071f0 <__NVIC_SetPriority>
}
 80072ec:	bf00      	nop
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff ff56 	bl	80071b4 <__NVIC_EnableIRQ>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007314:	f3bf 8f5f 	dmb	sy
}
 8007318:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <HAL_MPU_Disable+0x28>)
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	4a06      	ldr	r2, [pc, #24]	; (8007338 <HAL_MPU_Disable+0x28>)
 8007320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007324:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_MPU_Disable+0x2c>)
 8007328:	2200      	movs	r2, #0
 800732a:	605a      	str	r2, [r3, #4]
}
 800732c:	bf00      	nop
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	e000ed00 	.word	0xe000ed00
 800733c:	e000ed90 	.word	0xe000ed90

08007340 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007348:	4a0b      	ldr	r2, [pc, #44]	; (8007378 <HAL_MPU_Enable+0x38>)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <HAL_MPU_Enable+0x3c>)
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <HAL_MPU_Enable+0x3c>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800735e:	f3bf 8f4f 	dsb	sy
}
 8007362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007364:	f3bf 8f6f 	isb	sy
}
 8007368:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e000ed90 	.word	0xe000ed90
 800737c:	e000ed00 	.word	0xe000ed00

08007380 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	785a      	ldrb	r2, [r3, #1]
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <HAL_MPU_ConfigRegion+0x7c>)
 800738e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007390:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <HAL_MPU_ConfigRegion+0x7c>)
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <HAL_MPU_ConfigRegion+0x7c>)
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800739c:	4a17      	ldr	r2, [pc, #92]	; (80073fc <HAL_MPU_ConfigRegion+0x7c>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7b1b      	ldrb	r3, [r3, #12]
 80073a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7adb      	ldrb	r3, [r3, #11]
 80073ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	7a9b      	ldrb	r3, [r3, #10]
 80073b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80073b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	7b5b      	ldrb	r3, [r3, #13]
 80073be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80073c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7b9b      	ldrb	r3, [r3, #14]
 80073c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80073c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7bdb      	ldrb	r3, [r3, #15]
 80073ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80073d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7a5b      	ldrb	r3, [r3, #9]
 80073d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80073d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7a1b      	ldrb	r3, [r3, #8]
 80073de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80073e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073e8:	4a04      	ldr	r2, [pc, #16]	; (80073fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80073ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073ec:	6113      	str	r3, [r2, #16]
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	e000ed90 	.word	0xe000ed90

08007400 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e014      	b.n	800743c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	791b      	ldrb	r3, [r3, #4]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7f9 fbde 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e046      	b.n	80074e6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	795b      	ldrb	r3, [r3, #5]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_DAC_Start+0x20>
 8007460:	2302      	movs	r3, #2
 8007462:	e040      	b.n	80074e6 <HAL_DAC_Start+0xa2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6819      	ldr	r1, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10f      	bne.n	80074ae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007498:	2b02      	cmp	r3, #2
 800749a:	d11d      	bne.n	80074d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	605a      	str	r2, [r3, #4]
 80074ac:	e014      	b.n	80074d8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2102      	movs	r1, #2
 80074c0:	fa01 f303 	lsl.w	r3, r1, r3
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d107      	bne.n	80074d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0202 	orr.w	r2, r2, #2
 80074d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0a2      	b.n	8007652 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	795b      	ldrb	r3, [r3, #5]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_DAC_Start_DMA+0x24>
 8007514:	2302      	movs	r3, #2
 8007516:	e09c      	b.n	8007652 <HAL_DAC_Start_DMA+0x15e>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2201      	movs	r2, #1
 800751c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2202      	movs	r2, #2
 8007522:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d129      	bne.n	800757e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4a4b      	ldr	r2, [pc, #300]	; (800765c <HAL_DAC_Start_DMA+0x168>)
 8007530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	4a4a      	ldr	r2, [pc, #296]	; (8007660 <HAL_DAC_Start_DMA+0x16c>)
 8007538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	4a49      	ldr	r2, [pc, #292]	; (8007664 <HAL_DAC_Start_DMA+0x170>)
 8007540:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007550:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_DAC_Start_DMA+0x6c>
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d005      	beq.n	800756a <HAL_DAC_Start_DMA+0x76>
 800755e:	e009      	b.n	8007574 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	613b      	str	r3, [r7, #16]
        break;
 8007568:	e033      	b.n	80075d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	613b      	str	r3, [r7, #16]
        break;
 8007572:	e02e      	b.n	80075d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3310      	adds	r3, #16
 800757a:	613b      	str	r3, [r7, #16]
        break;
 800757c:	e029      	b.n	80075d2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	4a39      	ldr	r2, [pc, #228]	; (8007668 <HAL_DAC_Start_DMA+0x174>)
 8007584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4a38      	ldr	r2, [pc, #224]	; (800766c <HAL_DAC_Start_DMA+0x178>)
 800758c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	4a37      	ldr	r2, [pc, #220]	; (8007670 <HAL_DAC_Start_DMA+0x17c>)
 8007594:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_DAC_Start_DMA+0xc0>
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d005      	beq.n	80075be <HAL_DAC_Start_DMA+0xca>
 80075b2:	e009      	b.n	80075c8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3314      	adds	r3, #20
 80075ba:	613b      	str	r3, [r7, #16]
        break;
 80075bc:	e009      	b.n	80075d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3318      	adds	r3, #24
 80075c4:	613b      	str	r3, [r7, #16]
        break;
 80075c6:	e004      	b.n	80075d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	331c      	adds	r3, #28
 80075ce:	613b      	str	r3, [r7, #16]
        break;
 80075d0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d111      	bne.n	80075fc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6898      	ldr	r0, [r3, #8]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	f000 fe67 	bl	80082c4 <HAL_DMA_Start_IT>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]
 80075fa:	e010      	b.n	800761e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800760a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68d8      	ldr	r0, [r3, #12]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	f000 fe55 	bl	80082c4 <HAL_DMA_Start_IT>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10c      	bne.n	8007644 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2201      	movs	r2, #1
 8007638:	409a      	lsls	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e005      	b.n	8007650 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f043 0204 	orr.w	r2, r3, #4
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	08007ae5 	.word	0x08007ae5
 8007660:	08007b07 	.word	0x08007b07
 8007664:	08007b23 	.word	0x08007b23
 8007668:	08007ba1 	.word	0x08007ba1
 800766c:	08007bc3 	.word	0x08007bc3
 8007670:	08007bdf 	.word	0x08007bdf

08007674 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e03e      	b.n	8007706 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6819      	ldr	r1, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	43da      	mvns	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	400a      	ands	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2201      	movs	r2, #1
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	43da      	mvns	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	400a      	ands	r2, r1
 80076c0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10d      	bne.n	80076e4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 f863 	bl	8008798 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e00c      	b.n	80076fe <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 f855 	bl	8008798 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80076fc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007724:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01d      	beq.n	800776c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d018      	beq.n	800776c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2204      	movs	r2, #4
 800773e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f043 0201 	orr.w	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007754:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007764:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f86f 	bl	800784a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01d      	beq.n	80077b2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d018      	beq.n	80077b2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2204      	movs	r2, #4
 8007784:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f043 0202 	orr.w	r2, r3, #2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800779a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80077aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9ed 	bl	8007b8c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b087      	sub	sp, #28
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e015      	b.n	8007802 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	3308      	adds	r3, #8
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e004      	b.n	80077f8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	3314      	adds	r3, #20
 80077f6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	461a      	mov	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	; 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_DAC_ConfigChannel+0x1e>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e12a      	b.n	8007ad8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	795b      	ldrb	r3, [r3, #5]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_DAC_ConfigChannel+0x2e>
 800788a:	2302      	movs	r3, #2
 800788c:	e124      	b.n	8007ad8 <HAL_DAC_ConfigChannel+0x278>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2202      	movs	r2, #2
 8007898:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d17a      	bne.n	8007998 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80078a2:	f7fe f813 	bl	80058cc <HAL_GetTick>
 80078a6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d13d      	bne.n	800792a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078ae:	e018      	b.n	80078e2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80078b0:	f7fe f80c 	bl	80058cc <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d911      	bls.n	80078e2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c4:	4b86      	ldr	r3, [pc, #536]	; (8007ae0 <HAL_DAC_ConfigChannel+0x280>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f043 0208 	orr.w	r2, r3, #8
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2203      	movs	r2, #3
 80078dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e0fa      	b.n	8007ad8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e8:	4b7d      	ldr	r3, [pc, #500]	; (8007ae0 <HAL_DAC_ConfigChannel+0x280>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1df      	bne.n	80078b0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	6992      	ldr	r2, [r2, #24]
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40
 80078fa:	e020      	b.n	800793e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80078fc:	f7fd ffe6 	bl	80058cc <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b01      	cmp	r3, #1
 8007908:	d90f      	bls.n	800792a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	2b00      	cmp	r3, #0
 8007912:	da0a      	bge.n	800792a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f043 0208 	orr.w	r2, r3, #8
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2203      	movs	r2, #3
 8007924:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e0d6      	b.n	8007ad8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	dbe3      	blt.n	80078fc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	6992      	ldr	r2, [r2, #24]
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800794e:	fa01 f303 	lsl.w	r3, r1, r3
 8007952:	43db      	mvns	r3, r3
 8007954:	ea02 0103 	and.w	r1, r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f003 0310 	and.w	r3, r3, #16
 8007962:	409a      	lsls	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	21ff      	movs	r1, #255	; 0xff
 800797a:	fa01 f303 	lsl.w	r3, r1, r3
 800797e:	43db      	mvns	r3, r3
 8007980:	ea02 0103 	and.w	r1, r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6a1a      	ldr	r2, [r3, #32]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	409a      	lsls	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d11d      	bne.n	80079dc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	221f      	movs	r2, #31
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	43db      	mvns	r3, r3
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	4013      	ands	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2207      	movs	r2, #7
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	43db      	mvns	r3, r3
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	4013      	ands	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d102      	bne.n	8007a06 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
 8007a04:	e00f      	b.n	8007a26 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d102      	bne.n	8007a14 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
 8007a12:	e008      	b.n	8007a26 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a20:	e001      	b.n	8007a26 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f003 0310 	and.w	r3, r3, #16
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	43da      	mvns	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007a80:	fa02 f303 	lsl.w	r3, r2, r3
 8007a84:	43db      	mvns	r3, r3
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	22c0      	movs	r2, #192	; 0xc0
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43da      	mvns	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20008000 	.word	0x20008000

08007ae4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff fe8b 	bl	800780e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	711a      	strb	r2, [r3, #4]
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff fe84 	bl	8007822 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f043 0204 	orr.w	r2, r3, #4
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fe7a 	bl	8007836 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	711a      	strb	r2, [r3, #4]
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff ffce 	bl	8007b50 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	711a      	strb	r2, [r3, #4]
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff ffc7 	bl	8007b64 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007bd6:	bf00      	nop
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f043 0204 	orr.w	r2, r3, #4
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff ffbd 	bl	8007b78 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	711a      	strb	r2, [r3, #4]
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007c14:	f7fd fe5a 	bl	80058cc <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e316      	b.n	8008252 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a66      	ldr	r2, [pc, #408]	; (8007dc4 <HAL_DMA_Init+0x1b8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d04a      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a65      	ldr	r2, [pc, #404]	; (8007dc8 <HAL_DMA_Init+0x1bc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d045      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a63      	ldr	r2, [pc, #396]	; (8007dcc <HAL_DMA_Init+0x1c0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d040      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a62      	ldr	r2, [pc, #392]	; (8007dd0 <HAL_DMA_Init+0x1c4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d03b      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a60      	ldr	r2, [pc, #384]	; (8007dd4 <HAL_DMA_Init+0x1c8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d036      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a5f      	ldr	r2, [pc, #380]	; (8007dd8 <HAL_DMA_Init+0x1cc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d031      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a5d      	ldr	r2, [pc, #372]	; (8007ddc <HAL_DMA_Init+0x1d0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d02c      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a5c      	ldr	r2, [pc, #368]	; (8007de0 <HAL_DMA_Init+0x1d4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d027      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a5a      	ldr	r2, [pc, #360]	; (8007de4 <HAL_DMA_Init+0x1d8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d022      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a59      	ldr	r2, [pc, #356]	; (8007de8 <HAL_DMA_Init+0x1dc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d01d      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a57      	ldr	r2, [pc, #348]	; (8007dec <HAL_DMA_Init+0x1e0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d018      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a56      	ldr	r2, [pc, #344]	; (8007df0 <HAL_DMA_Init+0x1e4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d013      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a54      	ldr	r2, [pc, #336]	; (8007df4 <HAL_DMA_Init+0x1e8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00e      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a53      	ldr	r2, [pc, #332]	; (8007df8 <HAL_DMA_Init+0x1ec>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d009      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a51      	ldr	r2, [pc, #324]	; (8007dfc <HAL_DMA_Init+0x1f0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_DMA_Init+0xb8>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a50      	ldr	r2, [pc, #320]	; (8007e00 <HAL_DMA_Init+0x1f4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d101      	bne.n	8007cc8 <HAL_DMA_Init+0xbc>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e000      	b.n	8007cca <HAL_DMA_Init+0xbe>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 813b 	beq.w	8007f46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a37      	ldr	r2, [pc, #220]	; (8007dc4 <HAL_DMA_Init+0x1b8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d04a      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a36      	ldr	r2, [pc, #216]	; (8007dc8 <HAL_DMA_Init+0x1bc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d045      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <HAL_DMA_Init+0x1c0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d040      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a33      	ldr	r2, [pc, #204]	; (8007dd0 <HAL_DMA_Init+0x1c4>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d03b      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a31      	ldr	r2, [pc, #196]	; (8007dd4 <HAL_DMA_Init+0x1c8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d036      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a30      	ldr	r2, [pc, #192]	; (8007dd8 <HAL_DMA_Init+0x1cc>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d031      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a2e      	ldr	r2, [pc, #184]	; (8007ddc <HAL_DMA_Init+0x1d0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d02c      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a2d      	ldr	r2, [pc, #180]	; (8007de0 <HAL_DMA_Init+0x1d4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d027      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2b      	ldr	r2, [pc, #172]	; (8007de4 <HAL_DMA_Init+0x1d8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d022      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <HAL_DMA_Init+0x1dc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d01d      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a28      	ldr	r2, [pc, #160]	; (8007dec <HAL_DMA_Init+0x1e0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d018      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <HAL_DMA_Init+0x1e4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d013      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a25      	ldr	r2, [pc, #148]	; (8007df4 <HAL_DMA_Init+0x1e8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00e      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a24      	ldr	r2, [pc, #144]	; (8007df8 <HAL_DMA_Init+0x1ec>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d009      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <HAL_DMA_Init+0x1f0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <HAL_DMA_Init+0x174>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <HAL_DMA_Init+0x1f4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d108      	bne.n	8007d92 <HAL_DMA_Init+0x186>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0201 	bic.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	e007      	b.n	8007da2 <HAL_DMA_Init+0x196>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007da2:	e02f      	b.n	8007e04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007da4:	f7fd fd92 	bl	80058cc <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b05      	cmp	r3, #5
 8007db0:	d928      	bls.n	8007e04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2203      	movs	r2, #3
 8007dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e246      	b.n	8008252 <HAL_DMA_Init+0x646>
 8007dc4:	40020010 	.word	0x40020010
 8007dc8:	40020028 	.word	0x40020028
 8007dcc:	40020040 	.word	0x40020040
 8007dd0:	40020058 	.word	0x40020058
 8007dd4:	40020070 	.word	0x40020070
 8007dd8:	40020088 	.word	0x40020088
 8007ddc:	400200a0 	.word	0x400200a0
 8007de0:	400200b8 	.word	0x400200b8
 8007de4:	40020410 	.word	0x40020410
 8007de8:	40020428 	.word	0x40020428
 8007dec:	40020440 	.word	0x40020440
 8007df0:	40020458 	.word	0x40020458
 8007df4:	40020470 	.word	0x40020470
 8007df8:	40020488 	.word	0x40020488
 8007dfc:	400204a0 	.word	0x400204a0
 8007e00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1c8      	bne.n	8007da4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	4b83      	ldr	r3, [pc, #524]	; (800802c <HAL_DMA_Init+0x420>)
 8007e1e:	4013      	ands	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007e2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d107      	bne.n	8007e68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e60:	4313      	orrs	r3, r2
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007e68:	4b71      	ldr	r3, [pc, #452]	; (8008030 <HAL_DMA_Init+0x424>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b71      	ldr	r3, [pc, #452]	; (8008034 <HAL_DMA_Init+0x428>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e74:	d328      	bcc.n	8007ec8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b28      	cmp	r3, #40	; 0x28
 8007e7c:	d903      	bls.n	8007e86 <HAL_DMA_Init+0x27a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b2e      	cmp	r3, #46	; 0x2e
 8007e84:	d917      	bls.n	8007eb6 <HAL_DMA_Init+0x2aa>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e8c:	d903      	bls.n	8007e96 <HAL_DMA_Init+0x28a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b42      	cmp	r3, #66	; 0x42
 8007e94:	d90f      	bls.n	8007eb6 <HAL_DMA_Init+0x2aa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b46      	cmp	r3, #70	; 0x46
 8007e9c:	d903      	bls.n	8007ea6 <HAL_DMA_Init+0x29a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b48      	cmp	r3, #72	; 0x48
 8007ea4:	d907      	bls.n	8007eb6 <HAL_DMA_Init+0x2aa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b4e      	cmp	r3, #78	; 0x4e
 8007eac:	d905      	bls.n	8007eba <HAL_DMA_Init+0x2ae>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b52      	cmp	r3, #82	; 0x52
 8007eb4:	d801      	bhi.n	8007eba <HAL_DMA_Init+0x2ae>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <HAL_DMA_Init+0x2b0>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ec6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d117      	bne.n	8007f22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00e      	beq.n	8007f22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f002 fb4d 	bl	800a5a4 <DMA_CheckFifoParam>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2240      	movs	r2, #64	; 0x40
 8007f14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e197      	b.n	8008252 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f002 fa88 	bl	800a440 <DMA_CalcBaseAndBitshift>
 8007f30:	4603      	mov	r3, r0
 8007f32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	223f      	movs	r2, #63	; 0x3f
 8007f3e:	409a      	lsls	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	e0cd      	b.n	80080e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a3b      	ldr	r2, [pc, #236]	; (8008038 <HAL_DMA_Init+0x42c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d022      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a39      	ldr	r2, [pc, #228]	; (800803c <HAL_DMA_Init+0x430>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01d      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a38      	ldr	r2, [pc, #224]	; (8008040 <HAL_DMA_Init+0x434>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d018      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a36      	ldr	r2, [pc, #216]	; (8008044 <HAL_DMA_Init+0x438>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a35      	ldr	r2, [pc, #212]	; (8008048 <HAL_DMA_Init+0x43c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a33      	ldr	r2, [pc, #204]	; (800804c <HAL_DMA_Init+0x440>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d009      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a32      	ldr	r2, [pc, #200]	; (8008050 <HAL_DMA_Init+0x444>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <HAL_DMA_Init+0x38a>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a30      	ldr	r2, [pc, #192]	; (8008054 <HAL_DMA_Init+0x448>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d101      	bne.n	8007f9a <HAL_DMA_Init+0x38e>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <HAL_DMA_Init+0x390>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8097 	beq.w	80080d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a24      	ldr	r2, [pc, #144]	; (8008038 <HAL_DMA_Init+0x42c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d021      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a22      	ldr	r2, [pc, #136]	; (800803c <HAL_DMA_Init+0x430>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01c      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a21      	ldr	r2, [pc, #132]	; (8008040 <HAL_DMA_Init+0x434>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d017      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <HAL_DMA_Init+0x438>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d012      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <HAL_DMA_Init+0x43c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00d      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1c      	ldr	r2, [pc, #112]	; (800804c <HAL_DMA_Init+0x440>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d008      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <HAL_DMA_Init+0x444>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <HAL_DMA_Init+0x3e4>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a19      	ldr	r2, [pc, #100]	; (8008054 <HAL_DMA_Init+0x448>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4b12      	ldr	r3, [pc, #72]	; (8008058 <HAL_DMA_Init+0x44c>)
 800800e:	4013      	ands	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d020      	beq.n	800805c <HAL_DMA_Init+0x450>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d102      	bne.n	8008028 <HAL_DMA_Init+0x41c>
 8008022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008026:	e01a      	b.n	800805e <HAL_DMA_Init+0x452>
 8008028:	2300      	movs	r3, #0
 800802a:	e018      	b.n	800805e <HAL_DMA_Init+0x452>
 800802c:	fe10803f 	.word	0xfe10803f
 8008030:	5c001000 	.word	0x5c001000
 8008034:	ffff0000 	.word	0xffff0000
 8008038:	58025408 	.word	0x58025408
 800803c:	5802541c 	.word	0x5802541c
 8008040:	58025430 	.word	0x58025430
 8008044:	58025444 	.word	0x58025444
 8008048:	58025458 	.word	0x58025458
 800804c:	5802546c 	.word	0x5802546c
 8008050:	58025480 	.word	0x58025480
 8008054:	58025494 	.word	0x58025494
 8008058:	fffe000f 	.word	0xfffe000f
 800805c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68d2      	ldr	r2, [r2, #12]
 8008062:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008064:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800806c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008074:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800807c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008084:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800808c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b6e      	ldr	r3, [pc, #440]	; (800825c <HAL_DMA_Init+0x650>)
 80080a4:	4413      	add	r3, r2
 80080a6:	4a6e      	ldr	r2, [pc, #440]	; (8008260 <HAL_DMA_Init+0x654>)
 80080a8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ac:	091b      	lsrs	r3, r3, #4
 80080ae:	009a      	lsls	r2, r3, #2
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f002 f9c3 	bl	800a440 <DMA_CalcBaseAndBitshift>
 80080ba:	4603      	mov	r3, r0
 80080bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c2:	f003 031f 	and.w	r3, r3, #31
 80080c6:	2201      	movs	r2, #1
 80080c8:	409a      	lsls	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	605a      	str	r2, [r3, #4]
 80080ce:	e008      	b.n	80080e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2240      	movs	r2, #64	; 0x40
 80080d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2203      	movs	r2, #3
 80080da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0b7      	b.n	8008252 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a5f      	ldr	r2, [pc, #380]	; (8008264 <HAL_DMA_Init+0x658>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d072      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a5d      	ldr	r2, [pc, #372]	; (8008268 <HAL_DMA_Init+0x65c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d06d      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a5c      	ldr	r2, [pc, #368]	; (800826c <HAL_DMA_Init+0x660>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d068      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a5a      	ldr	r2, [pc, #360]	; (8008270 <HAL_DMA_Init+0x664>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d063      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a59      	ldr	r2, [pc, #356]	; (8008274 <HAL_DMA_Init+0x668>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d05e      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a57      	ldr	r2, [pc, #348]	; (8008278 <HAL_DMA_Init+0x66c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d059      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a56      	ldr	r2, [pc, #344]	; (800827c <HAL_DMA_Init+0x670>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d054      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a54      	ldr	r2, [pc, #336]	; (8008280 <HAL_DMA_Init+0x674>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d04f      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a53      	ldr	r2, [pc, #332]	; (8008284 <HAL_DMA_Init+0x678>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d04a      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a51      	ldr	r2, [pc, #324]	; (8008288 <HAL_DMA_Init+0x67c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d045      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a50      	ldr	r2, [pc, #320]	; (800828c <HAL_DMA_Init+0x680>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d040      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a4e      	ldr	r2, [pc, #312]	; (8008290 <HAL_DMA_Init+0x684>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d03b      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a4d      	ldr	r2, [pc, #308]	; (8008294 <HAL_DMA_Init+0x688>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d036      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a4b      	ldr	r2, [pc, #300]	; (8008298 <HAL_DMA_Init+0x68c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d031      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a4a      	ldr	r2, [pc, #296]	; (800829c <HAL_DMA_Init+0x690>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d02c      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a48      	ldr	r2, [pc, #288]	; (80082a0 <HAL_DMA_Init+0x694>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d027      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a47      	ldr	r2, [pc, #284]	; (80082a4 <HAL_DMA_Init+0x698>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d022      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a45      	ldr	r2, [pc, #276]	; (80082a8 <HAL_DMA_Init+0x69c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01d      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a44      	ldr	r2, [pc, #272]	; (80082ac <HAL_DMA_Init+0x6a0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d018      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a42      	ldr	r2, [pc, #264]	; (80082b0 <HAL_DMA_Init+0x6a4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d013      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a41      	ldr	r2, [pc, #260]	; (80082b4 <HAL_DMA_Init+0x6a8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00e      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3f      	ldr	r2, [pc, #252]	; (80082b8 <HAL_DMA_Init+0x6ac>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d009      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a3e      	ldr	r2, [pc, #248]	; (80082bc <HAL_DMA_Init+0x6b0>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_DMA_Init+0x5c6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3c      	ldr	r2, [pc, #240]	; (80082c0 <HAL_DMA_Init+0x6b4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d101      	bne.n	80081d6 <HAL_DMA_Init+0x5ca>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <HAL_DMA_Init+0x5cc>
 80081d6:	2300      	movs	r3, #0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d032      	beq.n	8008242 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f002 fa5d 	bl	800a69c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d102      	bne.n	80081f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008204:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d010      	beq.n	8008230 <HAL_DMA_Init+0x624>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b08      	cmp	r3, #8
 8008214:	d80c      	bhi.n	8008230 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f002 fada 	bl	800a7d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	e008      	b.n	8008242 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	a7fdabf8 	.word	0xa7fdabf8
 8008260:	cccccccd 	.word	0xcccccccd
 8008264:	40020010 	.word	0x40020010
 8008268:	40020028 	.word	0x40020028
 800826c:	40020040 	.word	0x40020040
 8008270:	40020058 	.word	0x40020058
 8008274:	40020070 	.word	0x40020070
 8008278:	40020088 	.word	0x40020088
 800827c:	400200a0 	.word	0x400200a0
 8008280:	400200b8 	.word	0x400200b8
 8008284:	40020410 	.word	0x40020410
 8008288:	40020428 	.word	0x40020428
 800828c:	40020440 	.word	0x40020440
 8008290:	40020458 	.word	0x40020458
 8008294:	40020470 	.word	0x40020470
 8008298:	40020488 	.word	0x40020488
 800829c:	400204a0 	.word	0x400204a0
 80082a0:	400204b8 	.word	0x400204b8
 80082a4:	58025408 	.word	0x58025408
 80082a8:	5802541c 	.word	0x5802541c
 80082ac:	58025430 	.word	0x58025430
 80082b0:	58025444 	.word	0x58025444
 80082b4:	58025458 	.word	0x58025458
 80082b8:	5802546c 	.word	0x5802546c
 80082bc:	58025480 	.word	0x58025480
 80082c0:	58025494 	.word	0x58025494

080082c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e226      	b.n	800872e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <HAL_DMA_Start_IT+0x2a>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e21f      	b.n	800872e <HAL_DMA_Start_IT+0x46a>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	f040 820a 	bne.w	8008718 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a68      	ldr	r2, [pc, #416]	; (80084b8 <HAL_DMA_Start_IT+0x1f4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d04a      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a66      	ldr	r2, [pc, #408]	; (80084bc <HAL_DMA_Start_IT+0x1f8>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d045      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a65      	ldr	r2, [pc, #404]	; (80084c0 <HAL_DMA_Start_IT+0x1fc>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d040      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a63      	ldr	r2, [pc, #396]	; (80084c4 <HAL_DMA_Start_IT+0x200>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d03b      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a62      	ldr	r2, [pc, #392]	; (80084c8 <HAL_DMA_Start_IT+0x204>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d036      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a60      	ldr	r2, [pc, #384]	; (80084cc <HAL_DMA_Start_IT+0x208>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d031      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a5f      	ldr	r2, [pc, #380]	; (80084d0 <HAL_DMA_Start_IT+0x20c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d02c      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a5d      	ldr	r2, [pc, #372]	; (80084d4 <HAL_DMA_Start_IT+0x210>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d027      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a5c      	ldr	r2, [pc, #368]	; (80084d8 <HAL_DMA_Start_IT+0x214>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d022      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a5a      	ldr	r2, [pc, #360]	; (80084dc <HAL_DMA_Start_IT+0x218>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01d      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a59      	ldr	r2, [pc, #356]	; (80084e0 <HAL_DMA_Start_IT+0x21c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d018      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a57      	ldr	r2, [pc, #348]	; (80084e4 <HAL_DMA_Start_IT+0x220>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a56      	ldr	r2, [pc, #344]	; (80084e8 <HAL_DMA_Start_IT+0x224>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00e      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a54      	ldr	r2, [pc, #336]	; (80084ec <HAL_DMA_Start_IT+0x228>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d009      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a53      	ldr	r2, [pc, #332]	; (80084f0 <HAL_DMA_Start_IT+0x22c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <HAL_DMA_Start_IT+0xee>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <HAL_DMA_Start_IT+0x230>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d108      	bne.n	80083c4 <HAL_DMA_Start_IT+0x100>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0201 	bic.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	e007      	b.n	80083d4 <HAL_DMA_Start_IT+0x110>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0201 	bic.w	r2, r2, #1
 80083d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 fe84 	bl	800a0e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a34      	ldr	r2, [pc, #208]	; (80084b8 <HAL_DMA_Start_IT+0x1f4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d04a      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a33      	ldr	r2, [pc, #204]	; (80084bc <HAL_DMA_Start_IT+0x1f8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d045      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a31      	ldr	r2, [pc, #196]	; (80084c0 <HAL_DMA_Start_IT+0x1fc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d040      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a30      	ldr	r2, [pc, #192]	; (80084c4 <HAL_DMA_Start_IT+0x200>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d03b      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a2e      	ldr	r2, [pc, #184]	; (80084c8 <HAL_DMA_Start_IT+0x204>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d036      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a2d      	ldr	r2, [pc, #180]	; (80084cc <HAL_DMA_Start_IT+0x208>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d031      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <HAL_DMA_Start_IT+0x20c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d02c      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <HAL_DMA_Start_IT+0x210>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d027      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a28      	ldr	r2, [pc, #160]	; (80084d8 <HAL_DMA_Start_IT+0x214>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d022      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a27      	ldr	r2, [pc, #156]	; (80084dc <HAL_DMA_Start_IT+0x218>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d01d      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <HAL_DMA_Start_IT+0x21c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d018      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <HAL_DMA_Start_IT+0x220>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d013      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a22      	ldr	r2, [pc, #136]	; (80084e8 <HAL_DMA_Start_IT+0x224>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00e      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a21      	ldr	r2, [pc, #132]	; (80084ec <HAL_DMA_Start_IT+0x228>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <HAL_DMA_Start_IT+0x22c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_DMA_Start_IT+0x1bc>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <HAL_DMA_Start_IT+0x230>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d101      	bne.n	8008484 <HAL_DMA_Start_IT+0x1c0>
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <HAL_DMA_Start_IT+0x1c2>
 8008484:	2300      	movs	r3, #0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d036      	beq.n	80084f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f023 021e 	bic.w	r2, r3, #30
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0216 	orr.w	r2, r2, #22
 800849c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d03e      	beq.n	8008524 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0208 	orr.w	r2, r2, #8
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	e035      	b.n	8008524 <HAL_DMA_Start_IT+0x260>
 80084b8:	40020010 	.word	0x40020010
 80084bc:	40020028 	.word	0x40020028
 80084c0:	40020040 	.word	0x40020040
 80084c4:	40020058 	.word	0x40020058
 80084c8:	40020070 	.word	0x40020070
 80084cc:	40020088 	.word	0x40020088
 80084d0:	400200a0 	.word	0x400200a0
 80084d4:	400200b8 	.word	0x400200b8
 80084d8:	40020410 	.word	0x40020410
 80084dc:	40020428 	.word	0x40020428
 80084e0:	40020440 	.word	0x40020440
 80084e4:	40020458 	.word	0x40020458
 80084e8:	40020470 	.word	0x40020470
 80084ec:	40020488 	.word	0x40020488
 80084f0:	400204a0 	.word	0x400204a0
 80084f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 020e 	bic.w	r2, r3, #14
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 020a 	orr.w	r2, r2, #10
 800850a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d007      	beq.n	8008524 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0204 	orr.w	r2, r2, #4
 8008522:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a83      	ldr	r2, [pc, #524]	; (8008738 <HAL_DMA_Start_IT+0x474>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d072      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a82      	ldr	r2, [pc, #520]	; (800873c <HAL_DMA_Start_IT+0x478>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d06d      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a80      	ldr	r2, [pc, #512]	; (8008740 <HAL_DMA_Start_IT+0x47c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d068      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a7f      	ldr	r2, [pc, #508]	; (8008744 <HAL_DMA_Start_IT+0x480>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d063      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a7d      	ldr	r2, [pc, #500]	; (8008748 <HAL_DMA_Start_IT+0x484>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d05e      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a7c      	ldr	r2, [pc, #496]	; (800874c <HAL_DMA_Start_IT+0x488>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d059      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a7a      	ldr	r2, [pc, #488]	; (8008750 <HAL_DMA_Start_IT+0x48c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d054      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a79      	ldr	r2, [pc, #484]	; (8008754 <HAL_DMA_Start_IT+0x490>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d04f      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a77      	ldr	r2, [pc, #476]	; (8008758 <HAL_DMA_Start_IT+0x494>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d04a      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a76      	ldr	r2, [pc, #472]	; (800875c <HAL_DMA_Start_IT+0x498>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d045      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a74      	ldr	r2, [pc, #464]	; (8008760 <HAL_DMA_Start_IT+0x49c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d040      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a73      	ldr	r2, [pc, #460]	; (8008764 <HAL_DMA_Start_IT+0x4a0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d03b      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a71      	ldr	r2, [pc, #452]	; (8008768 <HAL_DMA_Start_IT+0x4a4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d036      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a70      	ldr	r2, [pc, #448]	; (800876c <HAL_DMA_Start_IT+0x4a8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d031      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a6e      	ldr	r2, [pc, #440]	; (8008770 <HAL_DMA_Start_IT+0x4ac>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d02c      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a6d      	ldr	r2, [pc, #436]	; (8008774 <HAL_DMA_Start_IT+0x4b0>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d027      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a6b      	ldr	r2, [pc, #428]	; (8008778 <HAL_DMA_Start_IT+0x4b4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d022      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a6a      	ldr	r2, [pc, #424]	; (800877c <HAL_DMA_Start_IT+0x4b8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d01d      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a68      	ldr	r2, [pc, #416]	; (8008780 <HAL_DMA_Start_IT+0x4bc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a67      	ldr	r2, [pc, #412]	; (8008784 <HAL_DMA_Start_IT+0x4c0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a65      	ldr	r2, [pc, #404]	; (8008788 <HAL_DMA_Start_IT+0x4c4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a64      	ldr	r2, [pc, #400]	; (800878c <HAL_DMA_Start_IT+0x4c8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a62      	ldr	r2, [pc, #392]	; (8008790 <HAL_DMA_Start_IT+0x4cc>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_DMA_Start_IT+0x350>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a61      	ldr	r2, [pc, #388]	; (8008794 <HAL_DMA_Start_IT+0x4d0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d101      	bne.n	8008618 <HAL_DMA_Start_IT+0x354>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <HAL_DMA_Start_IT+0x356>
 8008618:	2300      	movs	r3, #0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01a      	beq.n	8008654 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800863a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008652:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a37      	ldr	r2, [pc, #220]	; (8008738 <HAL_DMA_Start_IT+0x474>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d04a      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a36      	ldr	r2, [pc, #216]	; (800873c <HAL_DMA_Start_IT+0x478>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d045      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a34      	ldr	r2, [pc, #208]	; (8008740 <HAL_DMA_Start_IT+0x47c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d040      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a33      	ldr	r2, [pc, #204]	; (8008744 <HAL_DMA_Start_IT+0x480>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d03b      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a31      	ldr	r2, [pc, #196]	; (8008748 <HAL_DMA_Start_IT+0x484>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d036      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a30      	ldr	r2, [pc, #192]	; (800874c <HAL_DMA_Start_IT+0x488>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d031      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <HAL_DMA_Start_IT+0x48c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d02c      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <HAL_DMA_Start_IT+0x490>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d027      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a2b      	ldr	r2, [pc, #172]	; (8008758 <HAL_DMA_Start_IT+0x494>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d022      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2a      	ldr	r2, [pc, #168]	; (800875c <HAL_DMA_Start_IT+0x498>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d01d      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <HAL_DMA_Start_IT+0x49c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d018      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a27      	ldr	r2, [pc, #156]	; (8008764 <HAL_DMA_Start_IT+0x4a0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d013      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a25      	ldr	r2, [pc, #148]	; (8008768 <HAL_DMA_Start_IT+0x4a4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00e      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a24      	ldr	r2, [pc, #144]	; (800876c <HAL_DMA_Start_IT+0x4a8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d009      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a22      	ldr	r2, [pc, #136]	; (8008770 <HAL_DMA_Start_IT+0x4ac>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d004      	beq.n	80086f4 <HAL_DMA_Start_IT+0x430>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <HAL_DMA_Start_IT+0x4b0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d108      	bne.n	8008706 <HAL_DMA_Start_IT+0x442>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0201 	orr.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e012      	b.n	800872c <HAL_DMA_Start_IT+0x468>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0201 	orr.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e009      	b.n	800872c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40020010 	.word	0x40020010
 800873c:	40020028 	.word	0x40020028
 8008740:	40020040 	.word	0x40020040
 8008744:	40020058 	.word	0x40020058
 8008748:	40020070 	.word	0x40020070
 800874c:	40020088 	.word	0x40020088
 8008750:	400200a0 	.word	0x400200a0
 8008754:	400200b8 	.word	0x400200b8
 8008758:	40020410 	.word	0x40020410
 800875c:	40020428 	.word	0x40020428
 8008760:	40020440 	.word	0x40020440
 8008764:	40020458 	.word	0x40020458
 8008768:	40020470 	.word	0x40020470
 800876c:	40020488 	.word	0x40020488
 8008770:	400204a0 	.word	0x400204a0
 8008774:	400204b8 	.word	0x400204b8
 8008778:	58025408 	.word	0x58025408
 800877c:	5802541c 	.word	0x5802541c
 8008780:	58025430 	.word	0x58025430
 8008784:	58025444 	.word	0x58025444
 8008788:	58025458 	.word	0x58025458
 800878c:	5802546c 	.word	0x5802546c
 8008790:	58025480 	.word	0x58025480
 8008794:	58025494 	.word	0x58025494

08008798 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80087a0:	f7fd f894 	bl	80058cc <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e2dc      	b.n	8008d6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d008      	beq.n	80087ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2280      	movs	r2, #128	; 0x80
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e2cd      	b.n	8008d6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a76      	ldr	r2, [pc, #472]	; (80089ac <HAL_DMA_Abort+0x214>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d04a      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a74      	ldr	r2, [pc, #464]	; (80089b0 <HAL_DMA_Abort+0x218>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d045      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a73      	ldr	r2, [pc, #460]	; (80089b4 <HAL_DMA_Abort+0x21c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d040      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a71      	ldr	r2, [pc, #452]	; (80089b8 <HAL_DMA_Abort+0x220>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d03b      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a70      	ldr	r2, [pc, #448]	; (80089bc <HAL_DMA_Abort+0x224>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d036      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a6e      	ldr	r2, [pc, #440]	; (80089c0 <HAL_DMA_Abort+0x228>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d031      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a6d      	ldr	r2, [pc, #436]	; (80089c4 <HAL_DMA_Abort+0x22c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d02c      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a6b      	ldr	r2, [pc, #428]	; (80089c8 <HAL_DMA_Abort+0x230>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d027      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a6a      	ldr	r2, [pc, #424]	; (80089cc <HAL_DMA_Abort+0x234>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d022      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a68      	ldr	r2, [pc, #416]	; (80089d0 <HAL_DMA_Abort+0x238>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01d      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a67      	ldr	r2, [pc, #412]	; (80089d4 <HAL_DMA_Abort+0x23c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d018      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a65      	ldr	r2, [pc, #404]	; (80089d8 <HAL_DMA_Abort+0x240>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a64      	ldr	r2, [pc, #400]	; (80089dc <HAL_DMA_Abort+0x244>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00e      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a62      	ldr	r2, [pc, #392]	; (80089e0 <HAL_DMA_Abort+0x248>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a61      	ldr	r2, [pc, #388]	; (80089e4 <HAL_DMA_Abort+0x24c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <HAL_DMA_Abort+0xd6>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a5f      	ldr	r2, [pc, #380]	; (80089e8 <HAL_DMA_Abort+0x250>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d101      	bne.n	8008872 <HAL_DMA_Abort+0xda>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <HAL_DMA_Abort+0xdc>
 8008872:	2300      	movs	r3, #0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d013      	beq.n	80088a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 021e 	bic.w	r2, r2, #30
 8008886:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008896:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e00a      	b.n	80088b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 020e 	bic.w	r2, r2, #14
 80088ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a3c      	ldr	r2, [pc, #240]	; (80089ac <HAL_DMA_Abort+0x214>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d072      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a3a      	ldr	r2, [pc, #232]	; (80089b0 <HAL_DMA_Abort+0x218>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d06d      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a39      	ldr	r2, [pc, #228]	; (80089b4 <HAL_DMA_Abort+0x21c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d068      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a37      	ldr	r2, [pc, #220]	; (80089b8 <HAL_DMA_Abort+0x220>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d063      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a36      	ldr	r2, [pc, #216]	; (80089bc <HAL_DMA_Abort+0x224>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d05e      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a34      	ldr	r2, [pc, #208]	; (80089c0 <HAL_DMA_Abort+0x228>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d059      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a33      	ldr	r2, [pc, #204]	; (80089c4 <HAL_DMA_Abort+0x22c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d054      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a31      	ldr	r2, [pc, #196]	; (80089c8 <HAL_DMA_Abort+0x230>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d04f      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a30      	ldr	r2, [pc, #192]	; (80089cc <HAL_DMA_Abort+0x234>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d04a      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a2e      	ldr	r2, [pc, #184]	; (80089d0 <HAL_DMA_Abort+0x238>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d045      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <HAL_DMA_Abort+0x23c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d040      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a2b      	ldr	r2, [pc, #172]	; (80089d8 <HAL_DMA_Abort+0x240>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d03b      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a2a      	ldr	r2, [pc, #168]	; (80089dc <HAL_DMA_Abort+0x244>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d036      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a28      	ldr	r2, [pc, #160]	; (80089e0 <HAL_DMA_Abort+0x248>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d031      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a27      	ldr	r2, [pc, #156]	; (80089e4 <HAL_DMA_Abort+0x24c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d02c      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a25      	ldr	r2, [pc, #148]	; (80089e8 <HAL_DMA_Abort+0x250>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d027      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a24      	ldr	r2, [pc, #144]	; (80089ec <HAL_DMA_Abort+0x254>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d022      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a22      	ldr	r2, [pc, #136]	; (80089f0 <HAL_DMA_Abort+0x258>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01d      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a21      	ldr	r2, [pc, #132]	; (80089f4 <HAL_DMA_Abort+0x25c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d018      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1f      	ldr	r2, [pc, #124]	; (80089f8 <HAL_DMA_Abort+0x260>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1e      	ldr	r2, [pc, #120]	; (80089fc <HAL_DMA_Abort+0x264>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a1c      	ldr	r2, [pc, #112]	; (8008a00 <HAL_DMA_Abort+0x268>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <HAL_DMA_Abort+0x26c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <HAL_DMA_Abort+0x20e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <HAL_DMA_Abort+0x270>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d132      	bne.n	8008a0c <HAL_DMA_Abort+0x274>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e031      	b.n	8008a0e <HAL_DMA_Abort+0x276>
 80089aa:	bf00      	nop
 80089ac:	40020010 	.word	0x40020010
 80089b0:	40020028 	.word	0x40020028
 80089b4:	40020040 	.word	0x40020040
 80089b8:	40020058 	.word	0x40020058
 80089bc:	40020070 	.word	0x40020070
 80089c0:	40020088 	.word	0x40020088
 80089c4:	400200a0 	.word	0x400200a0
 80089c8:	400200b8 	.word	0x400200b8
 80089cc:	40020410 	.word	0x40020410
 80089d0:	40020428 	.word	0x40020428
 80089d4:	40020440 	.word	0x40020440
 80089d8:	40020458 	.word	0x40020458
 80089dc:	40020470 	.word	0x40020470
 80089e0:	40020488 	.word	0x40020488
 80089e4:	400204a0 	.word	0x400204a0
 80089e8:	400204b8 	.word	0x400204b8
 80089ec:	58025408 	.word	0x58025408
 80089f0:	5802541c 	.word	0x5802541c
 80089f4:	58025430 	.word	0x58025430
 80089f8:	58025444 	.word	0x58025444
 80089fc:	58025458 	.word	0x58025458
 8008a00:	5802546c 	.word	0x5802546c
 8008a04:	58025480 	.word	0x58025480
 8008a08:	58025494 	.word	0x58025494
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a6d      	ldr	r2, [pc, #436]	; (8008bdc <HAL_DMA_Abort+0x444>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d04a      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a6b      	ldr	r2, [pc, #428]	; (8008be0 <HAL_DMA_Abort+0x448>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d045      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a6a      	ldr	r2, [pc, #424]	; (8008be4 <HAL_DMA_Abort+0x44c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d040      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a68      	ldr	r2, [pc, #416]	; (8008be8 <HAL_DMA_Abort+0x450>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d03b      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a67      	ldr	r2, [pc, #412]	; (8008bec <HAL_DMA_Abort+0x454>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d036      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a65      	ldr	r2, [pc, #404]	; (8008bf0 <HAL_DMA_Abort+0x458>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d031      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a64      	ldr	r2, [pc, #400]	; (8008bf4 <HAL_DMA_Abort+0x45c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d02c      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a62      	ldr	r2, [pc, #392]	; (8008bf8 <HAL_DMA_Abort+0x460>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d027      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a61      	ldr	r2, [pc, #388]	; (8008bfc <HAL_DMA_Abort+0x464>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d022      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a5f      	ldr	r2, [pc, #380]	; (8008c00 <HAL_DMA_Abort+0x468>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01d      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a5e      	ldr	r2, [pc, #376]	; (8008c04 <HAL_DMA_Abort+0x46c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d018      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a5c      	ldr	r2, [pc, #368]	; (8008c08 <HAL_DMA_Abort+0x470>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d013      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a5b      	ldr	r2, [pc, #364]	; (8008c0c <HAL_DMA_Abort+0x474>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00e      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a59      	ldr	r2, [pc, #356]	; (8008c10 <HAL_DMA_Abort+0x478>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a58      	ldr	r2, [pc, #352]	; (8008c14 <HAL_DMA_Abort+0x47c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d004      	beq.n	8008ac2 <HAL_DMA_Abort+0x32a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a56      	ldr	r2, [pc, #344]	; (8008c18 <HAL_DMA_Abort+0x480>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d108      	bne.n	8008ad4 <HAL_DMA_Abort+0x33c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	e007      	b.n	8008ae4 <HAL_DMA_Abort+0x34c>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0201 	bic.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008ae4:	e013      	b.n	8008b0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ae6:	f7fc fef1 	bl	80058cc <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	2b05      	cmp	r3, #5
 8008af2:	d90c      	bls.n	8008b0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2203      	movs	r2, #3
 8008afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e12d      	b.n	8008d6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e5      	bne.n	8008ae6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a2f      	ldr	r2, [pc, #188]	; (8008bdc <HAL_DMA_Abort+0x444>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d04a      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a2d      	ldr	r2, [pc, #180]	; (8008be0 <HAL_DMA_Abort+0x448>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d045      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a2c      	ldr	r2, [pc, #176]	; (8008be4 <HAL_DMA_Abort+0x44c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d040      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a2a      	ldr	r2, [pc, #168]	; (8008be8 <HAL_DMA_Abort+0x450>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d03b      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a29      	ldr	r2, [pc, #164]	; (8008bec <HAL_DMA_Abort+0x454>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d036      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a27      	ldr	r2, [pc, #156]	; (8008bf0 <HAL_DMA_Abort+0x458>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d031      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a26      	ldr	r2, [pc, #152]	; (8008bf4 <HAL_DMA_Abort+0x45c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d02c      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a24      	ldr	r2, [pc, #144]	; (8008bf8 <HAL_DMA_Abort+0x460>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d027      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a23      	ldr	r2, [pc, #140]	; (8008bfc <HAL_DMA_Abort+0x464>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d022      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a21      	ldr	r2, [pc, #132]	; (8008c00 <HAL_DMA_Abort+0x468>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01d      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a20      	ldr	r2, [pc, #128]	; (8008c04 <HAL_DMA_Abort+0x46c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d018      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <HAL_DMA_Abort+0x470>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <HAL_DMA_Abort+0x474>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00e      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1b      	ldr	r2, [pc, #108]	; (8008c10 <HAL_DMA_Abort+0x478>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d009      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a1a      	ldr	r2, [pc, #104]	; (8008c14 <HAL_DMA_Abort+0x47c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d004      	beq.n	8008bba <HAL_DMA_Abort+0x422>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <HAL_DMA_Abort+0x480>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d101      	bne.n	8008bbe <HAL_DMA_Abort+0x426>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <HAL_DMA_Abort+0x428>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d02b      	beq.n	8008c1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	223f      	movs	r2, #63	; 0x3f
 8008bd4:	409a      	lsls	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	609a      	str	r2, [r3, #8]
 8008bda:	e02a      	b.n	8008c32 <HAL_DMA_Abort+0x49a>
 8008bdc:	40020010 	.word	0x40020010
 8008be0:	40020028 	.word	0x40020028
 8008be4:	40020040 	.word	0x40020040
 8008be8:	40020058 	.word	0x40020058
 8008bec:	40020070 	.word	0x40020070
 8008bf0:	40020088 	.word	0x40020088
 8008bf4:	400200a0 	.word	0x400200a0
 8008bf8:	400200b8 	.word	0x400200b8
 8008bfc:	40020410 	.word	0x40020410
 8008c00:	40020428 	.word	0x40020428
 8008c04:	40020440 	.word	0x40020440
 8008c08:	40020458 	.word	0x40020458
 8008c0c:	40020470 	.word	0x40020470
 8008c10:	40020488 	.word	0x40020488
 8008c14:	400204a0 	.word	0x400204a0
 8008c18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c26:	f003 031f 	and.w	r3, r3, #31
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	409a      	lsls	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a4f      	ldr	r2, [pc, #316]	; (8008d74 <HAL_DMA_Abort+0x5dc>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d072      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a4d      	ldr	r2, [pc, #308]	; (8008d78 <HAL_DMA_Abort+0x5e0>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d06d      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a4c      	ldr	r2, [pc, #304]	; (8008d7c <HAL_DMA_Abort+0x5e4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d068      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a4a      	ldr	r2, [pc, #296]	; (8008d80 <HAL_DMA_Abort+0x5e8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d063      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a49      	ldr	r2, [pc, #292]	; (8008d84 <HAL_DMA_Abort+0x5ec>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d05e      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a47      	ldr	r2, [pc, #284]	; (8008d88 <HAL_DMA_Abort+0x5f0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d059      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a46      	ldr	r2, [pc, #280]	; (8008d8c <HAL_DMA_Abort+0x5f4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d054      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a44      	ldr	r2, [pc, #272]	; (8008d90 <HAL_DMA_Abort+0x5f8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d04f      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a43      	ldr	r2, [pc, #268]	; (8008d94 <HAL_DMA_Abort+0x5fc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d04a      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a41      	ldr	r2, [pc, #260]	; (8008d98 <HAL_DMA_Abort+0x600>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d045      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a40      	ldr	r2, [pc, #256]	; (8008d9c <HAL_DMA_Abort+0x604>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d040      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a3e      	ldr	r2, [pc, #248]	; (8008da0 <HAL_DMA_Abort+0x608>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d03b      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a3d      	ldr	r2, [pc, #244]	; (8008da4 <HAL_DMA_Abort+0x60c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d036      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a3b      	ldr	r2, [pc, #236]	; (8008da8 <HAL_DMA_Abort+0x610>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d031      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a3a      	ldr	r2, [pc, #232]	; (8008dac <HAL_DMA_Abort+0x614>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d02c      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a38      	ldr	r2, [pc, #224]	; (8008db0 <HAL_DMA_Abort+0x618>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d027      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a37      	ldr	r2, [pc, #220]	; (8008db4 <HAL_DMA_Abort+0x61c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d022      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a35      	ldr	r2, [pc, #212]	; (8008db8 <HAL_DMA_Abort+0x620>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d01d      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a34      	ldr	r2, [pc, #208]	; (8008dbc <HAL_DMA_Abort+0x624>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d018      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a32      	ldr	r2, [pc, #200]	; (8008dc0 <HAL_DMA_Abort+0x628>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a31      	ldr	r2, [pc, #196]	; (8008dc4 <HAL_DMA_Abort+0x62c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00e      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a2f      	ldr	r2, [pc, #188]	; (8008dc8 <HAL_DMA_Abort+0x630>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d009      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a2e      	ldr	r2, [pc, #184]	; (8008dcc <HAL_DMA_Abort+0x634>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d004      	beq.n	8008d22 <HAL_DMA_Abort+0x58a>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a2c      	ldr	r2, [pc, #176]	; (8008dd0 <HAL_DMA_Abort+0x638>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d101      	bne.n	8008d26 <HAL_DMA_Abort+0x58e>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e000      	b.n	8008d28 <HAL_DMA_Abort+0x590>
 8008d26:	2300      	movs	r3, #0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d015      	beq.n	8008d58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40020010 	.word	0x40020010
 8008d78:	40020028 	.word	0x40020028
 8008d7c:	40020040 	.word	0x40020040
 8008d80:	40020058 	.word	0x40020058
 8008d84:	40020070 	.word	0x40020070
 8008d88:	40020088 	.word	0x40020088
 8008d8c:	400200a0 	.word	0x400200a0
 8008d90:	400200b8 	.word	0x400200b8
 8008d94:	40020410 	.word	0x40020410
 8008d98:	40020428 	.word	0x40020428
 8008d9c:	40020440 	.word	0x40020440
 8008da0:	40020458 	.word	0x40020458
 8008da4:	40020470 	.word	0x40020470
 8008da8:	40020488 	.word	0x40020488
 8008dac:	400204a0 	.word	0x400204a0
 8008db0:	400204b8 	.word	0x400204b8
 8008db4:	58025408 	.word	0x58025408
 8008db8:	5802541c 	.word	0x5802541c
 8008dbc:	58025430 	.word	0x58025430
 8008dc0:	58025444 	.word	0x58025444
 8008dc4:	58025458 	.word	0x58025458
 8008dc8:	5802546c 	.word	0x5802546c
 8008dcc:	58025480 	.word	0x58025480
 8008dd0:	58025494 	.word	0x58025494

08008dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e237      	b.n	8009256 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d004      	beq.n	8008dfc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2280      	movs	r2, #128	; 0x80
 8008df6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e22c      	b.n	8009256 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a5c      	ldr	r2, [pc, #368]	; (8008f74 <HAL_DMA_Abort_IT+0x1a0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d04a      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a5b      	ldr	r2, [pc, #364]	; (8008f78 <HAL_DMA_Abort_IT+0x1a4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d045      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a59      	ldr	r2, [pc, #356]	; (8008f7c <HAL_DMA_Abort_IT+0x1a8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d040      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a58      	ldr	r2, [pc, #352]	; (8008f80 <HAL_DMA_Abort_IT+0x1ac>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d03b      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a56      	ldr	r2, [pc, #344]	; (8008f84 <HAL_DMA_Abort_IT+0x1b0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d036      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a55      	ldr	r2, [pc, #340]	; (8008f88 <HAL_DMA_Abort_IT+0x1b4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d031      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a53      	ldr	r2, [pc, #332]	; (8008f8c <HAL_DMA_Abort_IT+0x1b8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d02c      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a52      	ldr	r2, [pc, #328]	; (8008f90 <HAL_DMA_Abort_IT+0x1bc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d027      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a50      	ldr	r2, [pc, #320]	; (8008f94 <HAL_DMA_Abort_IT+0x1c0>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d022      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a4f      	ldr	r2, [pc, #316]	; (8008f98 <HAL_DMA_Abort_IT+0x1c4>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d01d      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a4d      	ldr	r2, [pc, #308]	; (8008f9c <HAL_DMA_Abort_IT+0x1c8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d018      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a4c      	ldr	r2, [pc, #304]	; (8008fa0 <HAL_DMA_Abort_IT+0x1cc>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a4a      	ldr	r2, [pc, #296]	; (8008fa4 <HAL_DMA_Abort_IT+0x1d0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00e      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a49      	ldr	r2, [pc, #292]	; (8008fa8 <HAL_DMA_Abort_IT+0x1d4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a47      	ldr	r2, [pc, #284]	; (8008fac <HAL_DMA_Abort_IT+0x1d8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_DMA_Abort_IT+0xc8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a46      	ldr	r2, [pc, #280]	; (8008fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d101      	bne.n	8008ea0 <HAL_DMA_Abort_IT+0xcc>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <HAL_DMA_Abort_IT+0xce>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8086 	beq.w	8008fb4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2204      	movs	r2, #4
 8008eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a2f      	ldr	r2, [pc, #188]	; (8008f74 <HAL_DMA_Abort_IT+0x1a0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d04a      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a2e      	ldr	r2, [pc, #184]	; (8008f78 <HAL_DMA_Abort_IT+0x1a4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d045      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a2c      	ldr	r2, [pc, #176]	; (8008f7c <HAL_DMA_Abort_IT+0x1a8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d040      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <HAL_DMA_Abort_IT+0x1ac>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d03b      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a29      	ldr	r2, [pc, #164]	; (8008f84 <HAL_DMA_Abort_IT+0x1b0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d036      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a28      	ldr	r2, [pc, #160]	; (8008f88 <HAL_DMA_Abort_IT+0x1b4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d031      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a26      	ldr	r2, [pc, #152]	; (8008f8c <HAL_DMA_Abort_IT+0x1b8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d02c      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a25      	ldr	r2, [pc, #148]	; (8008f90 <HAL_DMA_Abort_IT+0x1bc>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d027      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a23      	ldr	r2, [pc, #140]	; (8008f94 <HAL_DMA_Abort_IT+0x1c0>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d022      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a22      	ldr	r2, [pc, #136]	; (8008f98 <HAL_DMA_Abort_IT+0x1c4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d01d      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a20      	ldr	r2, [pc, #128]	; (8008f9c <HAL_DMA_Abort_IT+0x1c8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d018      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1f      	ldr	r2, [pc, #124]	; (8008fa0 <HAL_DMA_Abort_IT+0x1cc>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1d      	ldr	r2, [pc, #116]	; (8008fa4 <HAL_DMA_Abort_IT+0x1d0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00e      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1c      	ldr	r2, [pc, #112]	; (8008fa8 <HAL_DMA_Abort_IT+0x1d4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1a      	ldr	r2, [pc, #104]	; (8008fac <HAL_DMA_Abort_IT+0x1d8>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <HAL_DMA_Abort_IT+0x17c>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a19      	ldr	r2, [pc, #100]	; (8008fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d108      	bne.n	8008f62 <HAL_DMA_Abort_IT+0x18e>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0201 	bic.w	r2, r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e178      	b.n	8009254 <HAL_DMA_Abort_IT+0x480>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0201 	bic.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	e16f      	b.n	8009254 <HAL_DMA_Abort_IT+0x480>
 8008f74:	40020010 	.word	0x40020010
 8008f78:	40020028 	.word	0x40020028
 8008f7c:	40020040 	.word	0x40020040
 8008f80:	40020058 	.word	0x40020058
 8008f84:	40020070 	.word	0x40020070
 8008f88:	40020088 	.word	0x40020088
 8008f8c:	400200a0 	.word	0x400200a0
 8008f90:	400200b8 	.word	0x400200b8
 8008f94:	40020410 	.word	0x40020410
 8008f98:	40020428 	.word	0x40020428
 8008f9c:	40020440 	.word	0x40020440
 8008fa0:	40020458 	.word	0x40020458
 8008fa4:	40020470 	.word	0x40020470
 8008fa8:	40020488 	.word	0x40020488
 8008fac:	400204a0 	.word	0x400204a0
 8008fb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 020e 	bic.w	r2, r2, #14
 8008fc2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a6c      	ldr	r2, [pc, #432]	; (800917c <HAL_DMA_Abort_IT+0x3a8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d04a      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a6b      	ldr	r2, [pc, #428]	; (8009180 <HAL_DMA_Abort_IT+0x3ac>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d045      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a69      	ldr	r2, [pc, #420]	; (8009184 <HAL_DMA_Abort_IT+0x3b0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d040      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a68      	ldr	r2, [pc, #416]	; (8009188 <HAL_DMA_Abort_IT+0x3b4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d03b      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a66      	ldr	r2, [pc, #408]	; (800918c <HAL_DMA_Abort_IT+0x3b8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d036      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a65      	ldr	r2, [pc, #404]	; (8009190 <HAL_DMA_Abort_IT+0x3bc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d031      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a63      	ldr	r2, [pc, #396]	; (8009194 <HAL_DMA_Abort_IT+0x3c0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d02c      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a62      	ldr	r2, [pc, #392]	; (8009198 <HAL_DMA_Abort_IT+0x3c4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d027      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a60      	ldr	r2, [pc, #384]	; (800919c <HAL_DMA_Abort_IT+0x3c8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d022      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a5f      	ldr	r2, [pc, #380]	; (80091a0 <HAL_DMA_Abort_IT+0x3cc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d01d      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a5d      	ldr	r2, [pc, #372]	; (80091a4 <HAL_DMA_Abort_IT+0x3d0>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d018      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a5c      	ldr	r2, [pc, #368]	; (80091a8 <HAL_DMA_Abort_IT+0x3d4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d013      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a5a      	ldr	r2, [pc, #360]	; (80091ac <HAL_DMA_Abort_IT+0x3d8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00e      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a59      	ldr	r2, [pc, #356]	; (80091b0 <HAL_DMA_Abort_IT+0x3dc>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d009      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a57      	ldr	r2, [pc, #348]	; (80091b4 <HAL_DMA_Abort_IT+0x3e0>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d004      	beq.n	8009064 <HAL_DMA_Abort_IT+0x290>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a56      	ldr	r2, [pc, #344]	; (80091b8 <HAL_DMA_Abort_IT+0x3e4>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d108      	bne.n	8009076 <HAL_DMA_Abort_IT+0x2a2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0201 	bic.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e007      	b.n	8009086 <HAL_DMA_Abort_IT+0x2b2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0201 	bic.w	r2, r2, #1
 8009084:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a3c      	ldr	r2, [pc, #240]	; (800917c <HAL_DMA_Abort_IT+0x3a8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d072      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a3a      	ldr	r2, [pc, #232]	; (8009180 <HAL_DMA_Abort_IT+0x3ac>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d06d      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a39      	ldr	r2, [pc, #228]	; (8009184 <HAL_DMA_Abort_IT+0x3b0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d068      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a37      	ldr	r2, [pc, #220]	; (8009188 <HAL_DMA_Abort_IT+0x3b4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d063      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a36      	ldr	r2, [pc, #216]	; (800918c <HAL_DMA_Abort_IT+0x3b8>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d05e      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a34      	ldr	r2, [pc, #208]	; (8009190 <HAL_DMA_Abort_IT+0x3bc>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d059      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a33      	ldr	r2, [pc, #204]	; (8009194 <HAL_DMA_Abort_IT+0x3c0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d054      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a31      	ldr	r2, [pc, #196]	; (8009198 <HAL_DMA_Abort_IT+0x3c4>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d04f      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a30      	ldr	r2, [pc, #192]	; (800919c <HAL_DMA_Abort_IT+0x3c8>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d04a      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a2e      	ldr	r2, [pc, #184]	; (80091a0 <HAL_DMA_Abort_IT+0x3cc>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d045      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a2d      	ldr	r2, [pc, #180]	; (80091a4 <HAL_DMA_Abort_IT+0x3d0>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d040      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a2b      	ldr	r2, [pc, #172]	; (80091a8 <HAL_DMA_Abort_IT+0x3d4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d03b      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a2a      	ldr	r2, [pc, #168]	; (80091ac <HAL_DMA_Abort_IT+0x3d8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d036      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a28      	ldr	r2, [pc, #160]	; (80091b0 <HAL_DMA_Abort_IT+0x3dc>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d031      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a27      	ldr	r2, [pc, #156]	; (80091b4 <HAL_DMA_Abort_IT+0x3e0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d02c      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a25      	ldr	r2, [pc, #148]	; (80091b8 <HAL_DMA_Abort_IT+0x3e4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d027      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a24      	ldr	r2, [pc, #144]	; (80091bc <HAL_DMA_Abort_IT+0x3e8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d022      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a22      	ldr	r2, [pc, #136]	; (80091c0 <HAL_DMA_Abort_IT+0x3ec>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d01d      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a21      	ldr	r2, [pc, #132]	; (80091c4 <HAL_DMA_Abort_IT+0x3f0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d018      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <HAL_DMA_Abort_IT+0x3f4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d013      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a1e      	ldr	r2, [pc, #120]	; (80091cc <HAL_DMA_Abort_IT+0x3f8>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00e      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a1c      	ldr	r2, [pc, #112]	; (80091d0 <HAL_DMA_Abort_IT+0x3fc>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d009      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1b      	ldr	r2, [pc, #108]	; (80091d4 <HAL_DMA_Abort_IT+0x400>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d004      	beq.n	8009176 <HAL_DMA_Abort_IT+0x3a2>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <HAL_DMA_Abort_IT+0x404>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d132      	bne.n	80091dc <HAL_DMA_Abort_IT+0x408>
 8009176:	2301      	movs	r3, #1
 8009178:	e031      	b.n	80091de <HAL_DMA_Abort_IT+0x40a>
 800917a:	bf00      	nop
 800917c:	40020010 	.word	0x40020010
 8009180:	40020028 	.word	0x40020028
 8009184:	40020040 	.word	0x40020040
 8009188:	40020058 	.word	0x40020058
 800918c:	40020070 	.word	0x40020070
 8009190:	40020088 	.word	0x40020088
 8009194:	400200a0 	.word	0x400200a0
 8009198:	400200b8 	.word	0x400200b8
 800919c:	40020410 	.word	0x40020410
 80091a0:	40020428 	.word	0x40020428
 80091a4:	40020440 	.word	0x40020440
 80091a8:	40020458 	.word	0x40020458
 80091ac:	40020470 	.word	0x40020470
 80091b0:	40020488 	.word	0x40020488
 80091b4:	400204a0 	.word	0x400204a0
 80091b8:	400204b8 	.word	0x400204b8
 80091bc:	58025408 	.word	0x58025408
 80091c0:	5802541c 	.word	0x5802541c
 80091c4:	58025430 	.word	0x58025430
 80091c8:	58025444 	.word	0x58025444
 80091cc:	58025458 	.word	0x58025458
 80091d0:	5802546c 	.word	0x5802546c
 80091d4:	58025480 	.word	0x58025480
 80091d8:	58025494 	.word	0x58025494
 80091dc:	2300      	movs	r3, #0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d028      	beq.n	8009234 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fc:	f003 031f 	and.w	r3, r3, #31
 8009200:	2201      	movs	r2, #1
 8009202:	409a      	lsls	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009210:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00c      	beq.n	8009234 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009228:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009232:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop

08009260 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800926c:	4b67      	ldr	r3, [pc, #412]	; (800940c <HAL_DMA_IRQHandler+0x1ac>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a67      	ldr	r2, [pc, #412]	; (8009410 <HAL_DMA_IRQHandler+0x1b0>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	0a9b      	lsrs	r3, r3, #10
 8009278:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009284:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a5f      	ldr	r2, [pc, #380]	; (8009414 <HAL_DMA_IRQHandler+0x1b4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d04a      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a5d      	ldr	r2, [pc, #372]	; (8009418 <HAL_DMA_IRQHandler+0x1b8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d045      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a5c      	ldr	r2, [pc, #368]	; (800941c <HAL_DMA_IRQHandler+0x1bc>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d040      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a5a      	ldr	r2, [pc, #360]	; (8009420 <HAL_DMA_IRQHandler+0x1c0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d03b      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a59      	ldr	r2, [pc, #356]	; (8009424 <HAL_DMA_IRQHandler+0x1c4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d036      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a57      	ldr	r2, [pc, #348]	; (8009428 <HAL_DMA_IRQHandler+0x1c8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d031      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a56      	ldr	r2, [pc, #344]	; (800942c <HAL_DMA_IRQHandler+0x1cc>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d02c      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a54      	ldr	r2, [pc, #336]	; (8009430 <HAL_DMA_IRQHandler+0x1d0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d027      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a53      	ldr	r2, [pc, #332]	; (8009434 <HAL_DMA_IRQHandler+0x1d4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d022      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a51      	ldr	r2, [pc, #324]	; (8009438 <HAL_DMA_IRQHandler+0x1d8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01d      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a50      	ldr	r2, [pc, #320]	; (800943c <HAL_DMA_IRQHandler+0x1dc>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d018      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a4e      	ldr	r2, [pc, #312]	; (8009440 <HAL_DMA_IRQHandler+0x1e0>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d013      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a4d      	ldr	r2, [pc, #308]	; (8009444 <HAL_DMA_IRQHandler+0x1e4>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00e      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a4b      	ldr	r2, [pc, #300]	; (8009448 <HAL_DMA_IRQHandler+0x1e8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a4a      	ldr	r2, [pc, #296]	; (800944c <HAL_DMA_IRQHandler+0x1ec>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_DMA_IRQHandler+0xd2>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a48      	ldr	r2, [pc, #288]	; (8009450 <HAL_DMA_IRQHandler+0x1f0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d101      	bne.n	8009336 <HAL_DMA_IRQHandler+0xd6>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <HAL_DMA_IRQHandler+0xd8>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 842b 	beq.w	8009b94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	2208      	movs	r2, #8
 8009348:	409a      	lsls	r2, r3
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	4013      	ands	r3, r2
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 80a2 	beq.w	8009498 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a2e      	ldr	r2, [pc, #184]	; (8009414 <HAL_DMA_IRQHandler+0x1b4>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d04a      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a2d      	ldr	r2, [pc, #180]	; (8009418 <HAL_DMA_IRQHandler+0x1b8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d045      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a2b      	ldr	r2, [pc, #172]	; (800941c <HAL_DMA_IRQHandler+0x1bc>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d040      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a2a      	ldr	r2, [pc, #168]	; (8009420 <HAL_DMA_IRQHandler+0x1c0>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d03b      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a28      	ldr	r2, [pc, #160]	; (8009424 <HAL_DMA_IRQHandler+0x1c4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d036      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a27      	ldr	r2, [pc, #156]	; (8009428 <HAL_DMA_IRQHandler+0x1c8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d031      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a25      	ldr	r2, [pc, #148]	; (800942c <HAL_DMA_IRQHandler+0x1cc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d02c      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a24      	ldr	r2, [pc, #144]	; (8009430 <HAL_DMA_IRQHandler+0x1d0>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d027      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <HAL_DMA_IRQHandler+0x1d4>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d022      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a21      	ldr	r2, [pc, #132]	; (8009438 <HAL_DMA_IRQHandler+0x1d8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d01d      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1f      	ldr	r2, [pc, #124]	; (800943c <HAL_DMA_IRQHandler+0x1dc>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d018      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a1e      	ldr	r2, [pc, #120]	; (8009440 <HAL_DMA_IRQHandler+0x1e0>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d013      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1c      	ldr	r2, [pc, #112]	; (8009444 <HAL_DMA_IRQHandler+0x1e4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00e      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a1b      	ldr	r2, [pc, #108]	; (8009448 <HAL_DMA_IRQHandler+0x1e8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d009      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a19      	ldr	r2, [pc, #100]	; (800944c <HAL_DMA_IRQHandler+0x1ec>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d004      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x194>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a18      	ldr	r2, [pc, #96]	; (8009450 <HAL_DMA_IRQHandler+0x1f0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d12f      	bne.n	8009454 <HAL_DMA_IRQHandler+0x1f4>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bf14      	ite	ne
 8009402:	2301      	movne	r3, #1
 8009404:	2300      	moveq	r3, #0
 8009406:	b2db      	uxtb	r3, r3
 8009408:	e02e      	b.n	8009468 <HAL_DMA_IRQHandler+0x208>
 800940a:	bf00      	nop
 800940c:	24000090 	.word	0x24000090
 8009410:	1b4e81b5 	.word	0x1b4e81b5
 8009414:	40020010 	.word	0x40020010
 8009418:	40020028 	.word	0x40020028
 800941c:	40020040 	.word	0x40020040
 8009420:	40020058 	.word	0x40020058
 8009424:	40020070 	.word	0x40020070
 8009428:	40020088 	.word	0x40020088
 800942c:	400200a0 	.word	0x400200a0
 8009430:	400200b8 	.word	0x400200b8
 8009434:	40020410 	.word	0x40020410
 8009438:	40020428 	.word	0x40020428
 800943c:	40020440 	.word	0x40020440
 8009440:	40020458 	.word	0x40020458
 8009444:	40020470 	.word	0x40020470
 8009448:	40020488 	.word	0x40020488
 800944c:	400204a0 	.word	0x400204a0
 8009450:	400204b8 	.word	0x400204b8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	bf14      	ite	ne
 8009462:	2301      	movne	r3, #1
 8009464:	2300      	moveq	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d015      	beq.n	8009498 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0204 	bic.w	r2, r2, #4
 800947a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009480:	f003 031f 	and.w	r3, r3, #31
 8009484:	2208      	movs	r2, #8
 8009486:	409a      	lsls	r2, r3
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009490:	f043 0201 	orr.w	r2, r3, #1
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949c:	f003 031f 	and.w	r3, r3, #31
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	fa22 f303 	lsr.w	r3, r2, r3
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d06e      	beq.n	800958c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a69      	ldr	r2, [pc, #420]	; (8009658 <HAL_DMA_IRQHandler+0x3f8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d04a      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a67      	ldr	r2, [pc, #412]	; (800965c <HAL_DMA_IRQHandler+0x3fc>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d045      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a66      	ldr	r2, [pc, #408]	; (8009660 <HAL_DMA_IRQHandler+0x400>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d040      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a64      	ldr	r2, [pc, #400]	; (8009664 <HAL_DMA_IRQHandler+0x404>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d03b      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a63      	ldr	r2, [pc, #396]	; (8009668 <HAL_DMA_IRQHandler+0x408>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d036      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a61      	ldr	r2, [pc, #388]	; (800966c <HAL_DMA_IRQHandler+0x40c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d031      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a60      	ldr	r2, [pc, #384]	; (8009670 <HAL_DMA_IRQHandler+0x410>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d02c      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a5e      	ldr	r2, [pc, #376]	; (8009674 <HAL_DMA_IRQHandler+0x414>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d027      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a5d      	ldr	r2, [pc, #372]	; (8009678 <HAL_DMA_IRQHandler+0x418>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d022      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a5b      	ldr	r2, [pc, #364]	; (800967c <HAL_DMA_IRQHandler+0x41c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01d      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a5a      	ldr	r2, [pc, #360]	; (8009680 <HAL_DMA_IRQHandler+0x420>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d018      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a58      	ldr	r2, [pc, #352]	; (8009684 <HAL_DMA_IRQHandler+0x424>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d013      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a57      	ldr	r2, [pc, #348]	; (8009688 <HAL_DMA_IRQHandler+0x428>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00e      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a55      	ldr	r2, [pc, #340]	; (800968c <HAL_DMA_IRQHandler+0x42c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d009      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a54      	ldr	r2, [pc, #336]	; (8009690 <HAL_DMA_IRQHandler+0x430>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d004      	beq.n	800954e <HAL_DMA_IRQHandler+0x2ee>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a52      	ldr	r2, [pc, #328]	; (8009694 <HAL_DMA_IRQHandler+0x434>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d10a      	bne.n	8009564 <HAL_DMA_IRQHandler+0x304>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009558:	2b00      	cmp	r3, #0
 800955a:	bf14      	ite	ne
 800955c:	2301      	movne	r3, #1
 800955e:	2300      	moveq	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	e003      	b.n	800956c <HAL_DMA_IRQHandler+0x30c>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00d      	beq.n	800958c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009574:	f003 031f 	and.w	r3, r3, #31
 8009578:	2201      	movs	r2, #1
 800957a:	409a      	lsls	r2, r3
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009584:	f043 0202 	orr.w	r2, r3, #2
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	2204      	movs	r2, #4
 8009596:	409a      	lsls	r2, r3
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	4013      	ands	r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 808f 	beq.w	80096c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a2c      	ldr	r2, [pc, #176]	; (8009658 <HAL_DMA_IRQHandler+0x3f8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d04a      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a2a      	ldr	r2, [pc, #168]	; (800965c <HAL_DMA_IRQHandler+0x3fc>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d045      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a29      	ldr	r2, [pc, #164]	; (8009660 <HAL_DMA_IRQHandler+0x400>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d040      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a27      	ldr	r2, [pc, #156]	; (8009664 <HAL_DMA_IRQHandler+0x404>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d03b      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a26      	ldr	r2, [pc, #152]	; (8009668 <HAL_DMA_IRQHandler+0x408>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d036      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a24      	ldr	r2, [pc, #144]	; (800966c <HAL_DMA_IRQHandler+0x40c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d031      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a23      	ldr	r2, [pc, #140]	; (8009670 <HAL_DMA_IRQHandler+0x410>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d02c      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a21      	ldr	r2, [pc, #132]	; (8009674 <HAL_DMA_IRQHandler+0x414>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d027      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a20      	ldr	r2, [pc, #128]	; (8009678 <HAL_DMA_IRQHandler+0x418>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d022      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a1e      	ldr	r2, [pc, #120]	; (800967c <HAL_DMA_IRQHandler+0x41c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d01d      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a1d      	ldr	r2, [pc, #116]	; (8009680 <HAL_DMA_IRQHandler+0x420>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d018      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a1b      	ldr	r2, [pc, #108]	; (8009684 <HAL_DMA_IRQHandler+0x424>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d013      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a1a      	ldr	r2, [pc, #104]	; (8009688 <HAL_DMA_IRQHandler+0x428>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00e      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a18      	ldr	r2, [pc, #96]	; (800968c <HAL_DMA_IRQHandler+0x42c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d009      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a17      	ldr	r2, [pc, #92]	; (8009690 <HAL_DMA_IRQHandler+0x430>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d004      	beq.n	8009642 <HAL_DMA_IRQHandler+0x3e2>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <HAL_DMA_IRQHandler+0x434>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d12a      	bne.n	8009698 <HAL_DMA_IRQHandler+0x438>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	bf14      	ite	ne
 8009650:	2301      	movne	r3, #1
 8009652:	2300      	moveq	r3, #0
 8009654:	b2db      	uxtb	r3, r3
 8009656:	e023      	b.n	80096a0 <HAL_DMA_IRQHandler+0x440>
 8009658:	40020010 	.word	0x40020010
 800965c:	40020028 	.word	0x40020028
 8009660:	40020040 	.word	0x40020040
 8009664:	40020058 	.word	0x40020058
 8009668:	40020070 	.word	0x40020070
 800966c:	40020088 	.word	0x40020088
 8009670:	400200a0 	.word	0x400200a0
 8009674:	400200b8 	.word	0x400200b8
 8009678:	40020410 	.word	0x40020410
 800967c:	40020428 	.word	0x40020428
 8009680:	40020440 	.word	0x40020440
 8009684:	40020458 	.word	0x40020458
 8009688:	40020470 	.word	0x40020470
 800968c:	40020488 	.word	0x40020488
 8009690:	400204a0 	.word	0x400204a0
 8009694:	400204b8 	.word	0x400204b8
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2300      	movs	r3, #0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	2204      	movs	r2, #4
 80096ae:	409a      	lsls	r2, r3
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b8:	f043 0204 	orr.w	r2, r3, #4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2210      	movs	r2, #16
 80096ca:	409a      	lsls	r2, r3
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 80a6 	beq.w	8009822 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a85      	ldr	r2, [pc, #532]	; (80098f0 <HAL_DMA_IRQHandler+0x690>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d04a      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a83      	ldr	r2, [pc, #524]	; (80098f4 <HAL_DMA_IRQHandler+0x694>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d045      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a82      	ldr	r2, [pc, #520]	; (80098f8 <HAL_DMA_IRQHandler+0x698>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d040      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a80      	ldr	r2, [pc, #512]	; (80098fc <HAL_DMA_IRQHandler+0x69c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d03b      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a7f      	ldr	r2, [pc, #508]	; (8009900 <HAL_DMA_IRQHandler+0x6a0>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d036      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a7d      	ldr	r2, [pc, #500]	; (8009904 <HAL_DMA_IRQHandler+0x6a4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d031      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a7c      	ldr	r2, [pc, #496]	; (8009908 <HAL_DMA_IRQHandler+0x6a8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d02c      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a7a      	ldr	r2, [pc, #488]	; (800990c <HAL_DMA_IRQHandler+0x6ac>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d027      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a79      	ldr	r2, [pc, #484]	; (8009910 <HAL_DMA_IRQHandler+0x6b0>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d022      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a77      	ldr	r2, [pc, #476]	; (8009914 <HAL_DMA_IRQHandler+0x6b4>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01d      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a76      	ldr	r2, [pc, #472]	; (8009918 <HAL_DMA_IRQHandler+0x6b8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d018      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a74      	ldr	r2, [pc, #464]	; (800991c <HAL_DMA_IRQHandler+0x6bc>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d013      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a73      	ldr	r2, [pc, #460]	; (8009920 <HAL_DMA_IRQHandler+0x6c0>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d00e      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a71      	ldr	r2, [pc, #452]	; (8009924 <HAL_DMA_IRQHandler+0x6c4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d009      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a70      	ldr	r2, [pc, #448]	; (8009928 <HAL_DMA_IRQHandler+0x6c8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d004      	beq.n	8009776 <HAL_DMA_IRQHandler+0x516>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a6e      	ldr	r2, [pc, #440]	; (800992c <HAL_DMA_IRQHandler+0x6cc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d10a      	bne.n	800978c <HAL_DMA_IRQHandler+0x52c>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	bf14      	ite	ne
 8009784:	2301      	movne	r3, #1
 8009786:	2300      	moveq	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	e009      	b.n	80097a0 <HAL_DMA_IRQHandler+0x540>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	bf14      	ite	ne
 800979a:	2301      	movne	r3, #1
 800979c:	2300      	moveq	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d03e      	beq.n	8009822 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	2210      	movs	r2, #16
 80097ae:	409a      	lsls	r2, r3
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d018      	beq.n	80097f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d108      	bne.n	80097e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d024      	beq.n	8009822 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	e01f      	b.n	8009822 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01b      	beq.n	8009822 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
 80097f2:	e016      	b.n	8009822 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0208 	bic.w	r2, r2, #8
 8009810:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009826:	f003 031f 	and.w	r3, r3, #31
 800982a:	2220      	movs	r2, #32
 800982c:	409a      	lsls	r2, r3
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	4013      	ands	r3, r2
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 8110 	beq.w	8009a58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <HAL_DMA_IRQHandler+0x690>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d04a      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a2b      	ldr	r2, [pc, #172]	; (80098f4 <HAL_DMA_IRQHandler+0x694>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d045      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a29      	ldr	r2, [pc, #164]	; (80098f8 <HAL_DMA_IRQHandler+0x698>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d040      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a28      	ldr	r2, [pc, #160]	; (80098fc <HAL_DMA_IRQHandler+0x69c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d03b      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a26      	ldr	r2, [pc, #152]	; (8009900 <HAL_DMA_IRQHandler+0x6a0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d036      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a25      	ldr	r2, [pc, #148]	; (8009904 <HAL_DMA_IRQHandler+0x6a4>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d031      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a23      	ldr	r2, [pc, #140]	; (8009908 <HAL_DMA_IRQHandler+0x6a8>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d02c      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a22      	ldr	r2, [pc, #136]	; (800990c <HAL_DMA_IRQHandler+0x6ac>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d027      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a20      	ldr	r2, [pc, #128]	; (8009910 <HAL_DMA_IRQHandler+0x6b0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d022      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a1f      	ldr	r2, [pc, #124]	; (8009914 <HAL_DMA_IRQHandler+0x6b4>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d01d      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <HAL_DMA_IRQHandler+0x6b8>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d018      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a1c      	ldr	r2, [pc, #112]	; (800991c <HAL_DMA_IRQHandler+0x6bc>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d013      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <HAL_DMA_IRQHandler+0x6c0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00e      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a19      	ldr	r2, [pc, #100]	; (8009924 <HAL_DMA_IRQHandler+0x6c4>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d009      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a17      	ldr	r2, [pc, #92]	; (8009928 <HAL_DMA_IRQHandler+0x6c8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x678>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a16      	ldr	r2, [pc, #88]	; (800992c <HAL_DMA_IRQHandler+0x6cc>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d12b      	bne.n	8009930 <HAL_DMA_IRQHandler+0x6d0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bf14      	ite	ne
 80098e6:	2301      	movne	r3, #1
 80098e8:	2300      	moveq	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	e02a      	b.n	8009944 <HAL_DMA_IRQHandler+0x6e4>
 80098ee:	bf00      	nop
 80098f0:	40020010 	.word	0x40020010
 80098f4:	40020028 	.word	0x40020028
 80098f8:	40020040 	.word	0x40020040
 80098fc:	40020058 	.word	0x40020058
 8009900:	40020070 	.word	0x40020070
 8009904:	40020088 	.word	0x40020088
 8009908:	400200a0 	.word	0x400200a0
 800990c:	400200b8 	.word	0x400200b8
 8009910:	40020410 	.word	0x40020410
 8009914:	40020428 	.word	0x40020428
 8009918:	40020440 	.word	0x40020440
 800991c:	40020458 	.word	0x40020458
 8009920:	40020470 	.word	0x40020470
 8009924:	40020488 	.word	0x40020488
 8009928:	400204a0 	.word	0x400204a0
 800992c:	400204b8 	.word	0x400204b8
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	bf14      	ite	ne
 800993e:	2301      	movne	r3, #1
 8009940:	2300      	moveq	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8087 	beq.w	8009a58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800994e:	f003 031f 	and.w	r3, r3, #31
 8009952:	2220      	movs	r2, #32
 8009954:	409a      	lsls	r2, r3
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b04      	cmp	r3, #4
 8009964:	d139      	bne.n	80099da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0216 	bic.w	r2, r2, #22
 8009974:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695a      	ldr	r2, [r3, #20]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009984:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <HAL_DMA_IRQHandler+0x736>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009992:	2b00      	cmp	r3, #0
 8009994:	d007      	beq.n	80099a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 0208 	bic.w	r2, r2, #8
 80099a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099aa:	f003 031f 	and.w	r3, r3, #31
 80099ae:	223f      	movs	r2, #63	; 0x3f
 80099b0:	409a      	lsls	r2, r3
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 834a 	beq.w	800a064 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	4798      	blx	r3
          }
          return;
 80099d8:	e344      	b.n	800a064 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d018      	beq.n	8009a1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d108      	bne.n	8009a08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d02c      	beq.n	8009a58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	4798      	blx	r3
 8009a06:	e027      	b.n	8009a58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d023      	beq.n	8009a58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	4798      	blx	r3
 8009a18:	e01e      	b.n	8009a58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10f      	bne.n	8009a48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0210 	bic.w	r2, r2, #16
 8009a36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 8306 	beq.w	800a06e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 8088 	beq.w	8009b80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2204      	movs	r2, #4
 8009a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a7a      	ldr	r2, [pc, #488]	; (8009c68 <HAL_DMA_IRQHandler+0xa08>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d04a      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a79      	ldr	r2, [pc, #484]	; (8009c6c <HAL_DMA_IRQHandler+0xa0c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d045      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a77      	ldr	r2, [pc, #476]	; (8009c70 <HAL_DMA_IRQHandler+0xa10>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d040      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a76      	ldr	r2, [pc, #472]	; (8009c74 <HAL_DMA_IRQHandler+0xa14>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d03b      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a74      	ldr	r2, [pc, #464]	; (8009c78 <HAL_DMA_IRQHandler+0xa18>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d036      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a73      	ldr	r2, [pc, #460]	; (8009c7c <HAL_DMA_IRQHandler+0xa1c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d031      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a71      	ldr	r2, [pc, #452]	; (8009c80 <HAL_DMA_IRQHandler+0xa20>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d02c      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a70      	ldr	r2, [pc, #448]	; (8009c84 <HAL_DMA_IRQHandler+0xa24>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d027      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a6e      	ldr	r2, [pc, #440]	; (8009c88 <HAL_DMA_IRQHandler+0xa28>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d022      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a6d      	ldr	r2, [pc, #436]	; (8009c8c <HAL_DMA_IRQHandler+0xa2c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d01d      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a6b      	ldr	r2, [pc, #428]	; (8009c90 <HAL_DMA_IRQHandler+0xa30>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d018      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a6a      	ldr	r2, [pc, #424]	; (8009c94 <HAL_DMA_IRQHandler+0xa34>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d013      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a68      	ldr	r2, [pc, #416]	; (8009c98 <HAL_DMA_IRQHandler+0xa38>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00e      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a67      	ldr	r2, [pc, #412]	; (8009c9c <HAL_DMA_IRQHandler+0xa3c>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d009      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a65      	ldr	r2, [pc, #404]	; (8009ca0 <HAL_DMA_IRQHandler+0xa40>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d004      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x8b8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a64      	ldr	r2, [pc, #400]	; (8009ca4 <HAL_DMA_IRQHandler+0xa44>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d108      	bne.n	8009b2a <HAL_DMA_IRQHandler+0x8ca>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 0201 	bic.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e007      	b.n	8009b3a <HAL_DMA_IRQHandler+0x8da>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0201 	bic.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d307      	bcc.n	8009b56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f2      	bne.n	8009b3a <HAL_DMA_IRQHandler+0x8da>
 8009b54:	e000      	b.n	8009b58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009b56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d004      	beq.n	8009b70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2203      	movs	r2, #3
 8009b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009b6e:	e003      	b.n	8009b78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 8272 	beq.w	800a06e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	4798      	blx	r3
 8009b92:	e26c      	b.n	800a06e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a43      	ldr	r2, [pc, #268]	; (8009ca8 <HAL_DMA_IRQHandler+0xa48>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d022      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a42      	ldr	r2, [pc, #264]	; (8009cac <HAL_DMA_IRQHandler+0xa4c>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d01d      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a40      	ldr	r2, [pc, #256]	; (8009cb0 <HAL_DMA_IRQHandler+0xa50>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d018      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a3f      	ldr	r2, [pc, #252]	; (8009cb4 <HAL_DMA_IRQHandler+0xa54>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d013      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a3d      	ldr	r2, [pc, #244]	; (8009cb8 <HAL_DMA_IRQHandler+0xa58>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d00e      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a3c      	ldr	r2, [pc, #240]	; (8009cbc <HAL_DMA_IRQHandler+0xa5c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d009      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a3a      	ldr	r2, [pc, #232]	; (8009cc0 <HAL_DMA_IRQHandler+0xa60>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d004      	beq.n	8009be4 <HAL_DMA_IRQHandler+0x984>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a39      	ldr	r2, [pc, #228]	; (8009cc4 <HAL_DMA_IRQHandler+0xa64>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d101      	bne.n	8009be8 <HAL_DMA_IRQHandler+0x988>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e000      	b.n	8009bea <HAL_DMA_IRQHandler+0x98a>
 8009be8:	2300      	movs	r3, #0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 823f 	beq.w	800a06e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	2204      	movs	r2, #4
 8009c02:	409a      	lsls	r2, r3
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80cd 	beq.w	8009da8 <HAL_DMA_IRQHandler+0xb48>
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 80c7 	beq.w	8009da8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1e:	f003 031f 	and.w	r3, r3, #31
 8009c22:	2204      	movs	r2, #4
 8009c24:	409a      	lsls	r2, r3
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d049      	beq.n	8009cc8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 8210 	beq.w	800a068 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c50:	e20a      	b.n	800a068 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8206 	beq.w	800a068 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c64:	e200      	b.n	800a068 <HAL_DMA_IRQHandler+0xe08>
 8009c66:	bf00      	nop
 8009c68:	40020010 	.word	0x40020010
 8009c6c:	40020028 	.word	0x40020028
 8009c70:	40020040 	.word	0x40020040
 8009c74:	40020058 	.word	0x40020058
 8009c78:	40020070 	.word	0x40020070
 8009c7c:	40020088 	.word	0x40020088
 8009c80:	400200a0 	.word	0x400200a0
 8009c84:	400200b8 	.word	0x400200b8
 8009c88:	40020410 	.word	0x40020410
 8009c8c:	40020428 	.word	0x40020428
 8009c90:	40020440 	.word	0x40020440
 8009c94:	40020458 	.word	0x40020458
 8009c98:	40020470 	.word	0x40020470
 8009c9c:	40020488 	.word	0x40020488
 8009ca0:	400204a0 	.word	0x400204a0
 8009ca4:	400204b8 	.word	0x400204b8
 8009ca8:	58025408 	.word	0x58025408
 8009cac:	5802541c 	.word	0x5802541c
 8009cb0:	58025430 	.word	0x58025430
 8009cb4:	58025444 	.word	0x58025444
 8009cb8:	58025458 	.word	0x58025458
 8009cbc:	5802546c 	.word	0x5802546c
 8009cc0:	58025480 	.word	0x58025480
 8009cc4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d160      	bne.n	8009d94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a7f      	ldr	r2, [pc, #508]	; (8009ed4 <HAL_DMA_IRQHandler+0xc74>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d04a      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a7d      	ldr	r2, [pc, #500]	; (8009ed8 <HAL_DMA_IRQHandler+0xc78>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d045      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a7c      	ldr	r2, [pc, #496]	; (8009edc <HAL_DMA_IRQHandler+0xc7c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d040      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a7a      	ldr	r2, [pc, #488]	; (8009ee0 <HAL_DMA_IRQHandler+0xc80>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d03b      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a79      	ldr	r2, [pc, #484]	; (8009ee4 <HAL_DMA_IRQHandler+0xc84>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d036      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a77      	ldr	r2, [pc, #476]	; (8009ee8 <HAL_DMA_IRQHandler+0xc88>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d031      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a76      	ldr	r2, [pc, #472]	; (8009eec <HAL_DMA_IRQHandler+0xc8c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d02c      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a74      	ldr	r2, [pc, #464]	; (8009ef0 <HAL_DMA_IRQHandler+0xc90>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d027      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a73      	ldr	r2, [pc, #460]	; (8009ef4 <HAL_DMA_IRQHandler+0xc94>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d022      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a71      	ldr	r2, [pc, #452]	; (8009ef8 <HAL_DMA_IRQHandler+0xc98>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01d      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a70      	ldr	r2, [pc, #448]	; (8009efc <HAL_DMA_IRQHandler+0xc9c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d018      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a6e      	ldr	r2, [pc, #440]	; (8009f00 <HAL_DMA_IRQHandler+0xca0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d013      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a6d      	ldr	r2, [pc, #436]	; (8009f04 <HAL_DMA_IRQHandler+0xca4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00e      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a6b      	ldr	r2, [pc, #428]	; (8009f08 <HAL_DMA_IRQHandler+0xca8>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d009      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a6a      	ldr	r2, [pc, #424]	; (8009f0c <HAL_DMA_IRQHandler+0xcac>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d004      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xb12>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a68      	ldr	r2, [pc, #416]	; (8009f10 <HAL_DMA_IRQHandler+0xcb0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d108      	bne.n	8009d84 <HAL_DMA_IRQHandler+0xb24>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0208 	bic.w	r2, r2, #8
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	e007      	b.n	8009d94 <HAL_DMA_IRQHandler+0xb34>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0204 	bic.w	r2, r2, #4
 8009d92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 8165 	beq.w	800a068 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009da6:	e15f      	b.n	800a068 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dac:	f003 031f 	and.w	r3, r3, #31
 8009db0:	2202      	movs	r2, #2
 8009db2:	409a      	lsls	r2, r3
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4013      	ands	r3, r2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80c5 	beq.w	8009f48 <HAL_DMA_IRQHandler+0xce8>
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80bf 	beq.w	8009f48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dce:	f003 031f 	and.w	r3, r3, #31
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	409a      	lsls	r2, r3
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d018      	beq.n	8009e16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 813a 	beq.w	800a06c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e00:	e134      	b.n	800a06c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8130 	beq.w	800a06c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e14:	e12a      	b.n	800a06c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 8089 	bne.w	8009f34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a2b      	ldr	r2, [pc, #172]	; (8009ed4 <HAL_DMA_IRQHandler+0xc74>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d04a      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a29      	ldr	r2, [pc, #164]	; (8009ed8 <HAL_DMA_IRQHandler+0xc78>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d045      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a28      	ldr	r2, [pc, #160]	; (8009edc <HAL_DMA_IRQHandler+0xc7c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d040      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a26      	ldr	r2, [pc, #152]	; (8009ee0 <HAL_DMA_IRQHandler+0xc80>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d03b      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a25      	ldr	r2, [pc, #148]	; (8009ee4 <HAL_DMA_IRQHandler+0xc84>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d036      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a23      	ldr	r2, [pc, #140]	; (8009ee8 <HAL_DMA_IRQHandler+0xc88>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d031      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a22      	ldr	r2, [pc, #136]	; (8009eec <HAL_DMA_IRQHandler+0xc8c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d02c      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a20      	ldr	r2, [pc, #128]	; (8009ef0 <HAL_DMA_IRQHandler+0xc90>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d027      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <HAL_DMA_IRQHandler+0xc94>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d022      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1d      	ldr	r2, [pc, #116]	; (8009ef8 <HAL_DMA_IRQHandler+0xc98>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d01d      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <HAL_DMA_IRQHandler+0xc9c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d018      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1a      	ldr	r2, [pc, #104]	; (8009f00 <HAL_DMA_IRQHandler+0xca0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d013      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a19      	ldr	r2, [pc, #100]	; (8009f04 <HAL_DMA_IRQHandler+0xca4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00e      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a17      	ldr	r2, [pc, #92]	; (8009f08 <HAL_DMA_IRQHandler+0xca8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d009      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a16      	ldr	r2, [pc, #88]	; (8009f0c <HAL_DMA_IRQHandler+0xcac>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d004      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0xc62>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a14      	ldr	r2, [pc, #80]	; (8009f10 <HAL_DMA_IRQHandler+0xcb0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d128      	bne.n	8009f14 <HAL_DMA_IRQHandler+0xcb4>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f022 0214 	bic.w	r2, r2, #20
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e027      	b.n	8009f24 <HAL_DMA_IRQHandler+0xcc4>
 8009ed4:	40020010 	.word	0x40020010
 8009ed8:	40020028 	.word	0x40020028
 8009edc:	40020040 	.word	0x40020040
 8009ee0:	40020058 	.word	0x40020058
 8009ee4:	40020070 	.word	0x40020070
 8009ee8:	40020088 	.word	0x40020088
 8009eec:	400200a0 	.word	0x400200a0
 8009ef0:	400200b8 	.word	0x400200b8
 8009ef4:	40020410 	.word	0x40020410
 8009ef8:	40020428 	.word	0x40020428
 8009efc:	40020440 	.word	0x40020440
 8009f00:	40020458 	.word	0x40020458
 8009f04:	40020470 	.word	0x40020470
 8009f08:	40020488 	.word	0x40020488
 8009f0c:	400204a0 	.word	0x400204a0
 8009f10:	400204b8 	.word	0x400204b8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 020a 	bic.w	r2, r2, #10
 8009f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8097 	beq.w	800a06c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f46:	e091      	b.n	800a06c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4c:	f003 031f 	and.w	r3, r3, #31
 8009f50:	2208      	movs	r2, #8
 8009f52:	409a      	lsls	r2, r3
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	4013      	ands	r3, r2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 8088 	beq.w	800a06e <HAL_DMA_IRQHandler+0xe0e>
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 8082 	beq.w	800a06e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a41      	ldr	r2, [pc, #260]	; (800a074 <HAL_DMA_IRQHandler+0xe14>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d04a      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a3f      	ldr	r2, [pc, #252]	; (800a078 <HAL_DMA_IRQHandler+0xe18>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d045      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a3e      	ldr	r2, [pc, #248]	; (800a07c <HAL_DMA_IRQHandler+0xe1c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d040      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a3c      	ldr	r2, [pc, #240]	; (800a080 <HAL_DMA_IRQHandler+0xe20>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d03b      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a3b      	ldr	r2, [pc, #236]	; (800a084 <HAL_DMA_IRQHandler+0xe24>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d036      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a39      	ldr	r2, [pc, #228]	; (800a088 <HAL_DMA_IRQHandler+0xe28>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d031      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a38      	ldr	r2, [pc, #224]	; (800a08c <HAL_DMA_IRQHandler+0xe2c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d02c      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a36      	ldr	r2, [pc, #216]	; (800a090 <HAL_DMA_IRQHandler+0xe30>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d027      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a35      	ldr	r2, [pc, #212]	; (800a094 <HAL_DMA_IRQHandler+0xe34>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d022      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a33      	ldr	r2, [pc, #204]	; (800a098 <HAL_DMA_IRQHandler+0xe38>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d01d      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a32      	ldr	r2, [pc, #200]	; (800a09c <HAL_DMA_IRQHandler+0xe3c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d018      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a30      	ldr	r2, [pc, #192]	; (800a0a0 <HAL_DMA_IRQHandler+0xe40>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d013      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a2f      	ldr	r2, [pc, #188]	; (800a0a4 <HAL_DMA_IRQHandler+0xe44>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00e      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a2d      	ldr	r2, [pc, #180]	; (800a0a8 <HAL_DMA_IRQHandler+0xe48>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d009      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a2c      	ldr	r2, [pc, #176]	; (800a0ac <HAL_DMA_IRQHandler+0xe4c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d004      	beq.n	800a00a <HAL_DMA_IRQHandler+0xdaa>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a2a      	ldr	r2, [pc, #168]	; (800a0b0 <HAL_DMA_IRQHandler+0xe50>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d108      	bne.n	800a01c <HAL_DMA_IRQHandler+0xdbc>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 021c 	bic.w	r2, r2, #28
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e007      	b.n	800a02c <HAL_DMA_IRQHandler+0xdcc>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 020e 	bic.w	r2, r2, #14
 800a02a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a030:	f003 031f 	and.w	r3, r3, #31
 800a034:	2201      	movs	r2, #1
 800a036:	409a      	lsls	r2, r3
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
 800a062:	e004      	b.n	800a06e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a064:	bf00      	nop
 800a066:	e002      	b.n	800a06e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a06c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a06e:	3728      	adds	r7, #40	; 0x28
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	40020010 	.word	0x40020010
 800a078:	40020028 	.word	0x40020028
 800a07c:	40020040 	.word	0x40020040
 800a080:	40020058 	.word	0x40020058
 800a084:	40020070 	.word	0x40020070
 800a088:	40020088 	.word	0x40020088
 800a08c:	400200a0 	.word	0x400200a0
 800a090:	400200b8 	.word	0x400200b8
 800a094:	40020410 	.word	0x40020410
 800a098:	40020428 	.word	0x40020428
 800a09c:	40020440 	.word	0x40020440
 800a0a0:	40020458 	.word	0x40020458
 800a0a4:	40020470 	.word	0x40020470
 800a0a8:	40020488 	.word	0x40020488
 800a0ac:	400204a0 	.word	0x400204a0
 800a0b0:	400204b8 	.word	0x400204b8

0800a0b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0c2:	b2db      	uxtb	r3, r3
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a100:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a7f      	ldr	r2, [pc, #508]	; (800a304 <DMA_SetConfig+0x21c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d072      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a7d      	ldr	r2, [pc, #500]	; (800a308 <DMA_SetConfig+0x220>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d06d      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a7c      	ldr	r2, [pc, #496]	; (800a30c <DMA_SetConfig+0x224>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d068      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a7a      	ldr	r2, [pc, #488]	; (800a310 <DMA_SetConfig+0x228>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d063      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a79      	ldr	r2, [pc, #484]	; (800a314 <DMA_SetConfig+0x22c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d05e      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a77      	ldr	r2, [pc, #476]	; (800a318 <DMA_SetConfig+0x230>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d059      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a76      	ldr	r2, [pc, #472]	; (800a31c <DMA_SetConfig+0x234>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d054      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a74      	ldr	r2, [pc, #464]	; (800a320 <DMA_SetConfig+0x238>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d04f      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a73      	ldr	r2, [pc, #460]	; (800a324 <DMA_SetConfig+0x23c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d04a      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a71      	ldr	r2, [pc, #452]	; (800a328 <DMA_SetConfig+0x240>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d045      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a70      	ldr	r2, [pc, #448]	; (800a32c <DMA_SetConfig+0x244>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d040      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a6e      	ldr	r2, [pc, #440]	; (800a330 <DMA_SetConfig+0x248>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d03b      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a6d      	ldr	r2, [pc, #436]	; (800a334 <DMA_SetConfig+0x24c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d036      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a6b      	ldr	r2, [pc, #428]	; (800a338 <DMA_SetConfig+0x250>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d031      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a6a      	ldr	r2, [pc, #424]	; (800a33c <DMA_SetConfig+0x254>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d02c      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a68      	ldr	r2, [pc, #416]	; (800a340 <DMA_SetConfig+0x258>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d027      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a67      	ldr	r2, [pc, #412]	; (800a344 <DMA_SetConfig+0x25c>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d022      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a65      	ldr	r2, [pc, #404]	; (800a348 <DMA_SetConfig+0x260>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d01d      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a64      	ldr	r2, [pc, #400]	; (800a34c <DMA_SetConfig+0x264>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d018      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a62      	ldr	r2, [pc, #392]	; (800a350 <DMA_SetConfig+0x268>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d013      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a61      	ldr	r2, [pc, #388]	; (800a354 <DMA_SetConfig+0x26c>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d00e      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a5f      	ldr	r2, [pc, #380]	; (800a358 <DMA_SetConfig+0x270>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d009      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a5e      	ldr	r2, [pc, #376]	; (800a35c <DMA_SetConfig+0x274>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d004      	beq.n	800a1f2 <DMA_SetConfig+0x10a>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a5c      	ldr	r2, [pc, #368]	; (800a360 <DMA_SetConfig+0x278>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d101      	bne.n	800a1f6 <DMA_SetConfig+0x10e>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <DMA_SetConfig+0x110>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00d      	beq.n	800a218 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a204:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a216:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a39      	ldr	r2, [pc, #228]	; (800a304 <DMA_SetConfig+0x21c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d04a      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a38      	ldr	r2, [pc, #224]	; (800a308 <DMA_SetConfig+0x220>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d045      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a36      	ldr	r2, [pc, #216]	; (800a30c <DMA_SetConfig+0x224>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d040      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a35      	ldr	r2, [pc, #212]	; (800a310 <DMA_SetConfig+0x228>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d03b      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a33      	ldr	r2, [pc, #204]	; (800a314 <DMA_SetConfig+0x22c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d036      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a32      	ldr	r2, [pc, #200]	; (800a318 <DMA_SetConfig+0x230>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d031      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a30      	ldr	r2, [pc, #192]	; (800a31c <DMA_SetConfig+0x234>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d02c      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a2f      	ldr	r2, [pc, #188]	; (800a320 <DMA_SetConfig+0x238>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d027      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a2d      	ldr	r2, [pc, #180]	; (800a324 <DMA_SetConfig+0x23c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d022      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a2c      	ldr	r2, [pc, #176]	; (800a328 <DMA_SetConfig+0x240>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d01d      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a2a      	ldr	r2, [pc, #168]	; (800a32c <DMA_SetConfig+0x244>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d018      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a29      	ldr	r2, [pc, #164]	; (800a330 <DMA_SetConfig+0x248>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d013      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a27      	ldr	r2, [pc, #156]	; (800a334 <DMA_SetConfig+0x24c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00e      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a26      	ldr	r2, [pc, #152]	; (800a338 <DMA_SetConfig+0x250>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d009      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a24      	ldr	r2, [pc, #144]	; (800a33c <DMA_SetConfig+0x254>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <DMA_SetConfig+0x1d0>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a23      	ldr	r2, [pc, #140]	; (800a340 <DMA_SetConfig+0x258>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d101      	bne.n	800a2bc <DMA_SetConfig+0x1d4>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e000      	b.n	800a2be <DMA_SetConfig+0x1d6>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d059      	beq.n	800a376 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	223f      	movs	r2, #63	; 0x3f
 800a2cc:	409a      	lsls	r2, r3
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a2e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2b40      	cmp	r3, #64	; 0x40
 800a2f0:	d138      	bne.n	800a364 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a302:	e086      	b.n	800a412 <DMA_SetConfig+0x32a>
 800a304:	40020010 	.word	0x40020010
 800a308:	40020028 	.word	0x40020028
 800a30c:	40020040 	.word	0x40020040
 800a310:	40020058 	.word	0x40020058
 800a314:	40020070 	.word	0x40020070
 800a318:	40020088 	.word	0x40020088
 800a31c:	400200a0 	.word	0x400200a0
 800a320:	400200b8 	.word	0x400200b8
 800a324:	40020410 	.word	0x40020410
 800a328:	40020428 	.word	0x40020428
 800a32c:	40020440 	.word	0x40020440
 800a330:	40020458 	.word	0x40020458
 800a334:	40020470 	.word	0x40020470
 800a338:	40020488 	.word	0x40020488
 800a33c:	400204a0 	.word	0x400204a0
 800a340:	400204b8 	.word	0x400204b8
 800a344:	58025408 	.word	0x58025408
 800a348:	5802541c 	.word	0x5802541c
 800a34c:	58025430 	.word	0x58025430
 800a350:	58025444 	.word	0x58025444
 800a354:	58025458 	.word	0x58025458
 800a358:	5802546c 	.word	0x5802546c
 800a35c:	58025480 	.word	0x58025480
 800a360:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	60da      	str	r2, [r3, #12]
}
 800a374:	e04d      	b.n	800a412 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a29      	ldr	r2, [pc, #164]	; (800a420 <DMA_SetConfig+0x338>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d022      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a27      	ldr	r2, [pc, #156]	; (800a424 <DMA_SetConfig+0x33c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d01d      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a26      	ldr	r2, [pc, #152]	; (800a428 <DMA_SetConfig+0x340>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d018      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a24      	ldr	r2, [pc, #144]	; (800a42c <DMA_SetConfig+0x344>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d013      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a23      	ldr	r2, [pc, #140]	; (800a430 <DMA_SetConfig+0x348>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00e      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a21      	ldr	r2, [pc, #132]	; (800a434 <DMA_SetConfig+0x34c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d009      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a20      	ldr	r2, [pc, #128]	; (800a438 <DMA_SetConfig+0x350>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d004      	beq.n	800a3c6 <DMA_SetConfig+0x2de>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1e      	ldr	r2, [pc, #120]	; (800a43c <DMA_SetConfig+0x354>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d101      	bne.n	800a3ca <DMA_SetConfig+0x2e2>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e000      	b.n	800a3cc <DMA_SetConfig+0x2e4>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d020      	beq.n	800a412 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d4:	f003 031f 	and.w	r3, r3, #31
 800a3d8:	2201      	movs	r2, #1
 800a3da:	409a      	lsls	r2, r3
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	2b40      	cmp	r3, #64	; 0x40
 800a3ee:	d108      	bne.n	800a402 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	60da      	str	r2, [r3, #12]
}
 800a400:	e007      	b.n	800a412 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	60da      	str	r2, [r3, #12]
}
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	58025408 	.word	0x58025408
 800a424:	5802541c 	.word	0x5802541c
 800a428:	58025430 	.word	0x58025430
 800a42c:	58025444 	.word	0x58025444
 800a430:	58025458 	.word	0x58025458
 800a434:	5802546c 	.word	0x5802546c
 800a438:	58025480 	.word	0x58025480
 800a43c:	58025494 	.word	0x58025494

0800a440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a42      	ldr	r2, [pc, #264]	; (800a558 <DMA_CalcBaseAndBitshift+0x118>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d04a      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a41      	ldr	r2, [pc, #260]	; (800a55c <DMA_CalcBaseAndBitshift+0x11c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d045      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a3f      	ldr	r2, [pc, #252]	; (800a560 <DMA_CalcBaseAndBitshift+0x120>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d040      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a3e      	ldr	r2, [pc, #248]	; (800a564 <DMA_CalcBaseAndBitshift+0x124>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d03b      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a3c      	ldr	r2, [pc, #240]	; (800a568 <DMA_CalcBaseAndBitshift+0x128>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d036      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a3b      	ldr	r2, [pc, #236]	; (800a56c <DMA_CalcBaseAndBitshift+0x12c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d031      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a39      	ldr	r2, [pc, #228]	; (800a570 <DMA_CalcBaseAndBitshift+0x130>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d02c      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a38      	ldr	r2, [pc, #224]	; (800a574 <DMA_CalcBaseAndBitshift+0x134>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d027      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a36      	ldr	r2, [pc, #216]	; (800a578 <DMA_CalcBaseAndBitshift+0x138>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d022      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a35      	ldr	r2, [pc, #212]	; (800a57c <DMA_CalcBaseAndBitshift+0x13c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d01d      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a33      	ldr	r2, [pc, #204]	; (800a580 <DMA_CalcBaseAndBitshift+0x140>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d018      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a32      	ldr	r2, [pc, #200]	; (800a584 <DMA_CalcBaseAndBitshift+0x144>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d013      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a30      	ldr	r2, [pc, #192]	; (800a588 <DMA_CalcBaseAndBitshift+0x148>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d00e      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a2f      	ldr	r2, [pc, #188]	; (800a58c <DMA_CalcBaseAndBitshift+0x14c>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d009      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a2d      	ldr	r2, [pc, #180]	; (800a590 <DMA_CalcBaseAndBitshift+0x150>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d004      	beq.n	800a4e8 <DMA_CalcBaseAndBitshift+0xa8>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a2c      	ldr	r2, [pc, #176]	; (800a594 <DMA_CalcBaseAndBitshift+0x154>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d101      	bne.n	800a4ec <DMA_CalcBaseAndBitshift+0xac>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e000      	b.n	800a4ee <DMA_CalcBaseAndBitshift+0xae>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d024      	beq.n	800a53c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	3b10      	subs	r3, #16
 800a4fa:	4a27      	ldr	r2, [pc, #156]	; (800a598 <DMA_CalcBaseAndBitshift+0x158>)
 800a4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a500:	091b      	lsrs	r3, r3, #4
 800a502:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f003 0307 	and.w	r3, r3, #7
 800a50a:	4a24      	ldr	r2, [pc, #144]	; (800a59c <DMA_CalcBaseAndBitshift+0x15c>)
 800a50c:	5cd3      	ldrb	r3, [r2, r3]
 800a50e:	461a      	mov	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b03      	cmp	r3, #3
 800a518:	d908      	bls.n	800a52c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	4b1f      	ldr	r3, [pc, #124]	; (800a5a0 <DMA_CalcBaseAndBitshift+0x160>)
 800a522:	4013      	ands	r3, r2
 800a524:	1d1a      	adds	r2, r3, #4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	659a      	str	r2, [r3, #88]	; 0x58
 800a52a:	e00d      	b.n	800a548 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <DMA_CalcBaseAndBitshift+0x160>)
 800a534:	4013      	ands	r3, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6593      	str	r3, [r2, #88]	; 0x58
 800a53a:	e005      	b.n	800a548 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	40020010 	.word	0x40020010
 800a55c:	40020028 	.word	0x40020028
 800a560:	40020040 	.word	0x40020040
 800a564:	40020058 	.word	0x40020058
 800a568:	40020070 	.word	0x40020070
 800a56c:	40020088 	.word	0x40020088
 800a570:	400200a0 	.word	0x400200a0
 800a574:	400200b8 	.word	0x400200b8
 800a578:	40020410 	.word	0x40020410
 800a57c:	40020428 	.word	0x40020428
 800a580:	40020440 	.word	0x40020440
 800a584:	40020458 	.word	0x40020458
 800a588:	40020470 	.word	0x40020470
 800a58c:	40020488 	.word	0x40020488
 800a590:	400204a0 	.word	0x400204a0
 800a594:	400204b8 	.word	0x400204b8
 800a598:	aaaaaaab 	.word	0xaaaaaaab
 800a59c:	0801ada4 	.word	0x0801ada4
 800a5a0:	fffffc00 	.word	0xfffffc00

0800a5a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d120      	bne.n	800a5fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d858      	bhi.n	800a672 <DMA_CheckFifoParam+0xce>
 800a5c0:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <DMA_CheckFifoParam+0x24>)
 800a5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c6:	bf00      	nop
 800a5c8:	0800a5d9 	.word	0x0800a5d9
 800a5cc:	0800a5eb 	.word	0x0800a5eb
 800a5d0:	0800a5d9 	.word	0x0800a5d9
 800a5d4:	0800a673 	.word	0x0800a673
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d048      	beq.n	800a676 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a5e8:	e045      	b.n	800a676 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a5f2:	d142      	bne.n	800a67a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a5f8:	e03f      	b.n	800a67a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	699b      	ldr	r3, [r3, #24]
 800a5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a602:	d123      	bne.n	800a64c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d838      	bhi.n	800a67e <DMA_CheckFifoParam+0xda>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <DMA_CheckFifoParam+0x70>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a625 	.word	0x0800a625
 800a618:	0800a62b 	.word	0x0800a62b
 800a61c:	0800a625 	.word	0x0800a625
 800a620:	0800a63d 	.word	0x0800a63d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
        break;
 800a628:	e030      	b.n	800a68c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a632:	2b00      	cmp	r3, #0
 800a634:	d025      	beq.n	800a682 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a63a:	e022      	b.n	800a682 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a644:	d11f      	bne.n	800a686 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a64a:	e01c      	b.n	800a686 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a650:	2b02      	cmp	r3, #2
 800a652:	d902      	bls.n	800a65a <DMA_CheckFifoParam+0xb6>
 800a654:	2b03      	cmp	r3, #3
 800a656:	d003      	beq.n	800a660 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a658:	e018      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	73fb      	strb	r3, [r7, #15]
        break;
 800a65e:	e015      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00e      	beq.n	800a68a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	73fb      	strb	r3, [r7, #15]
    break;
 800a670:	e00b      	b.n	800a68a <DMA_CheckFifoParam+0xe6>
        break;
 800a672:	bf00      	nop
 800a674:	e00a      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        break;
 800a676:	bf00      	nop
 800a678:	e008      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        break;
 800a67a:	bf00      	nop
 800a67c:	e006      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        break;
 800a67e:	bf00      	nop
 800a680:	e004      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        break;
 800a682:	bf00      	nop
 800a684:	e002      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
        break;
 800a686:	bf00      	nop
 800a688:	e000      	b.n	800a68c <DMA_CheckFifoParam+0xe8>
    break;
 800a68a:	bf00      	nop
    }
  }

  return status;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop

0800a69c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a38      	ldr	r2, [pc, #224]	; (800a790 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d022      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a36      	ldr	r2, [pc, #216]	; (800a794 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d01d      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a35      	ldr	r2, [pc, #212]	; (800a798 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d018      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a33      	ldr	r2, [pc, #204]	; (800a79c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d013      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a32      	ldr	r2, [pc, #200]	; (800a7a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d00e      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	; (800a7a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d009      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d004      	beq.n	800a6fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a2d      	ldr	r2, [pc, #180]	; (800a7ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d101      	bne.n	800a6fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e000      	b.n	800a700 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a6fe:	2300      	movs	r3, #0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01a      	beq.n	800a73a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	3b08      	subs	r3, #8
 800a70c:	4a28      	ldr	r2, [pc, #160]	; (800a7b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a70e:	fba2 2303 	umull	r2, r3, r2, r3
 800a712:	091b      	lsrs	r3, r3, #4
 800a714:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4b26      	ldr	r3, [pc, #152]	; (800a7b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	461a      	mov	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a24      	ldr	r2, [pc, #144]	; (800a7b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a728:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f003 031f 	and.w	r3, r3, #31
 800a730:	2201      	movs	r2, #1
 800a732:	409a      	lsls	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a738:	e024      	b.n	800a784 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	3b10      	subs	r3, #16
 800a742:	4a1e      	ldr	r2, [pc, #120]	; (800a7bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a744:	fba2 2303 	umull	r2, r3, r2, r3
 800a748:	091b      	lsrs	r3, r3, #4
 800a74a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a1c      	ldr	r2, [pc, #112]	; (800a7c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d806      	bhi.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4a1b      	ldr	r2, [pc, #108]	; (800a7c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d902      	bls.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3308      	adds	r3, #8
 800a760:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4b18      	ldr	r3, [pc, #96]	; (800a7c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a774:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f003 031f 	and.w	r3, r3, #31
 800a77c:	2201      	movs	r2, #1
 800a77e:	409a      	lsls	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	58025408 	.word	0x58025408
 800a794:	5802541c 	.word	0x5802541c
 800a798:	58025430 	.word	0x58025430
 800a79c:	58025444 	.word	0x58025444
 800a7a0:	58025458 	.word	0x58025458
 800a7a4:	5802546c 	.word	0x5802546c
 800a7a8:	58025480 	.word	0x58025480
 800a7ac:	58025494 	.word	0x58025494
 800a7b0:	cccccccd 	.word	0xcccccccd
 800a7b4:	16009600 	.word	0x16009600
 800a7b8:	58025880 	.word	0x58025880
 800a7bc:	aaaaaaab 	.word	0xaaaaaaab
 800a7c0:	400204b8 	.word	0x400204b8
 800a7c4:	4002040f 	.word	0x4002040f
 800a7c8:	10008200 	.word	0x10008200
 800a7cc:	40020880 	.word	0x40020880

0800a7d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d04a      	beq.n	800a87c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d847      	bhi.n	800a87c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a25      	ldr	r2, [pc, #148]	; (800a888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d022      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a24      	ldr	r2, [pc, #144]	; (800a88c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d01d      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a22      	ldr	r2, [pc, #136]	; (800a890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d018      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a21      	ldr	r2, [pc, #132]	; (800a894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d013      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a1f      	ldr	r2, [pc, #124]	; (800a898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d00e      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d009      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a1c      	ldr	r2, [pc, #112]	; (800a8a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d004      	beq.n	800a83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a1b      	ldr	r2, [pc, #108]	; (800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d101      	bne.n	800a840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a83c:	2301      	movs	r3, #1
 800a83e:	e000      	b.n	800a842 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a840:	2300      	movs	r3, #0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4b17      	ldr	r3, [pc, #92]	; (800a8a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	461a      	mov	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a858:	671a      	str	r2, [r3, #112]	; 0x70
 800a85a:	e009      	b.n	800a870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4b14      	ldr	r3, [pc, #80]	; (800a8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	461a      	mov	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a11      	ldr	r2, [pc, #68]	; (800a8b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a86e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3b01      	subs	r3, #1
 800a874:	2201      	movs	r2, #1
 800a876:	409a      	lsls	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a87c:	bf00      	nop
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	58025408 	.word	0x58025408
 800a88c:	5802541c 	.word	0x5802541c
 800a890:	58025430 	.word	0x58025430
 800a894:	58025444 	.word	0x58025444
 800a898:	58025458 	.word	0x58025458
 800a89c:	5802546c 	.word	0x5802546c
 800a8a0:	58025480 	.word	0x58025480
 800a8a4:	58025494 	.word	0x58025494
 800a8a8:	1600963f 	.word	0x1600963f
 800a8ac:	58025940 	.word	0x58025940
 800a8b0:	1000823f 	.word	0x1000823f
 800a8b4:	40020940 	.word	0x40020940

0800a8b8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08a      	sub	sp, #40	; 0x28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a8d0:	4b40      	ldr	r3, [pc, #256]	; (800a9d4 <HAL_FLASH_Program+0x11c>)
 800a8d2:	7d1b      	ldrb	r3, [r3, #20]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d101      	bne.n	800a8dc <HAL_FLASH_Program+0x24>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e076      	b.n	800a9ca <HAL_FLASH_Program+0x112>
 800a8dc:	4b3d      	ldr	r3, [pc, #244]	; (800a9d4 <HAL_FLASH_Program+0x11c>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8e8:	d306      	bcc.n	800a8f8 <HAL_FLASH_Program+0x40>
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a8f0:	d202      	bcs.n	800a8f8 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a8f6:	e00c      	b.n	800a912 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a8fe:	d306      	bcc.n	800a90e <HAL_FLASH_Program+0x56>
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a906:	d202      	bcs.n	800a90e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a908:	2302      	movs	r3, #2
 800a90a:	61bb      	str	r3, [r7, #24]
 800a90c:	e001      	b.n	800a912 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e05b      	b.n	800a9ca <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a912:	4b30      	ldr	r3, [pc, #192]	; (800a9d4 <HAL_FLASH_Program+0x11c>)
 800a914:	2200      	movs	r2, #0
 800a916:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a918:	69b9      	ldr	r1, [r7, #24]
 800a91a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a91e:	f000 f897 	bl	800aa50 <FLASH_WaitForLastOperation>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d147      	bne.n	800a9c0 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d106      	bne.n	800a944 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a936:	4b28      	ldr	r3, [pc, #160]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	4a27      	ldr	r2, [pc, #156]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a93c:	f043 0302 	orr.w	r3, r3, #2
 800a940:	60d3      	str	r3, [r2, #12]
 800a942:	e007      	b.n	800a954 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a944:	4b24      	ldr	r3, [pc, #144]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a946:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a94a:	4a23      	ldr	r2, [pc, #140]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a94c:	f043 0302 	orr.w	r3, r3, #2
 800a950:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a954:	f3bf 8f6f 	isb	sy
}
 800a958:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a95a:	f3bf 8f4f 	dsb	sy
}
 800a95e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	3304      	adds	r3, #4
 800a96c:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	3304      	adds	r3, #4
 800a972:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	3b01      	subs	r3, #1
 800a978:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1ef      	bne.n	800a960 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a980:	f3bf 8f6f 	isb	sy
}
 800a984:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a986:	f3bf 8f4f 	dsb	sy
}
 800a98a:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a98c:	69b9      	ldr	r1, [r7, #24]
 800a98e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a992:	f000 f85d 	bl	800aa50 <FLASH_WaitForLastOperation>
 800a996:	4603      	mov	r3, r0
 800a998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d106      	bne.n	800a9b0 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	4a0c      	ldr	r2, [pc, #48]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a9a8:	f023 0302 	bic.w	r3, r3, #2
 800a9ac:	60d3      	str	r3, [r2, #12]
 800a9ae:	e007      	b.n	800a9c0 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a9b0:	4b09      	ldr	r3, [pc, #36]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a9b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a9b6:	4a08      	ldr	r2, [pc, #32]	; (800a9d8 <HAL_FLASH_Program+0x120>)
 800a9b8:	f023 0302 	bic.w	r3, r3, #2
 800a9bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a9c0:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <HAL_FLASH_Program+0x11c>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	751a      	strb	r2, [r3, #20]

  return status;
 800a9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3728      	adds	r7, #40	; 0x28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	24001fc0 	.word	0x24001fc0
 800a9d8:	52002000 	.word	0x52002000

0800a9dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a9e0:	4b18      	ldr	r3, [pc, #96]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00d      	beq.n	800aa08 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a9ec:	4b15      	ldr	r3, [pc, #84]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800a9ee:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <HAL_FLASH_Unlock+0x6c>)
 800a9f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a9f2:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800a9f4:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <HAL_FLASH_Unlock+0x70>)
 800a9f6:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a9f8:	4b12      	ldr	r3, [pc, #72]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e018      	b.n	800aa3a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aa08:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800aa0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d010      	beq.n	800aa38 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800aa18:	4a0b      	ldr	r2, [pc, #44]	; (800aa48 <HAL_FLASH_Unlock+0x6c>)
 800aa1a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800aa1e:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800aa20:	4a0a      	ldr	r2, [pc, #40]	; (800aa4c <HAL_FLASH_Unlock+0x70>)
 800aa22:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aa26:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <HAL_FLASH_Unlock+0x68>)
 800aa28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	52002000 	.word	0x52002000
 800aa48:	45670123 	.word	0x45670123
 800aa4c:	cdef89ab 	.word	0xcdef89ab

0800aa50 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800aa5a:	2304      	movs	r3, #4
 800aa5c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800aa62:	f7fa ff33 	bl	80058cc <HAL_GetTick>
 800aa66:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d113      	bne.n	800aa96 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800aa6e:	4b41      	ldr	r3, [pc, #260]	; (800ab74 <FLASH_WaitForLastOperation+0x124>)
 800aa70:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aa72:	e010      	b.n	800aa96 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa7a:	d00c      	beq.n	800aa96 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aa7c:	f7fa ff26 	bl	80058cc <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d302      	bcc.n	800aa92 <FLASH_WaitForLastOperation+0x42>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e06a      	b.n	800ab6c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	4b37      	ldr	r3, [pc, #220]	; (800ab78 <FLASH_WaitForLastOperation+0x128>)
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d10a      	bne.n	800aab8 <FLASH_WaitForLastOperation+0x68>
 800aaa2:	4b36      	ldr	r3, [pc, #216]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800aaa4:	691a      	ldr	r2, [r3, #16]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	bf0c      	ite	eq
 800aab0:	2301      	moveq	r3, #1
 800aab2:	2300      	movne	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	e00c      	b.n	800aad2 <FLASH_WaitForLastOperation+0x82>
 800aab8:	4b30      	ldr	r3, [pc, #192]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800aaba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800aabe:	43da      	mvns	r2, r3
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	4013      	ands	r3, r2
 800aac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	bf0c      	ite	eq
 800aacc:	2301      	moveq	r3, #1
 800aace:	2300      	movne	r3, #0
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1ce      	bne.n	800aa74 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d105      	bne.n	800aae8 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800aadc:	4b27      	ldr	r3, [pc, #156]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800aade:	691a      	ldr	r2, [r3, #16]
 800aae0:	4b27      	ldr	r3, [pc, #156]	; (800ab80 <FLASH_WaitForLastOperation+0x130>)
 800aae2:	4013      	ands	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
 800aae6:	e007      	b.n	800aaf8 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800aae8:	4b24      	ldr	r3, [pc, #144]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800aaea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <FLASH_WaitForLastOperation+0x130>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aaf6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d017      	beq.n	800ab32 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ab02:	4b20      	ldr	r3, [pc, #128]	; (800ab84 <FLASH_WaitForLastOperation+0x134>)
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	4a1e      	ldr	r2, [pc, #120]	; (800ab84 <FLASH_WaitForLastOperation+0x134>)
 800ab0c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	4b19      	ldr	r3, [pc, #100]	; (800ab78 <FLASH_WaitForLastOperation+0x128>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d103      	bne.n	800ab22 <FLASH_WaitForLastOperation+0xd2>
 800ab1a:	4a18      	ldr	r2, [pc, #96]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6153      	str	r3, [r2, #20]
 800ab20:	e005      	b.n	800ab2e <FLASH_WaitForLastOperation+0xde>
 800ab22:	4a16      	ldr	r2, [pc, #88]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab2a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e01c      	b.n	800ab6c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d10b      	bne.n	800ab50 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ab38:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab44:	d111      	bne.n	800ab6a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ab46:	4b0d      	ldr	r3, [pc, #52]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800ab48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab4c:	615a      	str	r2, [r3, #20]
 800ab4e:	e00c      	b.n	800ab6a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800ab52:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ab56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5e:	d104      	bne.n	800ab6a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800ab60:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <FLASH_WaitForLastOperation+0x12c>)
 800ab62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	80000004 	.word	0x80000004
 800ab78:	1fef000f 	.word	0x1fef000f
 800ab7c:	52002000 	.word	0x52002000
 800ab80:	17ee0000 	.word	0x17ee0000
 800ab84:	24001fc0 	.word	0x24001fc0

0800ab88 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ab96:	4b5e      	ldr	r3, [pc, #376]	; (800ad10 <HAL_FLASHEx_Erase+0x188>)
 800ab98:	7d1b      	ldrb	r3, [r3, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_FLASHEx_Erase+0x1a>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e0b2      	b.n	800ad08 <HAL_FLASHEx_Erase+0x180>
 800aba2:	4b5b      	ldr	r3, [pc, #364]	; (800ad10 <HAL_FLASHEx_Erase+0x188>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aba8:	4b59      	ldr	r3, [pc, #356]	; (800ad10 <HAL_FLASHEx_Erase+0x188>)
 800abaa:	2200      	movs	r2, #0
 800abac:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d009      	beq.n	800abce <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800abba:	2101      	movs	r1, #1
 800abbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800abc0:	f7ff ff46 	bl	800aa50 <FLASH_WaitForLastOperation>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d009      	beq.n	800abee <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800abda:	2102      	movs	r1, #2
 800abdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800abe0:	f7ff ff36 	bl	800aa50 <FLASH_WaitForLastOperation>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 8085 	bne.w	800ad00 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d136      	bne.n	800ac6c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691a      	ldr	r2, [r3, #16]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 f887 	bl	800ad1c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00f      	beq.n	800ac3a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac20:	f7ff ff16 	bl	800aa50 <FLASH_WaitForLastOperation>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d001      	beq.n	800ac2e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ac2e:	4b39      	ldr	r3, [pc, #228]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	4a38      	ldr	r2, [pc, #224]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800ac34:	f023 0308 	bic.w	r3, r3, #8
 800ac38:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d05c      	beq.n	800ad00 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ac46:	2102      	movs	r1, #2
 800ac48:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac4c:	f7ff ff00 	bl	800aa50 <FLASH_WaitForLastOperation>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800ac5a:	4b2e      	ldr	r3, [pc, #184]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800ac5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac60:	4a2c      	ldr	r2, [pc, #176]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800ac62:	f023 0308 	bic.w	r3, r3, #8
 800ac66:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800ac6a:	e049      	b.n	800ad00 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac72:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	60bb      	str	r3, [r7, #8]
 800ac7a:	e039      	b.n	800acf0 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6859      	ldr	r1, [r3, #4]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	461a      	mov	r2, r3
 800ac86:	68b8      	ldr	r0, [r7, #8]
 800ac88:	f000 f8b2 	bl	800adf0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00c      	beq.n	800acb2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800ac98:	2101      	movs	r1, #1
 800ac9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac9e:	f7ff fed7 	bl	800aa50 <FLASH_WaitForLastOperation>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800aca6:	4b1b      	ldr	r3, [pc, #108]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800aca8:	68da      	ldr	r2, [r3, #12]
 800acaa:	491a      	ldr	r1, [pc, #104]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800acac:	4b1a      	ldr	r3, [pc, #104]	; (800ad18 <HAL_FLASHEx_Erase+0x190>)
 800acae:	4013      	ands	r3, r2
 800acb0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f003 0302 	and.w	r3, r3, #2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00e      	beq.n	800acdc <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800acbe:	2102      	movs	r1, #2
 800acc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acc4:	f7ff fec4 	bl	800aa50 <FLASH_WaitForLastOperation>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800accc:	4b11      	ldr	r3, [pc, #68]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800acce:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800acd2:	4910      	ldr	r1, [pc, #64]	; (800ad14 <HAL_FLASHEx_Erase+0x18c>)
 800acd4:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <HAL_FLASHEx_Erase+0x190>)
 800acd6:	4013      	ands	r3, r2
 800acd8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	601a      	str	r2, [r3, #0]
          break;
 800ace8:	e00a      	b.n	800ad00 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	3301      	adds	r3, #1
 800acee:	60bb      	str	r3, [r7, #8]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	4413      	add	r3, r2
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d3bd      	bcc.n	800ac7c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ad00:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <HAL_FLASHEx_Erase+0x188>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	751a      	strb	r2, [r3, #20]

  return status;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	24001fc0 	.word	0x24001fc0
 800ad14:	52002000 	.word	0x52002000
 800ad18:	fffff8fb 	.word	0xfffff8fb

0800ad1c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	f003 0303 	and.w	r3, r3, #3
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d122      	bne.n	800ad76 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ad30:	4b2e      	ldr	r3, [pc, #184]	; (800adec <FLASH_MassErase+0xd0>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	4a2d      	ldr	r2, [pc, #180]	; (800adec <FLASH_MassErase+0xd0>)
 800ad36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ad3a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ad3c:	4b2b      	ldr	r3, [pc, #172]	; (800adec <FLASH_MassErase+0xd0>)
 800ad3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ad42:	4a2a      	ldr	r2, [pc, #168]	; (800adec <FLASH_MassErase+0xd0>)
 800ad44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ad48:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ad4c:	4b27      	ldr	r3, [pc, #156]	; (800adec <FLASH_MassErase+0xd0>)
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	4926      	ldr	r1, [pc, #152]	; (800adec <FLASH_MassErase+0xd0>)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ad58:	4b24      	ldr	r3, [pc, #144]	; (800adec <FLASH_MassErase+0xd0>)
 800ad5a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ad5e:	4923      	ldr	r1, [pc, #140]	; (800adec <FLASH_MassErase+0xd0>)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800ad68:	4b20      	ldr	r3, [pc, #128]	; (800adec <FLASH_MassErase+0xd0>)
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	4a1f      	ldr	r2, [pc, #124]	; (800adec <FLASH_MassErase+0xd0>)
 800ad6e:	f043 0310 	orr.w	r3, r3, #16
 800ad72:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800ad74:	e033      	b.n	800adde <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d011      	beq.n	800ada4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ad80:	4b1a      	ldr	r3, [pc, #104]	; (800adec <FLASH_MassErase+0xd0>)
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	4a19      	ldr	r2, [pc, #100]	; (800adec <FLASH_MassErase+0xd0>)
 800ad86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ad8a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800ad8c:	4b17      	ldr	r3, [pc, #92]	; (800adec <FLASH_MassErase+0xd0>)
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	4916      	ldr	r1, [pc, #88]	; (800adec <FLASH_MassErase+0xd0>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800ad98:	4b14      	ldr	r3, [pc, #80]	; (800adec <FLASH_MassErase+0xd0>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	4a13      	ldr	r2, [pc, #76]	; (800adec <FLASH_MassErase+0xd0>)
 800ad9e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ada2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d017      	beq.n	800adde <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800adae:	4b0f      	ldr	r3, [pc, #60]	; (800adec <FLASH_MassErase+0xd0>)
 800adb0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800adb4:	4a0d      	ldr	r2, [pc, #52]	; (800adec <FLASH_MassErase+0xd0>)
 800adb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800adba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800adbe:	4b0b      	ldr	r3, [pc, #44]	; (800adec <FLASH_MassErase+0xd0>)
 800adc0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800adc4:	4909      	ldr	r1, [pc, #36]	; (800adec <FLASH_MassErase+0xd0>)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4313      	orrs	r3, r2
 800adca:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800adce:	4b07      	ldr	r3, [pc, #28]	; (800adec <FLASH_MassErase+0xd0>)
 800add0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800add4:	4a05      	ldr	r2, [pc, #20]	; (800adec <FLASH_MassErase+0xd0>)
 800add6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800adda:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	52002000 	.word	0x52002000

0800adf0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d010      	beq.n	800ae28 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ae06:	4b18      	ldr	r3, [pc, #96]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae0c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ae10:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	0219      	lsls	r1, r3, #8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	4a11      	ldr	r2, [pc, #68]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae22:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ae26:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d014      	beq.n	800ae5c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ae32:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae34:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae38:	4a0b      	ldr	r2, [pc, #44]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae3a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ae3e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ae42:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae44:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	0219      	lsls	r1, r3, #8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	4313      	orrs	r3, r2
 800ae52:	4a05      	ldr	r2, [pc, #20]	; (800ae68 <FLASH_Erase_Sector+0x78>)
 800ae54:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ae58:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800ae5c:	bf00      	nop
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	52002000 	.word	0x52002000

0800ae6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b089      	sub	sp, #36	; 0x24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ae7a:	4b89      	ldr	r3, [pc, #548]	; (800b0a0 <HAL_GPIO_Init+0x234>)
 800ae7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ae7e:	e194      	b.n	800b1aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	2101      	movs	r1, #1
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 8186 	beq.w	800b1a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f003 0303 	and.w	r3, r3, #3
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d005      	beq.n	800aeb0 <HAL_GPIO_Init+0x44>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	f003 0303 	and.w	r3, r3, #3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d130      	bne.n	800af12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	2203      	movs	r2, #3
 800aebc:	fa02 f303 	lsl.w	r3, r2, r3
 800aec0:	43db      	mvns	r3, r3
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	4013      	ands	r3, r2
 800aec6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	fa02 f303 	lsl.w	r3, r2, r3
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aee6:	2201      	movs	r2, #1
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	fa02 f303 	lsl.w	r3, r2, r3
 800aeee:	43db      	mvns	r3, r3
 800aef0:	69ba      	ldr	r2, [r7, #24]
 800aef2:	4013      	ands	r3, r2
 800aef4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	091b      	lsrs	r3, r3, #4
 800aefc:	f003 0201 	and.w	r2, r3, #1
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	fa02 f303 	lsl.w	r3, r2, r3
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	4313      	orrs	r3, r2
 800af0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d017      	beq.n	800af4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	2203      	movs	r2, #3
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	43db      	mvns	r3, r3
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	4013      	ands	r3, r2
 800af34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	fa02 f303 	lsl.w	r3, r2, r3
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	4313      	orrs	r3, r2
 800af46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f003 0303 	and.w	r3, r3, #3
 800af56:	2b02      	cmp	r3, #2
 800af58:	d123      	bne.n	800afa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	08da      	lsrs	r2, r3, #3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	3208      	adds	r2, #8
 800af62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	220f      	movs	r2, #15
 800af72:	fa02 f303 	lsl.w	r3, r2, r3
 800af76:	43db      	mvns	r3, r3
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	4013      	ands	r3, r2
 800af7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	691a      	ldr	r2, [r3, #16]
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	4313      	orrs	r3, r2
 800af92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	08da      	lsrs	r2, r3, #3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3208      	adds	r2, #8
 800af9c:	69b9      	ldr	r1, [r7, #24]
 800af9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	2203      	movs	r2, #3
 800afae:	fa02 f303 	lsl.w	r3, r2, r3
 800afb2:	43db      	mvns	r3, r3
 800afb4:	69ba      	ldr	r2, [r7, #24]
 800afb6:	4013      	ands	r3, r2
 800afb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f003 0203 	and.w	r2, r3, #3
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	fa02 f303 	lsl.w	r3, r2, r3
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	4313      	orrs	r3, r2
 800afce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80e0 	beq.w	800b1a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afe4:	4b2f      	ldr	r3, [pc, #188]	; (800b0a4 <HAL_GPIO_Init+0x238>)
 800afe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afea:	4a2e      	ldr	r2, [pc, #184]	; (800b0a4 <HAL_GPIO_Init+0x238>)
 800afec:	f043 0302 	orr.w	r3, r3, #2
 800aff0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aff4:	4b2b      	ldr	r3, [pc, #172]	; (800b0a4 <HAL_GPIO_Init+0x238>)
 800aff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800affa:	f003 0302 	and.w	r3, r3, #2
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <HAL_GPIO_Init+0x23c>)
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	089b      	lsrs	r3, r3, #2
 800b008:	3302      	adds	r3, #2
 800b00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b00e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	f003 0303 	and.w	r3, r3, #3
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	220f      	movs	r2, #15
 800b01a:	fa02 f303 	lsl.w	r3, r2, r3
 800b01e:	43db      	mvns	r3, r3
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	4013      	ands	r3, r2
 800b024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a20      	ldr	r2, [pc, #128]	; (800b0ac <HAL_GPIO_Init+0x240>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d052      	beq.n	800b0d4 <HAL_GPIO_Init+0x268>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a1f      	ldr	r2, [pc, #124]	; (800b0b0 <HAL_GPIO_Init+0x244>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d031      	beq.n	800b09a <HAL_GPIO_Init+0x22e>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a1e      	ldr	r2, [pc, #120]	; (800b0b4 <HAL_GPIO_Init+0x248>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d02b      	beq.n	800b096 <HAL_GPIO_Init+0x22a>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a1d      	ldr	r2, [pc, #116]	; (800b0b8 <HAL_GPIO_Init+0x24c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d025      	beq.n	800b092 <HAL_GPIO_Init+0x226>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a1c      	ldr	r2, [pc, #112]	; (800b0bc <HAL_GPIO_Init+0x250>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d01f      	beq.n	800b08e <HAL_GPIO_Init+0x222>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a1b      	ldr	r2, [pc, #108]	; (800b0c0 <HAL_GPIO_Init+0x254>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d019      	beq.n	800b08a <HAL_GPIO_Init+0x21e>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a1a      	ldr	r2, [pc, #104]	; (800b0c4 <HAL_GPIO_Init+0x258>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d013      	beq.n	800b086 <HAL_GPIO_Init+0x21a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a19      	ldr	r2, [pc, #100]	; (800b0c8 <HAL_GPIO_Init+0x25c>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d00d      	beq.n	800b082 <HAL_GPIO_Init+0x216>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a18      	ldr	r2, [pc, #96]	; (800b0cc <HAL_GPIO_Init+0x260>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d007      	beq.n	800b07e <HAL_GPIO_Init+0x212>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <HAL_GPIO_Init+0x264>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d101      	bne.n	800b07a <HAL_GPIO_Init+0x20e>
 800b076:	2309      	movs	r3, #9
 800b078:	e02d      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b07a:	230a      	movs	r3, #10
 800b07c:	e02b      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b07e:	2308      	movs	r3, #8
 800b080:	e029      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b082:	2307      	movs	r3, #7
 800b084:	e027      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b086:	2306      	movs	r3, #6
 800b088:	e025      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b08a:	2305      	movs	r3, #5
 800b08c:	e023      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b08e:	2304      	movs	r3, #4
 800b090:	e021      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b092:	2303      	movs	r3, #3
 800b094:	e01f      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b096:	2302      	movs	r3, #2
 800b098:	e01d      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e01b      	b.n	800b0d6 <HAL_GPIO_Init+0x26a>
 800b09e:	bf00      	nop
 800b0a0:	58000080 	.word	0x58000080
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	58000400 	.word	0x58000400
 800b0ac:	58020000 	.word	0x58020000
 800b0b0:	58020400 	.word	0x58020400
 800b0b4:	58020800 	.word	0x58020800
 800b0b8:	58020c00 	.word	0x58020c00
 800b0bc:	58021000 	.word	0x58021000
 800b0c0:	58021400 	.word	0x58021400
 800b0c4:	58021800 	.word	0x58021800
 800b0c8:	58021c00 	.word	0x58021c00
 800b0cc:	58022000 	.word	0x58022000
 800b0d0:	58022400 	.word	0x58022400
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	69fa      	ldr	r2, [r7, #28]
 800b0d8:	f002 0203 	and.w	r2, r2, #3
 800b0dc:	0092      	lsls	r2, r2, #2
 800b0de:	4093      	lsls	r3, r2
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0e6:	4938      	ldr	r1, [pc, #224]	; (800b1c8 <HAL_GPIO_Init+0x35c>)
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	089b      	lsrs	r3, r3, #2
 800b0ec:	3302      	adds	r3, #2
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b0f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	43db      	mvns	r3, r3
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	4013      	ands	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b11a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	43db      	mvns	r3, r3
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	4013      	ands	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	4313      	orrs	r3, r2
 800b146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	43db      	mvns	r3, r3
 800b15a:	69ba      	ldr	r2, [r7, #24]
 800b15c:	4013      	ands	r3, r2
 800b15e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	4313      	orrs	r3, r2
 800b172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	43db      	mvns	r3, r3
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	4013      	ands	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f47f ae63 	bne.w	800ae80 <HAL_GPIO_Init+0x14>
  }
}
 800b1ba:	bf00      	nop
 800b1bc:	bf00      	nop
 800b1be:	3724      	adds	r7, #36	; 0x24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	58000400 	.word	0x58000400

0800b1cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	691a      	ldr	r2, [r3, #16]
 800b1dc:	887b      	ldrh	r3, [r7, #2]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	73fb      	strb	r3, [r7, #15]
 800b1e8:	e001      	b.n	800b1ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	807b      	strh	r3, [r7, #2]
 800b208:	4613      	mov	r3, r2
 800b20a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b20c:	787b      	ldrb	r3, [r7, #1]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b212:	887a      	ldrh	r2, [r7, #2]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b218:	e003      	b.n	800b222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b21a:	887b      	ldrh	r3, [r7, #2]
 800b21c:	041a      	lsls	r2, r3, #16
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	619a      	str	r2, [r3, #24]
}
 800b222:	bf00      	nop
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
	...

0800b230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e08b      	b.n	800b35a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7f7 fa94 	bl	8002784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2224      	movs	r2, #36	; 0x24
 800b260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0201 	bic.w	r2, r2, #1
 800b272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b280:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b290:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d107      	bne.n	800b2aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689a      	ldr	r2, [r3, #8]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2a6:	609a      	str	r2, [r3, #8]
 800b2a8:	e006      	b.n	800b2b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689a      	ldr	r2, [r3, #8]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b2b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d108      	bne.n	800b2d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ce:	605a      	str	r2, [r3, #4]
 800b2d0:	e007      	b.n	800b2e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6859      	ldr	r1, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	4b1d      	ldr	r3, [pc, #116]	; (800b364 <HAL_I2C_Init+0x134>)
 800b2ee:	430b      	orrs	r3, r1
 800b2f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b300:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	691a      	ldr	r2, [r3, #16]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	430a      	orrs	r2, r1
 800b31a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	69d9      	ldr	r1, [r3, #28]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a1a      	ldr	r2, [r3, #32]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f042 0201 	orr.w	r2, r2, #1
 800b33a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2220      	movs	r2, #32
 800b346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	02008000 	.word	0x02008000

0800b368 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	461a      	mov	r2, r3
 800b374:	460b      	mov	r3, r1
 800b376:	817b      	strh	r3, [r7, #10]
 800b378:	4613      	mov	r3, r2
 800b37a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b20      	cmp	r3, #32
 800b38a:	f040 80ef 	bne.w	800b56c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b39c:	d101      	bne.n	800b3a2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e0e5      	b.n	800b56e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d101      	bne.n	800b3b0 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e0de      	b.n	800b56e <HAL_I2C_Master_Transmit_DMA+0x206>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2221      	movs	r2, #33	; 0x21
 800b3bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2210      	movs	r2, #16
 800b3c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	893a      	ldrh	r2, [r7, #8]
 800b3d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	4a66      	ldr	r2, [pc, #408]	; (800b578 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b3de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4a66      	ldr	r2, [pc, #408]	; (800b57c <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b3e4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	2bff      	cmp	r3, #255	; 0xff
 800b3ee:	d906      	bls.n	800b3fe <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	22ff      	movs	r2, #255	; 0xff
 800b3f4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b3f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3fa:	61fb      	str	r3, [r7, #28]
 800b3fc:	e007      	b.n	800b40e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b402:	b29a      	uxth	r2, r3
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b40c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01a      	beq.n	800b44c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	781a      	ldrb	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b430:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b444:	3b01      	subs	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b450:	2b00      	cmp	r3, #0
 800b452:	d074      	beq.n	800b53e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d022      	beq.n	800b4a2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b460:	4a47      	ldr	r2, [pc, #284]	; (800b580 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b462:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	4a46      	ldr	r2, [pc, #280]	; (800b584 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b46a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b470:	2200      	movs	r2, #0
 800b472:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b478:	2200      	movs	r2, #0
 800b47a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b48c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b492:	f7fc ff17 	bl	80082c4 <HAL_DMA_Start_IT>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d13a      	bne.n	800b516 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b4a0:	e013      	b.n	800b4ca <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e051      	b.n	800b56e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	8979      	ldrh	r1, [r7, #10]
 800b4d6:	4b2c      	ldr	r3, [pc, #176]	; (800b588 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f002 f83b 	bl	800d558 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b4fc:	2110      	movs	r1, #16
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f002 f85c 	bl	800d5bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	e028      	b.n	800b568 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2220      	movs	r2, #32
 800b51a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52a:	f043 0210 	orr.w	r2, r3, #16
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e017      	b.n	800b56e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4a12      	ldr	r2, [pc, #72]	; (800b58c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	b2da      	uxtb	r2, r3
 800b548:	8979      	ldrh	r1, [r7, #10]
 800b54a:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f002 f800 	bl	800d558 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b560:	2101      	movs	r1, #1
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f002 f82a 	bl	800d5bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	e000      	b.n	800b56e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b56c:	2302      	movs	r3, #2
  }
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	ffff0000 	.word	0xffff0000
 800b57c:	0800bdc3 	.word	0x0800bdc3
 800b580:	0800d17b 	.word	0x0800d17b
 800b584:	0800d2a9 	.word	0x0800d2a9
 800b588:	80002000 	.word	0x80002000
 800b58c:	0800b953 	.word	0x0800b953

0800b590 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af02      	add	r7, sp, #8
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	461a      	mov	r2, r3
 800b59c:	460b      	mov	r3, r1
 800b59e:	817b      	strh	r3, [r7, #10]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	f040 80cd 	bne.w	800b74c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c0:	d101      	bne.n	800b5c6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	e0c3      	b.n	800b74e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d101      	bne.n	800b5d4 <HAL_I2C_Master_Receive_DMA+0x44>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e0bc      	b.n	800b74e <HAL_I2C_Master_Receive_DMA+0x1be>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2222      	movs	r2, #34	; 0x22
 800b5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2210      	movs	r2, #16
 800b5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	893a      	ldrh	r2, [r7, #8]
 800b5fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	4a55      	ldr	r2, [pc, #340]	; (800b758 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b602:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4a55      	ldr	r2, [pc, #340]	; (800b75c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b608:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b60e:	b29b      	uxth	r3, r3
 800b610:	2bff      	cmp	r3, #255	; 0xff
 800b612:	d906      	bls.n	800b622 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	22ff      	movs	r2, #255	; 0xff
 800b618:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b61a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b61e:	617b      	str	r3, [r7, #20]
 800b620:	e007      	b.n	800b632 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b626:	b29a      	uxth	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b62c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b630:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b636:	2b00      	cmp	r3, #0
 800b638:	d070      	beq.n	800b71c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d020      	beq.n	800b684 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	4a46      	ldr	r2, [pc, #280]	; (800b760 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b648:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	4a45      	ldr	r2, [pc, #276]	; (800b764 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b650:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b656:	2200      	movs	r2, #0
 800b658:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b65e:	2200      	movs	r2, #0
 800b660:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3324      	adds	r3, #36	; 0x24
 800b66c:	4619      	mov	r1, r3
 800b66e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b674:	f7fc fe26 	bl	80082c4 <HAL_DMA_Start_IT>
 800b678:	4603      	mov	r3, r0
 800b67a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b67c:	7cfb      	ldrb	r3, [r7, #19]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d138      	bne.n	800b6f4 <HAL_I2C_Master_Receive_DMA+0x164>
 800b682:	e013      	b.n	800b6ac <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2220      	movs	r2, #32
 800b688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e050      	b.n	800b74e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	8979      	ldrh	r1, [r7, #10]
 800b6b4:	4b2c      	ldr	r3, [pc, #176]	; (800b768 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f001 ff4c 	bl	800d558 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b6da:	2110      	movs	r1, #16
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f001 ff6d 	bl	800d5bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	e029      	b.n	800b748 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b708:	f043 0210 	orr.w	r2, r3, #16
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e018      	b.n	800b74e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4a13      	ldr	r2, [pc, #76]	; (800b76c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b720:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b726:	b2da      	uxtb	r2, r3
 800b728:	8979      	ldrh	r1, [r7, #10]
 800b72a:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f001 ff10 	bl	800d558 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b740:	2102      	movs	r1, #2
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f001 ff3a 	bl	800d5bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	e000      	b.n	800b74e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b74c:	2302      	movs	r3, #2
  }
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	ffff0000 	.word	0xffff0000
 800b75c:	0800bdc3 	.word	0x0800bdc3
 800b760:	0800d211 	.word	0x0800d211
 800b764:	0800d2a9 	.word	0x0800d2a9
 800b768:	80002400 	.word	0x80002400
 800b76c:	0800b953 	.word	0x0800b953

0800b770 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	68f9      	ldr	r1, [r7, #12]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
  }
}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d010      	beq.n	800b7ea <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	09db      	lsrs	r3, r3, #7
 800b7cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00a      	beq.n	800b7ea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d8:	f043 0201 	orr.w	r2, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	0a9b      	lsrs	r3, r3, #10
 800b7ee:	f003 0301 	and.w	r3, r3, #1
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d010      	beq.n	800b818 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	09db      	lsrs	r3, r3, #7
 800b7fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	f043 0208 	orr.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b816:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	0a5b      	lsrs	r3, r3, #9
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d010      	beq.n	800b846 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	09db      	lsrs	r3, r3, #7
 800b828:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b834:	f043 0202 	orr.w	r2, r3, #2
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b844:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f003 030b 	and.w	r3, r3, #11
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b856:	68f9      	ldr	r1, [r7, #12]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f001 fb53 	bl	800cf04 <I2C_ITError>
  }
}
 800b85e:	bf00      	nop
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b86e:	bf00      	nop
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b083      	sub	sp, #12
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b88e:	b480      	push	{r7}
 800b890:	b083      	sub	sp, #12
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b8aa:	bf00      	nop
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	b083      	sub	sp, #12
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	70fb      	strb	r3, [r7, #3]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b8ee:	bf00      	nop
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b083      	sub	sp, #12
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b902:	bf00      	nop
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b922:	b480      	push	{r7}
 800b924:	b083      	sub	sp, #12
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b92a:	bf00      	nop
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b944:	b2db      	uxtb	r3, r3
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b088      	sub	sp, #32
 800b956:	af02      	add	r7, sp, #8
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d101      	bne.n	800b970 <I2C_Master_ISR_IT+0x1e>
 800b96c:	2302      	movs	r3, #2
 800b96e:	e120      	b.n	800bbb2 <I2C_Master_ISR_IT+0x260>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	091b      	lsrs	r3, r3, #4
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	d013      	beq.n	800b9ac <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	091b      	lsrs	r3, r3, #4
 800b988:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00d      	beq.n	800b9ac <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2210      	movs	r2, #16
 800b996:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b99c:	f043 0204 	orr.w	r2, r3, #4
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f001 fbc4 	bl	800d132 <I2C_Flush_TXDR>
 800b9aa:	e0ed      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	089b      	lsrs	r3, r3, #2
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d023      	beq.n	800ba00 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	089b      	lsrs	r3, r3, #2
 800b9bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01d      	beq.n	800ba00 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	f023 0304 	bic.w	r3, r3, #4
 800b9ca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	b2d2      	uxtb	r2, r2
 800b9d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	1c5a      	adds	r2, r3, #1
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9fe:	e0c3      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	099b      	lsrs	r3, r3, #6
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d12a      	bne.n	800ba62 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	085b      	lsrs	r3, r3, #1
 800ba10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d024      	beq.n	800ba62 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	085b      	lsrs	r3, r3, #1
 800ba1c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01e      	beq.n	800ba62 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 80ac 	beq.w	800bb88 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	781a      	ldrb	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800ba60:	e092      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	09db      	lsrs	r3, r3, #7
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d05d      	beq.n	800bb2a <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	099b      	lsrs	r3, r3, #6
 800ba72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d057      	beq.n	800bb2a <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d040      	beq.n	800bb06 <I2C_Master_ISR_IT+0x1b4>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d13c      	bne.n	800bb06 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba98:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	2bff      	cmp	r3, #255	; 0xff
 800baa2:	d90e      	bls.n	800bac2 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	22ff      	movs	r2, #255	; 0xff
 800baa8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	8a79      	ldrh	r1, [r7, #18]
 800bab2:	2300      	movs	r3, #0
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f001 fd4c 	bl	800d558 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bac0:	e032      	b.n	800bb28 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bad4:	d00b      	beq.n	800baee <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bada:	b2da      	uxtb	r2, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae0:	8a79      	ldrh	r1, [r7, #18]
 800bae2:	2000      	movs	r0, #0
 800bae4:	9000      	str	r0, [sp, #0]
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f001 fd36 	bl	800d558 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baec:	e01c      	b.n	800bb28 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	8a79      	ldrh	r1, [r7, #18]
 800baf6:	2300      	movs	r3, #0
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f001 fd2a 	bl	800d558 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb04:	e010      	b.n	800bb28 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb14:	d003      	beq.n	800bb1e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 fdde 	bl	800c6d8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb1c:	e034      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bb1e:	2140      	movs	r1, #64	; 0x40
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f001 f9ef 	bl	800cf04 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb26:	e02f      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
 800bb28:	e02e      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	099b      	lsrs	r3, r3, #6
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d028      	beq.n	800bb88 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	099b      	lsrs	r3, r3, #6
 800bb3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d022      	beq.n	800bb88 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d119      	bne.n	800bb80 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb5a:	d015      	beq.n	800bb88 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb64:	d108      	bne.n	800bb78 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb74:	605a      	str	r2, [r3, #4]
 800bb76:	e007      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fdad 	bl	800c6d8 <I2C_ITMasterSeqCplt>
 800bb7e:	e003      	b.n	800bb88 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bb80:	2140      	movs	r1, #64	; 0x40
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f001 f9be 	bl	800cf04 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	095b      	lsrs	r3, r3, #5
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d009      	beq.n	800bba8 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d003      	beq.n	800bba8 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bba0:	6979      	ldr	r1, [r7, #20]
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 fe34 	bl	800c810 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b086      	sub	sp, #24
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d101      	bne.n	800bbde <I2C_Slave_ISR_IT+0x24>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	e0ed      	b.n	800bdba <I2C_Slave_ISR_IT+0x200>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	095b      	lsrs	r3, r3, #5
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	095b      	lsrs	r3, r3, #5
 800bbf6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d004      	beq.n	800bc08 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bbfe:	6939      	ldr	r1, [r7, #16]
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 fecf 	bl	800c9a4 <I2C_ITSlaveCplt>
 800bc06:	e0d3      	b.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	091b      	lsrs	r3, r3, #4
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d04d      	beq.n	800bcb0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	091b      	lsrs	r3, r3, #4
 800bc18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d047      	beq.n	800bcb0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d128      	bne.n	800bc7c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b28      	cmp	r3, #40	; 0x28
 800bc34:	d108      	bne.n	800bc48 <I2C_Slave_ISR_IT+0x8e>
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc3c:	d104      	bne.n	800bc48 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bc3e:	6939      	ldr	r1, [r7, #16]
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f001 f909 	bl	800ce58 <I2C_ITListenCplt>
 800bc46:	e032      	b.n	800bcae <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b29      	cmp	r3, #41	; 0x29
 800bc52:	d10e      	bne.n	800bc72 <I2C_Slave_ISR_IT+0xb8>
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc5a:	d00a      	beq.n	800bc72 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2210      	movs	r2, #16
 800bc62:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f001 fa64 	bl	800d132 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 fd71 	bl	800c752 <I2C_ITSlaveSeqCplt>
 800bc70:	e01d      	b.n	800bcae <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2210      	movs	r2, #16
 800bc78:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bc7a:	e096      	b.n	800bdaa <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2210      	movs	r2, #16
 800bc82:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc88:	f043 0204 	orr.w	r2, r3, #4
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d004      	beq.n	800bca0 <I2C_Slave_ISR_IT+0xe6>
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc9c:	f040 8085 	bne.w	800bdaa <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca4:	4619      	mov	r1, r3
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f001 f92c 	bl	800cf04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bcac:	e07d      	b.n	800bdaa <I2C_Slave_ISR_IT+0x1f0>
 800bcae:	e07c      	b.n	800bdaa <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	089b      	lsrs	r3, r3, #2
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d030      	beq.n	800bd1e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	089b      	lsrs	r3, r3, #2
 800bcc0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d02a      	beq.n	800bd1e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d018      	beq.n	800bd04 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	b2d2      	uxtb	r2, r2
 800bcde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d14f      	bne.n	800bdae <I2C_Slave_ISR_IT+0x1f4>
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd14:	d04b      	beq.n	800bdae <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 fd1b 	bl	800c752 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bd1c:	e047      	b.n	800bdae <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	08db      	lsrs	r3, r3, #3
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	08db      	lsrs	r3, r3, #3
 800bd2e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bd36:	6939      	ldr	r1, [r7, #16]
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 fc49 	bl	800c5d0 <I2C_ITAddrCplt>
 800bd3e:	e037      	b.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	085b      	lsrs	r3, r3, #1
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d031      	beq.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	085b      	lsrs	r3, r3, #1
 800bd50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d02b      	beq.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d018      	beq.n	800bd94 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	781a      	ldrb	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	851a      	strh	r2, [r3, #40]	; 0x28
 800bd92:	e00d      	b.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd9a:	d002      	beq.n	800bda2 <I2C_Slave_ISR_IT+0x1e8>
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 fcd5 	bl	800c752 <I2C_ITSlaveSeqCplt>
 800bda8:	e002      	b.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bdaa:	bf00      	nop
 800bdac:	e000      	b.n	800bdb0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bdae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b088      	sub	sp, #32
 800bdc6:	af02      	add	r7, sp, #8
 800bdc8:	60f8      	str	r0, [r7, #12]
 800bdca:	60b9      	str	r1, [r7, #8]
 800bdcc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <I2C_Master_ISR_DMA+0x1a>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	e0e1      	b.n	800bfa0 <I2C_Master_ISR_DMA+0x1de>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	091b      	lsrs	r3, r3, #4
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d017      	beq.n	800be20 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	091b      	lsrs	r3, r3, #4
 800bdf4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d011      	beq.n	800be20 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2210      	movs	r2, #16
 800be02:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be08:	f043 0204 	orr.w	r2, r3, #4
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be10:	2120      	movs	r1, #32
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f001 fbd2 	bl	800d5bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f001 f98a 	bl	800d132 <I2C_Flush_TXDR>
 800be1e:	e0ba      	b.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	09db      	lsrs	r3, r3, #7
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d072      	beq.n	800bf12 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	099b      	lsrs	r3, r3, #6
 800be30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be34:	2b00      	cmp	r3, #0
 800be36:	d06c      	beq.n	800bf12 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be46:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d04e      	beq.n	800bef0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be5e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be64:	b29b      	uxth	r3, r3
 800be66:	2bff      	cmp	r3, #255	; 0xff
 800be68:	d906      	bls.n	800be78 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	22ff      	movs	r2, #255	; 0xff
 800be6e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800be70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	e010      	b.n	800be9a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be8a:	d003      	beq.n	800be94 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e002      	b.n	800be9a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800be94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be98:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	8a79      	ldrh	r1, [r7, #18]
 800bea2:	2300      	movs	r3, #0
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f001 fb55 	bl	800d558 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	b29a      	uxth	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b22      	cmp	r3, #34	; 0x22
 800beca:	d108      	bne.n	800bede <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800beda:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bedc:	e05b      	b.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800beec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800beee:	e052      	b.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800befa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800befe:	d003      	beq.n	800bf08 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f000 fbe9 	bl	800c6d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bf06:	e046      	b.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf08:	2140      	movs	r1, #64	; 0x40
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 fffa 	bl	800cf04 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bf10:	e041      	b.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	099b      	lsrs	r3, r3, #6
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d029      	beq.n	800bf72 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	099b      	lsrs	r3, r3, #6
 800bf22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d023      	beq.n	800bf72 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d119      	bne.n	800bf68 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf42:	d027      	beq.n	800bf94 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf4c:	d108      	bne.n	800bf60 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf5c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bf5e:	e019      	b.n	800bf94 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 fbb9 	bl	800c6d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bf66:	e015      	b.n	800bf94 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf68:	2140      	movs	r1, #64	; 0x40
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 ffca 	bl	800cf04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bf70:	e010      	b.n	800bf94 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00b      	beq.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	095b      	lsrs	r3, r3, #5
 800bf82:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 fc3f 	bl	800c810 <I2C_ITMasterCplt>
 800bf92:	e000      	b.n	800bf96 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bf94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3718      	adds	r7, #24
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800bfb4:	4b92      	ldr	r3, [pc, #584]	; (800c200 <I2C_Mem_ISR_DMA+0x258>)
 800bfb6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d101      	bne.n	800bfc6 <I2C_Mem_ISR_DMA+0x1e>
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	e118      	b.n	800c1f8 <I2C_Mem_ISR_DMA+0x250>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	091b      	lsrs	r3, r3, #4
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d017      	beq.n	800c00a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	091b      	lsrs	r3, r3, #4
 800bfde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d011      	beq.n	800c00a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2210      	movs	r2, #16
 800bfec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff2:	f043 0204 	orr.w	r2, r3, #4
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bffa:	2120      	movs	r1, #32
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f001 fadd 	bl	800d5bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f001 f895 	bl	800d132 <I2C_Flush_TXDR>
 800c008:	e0f1      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	085b      	lsrs	r3, r3, #1
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00f      	beq.n	800c036 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	085b      	lsrs	r3, r3, #1
 800c01a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c02a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c032:	651a      	str	r2, [r3, #80]	; 0x50
 800c034:	e0db      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	09db      	lsrs	r3, r3, #7
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d060      	beq.n	800c104 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	099b      	lsrs	r3, r3, #6
 800c046:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d05a      	beq.n	800c104 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c04e:	2101      	movs	r1, #1
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f001 fb37 	bl	800d6c4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c056:	2110      	movs	r1, #16
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f001 faaf 	bl	800d5bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c062:	b29b      	uxth	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	d048      	beq.n	800c0fa <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	2bff      	cmp	r3, #255	; 0xff
 800c070:	d910      	bls.n	800c094 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c07c:	b299      	uxth	r1, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c082:	b2da      	uxtb	r2, r3
 800c084:	2300      	movs	r3, #0
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f001 fa63 	bl	800d558 <I2C_TransferConfig>
 800c092:	e011      	b.n	800c0b8 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c098:	b29a      	uxth	r2, r3
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0a2:	b299      	uxth	r1, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f001 fa50 	bl	800d558 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b22      	cmp	r3, #34	; 0x22
 800c0d4:	d108      	bne.n	800c0e8 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c0e6:	e082      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c0f8:	e079      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c0fa:	2140      	movs	r1, #64	; 0x40
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 ff01 	bl	800cf04 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c102:	e074      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	099b      	lsrs	r3, r3, #6
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d05e      	beq.n	800c1ce <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	099b      	lsrs	r3, r3, #6
 800c114:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d058      	beq.n	800c1ce <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c11c:	2101      	movs	r1, #1
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f001 fad0 	bl	800d6c4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c124:	2110      	movs	r1, #16
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f001 fa48 	bl	800d5bc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b22      	cmp	r3, #34	; 0x22
 800c136:	d101      	bne.n	800c13c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c138:	4b32      	ldr	r3, [pc, #200]	; (800c204 <I2C_Mem_ISR_DMA+0x25c>)
 800c13a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c140:	b29b      	uxth	r3, r3
 800c142:	2bff      	cmp	r3, #255	; 0xff
 800c144:	d910      	bls.n	800c168 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	22ff      	movs	r2, #255	; 0xff
 800c14a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c150:	b299      	uxth	r1, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c156:	b2da      	uxtb	r2, r3
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f001 f9f9 	bl	800d558 <I2C_TransferConfig>
 800c166:	e011      	b.n	800c18c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c176:	b299      	uxth	r1, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f001 f9e6 	bl	800d558 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c190:	b29a      	uxth	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	b29a      	uxth	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b22      	cmp	r3, #34	; 0x22
 800c1a8:	d108      	bne.n	800c1bc <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1b8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1ba:	e018      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1ca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1cc:	e00f      	b.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	095b      	lsrs	r3, r3, #5
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d009      	beq.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	095b      	lsrs	r3, r3, #5
 800c1de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c1e6:	68b9      	ldr	r1, [r7, #8]
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 fb11 	bl	800c810 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	80002000 	.word	0x80002000
 800c204:	80002400 	.word	0x80002400

0800c208 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c224:	2b01      	cmp	r3, #1
 800c226:	d101      	bne.n	800c22c <I2C_Slave_ISR_DMA+0x24>
 800c228:	2302      	movs	r3, #2
 800c22a:	e1cc      	b.n	800c5c6 <I2C_Slave_ISR_DMA+0x3be>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	095b      	lsrs	r3, r3, #5
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	095b      	lsrs	r3, r3, #5
 800c244:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d004      	beq.n	800c256 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f000 fba8 	bl	800c9a4 <I2C_ITSlaveCplt>
 800c254:	e1b2      	b.n	800c5bc <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	091b      	lsrs	r3, r3, #4
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 819c 	beq.w	800c59c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	091b      	lsrs	r3, r3, #4
 800c268:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 8195 	beq.w	800c59c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	0b9b      	lsrs	r3, r3, #14
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d106      	bne.n	800c28c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	0bdb      	lsrs	r3, r3, #15
 800c282:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 8181 	beq.w	800c58e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c290:	2b00      	cmp	r3, #0
 800c292:	d07c      	beq.n	800c38e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	0bdb      	lsrs	r3, r3, #15
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d076      	beq.n	800c38e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a75      	ldr	r2, [pc, #468]	; (800c47c <I2C_Slave_ISR_DMA+0x274>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d059      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a73      	ldr	r2, [pc, #460]	; (800c480 <I2C_Slave_ISR_DMA+0x278>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d053      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a71      	ldr	r2, [pc, #452]	; (800c484 <I2C_Slave_ISR_DMA+0x27c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d04d      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a6f      	ldr	r2, [pc, #444]	; (800c488 <I2C_Slave_ISR_DMA+0x280>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d047      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a6d      	ldr	r2, [pc, #436]	; (800c48c <I2C_Slave_ISR_DMA+0x284>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d041      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a6b      	ldr	r2, [pc, #428]	; (800c490 <I2C_Slave_ISR_DMA+0x288>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d03b      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a69      	ldr	r2, [pc, #420]	; (800c494 <I2C_Slave_ISR_DMA+0x28c>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d035      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a67      	ldr	r2, [pc, #412]	; (800c498 <I2C_Slave_ISR_DMA+0x290>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d02f      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a65      	ldr	r2, [pc, #404]	; (800c49c <I2C_Slave_ISR_DMA+0x294>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d029      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a63      	ldr	r2, [pc, #396]	; (800c4a0 <I2C_Slave_ISR_DMA+0x298>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d023      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a61      	ldr	r2, [pc, #388]	; (800c4a4 <I2C_Slave_ISR_DMA+0x29c>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d01d      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a5f      	ldr	r2, [pc, #380]	; (800c4a8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d017      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a5d      	ldr	r2, [pc, #372]	; (800c4ac <I2C_Slave_ISR_DMA+0x2a4>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d011      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a5b      	ldr	r2, [pc, #364]	; (800c4b0 <I2C_Slave_ISR_DMA+0x2a8>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d00b      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a59      	ldr	r2, [pc, #356]	; (800c4b4 <I2C_Slave_ISR_DMA+0x2ac>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d005      	beq.n	800c360 <I2C_Slave_ISR_DMA+0x158>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a57      	ldr	r2, [pc, #348]	; (800c4b8 <I2C_Slave_ISR_DMA+0x2b0>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d109      	bne.n	800c374 <I2C_Slave_ISR_DMA+0x16c>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bf0c      	ite	eq
 800c36c:	2301      	moveq	r3, #1
 800c36e:	2300      	movne	r3, #0
 800c370:	b2db      	uxtb	r3, r3
 800c372:	e008      	b.n	800c386 <I2C_Slave_ISR_DMA+0x17e>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	bf0c      	ite	eq
 800c380:	2301      	moveq	r3, #1
 800c382:	2300      	movne	r3, #0
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c38a:	2301      	movs	r3, #1
 800c38c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 809f 	beq.w	800c4d6 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	0b9b      	lsrs	r3, r3, #14
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 8098 	beq.w	800c4d6 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a33      	ldr	r2, [pc, #204]	; (800c47c <I2C_Slave_ISR_DMA+0x274>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d059      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a31      	ldr	r2, [pc, #196]	; (800c480 <I2C_Slave_ISR_DMA+0x278>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d053      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a2f      	ldr	r2, [pc, #188]	; (800c484 <I2C_Slave_ISR_DMA+0x27c>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d04d      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a2d      	ldr	r2, [pc, #180]	; (800c488 <I2C_Slave_ISR_DMA+0x280>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d047      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a2b      	ldr	r2, [pc, #172]	; (800c48c <I2C_Slave_ISR_DMA+0x284>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d041      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a29      	ldr	r2, [pc, #164]	; (800c490 <I2C_Slave_ISR_DMA+0x288>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d03b      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a27      	ldr	r2, [pc, #156]	; (800c494 <I2C_Slave_ISR_DMA+0x28c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d035      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a25      	ldr	r2, [pc, #148]	; (800c498 <I2C_Slave_ISR_DMA+0x290>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d02f      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a23      	ldr	r2, [pc, #140]	; (800c49c <I2C_Slave_ISR_DMA+0x294>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d029      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a21      	ldr	r2, [pc, #132]	; (800c4a0 <I2C_Slave_ISR_DMA+0x298>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d023      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a1f      	ldr	r2, [pc, #124]	; (800c4a4 <I2C_Slave_ISR_DMA+0x29c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d01d      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a1d      	ldr	r2, [pc, #116]	; (800c4a8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d017      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a1b      	ldr	r2, [pc, #108]	; (800c4ac <I2C_Slave_ISR_DMA+0x2a4>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d011      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a19      	ldr	r2, [pc, #100]	; (800c4b0 <I2C_Slave_ISR_DMA+0x2a8>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d00b      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a17      	ldr	r2, [pc, #92]	; (800c4b4 <I2C_Slave_ISR_DMA+0x2ac>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d005      	beq.n	800c466 <I2C_Slave_ISR_DMA+0x25e>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a15      	ldr	r2, [pc, #84]	; (800c4b8 <I2C_Slave_ISR_DMA+0x2b0>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d12a      	bne.n	800c4bc <I2C_Slave_ISR_DMA+0x2b4>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	bf0c      	ite	eq
 800c472:	2301      	moveq	r3, #1
 800c474:	2300      	movne	r3, #0
 800c476:	b2db      	uxtb	r3, r3
 800c478:	e029      	b.n	800c4ce <I2C_Slave_ISR_DMA+0x2c6>
 800c47a:	bf00      	nop
 800c47c:	40020010 	.word	0x40020010
 800c480:	40020028 	.word	0x40020028
 800c484:	40020040 	.word	0x40020040
 800c488:	40020058 	.word	0x40020058
 800c48c:	40020070 	.word	0x40020070
 800c490:	40020088 	.word	0x40020088
 800c494:	400200a0 	.word	0x400200a0
 800c498:	400200b8 	.word	0x400200b8
 800c49c:	40020410 	.word	0x40020410
 800c4a0:	40020428 	.word	0x40020428
 800c4a4:	40020440 	.word	0x40020440
 800c4a8:	40020458 	.word	0x40020458
 800c4ac:	40020470 	.word	0x40020470
 800c4b0:	40020488 	.word	0x40020488
 800c4b4:	400204a0 	.word	0x400204a0
 800c4b8:	400204b8 	.word	0x400204b8
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bf0c      	ite	eq
 800c4c8:	2301      	moveq	r3, #1
 800c4ca:	2300      	movne	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d128      	bne.n	800c52e <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	2b28      	cmp	r3, #40	; 0x28
 800c4e6:	d108      	bne.n	800c4fa <I2C_Slave_ISR_DMA+0x2f2>
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ee:	d104      	bne.n	800c4fa <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fcb0 	bl	800ce58 <I2C_ITListenCplt>
 800c4f8:	e048      	b.n	800c58c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b29      	cmp	r3, #41	; 0x29
 800c504:	d10e      	bne.n	800c524 <I2C_Slave_ISR_DMA+0x31c>
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c50c:	d00a      	beq.n	800c524 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2210      	movs	r2, #16
 800c514:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 fe0b 	bl	800d132 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f000 f918 	bl	800c752 <I2C_ITSlaveSeqCplt>
 800c522:	e033      	b.n	800c58c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2210      	movs	r2, #16
 800c52a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c52c:	e034      	b.n	800c598 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2210      	movs	r2, #16
 800c534:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53a:	f043 0204 	orr.w	r2, r3, #4
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c548:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <I2C_Slave_ISR_DMA+0x350>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c556:	d11f      	bne.n	800c598 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c558:	7dfb      	ldrb	r3, [r7, #23]
 800c55a:	2b21      	cmp	r3, #33	; 0x21
 800c55c:	d002      	beq.n	800c564 <I2C_Slave_ISR_DMA+0x35c>
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	2b29      	cmp	r3, #41	; 0x29
 800c562:	d103      	bne.n	800c56c <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2221      	movs	r2, #33	; 0x21
 800c568:	631a      	str	r2, [r3, #48]	; 0x30
 800c56a:	e008      	b.n	800c57e <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	2b22      	cmp	r3, #34	; 0x22
 800c570:	d002      	beq.n	800c578 <I2C_Slave_ISR_DMA+0x370>
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	2b2a      	cmp	r3, #42	; 0x2a
 800c576:	d102      	bne.n	800c57e <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2222      	movs	r2, #34	; 0x22
 800c57c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c582:	4619      	mov	r1, r3
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 fcbd 	bl	800cf04 <I2C_ITError>
      if (treatdmanack == 1U)
 800c58a:	e005      	b.n	800c598 <I2C_Slave_ISR_DMA+0x390>
 800c58c:	e004      	b.n	800c598 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2210      	movs	r2, #16
 800c594:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c596:	e011      	b.n	800c5bc <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c598:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c59a:	e00f      	b.n	800c5bc <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	08db      	lsrs	r3, r3, #3
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d009      	beq.n	800c5bc <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	08db      	lsrs	r3, r3, #3
 800c5ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c5b4:	68b9      	ldr	r1, [r7, #8]
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f000 f80a 	bl	800c5d0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3720      	adds	r7, #32
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop

0800c5d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c5e6:	2b28      	cmp	r3, #40	; 0x28
 800c5e8:	d16a      	bne.n	800c6c0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	0c1b      	lsrs	r3, r3, #16
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	0c1b      	lsrs	r3, r3, #16
 800c602:	b29b      	uxth	r3, r3
 800c604:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c608:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	b29b      	uxth	r3, r3
 800c612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c616:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c624:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d138      	bne.n	800c6a0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c62e:	897b      	ldrh	r3, [r7, #10]
 800c630:	09db      	lsrs	r3, r3, #7
 800c632:	b29a      	uxth	r2, r3
 800c634:	89bb      	ldrh	r3, [r7, #12]
 800c636:	4053      	eors	r3, r2
 800c638:	b29b      	uxth	r3, r3
 800c63a:	f003 0306 	and.w	r3, r3, #6
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d11c      	bne.n	800c67c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c642:	897b      	ldrh	r3, [r7, #10]
 800c644:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c654:	2b02      	cmp	r3, #2
 800c656:	d13b      	bne.n	800c6d0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2208      	movs	r2, #8
 800c664:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c66e:	89ba      	ldrh	r2, [r7, #12]
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff f91e 	bl	800b8b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c67a:	e029      	b.n	800c6d0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c67c:	893b      	ldrh	r3, [r7, #8]
 800c67e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 f81d 	bl	800d6c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c692:	89ba      	ldrh	r2, [r7, #12]
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff f90c 	bl	800b8b6 <HAL_I2C_AddrCallback>
}
 800c69e:	e017      	b.n	800c6d0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 f80d 	bl	800d6c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6b2:	89ba      	ldrh	r2, [r7, #12]
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff f8fc 	bl	800b8b6 <HAL_I2C_AddrCallback>
}
 800c6be:	e007      	b.n	800c6d0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c6d0:	bf00      	nop
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b21      	cmp	r3, #33	; 0x21
 800c6f2:	d115      	bne.n	800c720 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2211      	movs	r2, #17
 800c700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c708:	2101      	movs	r1, #1
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 ffda 	bl	800d6c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff f8a4 	bl	800b866 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c71e:	e014      	b.n	800c74a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2220      	movs	r2, #32
 800c724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2212      	movs	r2, #18
 800c72c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c734:	2102      	movs	r1, #2
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 ffc4 	bl	800d6c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff f898 	bl	800b87a <HAL_I2C_MasterRxCpltCallback>
}
 800c74a:	bf00      	nop
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	0b9b      	lsrs	r3, r3, #14
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d008      	beq.n	800c788 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	e00d      	b.n	800c7a4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	0bdb      	lsrs	r3, r3, #15
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d007      	beq.n	800c7a4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c7a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b29      	cmp	r3, #41	; 0x29
 800c7ae:	d112      	bne.n	800c7d6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2228      	movs	r2, #40	; 0x28
 800c7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2221      	movs	r2, #33	; 0x21
 800c7bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c7be:	2101      	movs	r1, #1
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 ff7f 	bl	800d6c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7ff f85d 	bl	800b88e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c7d4:	e017      	b.n	800c806 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e0:	d111      	bne.n	800c806 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2228      	movs	r2, #40	; 0x28
 800c7e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2222      	movs	r2, #34	; 0x22
 800c7ee:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c7f0:	2102      	movs	r1, #2
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 ff66 	bl	800d6c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff f84e 	bl	800b8a2 <HAL_I2C_SlaveRxCpltCallback>
}
 800c806:	bf00      	nop
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2220      	movs	r2, #32
 800c824:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	2b21      	cmp	r3, #33	; 0x21
 800c830:	d107      	bne.n	800c842 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c832:	2101      	movs	r1, #1
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 ff45 	bl	800d6c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2211      	movs	r2, #17
 800c83e:	631a      	str	r2, [r3, #48]	; 0x30
 800c840:	e00c      	b.n	800c85c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b22      	cmp	r3, #34	; 0x22
 800c84c:	d106      	bne.n	800c85c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c84e:	2102      	movs	r1, #2
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 ff37 	bl	800d6c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2212      	movs	r2, #18
 800c85a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6859      	ldr	r1, [r3, #4]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	4b4d      	ldr	r3, [pc, #308]	; (800c99c <I2C_ITMasterCplt+0x18c>)
 800c868:	400b      	ands	r3, r1
 800c86a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a4a      	ldr	r2, [pc, #296]	; (800c9a0 <I2C_ITMasterCplt+0x190>)
 800c876:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	091b      	lsrs	r3, r3, #4
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d009      	beq.n	800c898 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2210      	movs	r2, #16
 800c88a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c890:	f043 0204 	orr.w	r2, r3, #4
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b60      	cmp	r3, #96	; 0x60
 800c8a2:	d10b      	bne.n	800c8bc <I2C_ITMasterCplt+0xac>
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	089b      	lsrs	r3, r3, #2
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fc38 	bl	800d132 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b60      	cmp	r3, #96	; 0x60
 800c8d2:	d002      	beq.n	800c8da <I2C_ITMasterCplt+0xca>
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d006      	beq.n	800c8e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fb0f 	bl	800cf04 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c8e6:	e054      	b.n	800c992 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b21      	cmp	r3, #33	; 0x21
 800c8f2:	d124      	bne.n	800c93e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b40      	cmp	r3, #64	; 0x40
 800c90c:	d10b      	bne.n	800c926 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7fe ffe1 	bl	800b8e6 <HAL_I2C_MemTxCpltCallback>
}
 800c924:	e035      	b.n	800c992 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7fe ff95 	bl	800b866 <HAL_I2C_MasterTxCpltCallback>
}
 800c93c:	e029      	b.n	800c992 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b22      	cmp	r3, #34	; 0x22
 800c948:	d123      	bne.n	800c992 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2220      	movs	r2, #32
 800c94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b40      	cmp	r3, #64	; 0x40
 800c962:	d10b      	bne.n	800c97c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fe ffc0 	bl	800b8fa <HAL_I2C_MemRxCpltCallback>
}
 800c97a:	e00a      	b.n	800c992 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7fe ff74 	bl	800b87a <HAL_I2C_MasterRxCpltCallback>
}
 800c992:	bf00      	nop
 800c994:	3718      	adds	r7, #24
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	fe00e800 	.word	0xfe00e800
 800c9a0:	ffff0000 	.word	0xffff0000

0800c9a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9be:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9c6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c9d0:	7afb      	ldrb	r3, [r7, #11]
 800c9d2:	2b21      	cmp	r3, #33	; 0x21
 800c9d4:	d002      	beq.n	800c9dc <I2C_ITSlaveCplt+0x38>
 800c9d6:	7afb      	ldrb	r3, [r7, #11]
 800c9d8:	2b29      	cmp	r3, #41	; 0x29
 800c9da:	d108      	bne.n	800c9ee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c9dc:	f248 0101 	movw	r1, #32769	; 0x8001
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fe6f 	bl	800d6c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2221      	movs	r2, #33	; 0x21
 800c9ea:	631a      	str	r2, [r3, #48]	; 0x30
 800c9ec:	e019      	b.n	800ca22 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	2b22      	cmp	r3, #34	; 0x22
 800c9f2:	d002      	beq.n	800c9fa <I2C_ITSlaveCplt+0x56>
 800c9f4:	7afb      	ldrb	r3, [r7, #11]
 800c9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f8:	d108      	bne.n	800ca0c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c9fa:	f248 0102 	movw	r1, #32770	; 0x8002
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fe60 	bl	800d6c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2222      	movs	r2, #34	; 0x22
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30
 800ca0a:	e00a      	b.n	800ca22 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ca0c:	7afb      	ldrb	r3, [r7, #11]
 800ca0e:	2b28      	cmp	r3, #40	; 0x28
 800ca10:	d107      	bne.n	800ca22 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ca12:	f248 0103 	movw	r1, #32771	; 0x8003
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fe54 	bl	800d6c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	685a      	ldr	r2, [r3, #4]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca30:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6859      	ldr	r1, [r3, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	4b80      	ldr	r3, [pc, #512]	; (800cc40 <I2C_ITSlaveCplt+0x29c>)
 800ca3e:	400b      	ands	r3, r1
 800ca40:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fb75 	bl	800d132 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	0b9b      	lsrs	r3, r3, #14
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d07a      	beq.n	800cb4a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 8112 	beq.w	800cc92 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a73      	ldr	r2, [pc, #460]	; (800cc44 <I2C_ITSlaveCplt+0x2a0>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d059      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a71      	ldr	r2, [pc, #452]	; (800cc48 <I2C_ITSlaveCplt+0x2a4>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d053      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a6f      	ldr	r2, [pc, #444]	; (800cc4c <I2C_ITSlaveCplt+0x2a8>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d04d      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a6d      	ldr	r2, [pc, #436]	; (800cc50 <I2C_ITSlaveCplt+0x2ac>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d047      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a6b      	ldr	r2, [pc, #428]	; (800cc54 <I2C_ITSlaveCplt+0x2b0>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d041      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a69      	ldr	r2, [pc, #420]	; (800cc58 <I2C_ITSlaveCplt+0x2b4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d03b      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a67      	ldr	r2, [pc, #412]	; (800cc5c <I2C_ITSlaveCplt+0x2b8>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d035      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a65      	ldr	r2, [pc, #404]	; (800cc60 <I2C_ITSlaveCplt+0x2bc>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d02f      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a63      	ldr	r2, [pc, #396]	; (800cc64 <I2C_ITSlaveCplt+0x2c0>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d029      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a61      	ldr	r2, [pc, #388]	; (800cc68 <I2C_ITSlaveCplt+0x2c4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d023      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a5f      	ldr	r2, [pc, #380]	; (800cc6c <I2C_ITSlaveCplt+0x2c8>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d01d      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a5d      	ldr	r2, [pc, #372]	; (800cc70 <I2C_ITSlaveCplt+0x2cc>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d017      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a5b      	ldr	r2, [pc, #364]	; (800cc74 <I2C_ITSlaveCplt+0x2d0>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d011      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a59      	ldr	r2, [pc, #356]	; (800cc78 <I2C_ITSlaveCplt+0x2d4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d00b      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a57      	ldr	r2, [pc, #348]	; (800cc7c <I2C_ITSlaveCplt+0x2d8>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d005      	beq.n	800cb2e <I2C_ITSlaveCplt+0x18a>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a55      	ldr	r2, [pc, #340]	; (800cc80 <I2C_ITSlaveCplt+0x2dc>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d105      	bne.n	800cb3a <I2C_ITSlaveCplt+0x196>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	e004      	b.n	800cb44 <I2C_ITSlaveCplt+0x1a0>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cb48:	e0a3      	b.n	800cc92 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	0bdb      	lsrs	r3, r3, #15
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 809d 	beq.w	800cc92 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 8090 	beq.w	800cc92 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a32      	ldr	r2, [pc, #200]	; (800cc44 <I2C_ITSlaveCplt+0x2a0>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d059      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a30      	ldr	r2, [pc, #192]	; (800cc48 <I2C_ITSlaveCplt+0x2a4>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d053      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a2e      	ldr	r2, [pc, #184]	; (800cc4c <I2C_ITSlaveCplt+0x2a8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d04d      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a2c      	ldr	r2, [pc, #176]	; (800cc50 <I2C_ITSlaveCplt+0x2ac>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d047      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a2a      	ldr	r2, [pc, #168]	; (800cc54 <I2C_ITSlaveCplt+0x2b0>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d041      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a28      	ldr	r2, [pc, #160]	; (800cc58 <I2C_ITSlaveCplt+0x2b4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d03b      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a26      	ldr	r2, [pc, #152]	; (800cc5c <I2C_ITSlaveCplt+0x2b8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d035      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a24      	ldr	r2, [pc, #144]	; (800cc60 <I2C_ITSlaveCplt+0x2bc>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d02f      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a22      	ldr	r2, [pc, #136]	; (800cc64 <I2C_ITSlaveCplt+0x2c0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d029      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a20      	ldr	r2, [pc, #128]	; (800cc68 <I2C_ITSlaveCplt+0x2c4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d023      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a1e      	ldr	r2, [pc, #120]	; (800cc6c <I2C_ITSlaveCplt+0x2c8>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d01d      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a1c      	ldr	r2, [pc, #112]	; (800cc70 <I2C_ITSlaveCplt+0x2cc>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d017      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a1a      	ldr	r2, [pc, #104]	; (800cc74 <I2C_ITSlaveCplt+0x2d0>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d011      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a18      	ldr	r2, [pc, #96]	; (800cc78 <I2C_ITSlaveCplt+0x2d4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00b      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a16      	ldr	r2, [pc, #88]	; (800cc7c <I2C_ITSlaveCplt+0x2d8>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d005      	beq.n	800cc32 <I2C_ITSlaveCplt+0x28e>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a14      	ldr	r2, [pc, #80]	; (800cc80 <I2C_ITSlaveCplt+0x2dc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d128      	bne.n	800cc84 <I2C_ITSlaveCplt+0x2e0>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	e027      	b.n	800cc8e <I2C_ITSlaveCplt+0x2ea>
 800cc3e:	bf00      	nop
 800cc40:	fe00e800 	.word	0xfe00e800
 800cc44:	40020010 	.word	0x40020010
 800cc48:	40020028 	.word	0x40020028
 800cc4c:	40020040 	.word	0x40020040
 800cc50:	40020058 	.word	0x40020058
 800cc54:	40020070 	.word	0x40020070
 800cc58:	40020088 	.word	0x40020088
 800cc5c:	400200a0 	.word	0x400200a0
 800cc60:	400200b8 	.word	0x400200b8
 800cc64:	40020410 	.word	0x40020410
 800cc68:	40020428 	.word	0x40020428
 800cc6c:	40020440 	.word	0x40020440
 800cc70:	40020458 	.word	0x40020458
 800cc74:	40020470 	.word	0x40020470
 800cc78:	40020488 	.word	0x40020488
 800cc7c:	400204a0 	.word	0x400204a0
 800cc80:	400204b8 	.word	0x400204b8
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	089b      	lsrs	r3, r3, #2
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d020      	beq.n	800cce0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f023 0304 	bic.w	r3, r3, #4
 800cca4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb0:	b2d2      	uxtb	r2, r2
 800ccb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00c      	beq.n	800cce0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccca:	3b01      	subs	r3, #1
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccee:	f043 0204 	orr.w	r2, r3, #4
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	091b      	lsrs	r3, r3, #4
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d04a      	beq.n	800cd98 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	091b      	lsrs	r3, r3, #4
 800cd06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d044      	beq.n	800cd98 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d128      	bne.n	800cd6a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	2b28      	cmp	r3, #40	; 0x28
 800cd22:	d108      	bne.n	800cd36 <I2C_ITSlaveCplt+0x392>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd2a:	d104      	bne.n	800cd36 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd2c:	6979      	ldr	r1, [r7, #20]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f892 	bl	800ce58 <I2C_ITListenCplt>
 800cd34:	e030      	b.n	800cd98 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b29      	cmp	r3, #41	; 0x29
 800cd40:	d10e      	bne.n	800cd60 <I2C_ITSlaveCplt+0x3bc>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd48:	d00a      	beq.n	800cd60 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2210      	movs	r2, #16
 800cd50:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f9ed 	bl	800d132 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7ff fcfa 	bl	800c752 <I2C_ITSlaveSeqCplt>
 800cd5e:	e01b      	b.n	800cd98 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2210      	movs	r2, #16
 800cd66:	61da      	str	r2, [r3, #28]
 800cd68:	e016      	b.n	800cd98 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2210      	movs	r2, #16
 800cd70:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd76:	f043 0204 	orr.w	r2, r3, #4
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <I2C_ITSlaveCplt+0x3e8>
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cd8a:	d105      	bne.n	800cd98 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f8b6 	bl	800cf04 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d010      	beq.n	800cdd0 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f8a5 	bl	800cf04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b28      	cmp	r3, #40	; 0x28
 800cdc4:	d141      	bne.n	800ce4a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cdc6:	6979      	ldr	r1, [r7, #20]
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f845 	bl	800ce58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cdce:	e03c      	b.n	800ce4a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cdd8:	d014      	beq.n	800ce04 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff fcb9 	bl	800c752 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a1c      	ldr	r2, [pc, #112]	; (800ce54 <I2C_ITSlaveCplt+0x4b0>)
 800cde4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2220      	movs	r2, #32
 800cdea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7fe fd68 	bl	800b8d2 <HAL_I2C_ListenCpltCallback>
}
 800ce02:	e022      	b.n	800ce4a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b22      	cmp	r3, #34	; 0x22
 800ce0e:	d10e      	bne.n	800ce2e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2220      	movs	r2, #32
 800ce14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7fe fd3b 	bl	800b8a2 <HAL_I2C_SlaveRxCpltCallback>
}
 800ce2c:	e00d      	b.n	800ce4a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2220      	movs	r2, #32
 800ce32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7fe fd22 	bl	800b88e <HAL_I2C_SlaveTxCpltCallback>
}
 800ce4a:	bf00      	nop
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	ffff0000 	.word	0xffff0000

0800ce58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4a26      	ldr	r2, [pc, #152]	; (800cf00 <I2C_ITListenCplt+0xa8>)
 800ce66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2220      	movs	r2, #32
 800ce72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	089b      	lsrs	r3, r3, #2
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d022      	beq.n	800ced6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea2:	1c5a      	adds	r2, r3, #1
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d012      	beq.n	800ced6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	3b01      	subs	r3, #1
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cece:	f043 0204 	orr.w	r2, r3, #4
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ced6:	f248 0103 	movw	r1, #32771	; 0x8003
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fbf2 	bl	800d6c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2210      	movs	r2, #16
 800cee6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7fe fcee 	bl	800b8d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	ffff0000 	.word	0xffff0000

0800cf04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf14:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a6d      	ldr	r2, [pc, #436]	; (800d0d8 <I2C_ITError+0x1d4>)
 800cf22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
 800cf38:	2b28      	cmp	r3, #40	; 0x28
 800cf3a:	d005      	beq.n	800cf48 <I2C_ITError+0x44>
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	2b29      	cmp	r3, #41	; 0x29
 800cf40:	d002      	beq.n	800cf48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	2b2a      	cmp	r3, #42	; 0x2a
 800cf46:	d10b      	bne.n	800cf60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf48:	2103      	movs	r1, #3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 fbba 	bl	800d6c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2228      	movs	r2, #40	; 0x28
 800cf54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a60      	ldr	r2, [pc, #384]	; (800d0dc <I2C_ITError+0x1d8>)
 800cf5c:	635a      	str	r2, [r3, #52]	; 0x34
 800cf5e:	e030      	b.n	800cfc2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf60:	f248 0103 	movw	r1, #32771	; 0x8003
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fbad 	bl	800d6c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f8e1 	bl	800d132 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b60      	cmp	r3, #96	; 0x60
 800cf7a:	d01f      	beq.n	800cfbc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	f003 0320 	and.w	r3, r3, #32
 800cf8e:	2b20      	cmp	r3, #32
 800cf90:	d114      	bne.n	800cfbc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	f003 0310 	and.w	r3, r3, #16
 800cf9c:	2b10      	cmp	r3, #16
 800cf9e:	d109      	bne.n	800cfb4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2210      	movs	r2, #16
 800cfa6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfac:	f043 0204 	orr.w	r2, r3, #4
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2220      	movs	r2, #32
 800cfba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d039      	beq.n	800d044 <I2C_ITError+0x140>
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b11      	cmp	r3, #17
 800cfd4:	d002      	beq.n	800cfdc <I2C_ITError+0xd8>
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	2b21      	cmp	r3, #33	; 0x21
 800cfda:	d133      	bne.n	800d044 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfea:	d107      	bne.n	800cffc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cffa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d000:	4618      	mov	r0, r3
 800d002:	f7fd f857 	bl	800a0b4 <HAL_DMA_GetState>
 800d006:	4603      	mov	r3, r0
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d017      	beq.n	800d03c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d010:	4a33      	ldr	r2, [pc, #204]	; (800d0e0 <I2C_ITError+0x1dc>)
 800d012:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d020:	4618      	mov	r0, r3
 800d022:	f7fb fed7 	bl	8008dd4 <HAL_DMA_Abort_IT>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d04d      	beq.n	800d0c8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d036:	4610      	mov	r0, r2
 800d038:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d03a:	e045      	b.n	800d0c8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f851 	bl	800d0e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d042:	e041      	b.n	800d0c8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d039      	beq.n	800d0c0 <I2C_ITError+0x1bc>
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	2b12      	cmp	r3, #18
 800d050:	d002      	beq.n	800d058 <I2C_ITError+0x154>
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2b22      	cmp	r3, #34	; 0x22
 800d056:	d133      	bne.n	800d0c0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d066:	d107      	bne.n	800d078 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d076:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fd f819 	bl	800a0b4 <HAL_DMA_GetState>
 800d082:	4603      	mov	r3, r0
 800d084:	2b01      	cmp	r3, #1
 800d086:	d017      	beq.n	800d0b8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08c:	4a14      	ldr	r2, [pc, #80]	; (800d0e0 <I2C_ITError+0x1dc>)
 800d08e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fb fe99 	bl	8008dd4 <HAL_DMA_Abort_IT>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d011      	beq.n	800d0cc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0b6:	e009      	b.n	800d0cc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f813 	bl	800d0e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0be:	e005      	b.n	800d0cc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f80f 	bl	800d0e4 <I2C_TreatErrorCallback>
  }
}
 800d0c6:	e002      	b.n	800d0ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0c8:	bf00      	nop
 800d0ca:	e000      	b.n	800d0ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0cc:	bf00      	nop
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	ffff0000 	.word	0xffff0000
 800d0dc:	0800bbbb 	.word	0x0800bbbb
 800d0e0:	0800d51d 	.word	0x0800d51d

0800d0e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b60      	cmp	r3, #96	; 0x60
 800d0f6:	d10e      	bne.n	800d116 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7fe fc07 	bl	800b922 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d114:	e009      	b.n	800d12a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7fe fbf2 	bl	800b90e <HAL_I2C_ErrorCallback>
}
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d132:	b480      	push	{r7}
 800d134:	b083      	sub	sp, #12
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b02      	cmp	r3, #2
 800d146:	d103      	bne.n	800d150 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2200      	movs	r2, #0
 800d14e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d007      	beq.n	800d16e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	699a      	ldr	r2, [r3, #24]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f042 0201 	orr.w	r2, r2, #1
 800d16c:	619a      	str	r2, [r3, #24]
  }
}
 800d16e:	bf00      	nop
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d186:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d196:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d104      	bne.n	800d1ac <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d1a2:	2120      	movs	r1, #32
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 fa09 	bl	800d5bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d1aa:	e02d      	b.n	800d208 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d1b4:	441a      	add	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	2bff      	cmp	r3, #255	; 0xff
 800d1c2:	d903      	bls.n	800d1cc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	22ff      	movs	r2, #255	; 0xff
 800d1c8:	851a      	strh	r2, [r3, #40]	; 0x28
 800d1ca:	e004      	b.n	800d1d6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3328      	adds	r3, #40	; 0x28
 800d1e6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d1ec:	f7fb f86a 	bl	80082c4 <HAL_DMA_Start_IT>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d1f6:	2110      	movs	r1, #16
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7ff fe83 	bl	800cf04 <I2C_ITError>
}
 800d1fe:	e003      	b.n	800d208 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d200:	2140      	movs	r1, #64	; 0x40
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 f9da 	bl	800d5bc <I2C_Enable_IRQ>
}
 800d208:	bf00      	nop
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d22c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d232:	b29b      	uxth	r3, r3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d104      	bne.n	800d242 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d238:	2120      	movs	r1, #32
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f000 f9be 	bl	800d5bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d240:	e02d      	b.n	800d29e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d24a:	441a      	add	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d254:	b29b      	uxth	r3, r3
 800d256:	2bff      	cmp	r3, #255	; 0xff
 800d258:	d903      	bls.n	800d262 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	22ff      	movs	r2, #255	; 0xff
 800d25e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d260:	e004      	b.n	800d26c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d266:	b29a      	uxth	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3324      	adds	r3, #36	; 0x24
 800d276:	4619      	mov	r1, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d282:	f7fb f81f 	bl	80082c4 <HAL_DMA_Start_IT>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d004      	beq.n	800d296 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d28c:	2110      	movs	r1, #16
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f7ff fe38 	bl	800cf04 <I2C_ITError>
}
 800d294:	e003      	b.n	800d29e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d296:	2140      	movs	r1, #64	; 0x40
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 f98f 	bl	800d5bc <I2C_Enable_IRQ>
}
 800d29e:	bf00      	nop
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d076      	beq.n	800d3b0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a71      	ldr	r2, [pc, #452]	; (800d490 <I2C_DMAError+0x1e8>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d059      	beq.n	800d382 <I2C_DMAError+0xda>
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a6f      	ldr	r2, [pc, #444]	; (800d494 <I2C_DMAError+0x1ec>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d053      	beq.n	800d382 <I2C_DMAError+0xda>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a6d      	ldr	r2, [pc, #436]	; (800d498 <I2C_DMAError+0x1f0>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d04d      	beq.n	800d382 <I2C_DMAError+0xda>
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a6b      	ldr	r2, [pc, #428]	; (800d49c <I2C_DMAError+0x1f4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d047      	beq.n	800d382 <I2C_DMAError+0xda>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a69      	ldr	r2, [pc, #420]	; (800d4a0 <I2C_DMAError+0x1f8>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d041      	beq.n	800d382 <I2C_DMAError+0xda>
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a67      	ldr	r2, [pc, #412]	; (800d4a4 <I2C_DMAError+0x1fc>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d03b      	beq.n	800d382 <I2C_DMAError+0xda>
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a65      	ldr	r2, [pc, #404]	; (800d4a8 <I2C_DMAError+0x200>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d035      	beq.n	800d382 <I2C_DMAError+0xda>
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a63      	ldr	r2, [pc, #396]	; (800d4ac <I2C_DMAError+0x204>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d02f      	beq.n	800d382 <I2C_DMAError+0xda>
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a61      	ldr	r2, [pc, #388]	; (800d4b0 <I2C_DMAError+0x208>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d029      	beq.n	800d382 <I2C_DMAError+0xda>
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a5f      	ldr	r2, [pc, #380]	; (800d4b4 <I2C_DMAError+0x20c>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d023      	beq.n	800d382 <I2C_DMAError+0xda>
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a5d      	ldr	r2, [pc, #372]	; (800d4b8 <I2C_DMAError+0x210>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d01d      	beq.n	800d382 <I2C_DMAError+0xda>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a5b      	ldr	r2, [pc, #364]	; (800d4bc <I2C_DMAError+0x214>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d017      	beq.n	800d382 <I2C_DMAError+0xda>
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a59      	ldr	r2, [pc, #356]	; (800d4c0 <I2C_DMAError+0x218>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d011      	beq.n	800d382 <I2C_DMAError+0xda>
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a57      	ldr	r2, [pc, #348]	; (800d4c4 <I2C_DMAError+0x21c>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d00b      	beq.n	800d382 <I2C_DMAError+0xda>
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a55      	ldr	r2, [pc, #340]	; (800d4c8 <I2C_DMAError+0x220>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d005      	beq.n	800d382 <I2C_DMAError+0xda>
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a53      	ldr	r2, [pc, #332]	; (800d4cc <I2C_DMAError+0x224>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d109      	bne.n	800d396 <I2C_DMAError+0xee>
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	bf0c      	ite	eq
 800d38e:	2301      	moveq	r3, #1
 800d390:	2300      	movne	r3, #0
 800d392:	b2db      	uxtb	r3, r3
 800d394:	e008      	b.n	800d3a8 <I2C_DMAError+0x100>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bf0c      	ite	eq
 800d3a2:	2301      	moveq	r3, #1
 800d3a4:	2300      	movne	r3, #0
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 8098 	beq.w	800d4ea <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a33      	ldr	r2, [pc, #204]	; (800d490 <I2C_DMAError+0x1e8>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d059      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a31      	ldr	r2, [pc, #196]	; (800d494 <I2C_DMAError+0x1ec>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d053      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a2f      	ldr	r2, [pc, #188]	; (800d498 <I2C_DMAError+0x1f0>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d04d      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a2d      	ldr	r2, [pc, #180]	; (800d49c <I2C_DMAError+0x1f4>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d047      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a2b      	ldr	r2, [pc, #172]	; (800d4a0 <I2C_DMAError+0x1f8>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d041      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a29      	ldr	r2, [pc, #164]	; (800d4a4 <I2C_DMAError+0x1fc>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d03b      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a27      	ldr	r2, [pc, #156]	; (800d4a8 <I2C_DMAError+0x200>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d035      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a25      	ldr	r2, [pc, #148]	; (800d4ac <I2C_DMAError+0x204>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d02f      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a23      	ldr	r2, [pc, #140]	; (800d4b0 <I2C_DMAError+0x208>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d029      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a21      	ldr	r2, [pc, #132]	; (800d4b4 <I2C_DMAError+0x20c>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d023      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a1f      	ldr	r2, [pc, #124]	; (800d4b8 <I2C_DMAError+0x210>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d01d      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a1d      	ldr	r2, [pc, #116]	; (800d4bc <I2C_DMAError+0x214>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d017      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a1b      	ldr	r2, [pc, #108]	; (800d4c0 <I2C_DMAError+0x218>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d011      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a19      	ldr	r2, [pc, #100]	; (800d4c4 <I2C_DMAError+0x21c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d00b      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a17      	ldr	r2, [pc, #92]	; (800d4c8 <I2C_DMAError+0x220>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d005      	beq.n	800d47a <I2C_DMAError+0x1d2>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a15      	ldr	r2, [pc, #84]	; (800d4cc <I2C_DMAError+0x224>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d12a      	bne.n	800d4d0 <I2C_DMAError+0x228>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	bf0c      	ite	eq
 800d486:	2301      	moveq	r3, #1
 800d488:	2300      	movne	r3, #0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	e029      	b.n	800d4e2 <I2C_DMAError+0x23a>
 800d48e:	bf00      	nop
 800d490:	40020010 	.word	0x40020010
 800d494:	40020028 	.word	0x40020028
 800d498:	40020040 	.word	0x40020040
 800d49c:	40020058 	.word	0x40020058
 800d4a0:	40020070 	.word	0x40020070
 800d4a4:	40020088 	.word	0x40020088
 800d4a8:	400200a0 	.word	0x400200a0
 800d4ac:	400200b8 	.word	0x400200b8
 800d4b0:	40020410 	.word	0x40020410
 800d4b4:	40020428 	.word	0x40020428
 800d4b8:	40020440 	.word	0x40020440
 800d4bc:	40020458 	.word	0x40020458
 800d4c0:	40020470 	.word	0x40020470
 800d4c4:	40020488 	.word	0x40020488
 800d4c8:	400204a0 	.word	0x400204a0
 800d4cc:	400204b8 	.word	0x400204b8
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bf0c      	ite	eq
 800d4dc:	2301      	moveq	r3, #1
 800d4de:	2300      	movne	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7fc fdf0 	bl	800a0d0 <HAL_DMA_GetError>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d00e      	beq.n	800d514 <I2C_DMAError+0x26c>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00b      	beq.n	800d514 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d50a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d50c:	2110      	movs	r1, #16
 800d50e:	68b8      	ldr	r0, [r7, #8]
 800d510:	f7ff fcf8 	bl	800cf04 <I2C_ITError>
  }
}
 800d514:	bf00      	nop
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d528:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d536:	2200      	movs	r2, #0
 800d538:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d003      	beq.n	800d54a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	2200      	movs	r2, #0
 800d548:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff fdca 	bl	800d0e4 <I2C_TreatErrorCallback>
}
 800d550:	bf00      	nop
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	607b      	str	r3, [r7, #4]
 800d562:	460b      	mov	r3, r1
 800d564:	817b      	strh	r3, [r7, #10]
 800d566:	4613      	mov	r3, r2
 800d568:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d56a:	897b      	ldrh	r3, [r7, #10]
 800d56c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d570:	7a7b      	ldrb	r3, [r7, #9]
 800d572:	041b      	lsls	r3, r3, #16
 800d574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d578:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	4313      	orrs	r3, r2
 800d582:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d586:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	0d5b      	lsrs	r3, r3, #21
 800d592:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d596:	4b08      	ldr	r3, [pc, #32]	; (800d5b8 <I2C_TransferConfig+0x60>)
 800d598:	430b      	orrs	r3, r1
 800d59a:	43db      	mvns	r3, r3
 800d59c:	ea02 0103 	and.w	r1, r2, r3
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	697a      	ldr	r2, [r7, #20]
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d5aa:	bf00      	nop
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	03ff63ff 	.word	0x03ff63ff

0800d5bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	4a39      	ldr	r2, [pc, #228]	; (800d6b8 <I2C_Enable_IRQ+0xfc>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d032      	beq.n	800d63c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d5da:	4a38      	ldr	r2, [pc, #224]	; (800d6bc <I2C_Enable_IRQ+0x100>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d02d      	beq.n	800d63c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d5e4:	4a36      	ldr	r2, [pc, #216]	; (800d6c0 <I2C_Enable_IRQ+0x104>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d028      	beq.n	800d63c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d5ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	da03      	bge.n	800d5fa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d5f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d5fa:	887b      	ldrh	r3, [r7, #2]
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d003      	beq.n	800d60c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d60a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d60c:	887b      	ldrh	r3, [r7, #2]
 800d60e:	f003 0302 	and.w	r3, r3, #2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d61c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d61e:	887b      	ldrh	r3, [r7, #2]
 800d620:	2b10      	cmp	r3, #16
 800d622:	d103      	bne.n	800d62c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d62a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d62c:	887b      	ldrh	r3, [r7, #2]
 800d62e:	2b20      	cmp	r3, #32
 800d630:	d133      	bne.n	800d69a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f043 0320 	orr.w	r3, r3, #32
 800d638:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d63a:	e02e      	b.n	800d69a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d63c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d640:	2b00      	cmp	r3, #0
 800d642:	da03      	bge.n	800d64c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d64a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d64c:	887b      	ldrh	r3, [r7, #2]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d003      	beq.n	800d65e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d65c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d65e:	887b      	ldrh	r3, [r7, #2]
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d66e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d670:	887b      	ldrh	r3, [r7, #2]
 800d672:	2b10      	cmp	r3, #16
 800d674:	d103      	bne.n	800d67e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d67c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d67e:	887b      	ldrh	r3, [r7, #2]
 800d680:	2b20      	cmp	r3, #32
 800d682:	d103      	bne.n	800d68c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d68a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d68c:	887b      	ldrh	r3, [r7, #2]
 800d68e:	2b40      	cmp	r3, #64	; 0x40
 800d690:	d103      	bne.n	800d69a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d698:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	6819      	ldr	r1, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	430a      	orrs	r2, r1
 800d6a8:	601a      	str	r2, [r3, #0]
}
 800d6aa:	bf00      	nop
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	0800bdc3 	.word	0x0800bdc3
 800d6bc:	0800c209 	.word	0x0800c209
 800d6c0:	0800bfa9 	.word	0x0800bfa9

0800d6c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d6d4:	887b      	ldrh	r3, [r7, #2]
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00f      	beq.n	800d6fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d6e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6f2:	2b28      	cmp	r3, #40	; 0x28
 800d6f4:	d003      	beq.n	800d6fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d6fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d6fe:	887b      	ldrh	r3, [r7, #2]
 800d700:	f003 0302 	and.w	r3, r3, #2
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00f      	beq.n	800d728 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d70e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d716:	b2db      	uxtb	r3, r3
 800d718:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d71c:	2b28      	cmp	r3, #40	; 0x28
 800d71e:	d003      	beq.n	800d728 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d726:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	da03      	bge.n	800d738 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d736:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d738:	887b      	ldrh	r3, [r7, #2]
 800d73a:	2b10      	cmp	r3, #16
 800d73c:	d103      	bne.n	800d746 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d744:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d746:	887b      	ldrh	r3, [r7, #2]
 800d748:	2b20      	cmp	r3, #32
 800d74a:	d103      	bne.n	800d754 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f043 0320 	orr.w	r3, r3, #32
 800d752:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d754:	887b      	ldrh	r3, [r7, #2]
 800d756:	2b40      	cmp	r3, #64	; 0x40
 800d758:	d103      	bne.n	800d762 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d760:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6819      	ldr	r1, [r3, #0]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	43da      	mvns	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	400a      	ands	r2, r1
 800d772:	601a      	str	r2, [r3, #0]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b20      	cmp	r3, #32
 800d794:	d138      	bne.n	800d808 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d101      	bne.n	800d7a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e032      	b.n	800d80a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2224      	movs	r2, #36	; 0x24
 800d7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f022 0201 	bic.w	r2, r2, #1
 800d7c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d7d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6819      	ldr	r1, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0201 	orr.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2220      	movs	r2, #32
 800d7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	e000      	b.n	800d80a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d808:	2302      	movs	r3, #2
  }
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d816:	b480      	push	{r7}
 800d818:	b085      	sub	sp, #20
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b20      	cmp	r3, #32
 800d82a:	d139      	bne.n	800d8a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d832:	2b01      	cmp	r3, #1
 800d834:	d101      	bne.n	800d83a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d836:	2302      	movs	r3, #2
 800d838:	e033      	b.n	800d8a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2224      	movs	r2, #36	; 0x24
 800d846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f022 0201 	bic.w	r2, r2, #1
 800d858:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d868:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	021b      	lsls	r3, r3, #8
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	4313      	orrs	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f042 0201 	orr.w	r2, r2, #1
 800d88a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2220      	movs	r2, #32
 800d890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	e000      	b.n	800d8a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d8a0:	2302      	movs	r3, #2
  }
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
	...

0800d8b0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8b8:	4b0d      	ldr	r3, [pc, #52]	; (800d8f0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d8ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8be:	4a0c      	ldr	r2, [pc, #48]	; (800d8f0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d8c0:	f043 0302 	orr.w	r3, r3, #2
 800d8c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d8c8:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d8ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8ce:	f003 0302 	and.w	r3, r3, #2
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d8d6:	4b07      	ldr	r3, [pc, #28]	; (800d8f4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	4906      	ldr	r1, [pc, #24]	; (800d8f4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	604b      	str	r3, [r1, #4]
}
 800d8e2:	bf00      	nop
 800d8e4:	3714      	adds	r7, #20
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	58024400 	.word	0x58024400
 800d8f4:	58000400 	.word	0x58000400

0800d8f8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d101      	bne.n	800d90a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800d906:	2301      	movs	r3, #1
 800d908:	e041      	b.n	800d98e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800d912:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f245 5255 	movw	r2, #21845	; 0x5555
 800d91c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	6852      	ldr	r2, [r2, #4]
 800d926:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	6892      	ldr	r2, [r2, #8]
 800d930:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d932:	f7f7 ffcb 	bl	80058cc <HAL_GetTick>
 800d936:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d938:	e00f      	b.n	800d95a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d93a:	f7f7 ffc7 	bl	80058cc <HAL_GetTick>
 800d93e:	4602      	mov	r2, r0
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	2b31      	cmp	r3, #49	; 0x31
 800d946:	d908      	bls.n	800d95a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	f003 0307 	and.w	r3, r3, #7
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e019      	b.n	800d98e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	f003 0307 	and.w	r3, r3, #7
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1e8      	bne.n	800d93a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	691a      	ldr	r2, [r3, #16]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	429a      	cmp	r2, r3
 800d974:	d005      	beq.n	800d982 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	68d2      	ldr	r2, [r2, #12]
 800d97e:	611a      	str	r2, [r3, #16]
 800d980:	e004      	b.n	800d98c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d98a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d996:	b480      	push	{r7}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d9a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
	...

0800d9b8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d9c4:	4b18      	ldr	r3, [pc, #96]	; (800da28 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f023 0201 	bic.w	r2, r3, #1
 800d9cc:	4916      	ldr	r1, [pc, #88]	; (800da28 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d9d4:	4b14      	ldr	r3, [pc, #80]	; (800da28 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	4a13      	ldr	r2, [pc, #76]	; (800da28 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9da:	f023 0305 	bic.w	r3, r3, #5
 800d9de:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d9e0:	4b11      	ldr	r3, [pc, #68]	; (800da28 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	4a10      	ldr	r2, [pc, #64]	; (800da28 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9e6:	f023 0302 	bic.w	r3, r3, #2
 800d9ea:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d9ec:	4b0f      	ldr	r3, [pc, #60]	; (800da2c <HAL_PWR_EnterSTOPMode+0x74>)
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	4a0e      	ldr	r2, [pc, #56]	; (800da2c <HAL_PWR_EnterSTOPMode+0x74>)
 800d9f2:	f043 0304 	orr.w	r3, r3, #4
 800d9f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d9f8:	f3bf 8f4f 	dsb	sy
}
 800d9fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d9fe:	f3bf 8f6f 	isb	sy
}
 800da02:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d101      	bne.n	800da0e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800da0a:	bf30      	wfi
 800da0c:	e000      	b.n	800da10 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800da0e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800da10:	4b06      	ldr	r3, [pc, #24]	; (800da2c <HAL_PWR_EnterSTOPMode+0x74>)
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	4a05      	ldr	r2, [pc, #20]	; (800da2c <HAL_PWR_EnterSTOPMode+0x74>)
 800da16:	f023 0304 	bic.w	r3, r3, #4
 800da1a:	6113      	str	r3, [r2, #16]
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	58024800 	.word	0x58024800
 800da2c:	e000ed00 	.word	0xe000ed00

0800da30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800da38:	4b19      	ldr	r3, [pc, #100]	; (800daa0 <HAL_PWREx_ConfigSupply+0x70>)
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	f003 0304 	and.w	r3, r3, #4
 800da40:	2b04      	cmp	r3, #4
 800da42:	d00a      	beq.n	800da5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800da44:	4b16      	ldr	r3, [pc, #88]	; (800daa0 <HAL_PWREx_ConfigSupply+0x70>)
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	f003 0307 	and.w	r3, r3, #7
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d001      	beq.n	800da56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800da52:	2301      	movs	r3, #1
 800da54:	e01f      	b.n	800da96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	e01d      	b.n	800da96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800da5a:	4b11      	ldr	r3, [pc, #68]	; (800daa0 <HAL_PWREx_ConfigSupply+0x70>)
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	f023 0207 	bic.w	r2, r3, #7
 800da62:	490f      	ldr	r1, [pc, #60]	; (800daa0 <HAL_PWREx_ConfigSupply+0x70>)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4313      	orrs	r3, r2
 800da68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800da6a:	f7f7 ff2f 	bl	80058cc <HAL_GetTick>
 800da6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800da70:	e009      	b.n	800da86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800da72:	f7f7 ff2b 	bl	80058cc <HAL_GetTick>
 800da76:	4602      	mov	r2, r0
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da80:	d901      	bls.n	800da86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	e007      	b.n	800da96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800da86:	4b06      	ldr	r3, [pc, #24]	; (800daa0 <HAL_PWREx_ConfigSupply+0x70>)
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da92:	d1ee      	bne.n	800da72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	58024800 	.word	0x58024800

0800daa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08c      	sub	sp, #48	; 0x30
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d102      	bne.n	800dab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	f000 bc48 	b.w	800e348 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f003 0301 	and.w	r3, r3, #1
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 8088 	beq.w	800dbd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dac6:	4b99      	ldr	r3, [pc, #612]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dace:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dad0:	4b96      	ldr	r3, [pc, #600]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad8:	2b10      	cmp	r3, #16
 800dada:	d007      	beq.n	800daec <HAL_RCC_OscConfig+0x48>
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	2b18      	cmp	r3, #24
 800dae0:	d111      	bne.n	800db06 <HAL_RCC_OscConfig+0x62>
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	f003 0303 	and.w	r3, r3, #3
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d10c      	bne.n	800db06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800daec:	4b8f      	ldr	r3, [pc, #572]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d06d      	beq.n	800dbd4 <HAL_RCC_OscConfig+0x130>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d169      	bne.n	800dbd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	f000 bc21 	b.w	800e348 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db0e:	d106      	bne.n	800db1e <HAL_RCC_OscConfig+0x7a>
 800db10:	4b86      	ldr	r3, [pc, #536]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a85      	ldr	r2, [pc, #532]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	e02e      	b.n	800db7c <HAL_RCC_OscConfig+0xd8>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10c      	bne.n	800db40 <HAL_RCC_OscConfig+0x9c>
 800db26:	4b81      	ldr	r3, [pc, #516]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a80      	ldr	r2, [pc, #512]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	4b7e      	ldr	r3, [pc, #504]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a7d      	ldr	r2, [pc, #500]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db3c:	6013      	str	r3, [r2, #0]
 800db3e:	e01d      	b.n	800db7c <HAL_RCC_OscConfig+0xd8>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db48:	d10c      	bne.n	800db64 <HAL_RCC_OscConfig+0xc0>
 800db4a:	4b78      	ldr	r3, [pc, #480]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a77      	ldr	r2, [pc, #476]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	4b75      	ldr	r3, [pc, #468]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a74      	ldr	r2, [pc, #464]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	e00b      	b.n	800db7c <HAL_RCC_OscConfig+0xd8>
 800db64:	4b71      	ldr	r3, [pc, #452]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a70      	ldr	r2, [pc, #448]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	4b6e      	ldr	r3, [pc, #440]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a6d      	ldr	r2, [pc, #436]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800db76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d013      	beq.n	800dbac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db84:	f7f7 fea2 	bl	80058cc <HAL_GetTick>
 800db88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db8a:	e008      	b.n	800db9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db8c:	f7f7 fe9e 	bl	80058cc <HAL_GetTick>
 800db90:	4602      	mov	r2, r0
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	2b64      	cmp	r3, #100	; 0x64
 800db98:	d901      	bls.n	800db9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e3d4      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db9e:	4b63      	ldr	r3, [pc, #396]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0f0      	beq.n	800db8c <HAL_RCC_OscConfig+0xe8>
 800dbaa:	e014      	b.n	800dbd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbac:	f7f7 fe8e 	bl	80058cc <HAL_GetTick>
 800dbb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbb2:	e008      	b.n	800dbc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbb4:	f7f7 fe8a 	bl	80058cc <HAL_GetTick>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	2b64      	cmp	r3, #100	; 0x64
 800dbc0:	d901      	bls.n	800dbc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	e3c0      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbc6:	4b59      	ldr	r3, [pc, #356]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1f0      	bne.n	800dbb4 <HAL_RCC_OscConfig+0x110>
 800dbd2:	e000      	b.n	800dbd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 80ca 	beq.w	800dd78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbe4:	4b51      	ldr	r3, [pc, #324]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dbee:	4b4f      	ldr	r3, [pc, #316]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d007      	beq.n	800dc0a <HAL_RCC_OscConfig+0x166>
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	2b18      	cmp	r3, #24
 800dbfe:	d156      	bne.n	800dcae <HAL_RCC_OscConfig+0x20a>
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	f003 0303 	and.w	r3, r3, #3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d151      	bne.n	800dcae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc0a:	4b48      	ldr	r3, [pc, #288]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d005      	beq.n	800dc22 <HAL_RCC_OscConfig+0x17e>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e392      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dc22:	4b42      	ldr	r3, [pc, #264]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f023 0219 	bic.w	r2, r3, #25
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	493f      	ldr	r1, [pc, #252]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc30:	4313      	orrs	r3, r2
 800dc32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc34:	f7f7 fe4a 	bl	80058cc <HAL_GetTick>
 800dc38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc3a:	e008      	b.n	800dc4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc3c:	f7f7 fe46 	bl	80058cc <HAL_GetTick>
 800dc40:	4602      	mov	r2, r0
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d901      	bls.n	800dc4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e37c      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc4e:	4b37      	ldr	r3, [pc, #220]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f003 0304 	and.w	r3, r3, #4
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0f0      	beq.n	800dc3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc5a:	f7f7 fe43 	bl	80058e4 <HAL_GetREVID>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	f241 0203 	movw	r2, #4099	; 0x1003
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d817      	bhi.n	800dc98 <HAL_RCC_OscConfig+0x1f4>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	2b40      	cmp	r3, #64	; 0x40
 800dc6e:	d108      	bne.n	800dc82 <HAL_RCC_OscConfig+0x1de>
 800dc70:	4b2e      	ldr	r3, [pc, #184]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dc78:	4a2c      	ldr	r2, [pc, #176]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc80:	e07a      	b.n	800dd78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc82:	4b2a      	ldr	r3, [pc, #168]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	031b      	lsls	r3, r3, #12
 800dc90:	4926      	ldr	r1, [pc, #152]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc96:	e06f      	b.n	800dd78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc98:	4b24      	ldr	r3, [pc, #144]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	061b      	lsls	r3, r3, #24
 800dca6:	4921      	ldr	r1, [pc, #132]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dcac:	e064      	b.n	800dd78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d047      	beq.n	800dd46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dcb6:	4b1d      	ldr	r3, [pc, #116]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f023 0219 	bic.w	r2, r3, #25
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	491a      	ldr	r1, [pc, #104]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcc8:	f7f7 fe00 	bl	80058cc <HAL_GetTick>
 800dccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcce:	e008      	b.n	800dce2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dcd0:	f7f7 fdfc 	bl	80058cc <HAL_GetTick>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d901      	bls.n	800dce2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800dcde:	2303      	movs	r3, #3
 800dce0:	e332      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dce2:	4b12      	ldr	r3, [pc, #72]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 0304 	and.w	r3, r3, #4
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d0f0      	beq.n	800dcd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcee:	f7f7 fdf9 	bl	80058e4 <HAL_GetREVID>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f241 0203 	movw	r2, #4099	; 0x1003
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d819      	bhi.n	800dd30 <HAL_RCC_OscConfig+0x28c>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	2b40      	cmp	r3, #64	; 0x40
 800dd02:	d108      	bne.n	800dd16 <HAL_RCC_OscConfig+0x272>
 800dd04:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dd0c:	4a07      	ldr	r2, [pc, #28]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dd0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd12:	6053      	str	r3, [r2, #4]
 800dd14:	e030      	b.n	800dd78 <HAL_RCC_OscConfig+0x2d4>
 800dd16:	4b05      	ldr	r3, [pc, #20]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	691b      	ldr	r3, [r3, #16]
 800dd22:	031b      	lsls	r3, r3, #12
 800dd24:	4901      	ldr	r1, [pc, #4]	; (800dd2c <HAL_RCC_OscConfig+0x288>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	604b      	str	r3, [r1, #4]
 800dd2a:	e025      	b.n	800dd78 <HAL_RCC_OscConfig+0x2d4>
 800dd2c:	58024400 	.word	0x58024400
 800dd30:	4b9a      	ldr	r3, [pc, #616]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	061b      	lsls	r3, r3, #24
 800dd3e:	4997      	ldr	r1, [pc, #604]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd40:	4313      	orrs	r3, r2
 800dd42:	604b      	str	r3, [r1, #4]
 800dd44:	e018      	b.n	800dd78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dd46:	4b95      	ldr	r3, [pc, #596]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a94      	ldr	r2, [pc, #592]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd4c:	f023 0301 	bic.w	r3, r3, #1
 800dd50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd52:	f7f7 fdbb 	bl	80058cc <HAL_GetTick>
 800dd56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd58:	e008      	b.n	800dd6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd5a:	f7f7 fdb7 	bl	80058cc <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d901      	bls.n	800dd6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e2ed      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd6c:	4b8b      	ldr	r3, [pc, #556]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f003 0304 	and.w	r3, r3, #4
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1f0      	bne.n	800dd5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 0310 	and.w	r3, r3, #16
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 80a9 	beq.w	800ded8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd86:	4b85      	ldr	r3, [pc, #532]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dd90:	4b82      	ldr	r3, [pc, #520]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	2b08      	cmp	r3, #8
 800dd9a:	d007      	beq.n	800ddac <HAL_RCC_OscConfig+0x308>
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	2b18      	cmp	r3, #24
 800dda0:	d13a      	bne.n	800de18 <HAL_RCC_OscConfig+0x374>
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	f003 0303 	and.w	r3, r3, #3
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d135      	bne.n	800de18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ddac:	4b7b      	ldr	r3, [pc, #492]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d005      	beq.n	800ddc4 <HAL_RCC_OscConfig+0x320>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	69db      	ldr	r3, [r3, #28]
 800ddbc:	2b80      	cmp	r3, #128	; 0x80
 800ddbe:	d001      	beq.n	800ddc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e2c1      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ddc4:	f7f7 fd8e 	bl	80058e4 <HAL_GetREVID>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f241 0203 	movw	r2, #4099	; 0x1003
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d817      	bhi.n	800de02 <HAL_RCC_OscConfig+0x35e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d108      	bne.n	800ddec <HAL_RCC_OscConfig+0x348>
 800ddda:	4b70      	ldr	r3, [pc, #448]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dde2:	4a6e      	ldr	r2, [pc, #440]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dde4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dde8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ddea:	e075      	b.n	800ded8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ddec:	4b6b      	ldr	r3, [pc, #428]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	069b      	lsls	r3, r3, #26
 800ddfa:	4968      	ldr	r1, [pc, #416]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de00:	e06a      	b.n	800ded8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de02:	4b66      	ldr	r3, [pc, #408]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6a1b      	ldr	r3, [r3, #32]
 800de0e:	061b      	lsls	r3, r3, #24
 800de10:	4962      	ldr	r1, [pc, #392]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de12:	4313      	orrs	r3, r2
 800de14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de16:	e05f      	b.n	800ded8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	69db      	ldr	r3, [r3, #28]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d042      	beq.n	800dea6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800de20:	4b5e      	ldr	r3, [pc, #376]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a5d      	ldr	r2, [pc, #372]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de2c:	f7f7 fd4e 	bl	80058cc <HAL_GetTick>
 800de30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de32:	e008      	b.n	800de46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800de34:	f7f7 fd4a 	bl	80058cc <HAL_GetTick>
 800de38:	4602      	mov	r2, r0
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d901      	bls.n	800de46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e280      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de46:	4b55      	ldr	r3, [pc, #340]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d0f0      	beq.n	800de34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de52:	f7f7 fd47 	bl	80058e4 <HAL_GetREVID>
 800de56:	4603      	mov	r3, r0
 800de58:	f241 0203 	movw	r2, #4099	; 0x1003
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d817      	bhi.n	800de90 <HAL_RCC_OscConfig+0x3ec>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	2b20      	cmp	r3, #32
 800de66:	d108      	bne.n	800de7a <HAL_RCC_OscConfig+0x3d6>
 800de68:	4b4c      	ldr	r3, [pc, #304]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800de70:	4a4a      	ldr	r2, [pc, #296]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de76:	6053      	str	r3, [r2, #4]
 800de78:	e02e      	b.n	800ded8 <HAL_RCC_OscConfig+0x434>
 800de7a:	4b48      	ldr	r3, [pc, #288]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	069b      	lsls	r3, r3, #26
 800de88:	4944      	ldr	r1, [pc, #272]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de8a:	4313      	orrs	r3, r2
 800de8c:	604b      	str	r3, [r1, #4]
 800de8e:	e023      	b.n	800ded8 <HAL_RCC_OscConfig+0x434>
 800de90:	4b42      	ldr	r3, [pc, #264]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	061b      	lsls	r3, r3, #24
 800de9e:	493f      	ldr	r1, [pc, #252]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60cb      	str	r3, [r1, #12]
 800dea4:	e018      	b.n	800ded8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dea6:	4b3d      	ldr	r3, [pc, #244]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a3c      	ldr	r2, [pc, #240]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800deac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800deb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb2:	f7f7 fd0b 	bl	80058cc <HAL_GetTick>
 800deb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800deb8:	e008      	b.n	800decc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800deba:	f7f7 fd07 	bl	80058cc <HAL_GetTick>
 800debe:	4602      	mov	r2, r0
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d901      	bls.n	800decc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dec8:	2303      	movs	r3, #3
 800deca:	e23d      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800decc:	4b33      	ldr	r3, [pc, #204]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1f0      	bne.n	800deba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0308 	and.w	r3, r3, #8
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d036      	beq.n	800df52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d019      	beq.n	800df20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800deec:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800deee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800def0:	4a2a      	ldr	r2, [pc, #168]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800def2:	f043 0301 	orr.w	r3, r3, #1
 800def6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800def8:	f7f7 fce8 	bl	80058cc <HAL_GetTick>
 800defc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800defe:	e008      	b.n	800df12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df00:	f7f7 fce4 	bl	80058cc <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d901      	bls.n	800df12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	e21a      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df12:	4b22      	ldr	r3, [pc, #136]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0f0      	beq.n	800df00 <HAL_RCC_OscConfig+0x45c>
 800df1e:	e018      	b.n	800df52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800df20:	4b1e      	ldr	r3, [pc, #120]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df24:	4a1d      	ldr	r2, [pc, #116]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df26:	f023 0301 	bic.w	r3, r3, #1
 800df2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df2c:	f7f7 fcce 	bl	80058cc <HAL_GetTick>
 800df30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df32:	e008      	b.n	800df46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df34:	f7f7 fcca 	bl	80058cc <HAL_GetTick>
 800df38:	4602      	mov	r2, r0
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d901      	bls.n	800df46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800df42:	2303      	movs	r3, #3
 800df44:	e200      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df46:	4b15      	ldr	r3, [pc, #84]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df4a:	f003 0302 	and.w	r3, r3, #2
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d1f0      	bne.n	800df34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 0320 	and.w	r3, r3, #32
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d039      	beq.n	800dfd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01c      	beq.n	800dfa0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800df66:	4b0d      	ldr	r3, [pc, #52]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a0c      	ldr	r2, [pc, #48]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800df70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800df72:	f7f7 fcab 	bl	80058cc <HAL_GetTick>
 800df76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800df78:	e008      	b.n	800df8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800df7a:	f7f7 fca7 	bl	80058cc <HAL_GetTick>
 800df7e:	4602      	mov	r2, r0
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	2b02      	cmp	r3, #2
 800df86:	d901      	bls.n	800df8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e1dd      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800df8c:	4b03      	ldr	r3, [pc, #12]	; (800df9c <HAL_RCC_OscConfig+0x4f8>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d0f0      	beq.n	800df7a <HAL_RCC_OscConfig+0x4d6>
 800df98:	e01b      	b.n	800dfd2 <HAL_RCC_OscConfig+0x52e>
 800df9a:	bf00      	nop
 800df9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dfa0:	4b9b      	ldr	r3, [pc, #620]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a9a      	ldr	r2, [pc, #616]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800dfa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dfac:	f7f7 fc8e 	bl	80058cc <HAL_GetTick>
 800dfb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dfb2:	e008      	b.n	800dfc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dfb4:	f7f7 fc8a 	bl	80058cc <HAL_GetTick>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d901      	bls.n	800dfc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800dfc2:	2303      	movs	r3, #3
 800dfc4:	e1c0      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dfc6:	4b92      	ldr	r3, [pc, #584]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1f0      	bne.n	800dfb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 0304 	and.w	r3, r3, #4
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8081 	beq.w	800e0e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dfe0:	4b8c      	ldr	r3, [pc, #560]	; (800e214 <HAL_RCC_OscConfig+0x770>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a8b      	ldr	r2, [pc, #556]	; (800e214 <HAL_RCC_OscConfig+0x770>)
 800dfe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dfec:	f7f7 fc6e 	bl	80058cc <HAL_GetTick>
 800dff0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dff2:	e008      	b.n	800e006 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dff4:	f7f7 fc6a 	bl	80058cc <HAL_GetTick>
 800dff8:	4602      	mov	r2, r0
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	2b64      	cmp	r3, #100	; 0x64
 800e000:	d901      	bls.n	800e006 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e002:	2303      	movs	r3, #3
 800e004:	e1a0      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e006:	4b83      	ldr	r3, [pc, #524]	; (800e214 <HAL_RCC_OscConfig+0x770>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0f0      	beq.n	800dff4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d106      	bne.n	800e028 <HAL_RCC_OscConfig+0x584>
 800e01a:	4b7d      	ldr	r3, [pc, #500]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e01e:	4a7c      	ldr	r2, [pc, #496]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e020:	f043 0301 	orr.w	r3, r3, #1
 800e024:	6713      	str	r3, [r2, #112]	; 0x70
 800e026:	e02d      	b.n	800e084 <HAL_RCC_OscConfig+0x5e0>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10c      	bne.n	800e04a <HAL_RCC_OscConfig+0x5a6>
 800e030:	4b77      	ldr	r3, [pc, #476]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e034:	4a76      	ldr	r2, [pc, #472]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e036:	f023 0301 	bic.w	r3, r3, #1
 800e03a:	6713      	str	r3, [r2, #112]	; 0x70
 800e03c:	4b74      	ldr	r3, [pc, #464]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e040:	4a73      	ldr	r2, [pc, #460]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e042:	f023 0304 	bic.w	r3, r3, #4
 800e046:	6713      	str	r3, [r2, #112]	; 0x70
 800e048:	e01c      	b.n	800e084 <HAL_RCC_OscConfig+0x5e0>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	2b05      	cmp	r3, #5
 800e050:	d10c      	bne.n	800e06c <HAL_RCC_OscConfig+0x5c8>
 800e052:	4b6f      	ldr	r3, [pc, #444]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e056:	4a6e      	ldr	r2, [pc, #440]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e058:	f043 0304 	orr.w	r3, r3, #4
 800e05c:	6713      	str	r3, [r2, #112]	; 0x70
 800e05e:	4b6c      	ldr	r3, [pc, #432]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e062:	4a6b      	ldr	r2, [pc, #428]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e064:	f043 0301 	orr.w	r3, r3, #1
 800e068:	6713      	str	r3, [r2, #112]	; 0x70
 800e06a:	e00b      	b.n	800e084 <HAL_RCC_OscConfig+0x5e0>
 800e06c:	4b68      	ldr	r3, [pc, #416]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e070:	4a67      	ldr	r2, [pc, #412]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e072:	f023 0301 	bic.w	r3, r3, #1
 800e076:	6713      	str	r3, [r2, #112]	; 0x70
 800e078:	4b65      	ldr	r3, [pc, #404]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e07c:	4a64      	ldr	r2, [pc, #400]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e07e:	f023 0304 	bic.w	r3, r3, #4
 800e082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d015      	beq.n	800e0b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e08c:	f7f7 fc1e 	bl	80058cc <HAL_GetTick>
 800e090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e092:	e00a      	b.n	800e0aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e094:	f7f7 fc1a 	bl	80058cc <HAL_GetTick>
 800e098:	4602      	mov	r2, r0
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d901      	bls.n	800e0aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	e14e      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0aa:	4b59      	ldr	r3, [pc, #356]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ae:	f003 0302 	and.w	r3, r3, #2
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d0ee      	beq.n	800e094 <HAL_RCC_OscConfig+0x5f0>
 800e0b6:	e014      	b.n	800e0e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0b8:	f7f7 fc08 	bl	80058cc <HAL_GetTick>
 800e0bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e0be:	e00a      	b.n	800e0d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0c0:	f7f7 fc04 	bl	80058cc <HAL_GetTick>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d901      	bls.n	800e0d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	e138      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e0d6:	4b4e      	ldr	r3, [pc, #312]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	f003 0302 	and.w	r3, r3, #2
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1ee      	bne.n	800e0c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f000 812d 	beq.w	800e346 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e0ec:	4b48      	ldr	r3, [pc, #288]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0f4:	2b18      	cmp	r3, #24
 800e0f6:	f000 80bd 	beq.w	800e274 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	f040 809e 	bne.w	800e240 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e104:	4b42      	ldr	r3, [pc, #264]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a41      	ldr	r2, [pc, #260]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e10a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e110:	f7f7 fbdc 	bl	80058cc <HAL_GetTick>
 800e114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e116:	e008      	b.n	800e12a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e118:	f7f7 fbd8 	bl	80058cc <HAL_GetTick>
 800e11c:	4602      	mov	r2, r0
 800e11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	2b02      	cmp	r3, #2
 800e124:	d901      	bls.n	800e12a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e126:	2303      	movs	r3, #3
 800e128:	e10e      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e12a:	4b39      	ldr	r3, [pc, #228]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1f0      	bne.n	800e118 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e136:	4b36      	ldr	r3, [pc, #216]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e13a:	4b37      	ldr	r3, [pc, #220]	; (800e218 <HAL_RCC_OscConfig+0x774>)
 800e13c:	4013      	ands	r3, r2
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e146:	0112      	lsls	r2, r2, #4
 800e148:	430a      	orrs	r2, r1
 800e14a:	4931      	ldr	r1, [pc, #196]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e14c:	4313      	orrs	r3, r2
 800e14e:	628b      	str	r3, [r1, #40]	; 0x28
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e154:	3b01      	subs	r3, #1
 800e156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15e:	3b01      	subs	r3, #1
 800e160:	025b      	lsls	r3, r3, #9
 800e162:	b29b      	uxth	r3, r3
 800e164:	431a      	orrs	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16a:	3b01      	subs	r3, #1
 800e16c:	041b      	lsls	r3, r3, #16
 800e16e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e172:	431a      	orrs	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e178:	3b01      	subs	r3, #1
 800e17a:	061b      	lsls	r3, r3, #24
 800e17c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e180:	4923      	ldr	r1, [pc, #140]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e182:	4313      	orrs	r3, r2
 800e184:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e186:	4b22      	ldr	r3, [pc, #136]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18a:	4a21      	ldr	r2, [pc, #132]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e18c:	f023 0301 	bic.w	r3, r3, #1
 800e190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e192:	4b1f      	ldr	r3, [pc, #124]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e196:	4b21      	ldr	r3, [pc, #132]	; (800e21c <HAL_RCC_OscConfig+0x778>)
 800e198:	4013      	ands	r3, r2
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e19e:	00d2      	lsls	r2, r2, #3
 800e1a0:	491b      	ldr	r1, [pc, #108]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e1a6:	4b1a      	ldr	r3, [pc, #104]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1aa:	f023 020c 	bic.w	r2, r3, #12
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b2:	4917      	ldr	r1, [pc, #92]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e1b8:	4b15      	ldr	r3, [pc, #84]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1bc:	f023 0202 	bic.w	r2, r3, #2
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1c4:	4912      	ldr	r1, [pc, #72]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e1ca:	4b11      	ldr	r3, [pc, #68]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ce:	4a10      	ldr	r2, [pc, #64]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1d6:	4b0e      	ldr	r3, [pc, #56]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1da:	4a0d      	ldr	r2, [pc, #52]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e1e2:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e6:	4a0a      	ldr	r2, [pc, #40]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e1ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e1ee:	4b08      	ldr	r3, [pc, #32]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f2:	4a07      	ldr	r2, [pc, #28]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1f4:	f043 0301 	orr.w	r3, r3, #1
 800e1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e1fa:	4b05      	ldr	r3, [pc, #20]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a04      	ldr	r2, [pc, #16]	; (800e210 <HAL_RCC_OscConfig+0x76c>)
 800e200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e206:	f7f7 fb61 	bl	80058cc <HAL_GetTick>
 800e20a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e20c:	e011      	b.n	800e232 <HAL_RCC_OscConfig+0x78e>
 800e20e:	bf00      	nop
 800e210:	58024400 	.word	0x58024400
 800e214:	58024800 	.word	0x58024800
 800e218:	fffffc0c 	.word	0xfffffc0c
 800e21c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e220:	f7f7 fb54 	bl	80058cc <HAL_GetTick>
 800e224:	4602      	mov	r2, r0
 800e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d901      	bls.n	800e232 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e22e:	2303      	movs	r3, #3
 800e230:	e08a      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e232:	4b47      	ldr	r3, [pc, #284]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d0f0      	beq.n	800e220 <HAL_RCC_OscConfig+0x77c>
 800e23e:	e082      	b.n	800e346 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e240:	4b43      	ldr	r3, [pc, #268]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a42      	ldr	r2, [pc, #264]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e24a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e24c:	f7f7 fb3e 	bl	80058cc <HAL_GetTick>
 800e250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e252:	e008      	b.n	800e266 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e254:	f7f7 fb3a 	bl	80058cc <HAL_GetTick>
 800e258:	4602      	mov	r2, r0
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d901      	bls.n	800e266 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e262:	2303      	movs	r3, #3
 800e264:	e070      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e266:	4b3a      	ldr	r3, [pc, #232]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1f0      	bne.n	800e254 <HAL_RCC_OscConfig+0x7b0>
 800e272:	e068      	b.n	800e346 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e274:	4b36      	ldr	r3, [pc, #216]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e278:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e27a:	4b35      	ldr	r3, [pc, #212]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	2b01      	cmp	r3, #1
 800e286:	d031      	beq.n	800e2ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	f003 0203 	and.w	r2, r3, #3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e292:	429a      	cmp	r2, r3
 800e294:	d12a      	bne.n	800e2ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	091b      	lsrs	r3, r3, #4
 800e29a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d122      	bne.n	800e2ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d11a      	bne.n	800e2ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	0a5b      	lsrs	r3, r3, #9
 800e2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d111      	bne.n	800e2ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	0c1b      	lsrs	r3, r3, #16
 800e2cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d108      	bne.n	800e2ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	0e1b      	lsrs	r3, r3, #24
 800e2de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d001      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e02b      	b.n	800e348 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e2f0:	4b17      	ldr	r3, [pc, #92]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f4:	08db      	lsrs	r3, r3, #3
 800e2f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	429a      	cmp	r2, r3
 800e304:	d01f      	beq.n	800e346 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e306:	4b12      	ldr	r3, [pc, #72]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30a:	4a11      	ldr	r2, [pc, #68]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e30c:	f023 0301 	bic.w	r3, r3, #1
 800e310:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e312:	f7f7 fadb 	bl	80058cc <HAL_GetTick>
 800e316:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e318:	bf00      	nop
 800e31a:	f7f7 fad7 	bl	80058cc <HAL_GetTick>
 800e31e:	4602      	mov	r2, r0
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	4293      	cmp	r3, r2
 800e324:	d0f9      	beq.n	800e31a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e326:	4b0a      	ldr	r3, [pc, #40]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e32a:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <HAL_RCC_OscConfig+0x8b0>)
 800e32c:	4013      	ands	r3, r2
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e332:	00d2      	lsls	r2, r2, #3
 800e334:	4906      	ldr	r1, [pc, #24]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e336:	4313      	orrs	r3, r2
 800e338:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e33a:	4b05      	ldr	r3, [pc, #20]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33e:	4a04      	ldr	r2, [pc, #16]	; (800e350 <HAL_RCC_OscConfig+0x8ac>)
 800e340:	f043 0301 	orr.w	r3, r3, #1
 800e344:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3730      	adds	r7, #48	; 0x30
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	58024400 	.word	0x58024400
 800e354:	ffff0007 	.word	0xffff0007

0800e358 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d101      	bne.n	800e36c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	e19c      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e36c:	4b8a      	ldr	r3, [pc, #552]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f003 030f 	and.w	r3, r3, #15
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d910      	bls.n	800e39c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e37a:	4b87      	ldr	r3, [pc, #540]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f023 020f 	bic.w	r2, r3, #15
 800e382:	4985      	ldr	r1, [pc, #532]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	4313      	orrs	r3, r2
 800e388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e38a:	4b83      	ldr	r3, [pc, #524]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d001      	beq.n	800e39c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	e184      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d010      	beq.n	800e3ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	691a      	ldr	r2, [r3, #16]
 800e3ac:	4b7b      	ldr	r3, [pc, #492]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d908      	bls.n	800e3ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e3b8:	4b78      	ldr	r3, [pc, #480]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	4975      	ldr	r1, [pc, #468]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f003 0308 	and.w	r3, r3, #8
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d010      	beq.n	800e3f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	695a      	ldr	r2, [r3, #20]
 800e3da:	4b70      	ldr	r3, [pc, #448]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d908      	bls.n	800e3f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e3e6:	4b6d      	ldr	r3, [pc, #436]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	496a      	ldr	r1, [pc, #424]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f003 0310 	and.w	r3, r3, #16
 800e400:	2b00      	cmp	r3, #0
 800e402:	d010      	beq.n	800e426 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699a      	ldr	r2, [r3, #24]
 800e408:	4b64      	ldr	r3, [pc, #400]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e40a:	69db      	ldr	r3, [r3, #28]
 800e40c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e410:	429a      	cmp	r2, r3
 800e412:	d908      	bls.n	800e426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e414:	4b61      	ldr	r3, [pc, #388]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e416:	69db      	ldr	r3, [r3, #28]
 800e418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	495e      	ldr	r1, [pc, #376]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e422:	4313      	orrs	r3, r2
 800e424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f003 0320 	and.w	r3, r3, #32
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d010      	beq.n	800e454 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69da      	ldr	r2, [r3, #28]
 800e436:	4b59      	ldr	r3, [pc, #356]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e43e:	429a      	cmp	r2, r3
 800e440:	d908      	bls.n	800e454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e442:	4b56      	ldr	r3, [pc, #344]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	4953      	ldr	r1, [pc, #332]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e450:	4313      	orrs	r3, r2
 800e452:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0302 	and.w	r3, r3, #2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d010      	beq.n	800e482 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68da      	ldr	r2, [r3, #12]
 800e464:	4b4d      	ldr	r3, [pc, #308]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	f003 030f 	and.w	r3, r3, #15
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d908      	bls.n	800e482 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e470:	4b4a      	ldr	r3, [pc, #296]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	f023 020f 	bic.w	r2, r3, #15
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	4947      	ldr	r1, [pc, #284]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e47e:	4313      	orrs	r3, r2
 800e480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d055      	beq.n	800e53a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e48e:	4b43      	ldr	r3, [pc, #268]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e490:	699b      	ldr	r3, [r3, #24]
 800e492:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	4940      	ldr	r1, [pc, #256]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e49c:	4313      	orrs	r3, r2
 800e49e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d107      	bne.n	800e4b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e4a8:	4b3c      	ldr	r3, [pc, #240]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d121      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e0f6      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e4c0:	4b36      	ldr	r3, [pc, #216]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d115      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e0ea      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d107      	bne.n	800e4e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e4d8:	4b30      	ldr	r3, [pc, #192]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d109      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e0de      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e4e8:	4b2c      	ldr	r3, [pc, #176]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f003 0304 	and.w	r3, r3, #4
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e0d6      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e4f8:	4b28      	ldr	r3, [pc, #160]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	f023 0207 	bic.w	r2, r3, #7
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	4925      	ldr	r1, [pc, #148]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e506:	4313      	orrs	r3, r2
 800e508:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e50a:	f7f7 f9df 	bl	80058cc <HAL_GetTick>
 800e50e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e510:	e00a      	b.n	800e528 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e512:	f7f7 f9db 	bl	80058cc <HAL_GetTick>
 800e516:	4602      	mov	r2, r0
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e520:	4293      	cmp	r3, r2
 800e522:	d901      	bls.n	800e528 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e524:	2303      	movs	r3, #3
 800e526:	e0be      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e528:	4b1c      	ldr	r3, [pc, #112]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	429a      	cmp	r2, r3
 800e538:	d1eb      	bne.n	800e512 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f003 0302 	and.w	r3, r3, #2
 800e542:	2b00      	cmp	r3, #0
 800e544:	d010      	beq.n	800e568 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	68da      	ldr	r2, [r3, #12]
 800e54a:	4b14      	ldr	r3, [pc, #80]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	f003 030f 	and.w	r3, r3, #15
 800e552:	429a      	cmp	r2, r3
 800e554:	d208      	bcs.n	800e568 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e556:	4b11      	ldr	r3, [pc, #68]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	f023 020f 	bic.w	r2, r3, #15
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	490e      	ldr	r1, [pc, #56]	; (800e59c <HAL_RCC_ClockConfig+0x244>)
 800e564:	4313      	orrs	r3, r2
 800e566:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e568:	4b0b      	ldr	r3, [pc, #44]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 030f 	and.w	r3, r3, #15
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d214      	bcs.n	800e5a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e576:	4b08      	ldr	r3, [pc, #32]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f023 020f 	bic.w	r2, r3, #15
 800e57e:	4906      	ldr	r1, [pc, #24]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	4313      	orrs	r3, r2
 800e584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e586:	4b04      	ldr	r3, [pc, #16]	; (800e598 <HAL_RCC_ClockConfig+0x240>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 030f 	and.w	r3, r3, #15
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d005      	beq.n	800e5a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e086      	b.n	800e6a6 <HAL_RCC_ClockConfig+0x34e>
 800e598:	52002000 	.word	0x52002000
 800e59c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d010      	beq.n	800e5ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	691a      	ldr	r2, [r3, #16]
 800e5b0:	4b3f      	ldr	r3, [pc, #252]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5b2:	699b      	ldr	r3, [r3, #24]
 800e5b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d208      	bcs.n	800e5ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e5bc:	4b3c      	ldr	r3, [pc, #240]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	4939      	ldr	r1, [pc, #228]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 0308 	and.w	r3, r3, #8
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d010      	beq.n	800e5fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	695a      	ldr	r2, [r3, #20]
 800e5de:	4b34      	ldr	r3, [pc, #208]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d208      	bcs.n	800e5fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e5ea:	4b31      	ldr	r3, [pc, #196]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	695b      	ldr	r3, [r3, #20]
 800e5f6:	492e      	ldr	r1, [pc, #184]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f003 0310 	and.w	r3, r3, #16
 800e604:	2b00      	cmp	r3, #0
 800e606:	d010      	beq.n	800e62a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	699a      	ldr	r2, [r3, #24]
 800e60c:	4b28      	ldr	r3, [pc, #160]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e60e:	69db      	ldr	r3, [r3, #28]
 800e610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e614:	429a      	cmp	r2, r3
 800e616:	d208      	bcs.n	800e62a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e618:	4b25      	ldr	r3, [pc, #148]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	4922      	ldr	r1, [pc, #136]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e626:	4313      	orrs	r3, r2
 800e628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 0320 	and.w	r3, r3, #32
 800e632:	2b00      	cmp	r3, #0
 800e634:	d010      	beq.n	800e658 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	69da      	ldr	r2, [r3, #28]
 800e63a:	4b1d      	ldr	r3, [pc, #116]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e642:	429a      	cmp	r2, r3
 800e644:	d208      	bcs.n	800e658 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e646:	4b1a      	ldr	r3, [pc, #104]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	69db      	ldr	r3, [r3, #28]
 800e652:	4917      	ldr	r1, [pc, #92]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e654:	4313      	orrs	r3, r2
 800e656:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e658:	f000 f834 	bl	800e6c4 <HAL_RCC_GetSysClockFreq>
 800e65c:	4602      	mov	r2, r0
 800e65e:	4b14      	ldr	r3, [pc, #80]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	0a1b      	lsrs	r3, r3, #8
 800e664:	f003 030f 	and.w	r3, r3, #15
 800e668:	4912      	ldr	r1, [pc, #72]	; (800e6b4 <HAL_RCC_ClockConfig+0x35c>)
 800e66a:	5ccb      	ldrb	r3, [r1, r3]
 800e66c:	f003 031f 	and.w	r3, r3, #31
 800e670:	fa22 f303 	lsr.w	r3, r2, r3
 800e674:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e676:	4b0e      	ldr	r3, [pc, #56]	; (800e6b0 <HAL_RCC_ClockConfig+0x358>)
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	f003 030f 	and.w	r3, r3, #15
 800e67e:	4a0d      	ldr	r2, [pc, #52]	; (800e6b4 <HAL_RCC_ClockConfig+0x35c>)
 800e680:	5cd3      	ldrb	r3, [r2, r3]
 800e682:	f003 031f 	and.w	r3, r3, #31
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	fa22 f303 	lsr.w	r3, r2, r3
 800e68c:	4a0a      	ldr	r2, [pc, #40]	; (800e6b8 <HAL_RCC_ClockConfig+0x360>)
 800e68e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e690:	4a0a      	ldr	r2, [pc, #40]	; (800e6bc <HAL_RCC_ClockConfig+0x364>)
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e696:	4b0a      	ldr	r3, [pc, #40]	; (800e6c0 <HAL_RCC_ClockConfig+0x368>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f5 ff3c 	bl	8004518 <HAL_InitTick>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	58024400 	.word	0x58024400
 800e6b4:	0801ad94 	.word	0x0801ad94
 800e6b8:	24000094 	.word	0x24000094
 800e6bc:	24000090 	.word	0x24000090
 800e6c0:	24000098 	.word	0x24000098

0800e6c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b089      	sub	sp, #36	; 0x24
 800e6c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e6ca:	4bb3      	ldr	r3, [pc, #716]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6d2:	2b18      	cmp	r3, #24
 800e6d4:	f200 8155 	bhi.w	800e982 <HAL_RCC_GetSysClockFreq+0x2be>
 800e6d8:	a201      	add	r2, pc, #4	; (adr r2, 800e6e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6de:	bf00      	nop
 800e6e0:	0800e745 	.word	0x0800e745
 800e6e4:	0800e983 	.word	0x0800e983
 800e6e8:	0800e983 	.word	0x0800e983
 800e6ec:	0800e983 	.word	0x0800e983
 800e6f0:	0800e983 	.word	0x0800e983
 800e6f4:	0800e983 	.word	0x0800e983
 800e6f8:	0800e983 	.word	0x0800e983
 800e6fc:	0800e983 	.word	0x0800e983
 800e700:	0800e76b 	.word	0x0800e76b
 800e704:	0800e983 	.word	0x0800e983
 800e708:	0800e983 	.word	0x0800e983
 800e70c:	0800e983 	.word	0x0800e983
 800e710:	0800e983 	.word	0x0800e983
 800e714:	0800e983 	.word	0x0800e983
 800e718:	0800e983 	.word	0x0800e983
 800e71c:	0800e983 	.word	0x0800e983
 800e720:	0800e771 	.word	0x0800e771
 800e724:	0800e983 	.word	0x0800e983
 800e728:	0800e983 	.word	0x0800e983
 800e72c:	0800e983 	.word	0x0800e983
 800e730:	0800e983 	.word	0x0800e983
 800e734:	0800e983 	.word	0x0800e983
 800e738:	0800e983 	.word	0x0800e983
 800e73c:	0800e983 	.word	0x0800e983
 800e740:	0800e777 	.word	0x0800e777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e744:	4b94      	ldr	r3, [pc, #592]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f003 0320 	and.w	r3, r3, #32
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d009      	beq.n	800e764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e750:	4b91      	ldr	r3, [pc, #580]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	08db      	lsrs	r3, r3, #3
 800e756:	f003 0303 	and.w	r3, r3, #3
 800e75a:	4a90      	ldr	r2, [pc, #576]	; (800e99c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e75c:	fa22 f303 	lsr.w	r3, r2, r3
 800e760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e762:	e111      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e764:	4b8d      	ldr	r3, [pc, #564]	; (800e99c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e766:	61bb      	str	r3, [r7, #24]
      break;
 800e768:	e10e      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e76a:	4b8d      	ldr	r3, [pc, #564]	; (800e9a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e76c:	61bb      	str	r3, [r7, #24]
      break;
 800e76e:	e10b      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e770:	4b8c      	ldr	r3, [pc, #560]	; (800e9a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e772:	61bb      	str	r3, [r7, #24]
      break;
 800e774:	e108      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e776:	4b88      	ldr	r3, [pc, #544]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e780:	4b85      	ldr	r3, [pc, #532]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e784:	091b      	lsrs	r3, r3, #4
 800e786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e78a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e78c:	4b82      	ldr	r3, [pc, #520]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e796:	4b80      	ldr	r3, [pc, #512]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79a:	08db      	lsrs	r3, r3, #3
 800e79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	fb02 f303 	mul.w	r3, r2, r3
 800e7a6:	ee07 3a90 	vmov	s15, r3
 800e7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 80e1 	beq.w	800e97c <HAL_RCC_GetSysClockFreq+0x2b8>
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	f000 8083 	beq.w	800e8c8 <HAL_RCC_GetSysClockFreq+0x204>
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	f200 80a1 	bhi.w	800e90c <HAL_RCC_GetSysClockFreq+0x248>
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x114>
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d056      	beq.n	800e884 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e7d6:	e099      	b.n	800e90c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7d8:	4b6f      	ldr	r3, [pc, #444]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 0320 	and.w	r3, r3, #32
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d02d      	beq.n	800e840 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7e4:	4b6c      	ldr	r3, [pc, #432]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	08db      	lsrs	r3, r3, #3
 800e7ea:	f003 0303 	and.w	r3, r3, #3
 800e7ee:	4a6b      	ldr	r2, [pc, #428]	; (800e99c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	ee07 3a90 	vmov	s15, r3
 800e7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	ee07 3a90 	vmov	s15, r3
 800e806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e80e:	4b62      	ldr	r3, [pc, #392]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e816:	ee07 3a90 	vmov	s15, r3
 800e81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e81e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e822:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e83a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e83e:	e087      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e84a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e9ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800e84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e852:	4b51      	ldr	r3, [pc, #324]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e85a:	ee07 3a90 	vmov	s15, r3
 800e85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e862:	ed97 6a02 	vldr	s12, [r7, #8]
 800e866:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e87e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e882:	e065      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	ee07 3a90 	vmov	s15, r3
 800e88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e88e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e9b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e896:	4b40      	ldr	r3, [pc, #256]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e89e:	ee07 3a90 	vmov	s15, r3
 800e8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e8c6:	e043      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	ee07 3a90 	vmov	s15, r3
 800e8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e9b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8da:	4b2f      	ldr	r3, [pc, #188]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8e2:	ee07 3a90 	vmov	s15, r3
 800e8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e90a:	e021      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	ee07 3a90 	vmov	s15, r3
 800e912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e916:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e9b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e91e:	4b1e      	ldr	r3, [pc, #120]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e926:	ee07 3a90 	vmov	s15, r3
 800e92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e92e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e932:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e9a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e94a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e94e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e950:	4b11      	ldr	r3, [pc, #68]	; (800e998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e954:	0a5b      	lsrs	r3, r3, #9
 800e956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e95a:	3301      	adds	r3, #1
 800e95c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	ee07 3a90 	vmov	s15, r3
 800e964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e968:	edd7 6a07 	vldr	s13, [r7, #28]
 800e96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e974:	ee17 3a90 	vmov	r3, s15
 800e978:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e97a:	e005      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e97c:	2300      	movs	r3, #0
 800e97e:	61bb      	str	r3, [r7, #24]
      break;
 800e980:	e002      	b.n	800e988 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e982:	4b07      	ldr	r3, [pc, #28]	; (800e9a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e984:	61bb      	str	r3, [r7, #24]
      break;
 800e986:	bf00      	nop
  }

  return sysclockfreq;
 800e988:	69bb      	ldr	r3, [r7, #24]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3724      	adds	r7, #36	; 0x24
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	58024400 	.word	0x58024400
 800e99c:	03d09000 	.word	0x03d09000
 800e9a0:	003d0900 	.word	0x003d0900
 800e9a4:	017d7840 	.word	0x017d7840
 800e9a8:	46000000 	.word	0x46000000
 800e9ac:	4c742400 	.word	0x4c742400
 800e9b0:	4a742400 	.word	0x4a742400
 800e9b4:	4bbebc20 	.word	0x4bbebc20

0800e9b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e9be:	f7ff fe81 	bl	800e6c4 <HAL_RCC_GetSysClockFreq>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	4b10      	ldr	r3, [pc, #64]	; (800ea08 <HAL_RCC_GetHCLKFreq+0x50>)
 800e9c6:	699b      	ldr	r3, [r3, #24]
 800e9c8:	0a1b      	lsrs	r3, r3, #8
 800e9ca:	f003 030f 	and.w	r3, r3, #15
 800e9ce:	490f      	ldr	r1, [pc, #60]	; (800ea0c <HAL_RCC_GetHCLKFreq+0x54>)
 800e9d0:	5ccb      	ldrb	r3, [r1, r3]
 800e9d2:	f003 031f 	and.w	r3, r3, #31
 800e9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ea08 <HAL_RCC_GetHCLKFreq+0x50>)
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	f003 030f 	and.w	r3, r3, #15
 800e9e4:	4a09      	ldr	r2, [pc, #36]	; (800ea0c <HAL_RCC_GetHCLKFreq+0x54>)
 800e9e6:	5cd3      	ldrb	r3, [r2, r3]
 800e9e8:	f003 031f 	and.w	r3, r3, #31
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e9f2:	4a07      	ldr	r2, [pc, #28]	; (800ea10 <HAL_RCC_GetHCLKFreq+0x58>)
 800e9f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e9f6:	4a07      	ldr	r2, [pc, #28]	; (800ea14 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e9fc:	4b04      	ldr	r3, [pc, #16]	; (800ea10 <HAL_RCC_GetHCLKFreq+0x58>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	58024400 	.word	0x58024400
 800ea0c:	0801ad94 	.word	0x0801ad94
 800ea10:	24000094 	.word	0x24000094
 800ea14:	24000090 	.word	0x24000090

0800ea18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ea1c:	f7ff ffcc 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 800ea20:	4602      	mov	r2, r0
 800ea22:	4b06      	ldr	r3, [pc, #24]	; (800ea3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ea24:	69db      	ldr	r3, [r3, #28]
 800ea26:	091b      	lsrs	r3, r3, #4
 800ea28:	f003 0307 	and.w	r3, r3, #7
 800ea2c:	4904      	ldr	r1, [pc, #16]	; (800ea40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ea2e:	5ccb      	ldrb	r3, [r1, r3]
 800ea30:	f003 031f 	and.w	r3, r3, #31
 800ea34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	58024400 	.word	0x58024400
 800ea40:	0801ad94 	.word	0x0801ad94

0800ea44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ea48:	f7ff ffb6 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea50:	69db      	ldr	r3, [r3, #28]
 800ea52:	0a1b      	lsrs	r3, r3, #8
 800ea54:	f003 0307 	and.w	r3, r3, #7
 800ea58:	4904      	ldr	r1, [pc, #16]	; (800ea6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ea5a:	5ccb      	ldrb	r3, [r1, r3]
 800ea5c:	f003 031f 	and.w	r3, r3, #31
 800ea60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	58024400 	.word	0x58024400
 800ea6c:	0801ad94 	.word	0x0801ad94

0800ea70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	223f      	movs	r2, #63	; 0x3f
 800ea7e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ea80:	4b1a      	ldr	r3, [pc, #104]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	f003 0207 	and.w	r2, r3, #7
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ea8c:	4b17      	ldr	r3, [pc, #92]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ea98:	4b14      	ldr	r3, [pc, #80]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	f003 020f 	and.w	r2, r3, #15
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800eaa4:	4b11      	ldr	r3, [pc, #68]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800eab0:	4b0e      	ldr	r3, [pc, #56]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800eab2:	69db      	ldr	r3, [r3, #28]
 800eab4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800eabc:	4b0b      	ldr	r3, [pc, #44]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800eabe:	69db      	ldr	r3, [r3, #28]
 800eac0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800eac8:	4b08      	ldr	r3, [pc, #32]	; (800eaec <HAL_RCC_GetClockConfig+0x7c>)
 800eaca:	6a1b      	ldr	r3, [r3, #32]
 800eacc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ead4:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <HAL_RCC_GetClockConfig+0x80>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f003 020f 	and.w	r2, r3, #15
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	601a      	str	r2, [r3, #0]
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	58024400 	.word	0x58024400
 800eaf0:	52002000 	.word	0x52002000

0800eaf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eaf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eaf8:	b0ca      	sub	sp, #296	; 0x128
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eb00:	2300      	movs	r3, #0
 800eb02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eb06:	2300      	movs	r3, #0
 800eb08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800eb18:	2500      	movs	r5, #0
 800eb1a:	ea54 0305 	orrs.w	r3, r4, r5
 800eb1e:	d049      	beq.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800eb20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eb2a:	d02f      	beq.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800eb2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eb30:	d828      	bhi.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eb32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb36:	d01a      	beq.n	800eb6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800eb38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb3c:	d822      	bhi.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d003      	beq.n	800eb4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800eb42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb46:	d007      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800eb48:	e01c      	b.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb4a:	4bb8      	ldr	r3, [pc, #736]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4e:	4ab7      	ldr	r2, [pc, #732]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb56:	e01a      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	2102      	movs	r1, #2
 800eb60:	4618      	mov	r0, r3
 800eb62:	f002 fb61 	bl	8011228 <RCCEx_PLL2_Config>
 800eb66:	4603      	mov	r3, r0
 800eb68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb6c:	e00f      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb72:	3328      	adds	r3, #40	; 0x28
 800eb74:	2102      	movs	r1, #2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f002 fc08 	bl	801138c <RCCEx_PLL3_Config>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb82:	e004      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb8a:	e000      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800eb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10a      	bne.n	800ebac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800eb96:	4ba5      	ldr	r3, [pc, #660]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800eb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eba4:	4aa1      	ldr	r2, [pc, #644]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eba6:	430b      	orrs	r3, r1
 800eba8:	6513      	str	r3, [r2, #80]	; 0x50
 800ebaa:	e003      	b.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ebb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ebc0:	f04f 0900 	mov.w	r9, #0
 800ebc4:	ea58 0309 	orrs.w	r3, r8, r9
 800ebc8:	d047      	beq.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ebca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebd0:	2b04      	cmp	r3, #4
 800ebd2:	d82a      	bhi.n	800ec2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ebd4:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ebd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebda:	bf00      	nop
 800ebdc:	0800ebf1 	.word	0x0800ebf1
 800ebe0:	0800ebff 	.word	0x0800ebff
 800ebe4:	0800ec15 	.word	0x0800ec15
 800ebe8:	0800ec33 	.word	0x0800ec33
 800ebec:	0800ec33 	.word	0x0800ec33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebf0:	4b8e      	ldr	r3, [pc, #568]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf4:	4a8d      	ldr	r2, [pc, #564]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebfc:	e01a      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec02:	3308      	adds	r3, #8
 800ec04:	2100      	movs	r1, #0
 800ec06:	4618      	mov	r0, r3
 800ec08:	f002 fb0e 	bl	8011228 <RCCEx_PLL2_Config>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec12:	e00f      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec18:	3328      	adds	r3, #40	; 0x28
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f002 fbb5 	bl	801138c <RCCEx_PLL3_Config>
 800ec22:	4603      	mov	r3, r0
 800ec24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec28:	e004      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec30:	e000      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ec32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10a      	bne.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ec3c:	4b7b      	ldr	r3, [pc, #492]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec40:	f023 0107 	bic.w	r1, r3, #7
 800ec44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec4a:	4a78      	ldr	r2, [pc, #480]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec4c:	430b      	orrs	r3, r1
 800ec4e:	6513      	str	r3, [r2, #80]	; 0x50
 800ec50:	e003      	b.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ec5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec62:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ec66:	f04f 0b00 	mov.w	fp, #0
 800ec6a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ec6e:	d04c      	beq.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ec70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec7a:	d030      	beq.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ec7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec80:	d829      	bhi.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ec82:	2bc0      	cmp	r3, #192	; 0xc0
 800ec84:	d02d      	beq.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ec86:	2bc0      	cmp	r3, #192	; 0xc0
 800ec88:	d825      	bhi.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ec8a:	2b80      	cmp	r3, #128	; 0x80
 800ec8c:	d018      	beq.n	800ecc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ec8e:	2b80      	cmp	r3, #128	; 0x80
 800ec90:	d821      	bhi.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ec96:	2b40      	cmp	r3, #64	; 0x40
 800ec98:	d007      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ec9a:	e01c      	b.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec9c:	4b63      	ldr	r3, [pc, #396]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca0:	4a62      	ldr	r2, [pc, #392]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eca8:	e01c      	b.n	800ece4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ecaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecae:	3308      	adds	r3, #8
 800ecb0:	2100      	movs	r1, #0
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f002 fab8 	bl	8011228 <RCCEx_PLL2_Config>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ecbe:	e011      	b.n	800ece4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ecc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc4:	3328      	adds	r3, #40	; 0x28
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f002 fb5f 	bl	801138c <RCCEx_PLL3_Config>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ecd4:	e006      	b.n	800ece4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecdc:	e002      	b.n	800ece4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ecde:	bf00      	nop
 800ece0:	e000      	b.n	800ece4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ece2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ece4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10a      	bne.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ecec:	4b4f      	ldr	r3, [pc, #316]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecf0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ecf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfa:	4a4c      	ldr	r2, [pc, #304]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecfc:	430b      	orrs	r3, r1
 800ecfe:	6513      	str	r3, [r2, #80]	; 0x50
 800ed00:	e003      	b.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ed0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ed16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ed20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ed24:	460b      	mov	r3, r1
 800ed26:	4313      	orrs	r3, r2
 800ed28:	d053      	beq.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ed2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed36:	d035      	beq.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ed38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed3c:	d82e      	bhi.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed42:	d031      	beq.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ed44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed48:	d828      	bhi.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed4e:	d01a      	beq.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ed50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed54:	d822      	bhi.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d003      	beq.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ed5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed5e:	d007      	beq.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ed60:	e01c      	b.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed62:	4b32      	ldr	r3, [pc, #200]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed66:	4a31      	ldr	r2, [pc, #196]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed6e:	e01c      	b.n	800edaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed74:	3308      	adds	r3, #8
 800ed76:	2100      	movs	r1, #0
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f002 fa55 	bl	8011228 <RCCEx_PLL2_Config>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ed84:	e011      	b.n	800edaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed8a:	3328      	adds	r3, #40	; 0x28
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f002 fafc 	bl	801138c <RCCEx_PLL3_Config>
 800ed94:	4603      	mov	r3, r0
 800ed96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed9a:	e006      	b.n	800edaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eda2:	e002      	b.n	800edaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eda4:	bf00      	nop
 800eda6:	e000      	b.n	800edaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eda8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10b      	bne.n	800edca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800edb2:	4b1e      	ldr	r3, [pc, #120]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edb6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800edba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800edc2:	4a1a      	ldr	r2, [pc, #104]	; (800ee2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edc4:	430b      	orrs	r3, r1
 800edc6:	6593      	str	r3, [r2, #88]	; 0x58
 800edc8:	e003      	b.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800edd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edda:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800edde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ede2:	2300      	movs	r3, #0
 800ede4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ede8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800edec:	460b      	mov	r3, r1
 800edee:	4313      	orrs	r3, r2
 800edf0:	d056      	beq.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800edf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800edfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800edfe:	d038      	beq.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ee00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee04:	d831      	bhi.n	800ee6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee0a:	d034      	beq.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ee0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee10:	d82b      	bhi.n	800ee6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee16:	d01d      	beq.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ee18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee1c:	d825      	bhi.n	800ee6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d006      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ee22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ee26:	d00a      	beq.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ee28:	e01f      	b.n	800ee6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee2a:	bf00      	nop
 800ee2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee30:	4ba2      	ldr	r3, [pc, #648]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee34:	4aa1      	ldr	r2, [pc, #644]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee3c:	e01c      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee42:	3308      	adds	r3, #8
 800ee44:	2100      	movs	r1, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f002 f9ee 	bl	8011228 <RCCEx_PLL2_Config>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ee52:	e011      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee58:	3328      	adds	r3, #40	; 0x28
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f002 fa95 	bl	801138c <RCCEx_PLL3_Config>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee68:	e006      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee70:	e002      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ee72:	bf00      	nop
 800ee74:	e000      	b.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ee76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d10b      	bne.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ee80:	4b8e      	ldr	r3, [pc, #568]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ee88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ee90:	4a8a      	ldr	r2, [pc, #552]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee92:	430b      	orrs	r3, r1
 800ee94:	6593      	str	r3, [r2, #88]	; 0x58
 800ee96:	e003      	b.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800eea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800eeac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800eeb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800eeba:	460b      	mov	r3, r1
 800eebc:	4313      	orrs	r3, r2
 800eebe:	d03a      	beq.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800eec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eec6:	2b30      	cmp	r3, #48	; 0x30
 800eec8:	d01f      	beq.n	800ef0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800eeca:	2b30      	cmp	r3, #48	; 0x30
 800eecc:	d819      	bhi.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800eece:	2b20      	cmp	r3, #32
 800eed0:	d00c      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800eed2:	2b20      	cmp	r3, #32
 800eed4:	d815      	bhi.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d019      	beq.n	800ef0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800eeda:	2b10      	cmp	r3, #16
 800eedc:	d111      	bne.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eede:	4b77      	ldr	r3, [pc, #476]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee2:	4a76      	ldr	r2, [pc, #472]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800eeea:	e011      	b.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef0:	3308      	adds	r3, #8
 800eef2:	2102      	movs	r1, #2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f002 f997 	bl	8011228 <RCCEx_PLL2_Config>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ef00:	e006      	b.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef08:	e002      	b.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ef0a:	bf00      	nop
 800ef0c:	e000      	b.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ef0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10a      	bne.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ef18:	4b68      	ldr	r3, [pc, #416]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ef20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef26:	4a65      	ldr	r2, [pc, #404]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef28:	430b      	orrs	r3, r1
 800ef2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ef2c:	e003      	b.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ef36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ef42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ef46:	2300      	movs	r3, #0
 800ef48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ef4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ef50:	460b      	mov	r3, r1
 800ef52:	4313      	orrs	r3, r2
 800ef54:	d051      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ef56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef60:	d035      	beq.n	800efce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ef62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef66:	d82e      	bhi.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef6c:	d031      	beq.n	800efd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ef6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef72:	d828      	bhi.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef78:	d01a      	beq.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ef7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef7e:	d822      	bhi.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d003      	beq.n	800ef8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ef84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef88:	d007      	beq.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ef8a:	e01c      	b.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef8c:	4b4b      	ldr	r3, [pc, #300]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef90:	4a4a      	ldr	r2, [pc, #296]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ef98:	e01c      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef9e:	3308      	adds	r3, #8
 800efa0:	2100      	movs	r1, #0
 800efa2:	4618      	mov	r0, r3
 800efa4:	f002 f940 	bl	8011228 <RCCEx_PLL2_Config>
 800efa8:	4603      	mov	r3, r0
 800efaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800efae:	e011      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800efb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efb4:	3328      	adds	r3, #40	; 0x28
 800efb6:	2100      	movs	r1, #0
 800efb8:	4618      	mov	r0, r3
 800efba:	f002 f9e7 	bl	801138c <RCCEx_PLL3_Config>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800efc4:	e006      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800efcc:	e002      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800efce:	bf00      	nop
 800efd0:	e000      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800efd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10a      	bne.n	800eff2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800efdc:	4b37      	ldr	r3, [pc, #220]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efe0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800efe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efea:	4a34      	ldr	r2, [pc, #208]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efec:	430b      	orrs	r3, r1
 800efee:	6513      	str	r3, [r2, #80]	; 0x50
 800eff0:	e003      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800effa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f00a:	2300      	movs	r3, #0
 800f00c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f010:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f014:	460b      	mov	r3, r1
 800f016:	4313      	orrs	r3, r2
 800f018:	d056      	beq.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f01e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f024:	d033      	beq.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f02a:	d82c      	bhi.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f02c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f030:	d02f      	beq.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f032:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f036:	d826      	bhi.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f038:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f03c:	d02b      	beq.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f03e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f042:	d820      	bhi.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f048:	d012      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f04a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f04e:	d81a      	bhi.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f050:	2b00      	cmp	r3, #0
 800f052:	d022      	beq.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f058:	d115      	bne.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f05e:	3308      	adds	r3, #8
 800f060:	2101      	movs	r1, #1
 800f062:	4618      	mov	r0, r3
 800f064:	f002 f8e0 	bl	8011228 <RCCEx_PLL2_Config>
 800f068:	4603      	mov	r3, r0
 800f06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f06e:	e015      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f074:	3328      	adds	r3, #40	; 0x28
 800f076:	2101      	movs	r1, #1
 800f078:	4618      	mov	r0, r3
 800f07a:	f002 f987 	bl	801138c <RCCEx_PLL3_Config>
 800f07e:	4603      	mov	r3, r0
 800f080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f084:	e00a      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f086:	2301      	movs	r3, #1
 800f088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f08c:	e006      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f08e:	bf00      	nop
 800f090:	e004      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f092:	bf00      	nop
 800f094:	e002      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f096:	bf00      	nop
 800f098:	e000      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f09a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f09c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d10d      	bne.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f0a4:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0b2:	4a02      	ldr	r2, [pc, #8]	; (800f0bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0b4:	430b      	orrs	r3, r1
 800f0b6:	6513      	str	r3, [r2, #80]	; 0x50
 800f0b8:	e006      	b.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f0ba:	bf00      	nop
 800f0bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f0d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f0de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	d055      	beq.n	800f194 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0f4:	d033      	beq.n	800f15e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f0f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0fa:	d82c      	bhi.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f100:	d02f      	beq.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f106:	d826      	bhi.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f108:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f10c:	d02b      	beq.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f10e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f112:	d820      	bhi.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f118:	d012      	beq.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f11a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f11e:	d81a      	bhi.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f120:	2b00      	cmp	r3, #0
 800f122:	d022      	beq.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f128:	d115      	bne.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f12e:	3308      	adds	r3, #8
 800f130:	2101      	movs	r1, #1
 800f132:	4618      	mov	r0, r3
 800f134:	f002 f878 	bl	8011228 <RCCEx_PLL2_Config>
 800f138:	4603      	mov	r3, r0
 800f13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f13e:	e015      	b.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f144:	3328      	adds	r3, #40	; 0x28
 800f146:	2101      	movs	r1, #1
 800f148:	4618      	mov	r0, r3
 800f14a:	f002 f91f 	bl	801138c <RCCEx_PLL3_Config>
 800f14e:	4603      	mov	r3, r0
 800f150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f154:	e00a      	b.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f156:	2301      	movs	r3, #1
 800f158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f15c:	e006      	b.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f15e:	bf00      	nop
 800f160:	e004      	b.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f162:	bf00      	nop
 800f164:	e002      	b.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f166:	bf00      	nop
 800f168:	e000      	b.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f16a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f16c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10b      	bne.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f174:	4ba3      	ldr	r3, [pc, #652]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f178:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f184:	4a9f      	ldr	r2, [pc, #636]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f186:	430b      	orrs	r3, r1
 800f188:	6593      	str	r3, [r2, #88]	; 0x58
 800f18a:	e003      	b.n	800f194 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f18c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f190:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f1a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f1aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	d037      	beq.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1be:	d00e      	beq.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1c4:	d816      	bhi.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d018      	beq.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f1ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1ce:	d111      	bne.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1d0:	4b8c      	ldr	r3, [pc, #560]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d4:	4a8b      	ldr	r2, [pc, #556]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f1dc:	e00f      	b.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f002 f81e 	bl	8011228 <RCCEx_PLL2_Config>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f1f2:	e004      	b.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f1fa:	e000      	b.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10a      	bne.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f206:	4b7f      	ldr	r3, [pc, #508]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f20a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f214:	4a7b      	ldr	r2, [pc, #492]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f216:	430b      	orrs	r3, r1
 800f218:	6513      	str	r3, [r2, #80]	; 0x50
 800f21a:	e003      	b.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f21c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f234:	2300      	movs	r3, #0
 800f236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f23a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f23e:	460b      	mov	r3, r1
 800f240:	4313      	orrs	r3, r2
 800f242:	d039      	beq.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d81c      	bhi.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f24e:	a201      	add	r2, pc, #4	; (adr r2, 800f254 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f254:	0800f291 	.word	0x0800f291
 800f258:	0800f265 	.word	0x0800f265
 800f25c:	0800f273 	.word	0x0800f273
 800f260:	0800f291 	.word	0x0800f291
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f264:	4b67      	ldr	r3, [pc, #412]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	4a66      	ldr	r2, [pc, #408]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f26e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f270:	e00f      	b.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f276:	3308      	adds	r3, #8
 800f278:	2102      	movs	r1, #2
 800f27a:	4618      	mov	r0, r3
 800f27c:	f001 ffd4 	bl	8011228 <RCCEx_PLL2_Config>
 800f280:	4603      	mov	r3, r0
 800f282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f286:	e004      	b.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f288:	2301      	movs	r3, #1
 800f28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f28e:	e000      	b.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10a      	bne.n	800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f29a:	4b5a      	ldr	r3, [pc, #360]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f29e:	f023 0103 	bic.w	r1, r3, #3
 800f2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2a8:	4a56      	ldr	r2, [pc, #344]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2aa:	430b      	orrs	r3, r1
 800f2ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2ae:	e003      	b.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f2c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f2ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	f000 809f 	beq.w	800f418 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f2da:	4b4b      	ldr	r3, [pc, #300]	; (800f408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4a4a      	ldr	r2, [pc, #296]	; (800f408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f2e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f2e6:	f7f6 faf1 	bl	80058cc <HAL_GetTick>
 800f2ea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f2ee:	e00b      	b.n	800f308 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f2f0:	f7f6 faec 	bl	80058cc <HAL_GetTick>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	2b64      	cmp	r3, #100	; 0x64
 800f2fe:	d903      	bls.n	800f308 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f300:	2303      	movs	r3, #3
 800f302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f306:	e005      	b.n	800f314 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f308:	4b3f      	ldr	r3, [pc, #252]	; (800f408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f310:	2b00      	cmp	r3, #0
 800f312:	d0ed      	beq.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d179      	bne.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f31c:	4b39      	ldr	r3, [pc, #228]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f31e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f328:	4053      	eors	r3, r2
 800f32a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d015      	beq.n	800f35e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f332:	4b34      	ldr	r3, [pc, #208]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f33a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f33e:	4b31      	ldr	r3, [pc, #196]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f342:	4a30      	ldr	r2, [pc, #192]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f348:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f34a:	4b2e      	ldr	r3, [pc, #184]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f34e:	4a2d      	ldr	r2, [pc, #180]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f354:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f356:	4a2b      	ldr	r2, [pc, #172]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f35c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f36a:	d118      	bne.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f36c:	f7f6 faae 	bl	80058cc <HAL_GetTick>
 800f370:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f374:	e00d      	b.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f376:	f7f6 faa9 	bl	80058cc <HAL_GetTick>
 800f37a:	4602      	mov	r2, r0
 800f37c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f380:	1ad2      	subs	r2, r2, r3
 800f382:	f241 3388 	movw	r3, #5000	; 0x1388
 800f386:	429a      	cmp	r2, r3
 800f388:	d903      	bls.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f38a:	2303      	movs	r3, #3
 800f38c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f390:	e005      	b.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f392:	4b1c      	ldr	r3, [pc, #112]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f396:	f003 0302 	and.w	r3, r3, #2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d0eb      	beq.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d129      	bne.n	800f3fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3b6:	d10e      	bne.n	800f3d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f3b8:	4b12      	ldr	r3, [pc, #72]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3c8:	091a      	lsrs	r2, r3, #4
 800f3ca:	4b10      	ldr	r3, [pc, #64]	; (800f40c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	4a0d      	ldr	r2, [pc, #52]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3d0:	430b      	orrs	r3, r1
 800f3d2:	6113      	str	r3, [r2, #16]
 800f3d4:	e005      	b.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f3d6:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	4a0a      	ldr	r2, [pc, #40]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3e0:	6113      	str	r3, [r2, #16]
 800f3e2:	4b08      	ldr	r3, [pc, #32]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3f2:	4a04      	ldr	r2, [pc, #16]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3f4:	430b      	orrs	r3, r1
 800f3f6:	6713      	str	r3, [r2, #112]	; 0x70
 800f3f8:	e00e      	b.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f3fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f402:	e009      	b.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f404:	58024400 	.word	0x58024400
 800f408:	58024800 	.word	0x58024800
 800f40c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	f002 0301 	and.w	r3, r2, #1
 800f424:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f428:	2300      	movs	r3, #0
 800f42a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f42e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f432:	460b      	mov	r3, r1
 800f434:	4313      	orrs	r3, r2
 800f436:	f000 8089 	beq.w	800f54c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f43e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f440:	2b28      	cmp	r3, #40	; 0x28
 800f442:	d86b      	bhi.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f444:	a201      	add	r2, pc, #4	; (adr r2, 800f44c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44a:	bf00      	nop
 800f44c:	0800f525 	.word	0x0800f525
 800f450:	0800f51d 	.word	0x0800f51d
 800f454:	0800f51d 	.word	0x0800f51d
 800f458:	0800f51d 	.word	0x0800f51d
 800f45c:	0800f51d 	.word	0x0800f51d
 800f460:	0800f51d 	.word	0x0800f51d
 800f464:	0800f51d 	.word	0x0800f51d
 800f468:	0800f51d 	.word	0x0800f51d
 800f46c:	0800f4f1 	.word	0x0800f4f1
 800f470:	0800f51d 	.word	0x0800f51d
 800f474:	0800f51d 	.word	0x0800f51d
 800f478:	0800f51d 	.word	0x0800f51d
 800f47c:	0800f51d 	.word	0x0800f51d
 800f480:	0800f51d 	.word	0x0800f51d
 800f484:	0800f51d 	.word	0x0800f51d
 800f488:	0800f51d 	.word	0x0800f51d
 800f48c:	0800f507 	.word	0x0800f507
 800f490:	0800f51d 	.word	0x0800f51d
 800f494:	0800f51d 	.word	0x0800f51d
 800f498:	0800f51d 	.word	0x0800f51d
 800f49c:	0800f51d 	.word	0x0800f51d
 800f4a0:	0800f51d 	.word	0x0800f51d
 800f4a4:	0800f51d 	.word	0x0800f51d
 800f4a8:	0800f51d 	.word	0x0800f51d
 800f4ac:	0800f525 	.word	0x0800f525
 800f4b0:	0800f51d 	.word	0x0800f51d
 800f4b4:	0800f51d 	.word	0x0800f51d
 800f4b8:	0800f51d 	.word	0x0800f51d
 800f4bc:	0800f51d 	.word	0x0800f51d
 800f4c0:	0800f51d 	.word	0x0800f51d
 800f4c4:	0800f51d 	.word	0x0800f51d
 800f4c8:	0800f51d 	.word	0x0800f51d
 800f4cc:	0800f525 	.word	0x0800f525
 800f4d0:	0800f51d 	.word	0x0800f51d
 800f4d4:	0800f51d 	.word	0x0800f51d
 800f4d8:	0800f51d 	.word	0x0800f51d
 800f4dc:	0800f51d 	.word	0x0800f51d
 800f4e0:	0800f51d 	.word	0x0800f51d
 800f4e4:	0800f51d 	.word	0x0800f51d
 800f4e8:	0800f51d 	.word	0x0800f51d
 800f4ec:	0800f525 	.word	0x0800f525
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	2101      	movs	r1, #1
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f001 fe95 	bl	8011228 <RCCEx_PLL2_Config>
 800f4fe:	4603      	mov	r3, r0
 800f500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f504:	e00f      	b.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f50a:	3328      	adds	r3, #40	; 0x28
 800f50c:	2101      	movs	r1, #1
 800f50e:	4618      	mov	r0, r3
 800f510:	f001 ff3c 	bl	801138c <RCCEx_PLL3_Config>
 800f514:	4603      	mov	r3, r0
 800f516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f51a:	e004      	b.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f51c:	2301      	movs	r3, #1
 800f51e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f522:	e000      	b.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f524:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10a      	bne.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f52e:	4bbf      	ldr	r3, [pc, #764]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f532:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f53a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f53c:	4abb      	ldr	r2, [pc, #748]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f53e:	430b      	orrs	r3, r1
 800f540:	6553      	str	r3, [r2, #84]	; 0x54
 800f542:	e003      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	f002 0302 	and.w	r3, r2, #2
 800f558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f55c:	2300      	movs	r3, #0
 800f55e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f562:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f566:	460b      	mov	r3, r1
 800f568:	4313      	orrs	r3, r2
 800f56a:	d041      	beq.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f572:	2b05      	cmp	r3, #5
 800f574:	d824      	bhi.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f576:	a201      	add	r2, pc, #4	; (adr r2, 800f57c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f5c9 	.word	0x0800f5c9
 800f580:	0800f595 	.word	0x0800f595
 800f584:	0800f5ab 	.word	0x0800f5ab
 800f588:	0800f5c9 	.word	0x0800f5c9
 800f58c:	0800f5c9 	.word	0x0800f5c9
 800f590:	0800f5c9 	.word	0x0800f5c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f598:	3308      	adds	r3, #8
 800f59a:	2101      	movs	r1, #1
 800f59c:	4618      	mov	r0, r3
 800f59e:	f001 fe43 	bl	8011228 <RCCEx_PLL2_Config>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f5a8:	e00f      	b.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ae:	3328      	adds	r3, #40	; 0x28
 800f5b0:	2101      	movs	r1, #1
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f001 feea 	bl	801138c <RCCEx_PLL3_Config>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f5be:	e004      	b.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5c6:	e000      	b.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f5c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10a      	bne.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f5d2:	4b96      	ldr	r3, [pc, #600]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5d6:	f023 0107 	bic.w	r1, r3, #7
 800f5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5e0:	4a92      	ldr	r2, [pc, #584]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5e2:	430b      	orrs	r3, r1
 800f5e4:	6553      	str	r3, [r2, #84]	; 0x54
 800f5e6:	e003      	b.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f8:	f002 0304 	and.w	r3, r2, #4
 800f5fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f600:	2300      	movs	r3, #0
 800f602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f606:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f60a:	460b      	mov	r3, r1
 800f60c:	4313      	orrs	r3, r2
 800f60e:	d044      	beq.n	800f69a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f618:	2b05      	cmp	r3, #5
 800f61a:	d825      	bhi.n	800f668 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f61c:	a201      	add	r2, pc, #4	; (adr r2, 800f624 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f622:	bf00      	nop
 800f624:	0800f671 	.word	0x0800f671
 800f628:	0800f63d 	.word	0x0800f63d
 800f62c:	0800f653 	.word	0x0800f653
 800f630:	0800f671 	.word	0x0800f671
 800f634:	0800f671 	.word	0x0800f671
 800f638:	0800f671 	.word	0x0800f671
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f640:	3308      	adds	r3, #8
 800f642:	2101      	movs	r1, #1
 800f644:	4618      	mov	r0, r3
 800f646:	f001 fdef 	bl	8011228 <RCCEx_PLL2_Config>
 800f64a:	4603      	mov	r3, r0
 800f64c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f650:	e00f      	b.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f656:	3328      	adds	r3, #40	; 0x28
 800f658:	2101      	movs	r1, #1
 800f65a:	4618      	mov	r0, r3
 800f65c:	f001 fe96 	bl	801138c <RCCEx_PLL3_Config>
 800f660:	4603      	mov	r3, r0
 800f662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f666:	e004      	b.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f66e:	e000      	b.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f670:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f676:	2b00      	cmp	r3, #0
 800f678:	d10b      	bne.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f67a:	4b6c      	ldr	r3, [pc, #432]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f67e:	f023 0107 	bic.w	r1, r3, #7
 800f682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f68a:	4a68      	ldr	r2, [pc, #416]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f68c:	430b      	orrs	r3, r1
 800f68e:	6593      	str	r3, [r2, #88]	; 0x58
 800f690:	e003      	b.n	800f69a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f002 0320 	and.w	r3, r2, #32
 800f6a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f6b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	d055      	beq.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6c6:	d033      	beq.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6cc:	d82c      	bhi.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6d2:	d02f      	beq.n	800f734 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6d8:	d826      	bhi.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f6de:	d02b      	beq.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f6e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f6e4:	d820      	bhi.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6ea:	d012      	beq.n	800f712 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6f0:	d81a      	bhi.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d022      	beq.n	800f73c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f6f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6fa:	d115      	bne.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f700:	3308      	adds	r3, #8
 800f702:	2100      	movs	r1, #0
 800f704:	4618      	mov	r0, r3
 800f706:	f001 fd8f 	bl	8011228 <RCCEx_PLL2_Config>
 800f70a:	4603      	mov	r3, r0
 800f70c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f710:	e015      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f716:	3328      	adds	r3, #40	; 0x28
 800f718:	2102      	movs	r1, #2
 800f71a:	4618      	mov	r0, r3
 800f71c:	f001 fe36 	bl	801138c <RCCEx_PLL3_Config>
 800f720:	4603      	mov	r3, r0
 800f722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f726:	e00a      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f72e:	e006      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f730:	bf00      	nop
 800f732:	e004      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f734:	bf00      	nop
 800f736:	e002      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f738:	bf00      	nop
 800f73a:	e000      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f742:	2b00      	cmp	r3, #0
 800f744:	d10b      	bne.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f746:	4b39      	ldr	r3, [pc, #228]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f74a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f756:	4a35      	ldr	r2, [pc, #212]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f758:	430b      	orrs	r3, r1
 800f75a:	6553      	str	r3, [r2, #84]	; 0x54
 800f75c:	e003      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f75e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f776:	2300      	movs	r3, #0
 800f778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f77c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f780:	460b      	mov	r3, r1
 800f782:	4313      	orrs	r3, r2
 800f784:	d058      	beq.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f78a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f78e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f792:	d033      	beq.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f794:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f798:	d82c      	bhi.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f79a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f79e:	d02f      	beq.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f7a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7a4:	d826      	bhi.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7aa:	d02b      	beq.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f7ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7b0:	d820      	bhi.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7b6:	d012      	beq.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7bc:	d81a      	bhi.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d022      	beq.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f7c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7c6:	d115      	bne.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7cc:	3308      	adds	r3, #8
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f001 fd29 	bl	8011228 <RCCEx_PLL2_Config>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f7dc:	e015      	b.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e2:	3328      	adds	r3, #40	; 0x28
 800f7e4:	2102      	movs	r1, #2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f001 fdd0 	bl	801138c <RCCEx_PLL3_Config>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f7f2:	e00a      	b.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7fa:	e006      	b.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f7fc:	bf00      	nop
 800f7fe:	e004      	b.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f800:	bf00      	nop
 800f802:	e002      	b.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f804:	bf00      	nop
 800f806:	e000      	b.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f80a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d10e      	bne.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f812:	4b06      	ldr	r3, [pc, #24]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f816:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f81e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f822:	4a02      	ldr	r2, [pc, #8]	; (800f82c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f824:	430b      	orrs	r3, r1
 800f826:	6593      	str	r3, [r2, #88]	; 0x58
 800f828:	e006      	b.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f82a:	bf00      	nop
 800f82c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f834:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f840:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f848:	2300      	movs	r3, #0
 800f84a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f84e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f852:	460b      	mov	r3, r1
 800f854:	4313      	orrs	r3, r2
 800f856:	d055      	beq.n	800f904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f85c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f860:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f864:	d033      	beq.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f866:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f86a:	d82c      	bhi.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f86c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f870:	d02f      	beq.n	800f8d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f876:	d826      	bhi.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f878:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f87c:	d02b      	beq.n	800f8d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f87e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f882:	d820      	bhi.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f888:	d012      	beq.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f88a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f88e:	d81a      	bhi.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f890:	2b00      	cmp	r3, #0
 800f892:	d022      	beq.n	800f8da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f898:	d115      	bne.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f89e:	3308      	adds	r3, #8
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f001 fcc0 	bl	8011228 <RCCEx_PLL2_Config>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f8ae:	e015      	b.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b4:	3328      	adds	r3, #40	; 0x28
 800f8b6:	2102      	movs	r1, #2
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f001 fd67 	bl	801138c <RCCEx_PLL3_Config>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f8c4:	e00a      	b.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8cc:	e006      	b.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f8ce:	bf00      	nop
 800f8d0:	e004      	b.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f8d2:	bf00      	nop
 800f8d4:	e002      	b.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f8d6:	bf00      	nop
 800f8d8:	e000      	b.n	800f8dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f8da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d10b      	bne.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f8e4:	4ba1      	ldr	r3, [pc, #644]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f8f4:	4a9d      	ldr	r2, [pc, #628]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8f6:	430b      	orrs	r3, r1
 800f8f8:	6593      	str	r3, [r2, #88]	; 0x58
 800f8fa:	e003      	b.n	800f904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f900:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f002 0308 	and.w	r3, r2, #8
 800f910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f914:	2300      	movs	r3, #0
 800f916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f91a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f91e:	460b      	mov	r3, r1
 800f920:	4313      	orrs	r3, r2
 800f922:	d01e      	beq.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f930:	d10c      	bne.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f936:	3328      	adds	r3, #40	; 0x28
 800f938:	2102      	movs	r1, #2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f001 fd26 	bl	801138c <RCCEx_PLL3_Config>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d002      	beq.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f946:	2301      	movs	r3, #1
 800f948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f94c:	4b87      	ldr	r3, [pc, #540]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f950:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f95c:	4a83      	ldr	r2, [pc, #524]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f95e:	430b      	orrs	r3, r1
 800f960:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	f002 0310 	and.w	r3, r2, #16
 800f96e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f972:	2300      	movs	r3, #0
 800f974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f978:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f97c:	460b      	mov	r3, r1
 800f97e:	4313      	orrs	r3, r2
 800f980:	d01e      	beq.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f98e:	d10c      	bne.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f994:	3328      	adds	r3, #40	; 0x28
 800f996:	2102      	movs	r1, #2
 800f998:	4618      	mov	r0, r3
 800f99a:	f001 fcf7 	bl	801138c <RCCEx_PLL3_Config>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d002      	beq.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f9aa:	4b70      	ldr	r3, [pc, #448]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f9ba:	4a6c      	ldr	r2, [pc, #432]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9bc:	430b      	orrs	r3, r1
 800f9be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f9cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	d03e      	beq.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f9e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9ec:	d022      	beq.n	800fa34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f9ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9f2:	d81b      	bhi.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d003      	beq.n	800fa00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9fc:	d00b      	beq.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f9fe:	e015      	b.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa04:	3308      	adds	r3, #8
 800fa06:	2100      	movs	r1, #0
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f001 fc0d 	bl	8011228 <RCCEx_PLL2_Config>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fa14:	e00f      	b.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa1a:	3328      	adds	r3, #40	; 0x28
 800fa1c:	2102      	movs	r1, #2
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f001 fcb4 	bl	801138c <RCCEx_PLL3_Config>
 800fa24:	4603      	mov	r3, r0
 800fa26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fa2a:	e004      	b.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa32:	e000      	b.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fa34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10b      	bne.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa3e:	4b4b      	ldr	r3, [pc, #300]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa4e:	4a47      	ldr	r2, [pc, #284]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa50:	430b      	orrs	r3, r1
 800fa52:	6593      	str	r3, [r2, #88]	; 0x58
 800fa54:	e003      	b.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fa6a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fa74:	460b      	mov	r3, r1
 800fa76:	4313      	orrs	r3, r2
 800fa78:	d03b      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fa7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fa86:	d01f      	beq.n	800fac8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fa88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fa8c:	d818      	bhi.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fa8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa92:	d003      	beq.n	800fa9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fa94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa98:	d007      	beq.n	800faaa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fa9a:	e011      	b.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa9c:	4b33      	ldr	r3, [pc, #204]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa0:	4a32      	ldr	r2, [pc, #200]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800faa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800faa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800faa8:	e00f      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800faaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faae:	3328      	adds	r3, #40	; 0x28
 800fab0:	2101      	movs	r1, #1
 800fab2:	4618      	mov	r0, r3
 800fab4:	f001 fc6a 	bl	801138c <RCCEx_PLL3_Config>
 800fab8:	4603      	mov	r3, r0
 800faba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fabe:	e004      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fac0:	2301      	movs	r3, #1
 800fac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fac6:	e000      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800faca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10b      	bne.n	800faea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fad2:	4b26      	ldr	r3, [pc, #152]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fae2:	4a22      	ldr	r2, [pc, #136]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fae4:	430b      	orrs	r3, r1
 800fae6:	6553      	str	r3, [r2, #84]	; 0x54
 800fae8:	e003      	b.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800faee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800faf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fafe:	673b      	str	r3, [r7, #112]	; 0x70
 800fb00:	2300      	movs	r3, #0
 800fb02:	677b      	str	r3, [r7, #116]	; 0x74
 800fb04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fb08:	460b      	mov	r3, r1
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	d034      	beq.n	800fb78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d003      	beq.n	800fb20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fb18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb1c:	d007      	beq.n	800fb2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fb1e:	e011      	b.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb20:	4b12      	ldr	r3, [pc, #72]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb24:	4a11      	ldr	r2, [pc, #68]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fb2c:	e00e      	b.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb32:	3308      	adds	r3, #8
 800fb34:	2102      	movs	r1, #2
 800fb36:	4618      	mov	r0, r3
 800fb38:	f001 fb76 	bl	8011228 <RCCEx_PLL2_Config>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fb42:	e003      	b.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10d      	bne.n	800fb70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fb54:	4b05      	ldr	r3, [pc, #20]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb62:	4a02      	ldr	r2, [pc, #8]	; (800fb6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb64:	430b      	orrs	r3, r1
 800fb66:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb68:	e006      	b.n	800fb78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800fb6a:	bf00      	nop
 800fb6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fb78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fb84:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb86:	2300      	movs	r3, #0
 800fb88:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fb8e:	460b      	mov	r3, r1
 800fb90:	4313      	orrs	r3, r2
 800fb92:	d00c      	beq.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb98:	3328      	adds	r3, #40	; 0x28
 800fb9a:	2102      	movs	r1, #2
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f001 fbf5 	bl	801138c <RCCEx_PLL3_Config>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d002      	beq.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fbae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fbba:	663b      	str	r3, [r7, #96]	; 0x60
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	667b      	str	r3, [r7, #100]	; 0x64
 800fbc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	d038      	beq.n	800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbd6:	d018      	beq.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fbd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbdc:	d811      	bhi.n	800fc02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fbde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbe2:	d014      	beq.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fbe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbe8:	d80b      	bhi.n	800fc02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d011      	beq.n	800fc12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbf2:	d106      	bne.n	800fc02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbf4:	4bc3      	ldr	r3, [pc, #780]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf8:	4ac2      	ldr	r2, [pc, #776]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fbfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fc00:	e008      	b.n	800fc14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc08:	e004      	b.n	800fc14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc0a:	bf00      	nop
 800fc0c:	e002      	b.n	800fc14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc0e:	bf00      	nop
 800fc10:	e000      	b.n	800fc14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10b      	bne.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fc1c:	4bb9      	ldr	r3, [pc, #740]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc2c:	4ab5      	ldr	r2, [pc, #724]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc2e:	430b      	orrs	r3, r1
 800fc30:	6553      	str	r3, [r2, #84]	; 0x54
 800fc32:	e003      	b.n	800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc44:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fc48:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fc52:	460b      	mov	r3, r1
 800fc54:	4313      	orrs	r3, r2
 800fc56:	d009      	beq.n	800fc6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fc58:	4baa      	ldr	r3, [pc, #680]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc66:	4aa7      	ldr	r2, [pc, #668]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc68:	430b      	orrs	r3, r1
 800fc6a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fc78:	653b      	str	r3, [r7, #80]	; 0x50
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	657b      	str	r3, [r7, #84]	; 0x54
 800fc7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fc82:	460b      	mov	r3, r1
 800fc84:	4313      	orrs	r3, r2
 800fc86:	d00a      	beq.n	800fc9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fc88:	4b9e      	ldr	r3, [pc, #632]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fc98:	4a9a      	ldr	r2, [pc, #616]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc9a:	430b      	orrs	r3, r1
 800fc9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fcaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcac:	2300      	movs	r3, #0
 800fcae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	d009      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fcba:	4b92      	ldr	r3, [pc, #584]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcbe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcc8:	4a8e      	ldr	r2, [pc, #568]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcca:	430b      	orrs	r3, r1
 800fccc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fcda:	643b      	str	r3, [r7, #64]	; 0x40
 800fcdc:	2300      	movs	r3, #0
 800fcde:	647b      	str	r3, [r7, #68]	; 0x44
 800fce0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fce4:	460b      	mov	r3, r1
 800fce6:	4313      	orrs	r3, r2
 800fce8:	d00e      	beq.n	800fd08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fcea:	4b86      	ldr	r3, [pc, #536]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcec:	691b      	ldr	r3, [r3, #16]
 800fcee:	4a85      	ldr	r2, [pc, #532]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fcf4:	6113      	str	r3, [r2, #16]
 800fcf6:	4b83      	ldr	r3, [pc, #524]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcf8:	6919      	ldr	r1, [r3, #16]
 800fcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fd02:	4a80      	ldr	r2, [pc, #512]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd04:	430b      	orrs	r3, r1
 800fd06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fd14:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd16:	2300      	movs	r3, #0
 800fd18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4313      	orrs	r3, r2
 800fd22:	d009      	beq.n	800fd38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fd24:	4b77      	ldr	r3, [pc, #476]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd28:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fd2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd32:	4a74      	ldr	r2, [pc, #464]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd34:	430b      	orrs	r3, r1
 800fd36:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd40:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fd44:	633b      	str	r3, [r7, #48]	; 0x30
 800fd46:	2300      	movs	r3, #0
 800fd48:	637b      	str	r3, [r7, #52]	; 0x34
 800fd4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4313      	orrs	r3, r2
 800fd52:	d00a      	beq.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fd54:	4b6b      	ldr	r3, [pc, #428]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd58:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd64:	4a67      	ldr	r2, [pc, #412]	; (800ff04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd66:	430b      	orrs	r3, r1
 800fd68:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	2100      	movs	r1, #0
 800fd74:	62b9      	str	r1, [r7, #40]	; 0x28
 800fd76:	f003 0301 	and.w	r3, r3, #1
 800fd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fd80:	460b      	mov	r3, r1
 800fd82:	4313      	orrs	r3, r2
 800fd84:	d011      	beq.n	800fdaa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f001 fa4a 	bl	8011228 <RCCEx_PLL2_Config>
 800fd94:	4603      	mov	r3, r0
 800fd96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fd9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d003      	beq.n	800fdaa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fda2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fda6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fdaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	6239      	str	r1, [r7, #32]
 800fdb6:	f003 0302 	and.w	r3, r3, #2
 800fdba:	627b      	str	r3, [r7, #36]	; 0x24
 800fdbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	d011      	beq.n	800fdea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fdc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdca:	3308      	adds	r3, #8
 800fdcc:	2101      	movs	r1, #1
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f001 fa2a 	bl	8011228 <RCCEx_PLL2_Config>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fdda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fde2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fde6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	61b9      	str	r1, [r7, #24]
 800fdf6:	f003 0304 	and.w	r3, r3, #4
 800fdfa:	61fb      	str	r3, [r7, #28]
 800fdfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fe00:	460b      	mov	r3, r1
 800fe02:	4313      	orrs	r3, r2
 800fe04:	d011      	beq.n	800fe2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fe06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe0a:	3308      	adds	r3, #8
 800fe0c:	2102      	movs	r1, #2
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f001 fa0a 	bl	8011228 <RCCEx_PLL2_Config>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d003      	beq.n	800fe2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fe2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe32:	2100      	movs	r1, #0
 800fe34:	6139      	str	r1, [r7, #16]
 800fe36:	f003 0308 	and.w	r3, r3, #8
 800fe3a:	617b      	str	r3, [r7, #20]
 800fe3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe40:	460b      	mov	r3, r1
 800fe42:	4313      	orrs	r3, r2
 800fe44:	d011      	beq.n	800fe6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fe46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe4a:	3328      	adds	r3, #40	; 0x28
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f001 fa9c 	bl	801138c <RCCEx_PLL3_Config>
 800fe54:	4603      	mov	r3, r0
 800fe56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fe5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d003      	beq.n	800fe6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fe6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe72:	2100      	movs	r1, #0
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	f003 0310 	and.w	r3, r3, #16
 800fe7a:	60fb      	str	r3, [r7, #12]
 800fe7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe80:	460b      	mov	r3, r1
 800fe82:	4313      	orrs	r3, r2
 800fe84:	d011      	beq.n	800feaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe8a:	3328      	adds	r3, #40	; 0x28
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f001 fa7c 	bl	801138c <RCCEx_PLL3_Config>
 800fe94:	4603      	mov	r3, r0
 800fe96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d003      	beq.n	800feaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800feaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	2100      	movs	r1, #0
 800feb4:	6039      	str	r1, [r7, #0]
 800feb6:	f003 0320 	and.w	r3, r3, #32
 800feba:	607b      	str	r3, [r7, #4]
 800febc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fec0:	460b      	mov	r3, r1
 800fec2:	4313      	orrs	r3, r2
 800fec4:	d011      	beq.n	800feea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feca:	3328      	adds	r3, #40	; 0x28
 800fecc:	2102      	movs	r1, #2
 800fece:	4618      	mov	r0, r3
 800fed0:	f001 fa5c 	bl	801138c <RCCEx_PLL3_Config>
 800fed4:	4603      	mov	r3, r0
 800fed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800feda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d003      	beq.n	800feea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800feea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fef2:	2300      	movs	r3, #0
 800fef4:	e000      	b.n	800fef8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fef6:	2301      	movs	r3, #1
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fefe:	46bd      	mov	sp, r7
 800ff00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff04:	58024400 	.word	0x58024400

0800ff08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b090      	sub	sp, #64	; 0x40
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ff12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ff1a:	430b      	orrs	r3, r1
 800ff1c:	f040 8094 	bne.w	8010048 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ff20:	4b9e      	ldr	r3, [pc, #632]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff24:	f003 0307 	and.w	r3, r3, #7
 800ff28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	2b04      	cmp	r3, #4
 800ff2e:	f200 8087 	bhi.w	8010040 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ff32:	a201      	add	r2, pc, #4	; (adr r2, 800ff38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ff34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff38:	0800ff4d 	.word	0x0800ff4d
 800ff3c:	0800ff75 	.word	0x0800ff75
 800ff40:	0800ff9d 	.word	0x0800ff9d
 800ff44:	08010039 	.word	0x08010039
 800ff48:	0800ffc5 	.word	0x0800ffc5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff4c:	4b93      	ldr	r3, [pc, #588]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff58:	d108      	bne.n	800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f001 f810 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff68:	f000 bd45 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff70:	f000 bd41 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff74:	4b89      	ldr	r3, [pc, #548]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff80:	d108      	bne.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff82:	f107 0318 	add.w	r3, r7, #24
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 fd54 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff90:	f000 bd31 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff98:	f000 bd2d 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff9c:	4b7f      	ldr	r3, [pc, #508]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffa8:	d108      	bne.n	800ffbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffaa:	f107 030c 	add.w	r3, r7, #12
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f000 fe94 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffb8:	f000 bd1d 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffc0:	f000 bd19 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ffc4:	4b75      	ldr	r3, [pc, #468]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ffcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ffce:	4b73      	ldr	r3, [pc, #460]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f003 0304 	and.w	r3, r3, #4
 800ffd6:	2b04      	cmp	r3, #4
 800ffd8:	d10c      	bne.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ffda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d109      	bne.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ffe0:	4b6e      	ldr	r3, [pc, #440]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	08db      	lsrs	r3, r3, #3
 800ffe6:	f003 0303 	and.w	r3, r3, #3
 800ffea:	4a6d      	ldr	r2, [pc, #436]	; (80101a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ffec:	fa22 f303 	lsr.w	r3, r2, r3
 800fff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fff2:	e01f      	b.n	8010034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fff4:	4b69      	ldr	r3, [pc, #420]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010000:	d106      	bne.n	8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010008:	d102      	bne.n	8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801000a:	4b66      	ldr	r3, [pc, #408]	; (80101a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801000c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801000e:	e011      	b.n	8010034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010010:	4b62      	ldr	r3, [pc, #392]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801001c:	d106      	bne.n	801002c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801001e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010024:	d102      	bne.n	801002c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010026:	4b60      	ldr	r3, [pc, #384]	; (80101a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010028:	63fb      	str	r3, [r7, #60]	; 0x3c
 801002a:	e003      	b.n	8010034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010030:	f000 bce1 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010034:	f000 bcdf 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010038:	4b5c      	ldr	r3, [pc, #368]	; (80101ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801003a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801003c:	f000 bcdb 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010044:	f000 bcd7 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010048:	e9d7 2300 	ldrd	r2, r3, [r7]
 801004c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010050:	430b      	orrs	r3, r1
 8010052:	f040 80ad 	bne.w	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010056:	4b51      	ldr	r3, [pc, #324]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801005a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801005e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010066:	d056      	beq.n	8010116 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801006e:	f200 8090 	bhi.w	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010074:	2bc0      	cmp	r3, #192	; 0xc0
 8010076:	f000 8088 	beq.w	801018a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007c:	2bc0      	cmp	r3, #192	; 0xc0
 801007e:	f200 8088 	bhi.w	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	2b80      	cmp	r3, #128	; 0x80
 8010086:	d032      	beq.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008a:	2b80      	cmp	r3, #128	; 0x80
 801008c:	f200 8081 	bhi.w	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010092:	2b00      	cmp	r3, #0
 8010094:	d003      	beq.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010098:	2b40      	cmp	r3, #64	; 0x40
 801009a:	d014      	beq.n	80100c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801009c:	e079      	b.n	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801009e:	4b3f      	ldr	r3, [pc, #252]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100aa:	d108      	bne.n	80100be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100b0:	4618      	mov	r0, r3
 80100b2:	f000 ff67 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100ba:	f000 bc9c 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100c2:	f000 bc98 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100c6:	4b35      	ldr	r3, [pc, #212]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80100d2:	d108      	bne.n	80100e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100d4:	f107 0318 	add.w	r3, r7, #24
 80100d8:	4618      	mov	r0, r3
 80100da:	f000 fcab 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100e2:	f000 bc88 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100e6:	2300      	movs	r3, #0
 80100e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100ea:	f000 bc84 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80100ee:	4b2b      	ldr	r3, [pc, #172]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100fa:	d108      	bne.n	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100fc:	f107 030c 	add.w	r3, r7, #12
 8010100:	4618      	mov	r0, r3
 8010102:	f000 fdeb 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801010a:	f000 bc74 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010112:	f000 bc70 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010116:	4b21      	ldr	r3, [pc, #132]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801011a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801011e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010120:	4b1e      	ldr	r3, [pc, #120]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f003 0304 	and.w	r3, r3, #4
 8010128:	2b04      	cmp	r3, #4
 801012a:	d10c      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	2b00      	cmp	r3, #0
 8010130:	d109      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010132:	4b1a      	ldr	r3, [pc, #104]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	08db      	lsrs	r3, r3, #3
 8010138:	f003 0303 	and.w	r3, r3, #3
 801013c:	4a18      	ldr	r2, [pc, #96]	; (80101a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801013e:	fa22 f303 	lsr.w	r3, r2, r3
 8010142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010144:	e01f      	b.n	8010186 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010146:	4b15      	ldr	r3, [pc, #84]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801014e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010152:	d106      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801015a:	d102      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801015c:	4b11      	ldr	r3, [pc, #68]	; (80101a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801015e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010160:	e011      	b.n	8010186 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010162:	4b0e      	ldr	r3, [pc, #56]	; (801019c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801016a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801016e:	d106      	bne.n	801017e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010176:	d102      	bne.n	801017e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010178:	4b0b      	ldr	r3, [pc, #44]	; (80101a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801017a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801017c:	e003      	b.n	8010186 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801017e:	2300      	movs	r3, #0
 8010180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010182:	f000 bc38 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010186:	f000 bc36 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801018a:	4b08      	ldr	r3, [pc, #32]	; (80101ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801018c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801018e:	f000 bc32 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010196:	f000 bc2e 	b.w	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801019a:	bf00      	nop
 801019c:	58024400 	.word	0x58024400
 80101a0:	03d09000 	.word	0x03d09000
 80101a4:	003d0900 	.word	0x003d0900
 80101a8:	017d7840 	.word	0x017d7840
 80101ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80101b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80101b8:	430b      	orrs	r3, r1
 80101ba:	f040 809c 	bne.w	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80101be:	4b9e      	ldr	r3, [pc, #632]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80101c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80101c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80101ce:	d054      	beq.n	801027a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80101d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80101d6:	f200 808b 	bhi.w	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80101e0:	f000 8083 	beq.w	80102ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80101e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80101ea:	f200 8081 	bhi.w	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101f4:	d02f      	beq.n	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101fc:	d878      	bhi.n	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80101fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010200:	2b00      	cmp	r3, #0
 8010202:	d004      	beq.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801020a:	d012      	beq.n	8010232 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801020c:	e070      	b.n	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801020e:	4b8a      	ldr	r3, [pc, #552]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801021a:	d107      	bne.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801021c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010220:	4618      	mov	r0, r3
 8010222:	f000 feaf 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801022a:	e3e4      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801022c:	2300      	movs	r3, #0
 801022e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010230:	e3e1      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010232:	4b81      	ldr	r3, [pc, #516]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801023a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801023e:	d107      	bne.n	8010250 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010240:	f107 0318 	add.w	r3, r7, #24
 8010244:	4618      	mov	r0, r3
 8010246:	f000 fbf5 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801024e:	e3d2      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010254:	e3cf      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010256:	4b78      	ldr	r3, [pc, #480]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801025e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010262:	d107      	bne.n	8010274 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010264:	f107 030c 	add.w	r3, r7, #12
 8010268:	4618      	mov	r0, r3
 801026a:	f000 fd37 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010272:	e3c0      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010278:	e3bd      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801027a:	4b6f      	ldr	r3, [pc, #444]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801027c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801027e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010282:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010284:	4b6c      	ldr	r3, [pc, #432]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f003 0304 	and.w	r3, r3, #4
 801028c:	2b04      	cmp	r3, #4
 801028e:	d10c      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010292:	2b00      	cmp	r3, #0
 8010294:	d109      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010296:	4b68      	ldr	r3, [pc, #416]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	08db      	lsrs	r3, r3, #3
 801029c:	f003 0303 	and.w	r3, r3, #3
 80102a0:	4a66      	ldr	r2, [pc, #408]	; (801043c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80102a2:	fa22 f303 	lsr.w	r3, r2, r3
 80102a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102a8:	e01e      	b.n	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80102aa:	4b63      	ldr	r3, [pc, #396]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102b6:	d106      	bne.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80102b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102be:	d102      	bne.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80102c0:	4b5f      	ldr	r3, [pc, #380]	; (8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80102c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102c4:	e010      	b.n	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102c6:	4b5c      	ldr	r3, [pc, #368]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102d2:	d106      	bne.n	80102e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80102d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102da:	d102      	bne.n	80102e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80102dc:	4b59      	ldr	r3, [pc, #356]	; (8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80102de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102e0:	e002      	b.n	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80102e2:	2300      	movs	r3, #0
 80102e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80102e6:	e386      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80102e8:	e385      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80102ea:	4b57      	ldr	r3, [pc, #348]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80102ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102ee:	e382      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102f4:	e37f      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80102f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102fa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80102fe:	430b      	orrs	r3, r1
 8010300:	f040 80a7 	bne.w	8010452 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010304:	4b4c      	ldr	r3, [pc, #304]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010308:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801030c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010314:	d055      	beq.n	80103c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801031c:	f200 8096 	bhi.w	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010326:	f000 8084 	beq.w	8010432 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010330:	f200 808c 	bhi.w	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801033a:	d030      	beq.n	801039e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801033c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010342:	f200 8083 	bhi.w	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010348:	2b00      	cmp	r3, #0
 801034a:	d004      	beq.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801034c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010352:	d012      	beq.n	801037a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010354:	e07a      	b.n	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010356:	4b38      	ldr	r3, [pc, #224]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801035e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010362:	d107      	bne.n	8010374 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fe0b 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010372:	e340      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010374:	2300      	movs	r3, #0
 8010376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010378:	e33d      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801037a:	4b2f      	ldr	r3, [pc, #188]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010386:	d107      	bne.n	8010398 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010388:	f107 0318 	add.w	r3, r7, #24
 801038c:	4618      	mov	r0, r3
 801038e:	f000 fb51 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010396:	e32e      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010398:	2300      	movs	r3, #0
 801039a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801039c:	e32b      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801039e:	4b26      	ldr	r3, [pc, #152]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103aa:	d107      	bne.n	80103bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103ac:	f107 030c 	add.w	r3, r7, #12
 80103b0:	4618      	mov	r0, r3
 80103b2:	f000 fc93 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103ba:	e31c      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103bc:	2300      	movs	r3, #0
 80103be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103c0:	e319      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80103c2:	4b1d      	ldr	r3, [pc, #116]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103cc:	4b1a      	ldr	r3, [pc, #104]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f003 0304 	and.w	r3, r3, #4
 80103d4:	2b04      	cmp	r3, #4
 80103d6:	d10c      	bne.n	80103f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80103d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d109      	bne.n	80103f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103de:	4b16      	ldr	r3, [pc, #88]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	08db      	lsrs	r3, r3, #3
 80103e4:	f003 0303 	and.w	r3, r3, #3
 80103e8:	4a14      	ldr	r2, [pc, #80]	; (801043c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80103ea:	fa22 f303 	lsr.w	r3, r2, r3
 80103ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103f0:	e01e      	b.n	8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103f2:	4b11      	ldr	r3, [pc, #68]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103fe:	d106      	bne.n	801040e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010406:	d102      	bne.n	801040e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010408:	4b0d      	ldr	r3, [pc, #52]	; (8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801040a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801040c:	e010      	b.n	8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801040e:	4b0a      	ldr	r3, [pc, #40]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801041a:	d106      	bne.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010422:	d102      	bne.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010424:	4b07      	ldr	r3, [pc, #28]	; (8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010428:	e002      	b.n	8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801042e:	e2e2      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010430:	e2e1      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010432:	4b05      	ldr	r3, [pc, #20]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010436:	e2de      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010438:	58024400 	.word	0x58024400
 801043c:	03d09000 	.word	0x03d09000
 8010440:	003d0900 	.word	0x003d0900
 8010444:	017d7840 	.word	0x017d7840
 8010448:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801044c:	2300      	movs	r3, #0
 801044e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010450:	e2d1      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010456:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801045a:	430b      	orrs	r3, r1
 801045c:	f040 809c 	bne.w	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010460:	4b93      	ldr	r3, [pc, #588]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010464:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010468:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801046a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010470:	d054      	beq.n	801051c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010478:	f200 808b 	bhi.w	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801047c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010482:	f000 8083 	beq.w	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010488:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801048c:	f200 8081 	bhi.w	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010496:	d02f      	beq.n	80104f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801049e:	d878      	bhi.n	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d004      	beq.n	80104b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80104a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104ac:	d012      	beq.n	80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80104ae:	e070      	b.n	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104b0:	4b7f      	ldr	r3, [pc, #508]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104bc:	d107      	bne.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104c2:	4618      	mov	r0, r3
 80104c4:	f000 fd5e 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104cc:	e293      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d2:	e290      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104d4:	4b76      	ldr	r3, [pc, #472]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104e0:	d107      	bne.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104e2:	f107 0318 	add.w	r3, r7, #24
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 faa4 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104f0:	e281      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104f2:	2300      	movs	r3, #0
 80104f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104f6:	e27e      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104f8:	4b6d      	ldr	r3, [pc, #436]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010504:	d107      	bne.n	8010516 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010506:	f107 030c 	add.w	r3, r7, #12
 801050a:	4618      	mov	r0, r3
 801050c:	f000 fbe6 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010514:	e26f      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010516:	2300      	movs	r3, #0
 8010518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801051a:	e26c      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801051c:	4b64      	ldr	r3, [pc, #400]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801051e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010524:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010526:	4b62      	ldr	r3, [pc, #392]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f003 0304 	and.w	r3, r3, #4
 801052e:	2b04      	cmp	r3, #4
 8010530:	d10c      	bne.n	801054c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010534:	2b00      	cmp	r3, #0
 8010536:	d109      	bne.n	801054c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010538:	4b5d      	ldr	r3, [pc, #372]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	08db      	lsrs	r3, r3, #3
 801053e:	f003 0303 	and.w	r3, r3, #3
 8010542:	4a5c      	ldr	r2, [pc, #368]	; (80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010544:	fa22 f303 	lsr.w	r3, r2, r3
 8010548:	63fb      	str	r3, [r7, #60]	; 0x3c
 801054a:	e01e      	b.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801054c:	4b58      	ldr	r3, [pc, #352]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010558:	d106      	bne.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010560:	d102      	bne.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010562:	4b55      	ldr	r3, [pc, #340]	; (80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010566:	e010      	b.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010568:	4b51      	ldr	r3, [pc, #324]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010574:	d106      	bne.n	8010584 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801057c:	d102      	bne.n	8010584 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801057e:	4b4f      	ldr	r3, [pc, #316]	; (80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010582:	e002      	b.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010584:	2300      	movs	r3, #0
 8010586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010588:	e235      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801058a:	e234      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801058c:	4b4c      	ldr	r3, [pc, #304]	; (80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801058e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010590:	e231      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010592:	2300      	movs	r3, #0
 8010594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010596:	e22e      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010598:	e9d7 2300 	ldrd	r2, r3, [r7]
 801059c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80105a0:	430b      	orrs	r3, r1
 80105a2:	f040 808f 	bne.w	80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80105a6:	4b42      	ldr	r3, [pc, #264]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80105ae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105b6:	d06b      	beq.n	8010690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105be:	d874      	bhi.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80105c6:	d056      	beq.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80105c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80105ce:	d86c      	bhi.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80105d6:	d03b      	beq.n	8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80105de:	d864      	bhi.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105e6:	d021      	beq.n	801062c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105ee:	d85c      	bhi.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d004      	beq.n	8010600 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80105f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105fc:	d004      	beq.n	8010608 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80105fe:	e054      	b.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010600:	f7fe fa0a 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 8010604:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010606:	e1f6      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010608:	4b29      	ldr	r3, [pc, #164]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010614:	d107      	bne.n	8010626 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010616:	f107 0318 	add.w	r3, r7, #24
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fa0a 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010624:	e1e7      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801062a:	e1e4      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801062c:	4b20      	ldr	r3, [pc, #128]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010638:	d107      	bne.n	801064a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801063a:	f107 030c 	add.w	r3, r7, #12
 801063e:	4618      	mov	r0, r3
 8010640:	f000 fb4c 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010648:	e1d5      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801064e:	e1d2      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010650:	4b17      	ldr	r3, [pc, #92]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f003 0304 	and.w	r3, r3, #4
 8010658:	2b04      	cmp	r3, #4
 801065a:	d109      	bne.n	8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801065c:	4b14      	ldr	r3, [pc, #80]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	08db      	lsrs	r3, r3, #3
 8010662:	f003 0303 	and.w	r3, r3, #3
 8010666:	4a13      	ldr	r2, [pc, #76]	; (80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010668:	fa22 f303 	lsr.w	r3, r2, r3
 801066c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801066e:	e1c2      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010670:	2300      	movs	r3, #0
 8010672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010674:	e1bf      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010676:	4b0e      	ldr	r3, [pc, #56]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801067e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010682:	d102      	bne.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010684:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010688:	e1b5      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801068e:	e1b2      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010690:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801069c:	d102      	bne.n	80106a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801069e:	4b07      	ldr	r3, [pc, #28]	; (80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80106a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106a2:	e1a8      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106a4:	2300      	movs	r3, #0
 80106a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106a8:	e1a5      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106ae:	e1a2      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106b0:	58024400 	.word	0x58024400
 80106b4:	03d09000 	.word	0x03d09000
 80106b8:	003d0900 	.word	0x003d0900
 80106bc:	017d7840 	.word	0x017d7840
 80106c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80106c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106c8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80106cc:	430b      	orrs	r3, r1
 80106ce:	d173      	bne.n	80107b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80106d0:	4b9c      	ldr	r3, [pc, #624]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80106d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80106da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106e0:	d02f      	beq.n	8010742 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80106e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106e8:	d863      	bhi.n	80107b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d004      	beq.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80106f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106f6:	d012      	beq.n	801071e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80106f8:	e05b      	b.n	80107b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106fa:	4b92      	ldr	r3, [pc, #584]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010706:	d107      	bne.n	8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010708:	f107 0318 	add.w	r3, r7, #24
 801070c:	4618      	mov	r0, r3
 801070e:	f000 f991 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010716:	e16e      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010718:	2300      	movs	r3, #0
 801071a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801071c:	e16b      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801071e:	4b89      	ldr	r3, [pc, #548]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801072a:	d107      	bne.n	801073c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801072c:	f107 030c 	add.w	r3, r7, #12
 8010730:	4618      	mov	r0, r3
 8010732:	f000 fad3 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801073a:	e15c      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801073c:	2300      	movs	r3, #0
 801073e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010740:	e159      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010742:	4b80      	ldr	r3, [pc, #512]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801074a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801074c:	4b7d      	ldr	r3, [pc, #500]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f003 0304 	and.w	r3, r3, #4
 8010754:	2b04      	cmp	r3, #4
 8010756:	d10c      	bne.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075a:	2b00      	cmp	r3, #0
 801075c:	d109      	bne.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801075e:	4b79      	ldr	r3, [pc, #484]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	08db      	lsrs	r3, r3, #3
 8010764:	f003 0303 	and.w	r3, r3, #3
 8010768:	4a77      	ldr	r2, [pc, #476]	; (8010948 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801076a:	fa22 f303 	lsr.w	r3, r2, r3
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010770:	e01e      	b.n	80107b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010772:	4b74      	ldr	r3, [pc, #464]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801077a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801077e:	d106      	bne.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010786:	d102      	bne.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010788:	4b70      	ldr	r3, [pc, #448]	; (801094c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801078a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801078c:	e010      	b.n	80107b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801078e:	4b6d      	ldr	r3, [pc, #436]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801079a:	d106      	bne.n	80107aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107a2:	d102      	bne.n	80107aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80107a4:	4b6a      	ldr	r3, [pc, #424]	; (8010950 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80107a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107a8:	e002      	b.n	80107b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80107ae:	e122      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80107b0:	e121      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80107b2:	2300      	movs	r3, #0
 80107b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107b6:	e11e      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80107b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107bc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80107c0:	430b      	orrs	r3, r1
 80107c2:	d133      	bne.n	801082c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80107c4:	4b5f      	ldr	r3, [pc, #380]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80107ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d004      	beq.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80107d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107da:	d012      	beq.n	8010802 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80107dc:	e023      	b.n	8010826 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80107de:	4b59      	ldr	r3, [pc, #356]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80107ea:	d107      	bne.n	80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107f0:	4618      	mov	r0, r3
 80107f2:	f000 fbc7 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107fa:	e0fc      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010800:	e0f9      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010802:	4b50      	ldr	r3, [pc, #320]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801080a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801080e:	d107      	bne.n	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010810:	f107 0318 	add.w	r3, r7, #24
 8010814:	4618      	mov	r0, r3
 8010816:	f000 f90d 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801081e:	e0ea      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010824:	e0e7      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801082a:	e0e4      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801082c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010830:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010834:	430b      	orrs	r3, r1
 8010836:	f040 808d 	bne.w	8010954 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801083a:	4b42      	ldr	r3, [pc, #264]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801083e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010842:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801084a:	d06b      	beq.n	8010924 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801084c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010852:	d874      	bhi.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801085a:	d056      	beq.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010862:	d86c      	bhi.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801086a:	d03b      	beq.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801086c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010872:	d864      	bhi.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801087a:	d021      	beq.n	80108c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 801087c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010882:	d85c      	bhi.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010886:	2b00      	cmp	r3, #0
 8010888:	d004      	beq.n	8010894 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010890:	d004      	beq.n	801089c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010892:	e054      	b.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010894:	f000 f8b8 	bl	8010a08 <HAL_RCCEx_GetD3PCLK1Freq>
 8010898:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801089a:	e0ac      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801089c:	4b29      	ldr	r3, [pc, #164]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108a8:	d107      	bne.n	80108ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108aa:	f107 0318 	add.w	r3, r7, #24
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 f8c0 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108b8:	e09d      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108be:	e09a      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108c0:	4b20      	ldr	r3, [pc, #128]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108cc:	d107      	bne.n	80108de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108ce:	f107 030c 	add.w	r3, r7, #12
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 fa02 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108dc:	e08b      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108e2:	e088      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80108e4:	4b17      	ldr	r3, [pc, #92]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f003 0304 	and.w	r3, r3, #4
 80108ec:	2b04      	cmp	r3, #4
 80108ee:	d109      	bne.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108f0:	4b14      	ldr	r3, [pc, #80]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	08db      	lsrs	r3, r3, #3
 80108f6:	f003 0303 	and.w	r3, r3, #3
 80108fa:	4a13      	ldr	r2, [pc, #76]	; (8010948 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80108fc:	fa22 f303 	lsr.w	r3, r2, r3
 8010900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010902:	e078      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010908:	e075      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801090a:	4b0e      	ldr	r3, [pc, #56]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010916:	d102      	bne.n	801091e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010918:	4b0c      	ldr	r3, [pc, #48]	; (801094c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801091a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801091c:	e06b      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801091e:	2300      	movs	r3, #0
 8010920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010922:	e068      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010924:	4b07      	ldr	r3, [pc, #28]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801092c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010930:	d102      	bne.n	8010938 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010932:	4b07      	ldr	r3, [pc, #28]	; (8010950 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010936:	e05e      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010938:	2300      	movs	r3, #0
 801093a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801093c:	e05b      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010942:	e058      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010944:	58024400 	.word	0x58024400
 8010948:	03d09000 	.word	0x03d09000
 801094c:	003d0900 	.word	0x003d0900
 8010950:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010958:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801095c:	430b      	orrs	r3, r1
 801095e:	d148      	bne.n	80109f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010960:	4b27      	ldr	r3, [pc, #156]	; (8010a00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010968:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010970:	d02a      	beq.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010978:	d838      	bhi.n	80109ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097c:	2b00      	cmp	r3, #0
 801097e:	d004      	beq.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010986:	d00d      	beq.n	80109a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010988:	e030      	b.n	80109ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801098a:	4b1d      	ldr	r3, [pc, #116]	; (8010a00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010996:	d102      	bne.n	801099e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010998:	4b1a      	ldr	r3, [pc, #104]	; (8010a04 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801099a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801099c:	e02b      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801099e:	2300      	movs	r3, #0
 80109a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109a2:	e028      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80109a4:	4b16      	ldr	r3, [pc, #88]	; (8010a00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109b0:	d107      	bne.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80109b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 fae4 	bl	8010f84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80109bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109c0:	e019      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109c6:	e016      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109c8:	4b0d      	ldr	r3, [pc, #52]	; (8010a00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109d4:	d107      	bne.n	80109e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109d6:	f107 0318 	add.w	r3, r7, #24
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 f82a 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109e4:	e007      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109ea:	e004      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80109ec:	2300      	movs	r3, #0
 80109ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109f0:	e001      	b.n	80109f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80109f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3740      	adds	r7, #64	; 0x40
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	58024400 	.word	0x58024400
 8010a04:	017d7840 	.word	0x017d7840

08010a08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010a0c:	f7fd ffd4 	bl	800e9b8 <HAL_RCC_GetHCLKFreq>
 8010a10:	4602      	mov	r2, r0
 8010a12:	4b06      	ldr	r3, [pc, #24]	; (8010a2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010a14:	6a1b      	ldr	r3, [r3, #32]
 8010a16:	091b      	lsrs	r3, r3, #4
 8010a18:	f003 0307 	and.w	r3, r3, #7
 8010a1c:	4904      	ldr	r1, [pc, #16]	; (8010a30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010a1e:	5ccb      	ldrb	r3, [r1, r3]
 8010a20:	f003 031f 	and.w	r3, r3, #31
 8010a24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	58024400 	.word	0x58024400
 8010a30:	0801ad94 	.word	0x0801ad94

08010a34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b089      	sub	sp, #36	; 0x24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a3c:	4ba1      	ldr	r3, [pc, #644]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a40:	f003 0303 	and.w	r3, r3, #3
 8010a44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010a46:	4b9f      	ldr	r3, [pc, #636]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4a:	0b1b      	lsrs	r3, r3, #12
 8010a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010a52:	4b9c      	ldr	r3, [pc, #624]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a56:	091b      	lsrs	r3, r3, #4
 8010a58:	f003 0301 	and.w	r3, r3, #1
 8010a5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010a5e:	4b99      	ldr	r3, [pc, #612]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a62:	08db      	lsrs	r3, r3, #3
 8010a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a68:	693a      	ldr	r2, [r7, #16]
 8010a6a:	fb02 f303 	mul.w	r3, r2, r3
 8010a6e:	ee07 3a90 	vmov	s15, r3
 8010a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f000 8111 	beq.w	8010ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	f000 8083 	beq.w	8010b90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	f200 80a1 	bhi.w	8010bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d003      	beq.n	8010aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010a98:	69bb      	ldr	r3, [r7, #24]
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d056      	beq.n	8010b4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010a9e:	e099      	b.n	8010bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010aa0:	4b88      	ldr	r3, [pc, #544]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f003 0320 	and.w	r3, r3, #32
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d02d      	beq.n	8010b08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010aac:	4b85      	ldr	r3, [pc, #532]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	08db      	lsrs	r3, r3, #3
 8010ab2:	f003 0303 	and.w	r3, r3, #3
 8010ab6:	4a84      	ldr	r2, [pc, #528]	; (8010cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8010abc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	ee07 3a90 	vmov	s15, r3
 8010ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	ee07 3a90 	vmov	s15, r3
 8010ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ad6:	4b7b      	ldr	r3, [pc, #492]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ade:	ee07 3a90 	vmov	s15, r3
 8010ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010aea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010b06:	e087      	b.n	8010c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	ee07 3a90 	vmov	s15, r3
 8010b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b1a:	4b6a      	ldr	r3, [pc, #424]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b22:	ee07 3a90 	vmov	s15, r3
 8010b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b4a:	e065      	b.n	8010c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	ee07 3a90 	vmov	s15, r3
 8010b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b5e:	4b59      	ldr	r3, [pc, #356]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b66:	ee07 3a90 	vmov	s15, r3
 8010b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b8e:	e043      	b.n	8010c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	ee07 3a90 	vmov	s15, r3
 8010b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ba2:	4b48      	ldr	r3, [pc, #288]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010baa:	ee07 3a90 	vmov	s15, r3
 8010bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bd2:	e021      	b.n	8010c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	ee07 3a90 	vmov	s15, r3
 8010bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010be6:	4b37      	ldr	r3, [pc, #220]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bee:	ee07 3a90 	vmov	s15, r3
 8010bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010c18:	4b2a      	ldr	r3, [pc, #168]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	0a5b      	lsrs	r3, r3, #9
 8010c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c22:	ee07 3a90 	vmov	s15, r3
 8010c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c3e:	ee17 2a90 	vmov	r2, s15
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010c46:	4b1f      	ldr	r3, [pc, #124]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c4a:	0c1b      	lsrs	r3, r3, #16
 8010c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c50:	ee07 3a90 	vmov	s15, r3
 8010c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c6c:	ee17 2a90 	vmov	r2, s15
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010c74:	4b13      	ldr	r3, [pc, #76]	; (8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c78:	0e1b      	lsrs	r3, r3, #24
 8010c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c7e:	ee07 3a90 	vmov	s15, r3
 8010c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c9a:	ee17 2a90 	vmov	r2, s15
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010ca2:	e008      	b.n	8010cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	609a      	str	r2, [r3, #8]
}
 8010cb6:	bf00      	nop
 8010cb8:	3724      	adds	r7, #36	; 0x24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	58024400 	.word	0x58024400
 8010cc8:	03d09000 	.word	0x03d09000
 8010ccc:	46000000 	.word	0x46000000
 8010cd0:	4c742400 	.word	0x4c742400
 8010cd4:	4a742400 	.word	0x4a742400
 8010cd8:	4bbebc20 	.word	0x4bbebc20

08010cdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b089      	sub	sp, #36	; 0x24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ce4:	4ba1      	ldr	r3, [pc, #644]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce8:	f003 0303 	and.w	r3, r3, #3
 8010cec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010cee:	4b9f      	ldr	r3, [pc, #636]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cf2:	0d1b      	lsrs	r3, r3, #20
 8010cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010cfa:	4b9c      	ldr	r3, [pc, #624]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfe:	0a1b      	lsrs	r3, r3, #8
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010d06:	4b99      	ldr	r3, [pc, #612]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d0a:	08db      	lsrs	r3, r3, #3
 8010d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	fb02 f303 	mul.w	r3, r2, r3
 8010d16:	ee07 3a90 	vmov	s15, r3
 8010d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f000 8111 	beq.w	8010f4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	2b02      	cmp	r3, #2
 8010d2e:	f000 8083 	beq.w	8010e38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	f200 80a1 	bhi.w	8010e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d003      	beq.n	8010d48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d056      	beq.n	8010df4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010d46:	e099      	b.n	8010e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d48:	4b88      	ldr	r3, [pc, #544]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f003 0320 	and.w	r3, r3, #32
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d02d      	beq.n	8010db0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d54:	4b85      	ldr	r3, [pc, #532]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	08db      	lsrs	r3, r3, #3
 8010d5a:	f003 0303 	and.w	r3, r3, #3
 8010d5e:	4a84      	ldr	r2, [pc, #528]	; (8010f70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010d60:	fa22 f303 	lsr.w	r3, r2, r3
 8010d64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	ee07 3a90 	vmov	s15, r3
 8010d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	ee07 3a90 	vmov	s15, r3
 8010d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d7e:	4b7b      	ldr	r3, [pc, #492]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d86:	ee07 3a90 	vmov	s15, r3
 8010d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010daa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010dae:	e087      	b.n	8010ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	ee07 3a90 	vmov	s15, r3
 8010db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010f78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010dc2:	4b6a      	ldr	r3, [pc, #424]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dca:	ee07 3a90 	vmov	s15, r3
 8010dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010dd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010df2:	e065      	b.n	8010ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	ee07 3a90 	vmov	s15, r3
 8010dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e06:	4b59      	ldr	r3, [pc, #356]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e0e:	ee07 3a90 	vmov	s15, r3
 8010e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e36:	e043      	b.n	8010ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	ee07 3a90 	vmov	s15, r3
 8010e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e4a:	4b48      	ldr	r3, [pc, #288]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e52:	ee07 3a90 	vmov	s15, r3
 8010e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e7a:	e021      	b.n	8010ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	ee07 3a90 	vmov	s15, r3
 8010e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e8e:	4b37      	ldr	r3, [pc, #220]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e96:	ee07 3a90 	vmov	s15, r3
 8010e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ebe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010ec0:	4b2a      	ldr	r3, [pc, #168]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec4:	0a5b      	lsrs	r3, r3, #9
 8010ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010eca:	ee07 3a90 	vmov	s15, r3
 8010ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ee6:	ee17 2a90 	vmov	r2, s15
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010eee:	4b1f      	ldr	r3, [pc, #124]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef2:	0c1b      	lsrs	r3, r3, #16
 8010ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ef8:	ee07 3a90 	vmov	s15, r3
 8010efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f14:	ee17 2a90 	vmov	r2, s15
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010f1c:	4b13      	ldr	r3, [pc, #76]	; (8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f20:	0e1b      	lsrs	r3, r3, #24
 8010f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f26:	ee07 3a90 	vmov	s15, r3
 8010f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f42:	ee17 2a90 	vmov	r2, s15
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010f4a:	e008      	b.n	8010f5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2200      	movs	r2, #0
 8010f56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	609a      	str	r2, [r3, #8]
}
 8010f5e:	bf00      	nop
 8010f60:	3724      	adds	r7, #36	; 0x24
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	58024400 	.word	0x58024400
 8010f70:	03d09000 	.word	0x03d09000
 8010f74:	46000000 	.word	0x46000000
 8010f78:	4c742400 	.word	0x4c742400
 8010f7c:	4a742400 	.word	0x4a742400
 8010f80:	4bbebc20 	.word	0x4bbebc20

08010f84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b089      	sub	sp, #36	; 0x24
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010f8c:	4ba0      	ldr	r3, [pc, #640]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f90:	f003 0303 	and.w	r3, r3, #3
 8010f94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010f96:	4b9e      	ldr	r3, [pc, #632]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f9a:	091b      	lsrs	r3, r3, #4
 8010f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010fa0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010fa2:	4b9b      	ldr	r3, [pc, #620]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010fac:	4b98      	ldr	r3, [pc, #608]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb0:	08db      	lsrs	r3, r3, #3
 8010fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fb6:	693a      	ldr	r2, [r7, #16]
 8010fb8:	fb02 f303 	mul.w	r3, r2, r3
 8010fbc:	ee07 3a90 	vmov	s15, r3
 8010fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fc4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f000 8111 	beq.w	80111f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	2b02      	cmp	r3, #2
 8010fd4:	f000 8083 	beq.w	80110de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	f200 80a1 	bhi.w	8011122 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010fe0:	69bb      	ldr	r3, [r7, #24]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d003      	beq.n	8010fee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d056      	beq.n	801109a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010fec:	e099      	b.n	8011122 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fee:	4b88      	ldr	r3, [pc, #544]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f003 0320 	and.w	r3, r3, #32
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d02d      	beq.n	8011056 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ffa:	4b85      	ldr	r3, [pc, #532]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	08db      	lsrs	r3, r3, #3
 8011000:	f003 0303 	and.w	r3, r3, #3
 8011004:	4a83      	ldr	r2, [pc, #524]	; (8011214 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011006:	fa22 f303 	lsr.w	r3, r2, r3
 801100a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	ee07 3a90 	vmov	s15, r3
 8011012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	ee07 3a90 	vmov	s15, r3
 801101c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011024:	4b7a      	ldr	r3, [pc, #488]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801102c:	ee07 3a90 	vmov	s15, r3
 8011030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011034:	ed97 6a03 	vldr	s12, [r7, #12]
 8011038:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011218 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801103c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011050:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011054:	e087      	b.n	8011166 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	ee07 3a90 	vmov	s15, r3
 801105c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011060:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801121c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011068:	4b69      	ldr	r3, [pc, #420]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801106c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011070:	ee07 3a90 	vmov	s15, r3
 8011074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011078:	ed97 6a03 	vldr	s12, [r7, #12]
 801107c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011218 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801108c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011098:	e065      	b.n	8011166 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	ee07 3a90 	vmov	s15, r3
 80110a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011220 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80110a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ac:	4b58      	ldr	r3, [pc, #352]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b4:	ee07 3a90 	vmov	s15, r3
 80110b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80110c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011218 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110dc:	e043      	b.n	8011166 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	ee07 3a90 	vmov	s15, r3
 80110e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011224 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80110ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110f0:	4b47      	ldr	r3, [pc, #284]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110f8:	ee07 3a90 	vmov	s15, r3
 80110fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011100:	ed97 6a03 	vldr	s12, [r7, #12]
 8011104:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011218 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801110c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801111c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011120:	e021      	b.n	8011166 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	ee07 3a90 	vmov	s15, r3
 8011128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801112c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801121c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011134:	4b36      	ldr	r3, [pc, #216]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801113c:	ee07 3a90 	vmov	s15, r3
 8011140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011144:	ed97 6a03 	vldr	s12, [r7, #12]
 8011148:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011218 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801114c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011164:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011166:	4b2a      	ldr	r3, [pc, #168]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801116a:	0a5b      	lsrs	r3, r3, #9
 801116c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011170:	ee07 3a90 	vmov	s15, r3
 8011174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801117c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011180:	edd7 6a07 	vldr	s13, [r7, #28]
 8011184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801118c:	ee17 2a90 	vmov	r2, s15
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011194:	4b1e      	ldr	r3, [pc, #120]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011198:	0c1b      	lsrs	r3, r3, #16
 801119a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801119e:	ee07 3a90 	vmov	s15, r3
 80111a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80111b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111ba:	ee17 2a90 	vmov	r2, s15
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80111c2:	4b13      	ldr	r3, [pc, #76]	; (8011210 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c6:	0e1b      	lsrs	r3, r3, #24
 80111c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111cc:	ee07 3a90 	vmov	s15, r3
 80111d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80111e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111e8:	ee17 2a90 	vmov	r2, s15
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80111f0:	e008      	b.n	8011204 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	609a      	str	r2, [r3, #8]
}
 8011204:	bf00      	nop
 8011206:	3724      	adds	r7, #36	; 0x24
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr
 8011210:	58024400 	.word	0x58024400
 8011214:	03d09000 	.word	0x03d09000
 8011218:	46000000 	.word	0x46000000
 801121c:	4c742400 	.word	0x4c742400
 8011220:	4a742400 	.word	0x4a742400
 8011224:	4bbebc20 	.word	0x4bbebc20

08011228 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011236:	4b53      	ldr	r3, [pc, #332]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801123a:	f003 0303 	and.w	r3, r3, #3
 801123e:	2b03      	cmp	r3, #3
 8011240:	d101      	bne.n	8011246 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011242:	2301      	movs	r3, #1
 8011244:	e099      	b.n	801137a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011246:	4b4f      	ldr	r3, [pc, #316]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a4e      	ldr	r2, [pc, #312]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801124c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011252:	f7f4 fb3b 	bl	80058cc <HAL_GetTick>
 8011256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011258:	e008      	b.n	801126c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801125a:	f7f4 fb37 	bl	80058cc <HAL_GetTick>
 801125e:	4602      	mov	r2, r0
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	2b02      	cmp	r3, #2
 8011266:	d901      	bls.n	801126c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011268:	2303      	movs	r3, #3
 801126a:	e086      	b.n	801137a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801126c:	4b45      	ldr	r3, [pc, #276]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1f0      	bne.n	801125a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011278:	4b42      	ldr	r3, [pc, #264]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801127c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	031b      	lsls	r3, r3, #12
 8011286:	493f      	ldr	r1, [pc, #252]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011288:	4313      	orrs	r3, r2
 801128a:	628b      	str	r3, [r1, #40]	; 0x28
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	3b01      	subs	r3, #1
 8011292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	3b01      	subs	r3, #1
 801129c:	025b      	lsls	r3, r3, #9
 801129e:	b29b      	uxth	r3, r3
 80112a0:	431a      	orrs	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	3b01      	subs	r3, #1
 80112a8:	041b      	lsls	r3, r3, #16
 80112aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80112ae:	431a      	orrs	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	691b      	ldr	r3, [r3, #16]
 80112b4:	3b01      	subs	r3, #1
 80112b6:	061b      	lsls	r3, r3, #24
 80112b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80112bc:	4931      	ldr	r1, [pc, #196]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112be:	4313      	orrs	r3, r2
 80112c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80112c2:	4b30      	ldr	r3, [pc, #192]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	492d      	ldr	r1, [pc, #180]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112d0:	4313      	orrs	r3, r2
 80112d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80112d4:	4b2b      	ldr	r3, [pc, #172]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d8:	f023 0220 	bic.w	r2, r3, #32
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	4928      	ldr	r1, [pc, #160]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112e2:	4313      	orrs	r3, r2
 80112e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80112e6:	4b27      	ldr	r3, [pc, #156]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ea:	4a26      	ldr	r2, [pc, #152]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112ec:	f023 0310 	bic.w	r3, r3, #16
 80112f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80112f2:	4b24      	ldr	r3, [pc, #144]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 80112f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112f6:	4b24      	ldr	r3, [pc, #144]	; (8011388 <RCCEx_PLL2_Config+0x160>)
 80112f8:	4013      	ands	r3, r2
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	69d2      	ldr	r2, [r2, #28]
 80112fe:	00d2      	lsls	r2, r2, #3
 8011300:	4920      	ldr	r1, [pc, #128]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011302:	4313      	orrs	r3, r2
 8011304:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011306:	4b1f      	ldr	r3, [pc, #124]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801130a:	4a1e      	ldr	r2, [pc, #120]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801130c:	f043 0310 	orr.w	r3, r3, #16
 8011310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d106      	bne.n	8011326 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011318:	4b1a      	ldr	r3, [pc, #104]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801131c:	4a19      	ldr	r2, [pc, #100]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801131e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011322:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011324:	e00f      	b.n	8011346 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d106      	bne.n	801133a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801132c:	4b15      	ldr	r3, [pc, #84]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011330:	4a14      	ldr	r2, [pc, #80]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011336:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011338:	e005      	b.n	8011346 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801133a:	4b12      	ldr	r3, [pc, #72]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133e:	4a11      	ldr	r2, [pc, #68]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011344:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011346:	4b0f      	ldr	r3, [pc, #60]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a0e      	ldr	r2, [pc, #56]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801134c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011352:	f7f4 fabb 	bl	80058cc <HAL_GetTick>
 8011356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011358:	e008      	b.n	801136c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801135a:	f7f4 fab7 	bl	80058cc <HAL_GetTick>
 801135e:	4602      	mov	r2, r0
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	1ad3      	subs	r3, r2, r3
 8011364:	2b02      	cmp	r3, #2
 8011366:	d901      	bls.n	801136c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011368:	2303      	movs	r3, #3
 801136a:	e006      	b.n	801137a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801136c:	4b05      	ldr	r3, [pc, #20]	; (8011384 <RCCEx_PLL2_Config+0x15c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011374:	2b00      	cmp	r3, #0
 8011376:	d0f0      	beq.n	801135a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011378:	7bfb      	ldrb	r3, [r7, #15]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	58024400 	.word	0x58024400
 8011388:	ffff0007 	.word	0xffff0007

0801138c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801139a:	4b53      	ldr	r3, [pc, #332]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 801139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801139e:	f003 0303 	and.w	r3, r3, #3
 80113a2:	2b03      	cmp	r3, #3
 80113a4:	d101      	bne.n	80113aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80113a6:	2301      	movs	r3, #1
 80113a8:	e099      	b.n	80114de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80113aa:	4b4f      	ldr	r3, [pc, #316]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a4e      	ldr	r2, [pc, #312]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80113b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80113b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113b6:	f7f4 fa89 	bl	80058cc <HAL_GetTick>
 80113ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80113bc:	e008      	b.n	80113d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80113be:	f7f4 fa85 	bl	80058cc <HAL_GetTick>
 80113c2:	4602      	mov	r2, r0
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	d901      	bls.n	80113d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80113cc:	2303      	movs	r3, #3
 80113ce:	e086      	b.n	80114de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80113d0:	4b45      	ldr	r3, [pc, #276]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d1f0      	bne.n	80113be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80113dc:	4b42      	ldr	r3, [pc, #264]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80113de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	051b      	lsls	r3, r3, #20
 80113ea:	493f      	ldr	r1, [pc, #252]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80113ec:	4313      	orrs	r3, r2
 80113ee:	628b      	str	r3, [r1, #40]	; 0x28
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	3b01      	subs	r3, #1
 8011400:	025b      	lsls	r3, r3, #9
 8011402:	b29b      	uxth	r3, r3
 8011404:	431a      	orrs	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	3b01      	subs	r3, #1
 801140c:	041b      	lsls	r3, r3, #16
 801140e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011412:	431a      	orrs	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	691b      	ldr	r3, [r3, #16]
 8011418:	3b01      	subs	r3, #1
 801141a:	061b      	lsls	r3, r3, #24
 801141c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011420:	4931      	ldr	r1, [pc, #196]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011422:	4313      	orrs	r3, r2
 8011424:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011426:	4b30      	ldr	r3, [pc, #192]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	695b      	ldr	r3, [r3, #20]
 8011432:	492d      	ldr	r1, [pc, #180]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011434:	4313      	orrs	r3, r2
 8011436:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011438:	4b2b      	ldr	r3, [pc, #172]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 801143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	699b      	ldr	r3, [r3, #24]
 8011444:	4928      	ldr	r1, [pc, #160]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011446:	4313      	orrs	r3, r2
 8011448:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801144a:	4b27      	ldr	r3, [pc, #156]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 801144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144e:	4a26      	ldr	r2, [pc, #152]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011456:	4b24      	ldr	r3, [pc, #144]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801145a:	4b24      	ldr	r3, [pc, #144]	; (80114ec <RCCEx_PLL3_Config+0x160>)
 801145c:	4013      	ands	r3, r2
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	69d2      	ldr	r2, [r2, #28]
 8011462:	00d2      	lsls	r2, r2, #3
 8011464:	4920      	ldr	r1, [pc, #128]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011466:	4313      	orrs	r3, r2
 8011468:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801146a:	4b1f      	ldr	r3, [pc, #124]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 801146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146e:	4a1e      	ldr	r2, [pc, #120]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d106      	bne.n	801148a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801147c:	4b1a      	ldr	r3, [pc, #104]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 801147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011480:	4a19      	ldr	r2, [pc, #100]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011488:	e00f      	b.n	80114aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d106      	bne.n	801149e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011490:	4b15      	ldr	r3, [pc, #84]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011494:	4a14      	ldr	r2, [pc, #80]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 8011496:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801149a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801149c:	e005      	b.n	80114aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801149e:	4b12      	ldr	r3, [pc, #72]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80114a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a2:	4a11      	ldr	r2, [pc, #68]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80114a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80114a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80114aa:	4b0f      	ldr	r3, [pc, #60]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	4a0e      	ldr	r2, [pc, #56]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80114b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114b6:	f7f4 fa09 	bl	80058cc <HAL_GetTick>
 80114ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80114bc:	e008      	b.n	80114d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80114be:	f7f4 fa05 	bl	80058cc <HAL_GetTick>
 80114c2:	4602      	mov	r2, r0
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	2b02      	cmp	r3, #2
 80114ca:	d901      	bls.n	80114d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80114cc:	2303      	movs	r3, #3
 80114ce:	e006      	b.n	80114de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80114d0:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <RCCEx_PLL3_Config+0x15c>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d0f0      	beq.n	80114be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	58024400 	.word	0x58024400
 80114ec:	ffff0007 	.word	0xffff0007

080114f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80114f8:	2301      	movs	r3, #1
 80114fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d071      	beq.n	80115e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011508:	b2db      	uxtb	r3, r3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d106      	bne.n	801151c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7f2 fc30 	bl	8003d7c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2202      	movs	r2, #2
 8011520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	f003 0310 	and.w	r3, r3, #16
 801152e:	2b10      	cmp	r3, #16
 8011530:	d050      	beq.n	80115d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	22ca      	movs	r2, #202	; 0xca
 8011538:	625a      	str	r2, [r3, #36]	; 0x24
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2253      	movs	r2, #83	; 0x53
 8011540:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f000 fa4a 	bl	80119dc <RTC_EnterInitMode>
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d124      	bne.n	801159c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6899      	ldr	r1, [r3, #8]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	4b24      	ldr	r3, [pc, #144]	; (80115f0 <HAL_RTC_Init+0x100>)
 801155e:	400b      	ands	r3, r1
 8011560:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	6899      	ldr	r1, [r3, #8]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	685a      	ldr	r2, [r3, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	431a      	orrs	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	431a      	orrs	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	430a      	orrs	r2, r1
 801157e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	0419      	lsls	r1, r3, #16
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	68da      	ldr	r2, [r3, #12]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	430a      	orrs	r2, r1
 8011590:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f000 fa56 	bl	8011a44 <RTC_ExitInitMode>
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d113      	bne.n	80115ca <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f022 0203 	bic.w	r2, r2, #3
 80115b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	69da      	ldr	r2, [r3, #28]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	695b      	ldr	r3, [r3, #20]
 80115c0:	431a      	orrs	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	430a      	orrs	r2, r1
 80115c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	22ff      	movs	r2, #255	; 0xff
 80115d0:	625a      	str	r2, [r3, #36]	; 0x24
 80115d2:	e001      	b.n	80115d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80115d8:	7bfb      	ldrb	r3, [r7, #15]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d103      	bne.n	80115e6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2201      	movs	r2, #1
 80115e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80115e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	ff8fffbf 	.word	0xff8fffbf

080115f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80115f4:	b590      	push	{r4, r7, lr}
 80115f6:	b087      	sub	sp, #28
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011606:	2b01      	cmp	r3, #1
 8011608:	d101      	bne.n	801160e <HAL_RTC_SetTime+0x1a>
 801160a:	2302      	movs	r3, #2
 801160c:	e089      	b.n	8011722 <HAL_RTC_SetTime+0x12e>
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2201      	movs	r2, #1
 8011612:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2202      	movs	r2, #2
 801161a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	22ca      	movs	r2, #202	; 0xca
 8011624:	625a      	str	r2, [r3, #36]	; 0x24
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	2253      	movs	r2, #83	; 0x53
 801162c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f000 f9d4 	bl	80119dc <RTC_EnterInitMode>
 8011634:	4603      	mov	r3, r0
 8011636:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011638:	7cfb      	ldrb	r3, [r7, #19]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d161      	bne.n	8011702 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d126      	bne.n	8011692 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801164e:	2b00      	cmp	r3, #0
 8011650:	d102      	bne.n	8011658 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2200      	movs	r2, #0
 8011656:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	4618      	mov	r0, r3
 801165e:	f000 fa2f 	bl	8011ac0 <RTC_ByteToBcd2>
 8011662:	4603      	mov	r3, r0
 8011664:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	785b      	ldrb	r3, [r3, #1]
 801166a:	4618      	mov	r0, r3
 801166c:	f000 fa28 	bl	8011ac0 <RTC_ByteToBcd2>
 8011670:	4603      	mov	r3, r0
 8011672:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011674:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	789b      	ldrb	r3, [r3, #2]
 801167a:	4618      	mov	r0, r3
 801167c:	f000 fa20 	bl	8011ac0 <RTC_ByteToBcd2>
 8011680:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011682:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	78db      	ldrb	r3, [r3, #3]
 801168a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801168c:	4313      	orrs	r3, r2
 801168e:	617b      	str	r3, [r7, #20]
 8011690:	e018      	b.n	80116c4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801169c:	2b00      	cmp	r3, #0
 801169e:	d102      	bne.n	80116a6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	2200      	movs	r2, #0
 80116a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	785b      	ldrb	r3, [r3, #1]
 80116b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80116b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	78db      	ldrb	r3, [r3, #3]
 80116be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116c0:	4313      	orrs	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	6979      	ldr	r1, [r7, #20]
 80116ca:	4b18      	ldr	r3, [pc, #96]	; (801172c <HAL_RTC_SetTime+0x138>)
 80116cc:	400b      	ands	r3, r1
 80116ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	689a      	ldr	r2, [r3, #8]
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80116de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	6899      	ldr	r1, [r3, #8]
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	68da      	ldr	r2, [r3, #12]
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	431a      	orrs	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	430a      	orrs	r2, r1
 80116f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80116f8:	68f8      	ldr	r0, [r7, #12]
 80116fa:	f000 f9a3 	bl	8011a44 <RTC_ExitInitMode>
 80116fe:	4603      	mov	r3, r0
 8011700:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	22ff      	movs	r2, #255	; 0xff
 8011708:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801170a:	7cfb      	ldrb	r3, [r7, #19]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d103      	bne.n	8011718 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2201      	movs	r2, #1
 8011714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2200      	movs	r2, #0
 801171c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011720:	7cfb      	ldrb	r3, [r7, #19]
}
 8011722:	4618      	mov	r0, r3
 8011724:	371c      	adds	r7, #28
 8011726:	46bd      	mov	sp, r7
 8011728:	bd90      	pop	{r4, r7, pc}
 801172a:	bf00      	nop
 801172c:	007f7f7f 	.word	0x007f7f7f

08011730 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	4b22      	ldr	r3, [pc, #136]	; (80117e4 <HAL_RTC_GetTime+0xb4>)
 801175c:	4013      	ands	r3, r2
 801175e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	0c1b      	lsrs	r3, r3, #16
 8011764:	b2db      	uxtb	r3, r3
 8011766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801176a:	b2da      	uxtb	r2, r3
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	0a1b      	lsrs	r3, r3, #8
 8011774:	b2db      	uxtb	r3, r3
 8011776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801177a:	b2da      	uxtb	r2, r3
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	b2db      	uxtb	r3, r3
 8011784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011788:	b2da      	uxtb	r2, r3
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	0d9b      	lsrs	r3, r3, #22
 8011792:	b2db      	uxtb	r3, r3
 8011794:	f003 0301 	and.w	r3, r3, #1
 8011798:	b2da      	uxtb	r2, r3
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d11a      	bne.n	80117da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	4618      	mov	r0, r3
 80117aa:	f000 f9a9 	bl	8011b00 <RTC_Bcd2ToByte>
 80117ae:	4603      	mov	r3, r0
 80117b0:	461a      	mov	r2, r3
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	785b      	ldrb	r3, [r3, #1]
 80117ba:	4618      	mov	r0, r3
 80117bc:	f000 f9a0 	bl	8011b00 <RTC_Bcd2ToByte>
 80117c0:	4603      	mov	r3, r0
 80117c2:	461a      	mov	r2, r3
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	789b      	ldrb	r3, [r3, #2]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f000 f997 	bl	8011b00 <RTC_Bcd2ToByte>
 80117d2:	4603      	mov	r3, r0
 80117d4:	461a      	mov	r2, r3
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80117da:	2300      	movs	r3, #0
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3718      	adds	r7, #24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	007f7f7f 	.word	0x007f7f7f

080117e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80117e8:	b590      	push	{r4, r7, lr}
 80117ea:	b087      	sub	sp, #28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d101      	bne.n	8011802 <HAL_RTC_SetDate+0x1a>
 80117fe:	2302      	movs	r3, #2
 8011800:	e073      	b.n	80118ea <HAL_RTC_SetDate+0x102>
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2201      	movs	r2, #1
 8011806:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2202      	movs	r2, #2
 801180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d10e      	bne.n	8011836 <HAL_RTC_SetDate+0x4e>
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	785b      	ldrb	r3, [r3, #1]
 801181c:	f003 0310 	and.w	r3, r3, #16
 8011820:	2b00      	cmp	r3, #0
 8011822:	d008      	beq.n	8011836 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	785b      	ldrb	r3, [r3, #1]
 8011828:	f023 0310 	bic.w	r3, r3, #16
 801182c:	b2db      	uxtb	r3, r3
 801182e:	330a      	adds	r3, #10
 8011830:	b2da      	uxtb	r2, r3
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d11c      	bne.n	8011876 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	78db      	ldrb	r3, [r3, #3]
 8011840:	4618      	mov	r0, r3
 8011842:	f000 f93d 	bl	8011ac0 <RTC_ByteToBcd2>
 8011846:	4603      	mov	r3, r0
 8011848:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	785b      	ldrb	r3, [r3, #1]
 801184e:	4618      	mov	r0, r3
 8011850:	f000 f936 	bl	8011ac0 <RTC_ByteToBcd2>
 8011854:	4603      	mov	r3, r0
 8011856:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011858:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	789b      	ldrb	r3, [r3, #2]
 801185e:	4618      	mov	r0, r3
 8011860:	f000 f92e 	bl	8011ac0 <RTC_ByteToBcd2>
 8011864:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011866:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011870:	4313      	orrs	r3, r2
 8011872:	617b      	str	r3, [r7, #20]
 8011874:	e00e      	b.n	8011894 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	78db      	ldrb	r3, [r3, #3]
 801187a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	785b      	ldrb	r3, [r3, #1]
 8011880:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011882:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011888:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011890:	4313      	orrs	r3, r2
 8011892:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	22ca      	movs	r2, #202	; 0xca
 801189a:	625a      	str	r2, [r3, #36]	; 0x24
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2253      	movs	r2, #83	; 0x53
 80118a2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f000 f899 	bl	80119dc <RTC_EnterInitMode>
 80118aa:	4603      	mov	r3, r0
 80118ac:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80118ae:	7cfb      	ldrb	r3, [r7, #19]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d10a      	bne.n	80118ca <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	6979      	ldr	r1, [r7, #20]
 80118ba:	4b0e      	ldr	r3, [pc, #56]	; (80118f4 <HAL_RTC_SetDate+0x10c>)
 80118bc:	400b      	ands	r3, r1
 80118be:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f000 f8bf 	bl	8011a44 <RTC_ExitInitMode>
 80118c6:	4603      	mov	r3, r0
 80118c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	22ff      	movs	r2, #255	; 0xff
 80118d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80118d2:	7cfb      	ldrb	r3, [r7, #19]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d103      	bne.n	80118e0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2201      	movs	r2, #1
 80118dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80118e8:	7cfb      	ldrb	r3, [r7, #19]


}
 80118ea:	4618      	mov	r0, r3
 80118ec:	371c      	adds	r7, #28
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd90      	pop	{r4, r7, pc}
 80118f2:	bf00      	nop
 80118f4:	00ffff3f 	.word	0x00ffff3f

080118f8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	685a      	ldr	r2, [r3, #4]
 801190a:	4b21      	ldr	r3, [pc, #132]	; (8011990 <HAL_RTC_GetDate+0x98>)
 801190c:	4013      	ands	r3, r2
 801190e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	0c1b      	lsrs	r3, r3, #16
 8011914:	b2da      	uxtb	r2, r3
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	0a1b      	lsrs	r3, r3, #8
 801191e:	b2db      	uxtb	r3, r3
 8011920:	f003 031f 	and.w	r3, r3, #31
 8011924:	b2da      	uxtb	r2, r3
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	b2db      	uxtb	r3, r3
 801192e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011932:	b2da      	uxtb	r2, r3
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	0b5b      	lsrs	r3, r3, #13
 801193c:	b2db      	uxtb	r3, r3
 801193e:	f003 0307 	and.w	r3, r3, #7
 8011942:	b2da      	uxtb	r2, r3
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d11a      	bne.n	8011984 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	78db      	ldrb	r3, [r3, #3]
 8011952:	4618      	mov	r0, r3
 8011954:	f000 f8d4 	bl	8011b00 <RTC_Bcd2ToByte>
 8011958:	4603      	mov	r3, r0
 801195a:	461a      	mov	r2, r3
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	785b      	ldrb	r3, [r3, #1]
 8011964:	4618      	mov	r0, r3
 8011966:	f000 f8cb 	bl	8011b00 <RTC_Bcd2ToByte>
 801196a:	4603      	mov	r3, r0
 801196c:	461a      	mov	r2, r3
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	789b      	ldrb	r3, [r3, #2]
 8011976:	4618      	mov	r0, r3
 8011978:	f000 f8c2 	bl	8011b00 <RTC_Bcd2ToByte>
 801197c:	4603      	mov	r3, r0
 801197e:	461a      	mov	r2, r3
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011984:	2300      	movs	r3, #0
}
 8011986:	4618      	mov	r0, r3
 8011988:	3718      	adds	r7, #24
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	00ffff3f 	.word	0x00ffff3f

08011994 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a0d      	ldr	r2, [pc, #52]	; (80119d8 <HAL_RTC_WaitForSynchro+0x44>)
 80119a2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80119a4:	f7f3 ff92 	bl	80058cc <HAL_GetTick>
 80119a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80119aa:	e009      	b.n	80119c0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80119ac:	f7f3 ff8e 	bl	80058cc <HAL_GetTick>
 80119b0:	4602      	mov	r2, r0
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80119ba:	d901      	bls.n	80119c0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80119bc:	2303      	movs	r3, #3
 80119be:	e007      	b.n	80119d0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	f003 0320 	and.w	r3, r3, #32
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d0ee      	beq.n	80119ac <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80119ce:	2300      	movs	r3, #0
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3710      	adds	r7, #16
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	0003ff5f 	.word	0x0003ff5f

080119dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b084      	sub	sp, #16
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80119e4:	2300      	movs	r3, #0
 80119e6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d120      	bne.n	8011a38 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011a00:	f7f3 ff64 	bl	80058cc <HAL_GetTick>
 8011a04:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011a06:	e00d      	b.n	8011a24 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011a08:	f7f3 ff60 	bl	80058cc <HAL_GetTick>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	1ad3      	subs	r3, r2, r3
 8011a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a16:	d905      	bls.n	8011a24 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011a18:	2303      	movs	r3, #3
 8011a1a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2203      	movs	r2, #3
 8011a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	68db      	ldr	r3, [r3, #12]
 8011a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d102      	bne.n	8011a38 <RTC_EnterInitMode+0x5c>
 8011a32:	7bfb      	ldrb	r3, [r7, #15]
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	d1e7      	bne.n	8011a08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3710      	adds	r7, #16
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
	...

08011a44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011a50:	4b1a      	ldr	r3, [pc, #104]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	4a19      	ldr	r2, [pc, #100]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a5a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011a5c:	4b17      	ldr	r3, [pc, #92]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	f003 0320 	and.w	r3, r3, #32
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d10c      	bne.n	8011a82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7ff ff93 	bl	8011994 <HAL_RTC_WaitForSynchro>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01e      	beq.n	8011ab2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2203      	movs	r2, #3
 8011a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011a7c:	2303      	movs	r3, #3
 8011a7e:	73fb      	strb	r3, [r7, #15]
 8011a80:	e017      	b.n	8011ab2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011a82:	4b0e      	ldr	r3, [pc, #56]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	4a0d      	ldr	r2, [pc, #52]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011a88:	f023 0320 	bic.w	r3, r3, #32
 8011a8c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7ff ff80 	bl	8011994 <HAL_RTC_WaitForSynchro>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d005      	beq.n	8011aa6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2203      	movs	r2, #3
 8011a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011aa2:	2303      	movs	r3, #3
 8011aa4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011aa6:	4b05      	ldr	r3, [pc, #20]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	4a04      	ldr	r2, [pc, #16]	; (8011abc <RTC_ExitInitMode+0x78>)
 8011aac:	f043 0320 	orr.w	r3, r3, #32
 8011ab0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	58004000 	.word	0x58004000

08011ac0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011aca:	2300      	movs	r3, #0
 8011acc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011ace:	79fb      	ldrb	r3, [r7, #7]
 8011ad0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011ad2:	e005      	b.n	8011ae0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011ada:	7afb      	ldrb	r3, [r7, #11]
 8011adc:	3b0a      	subs	r3, #10
 8011ade:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011ae0:	7afb      	ldrb	r3, [r7, #11]
 8011ae2:	2b09      	cmp	r3, #9
 8011ae4:	d8f6      	bhi.n	8011ad4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	011b      	lsls	r3, r3, #4
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	7afb      	ldrb	r3, [r7, #11]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	b2db      	uxtb	r3, r3
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3714      	adds	r7, #20
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	4603      	mov	r3, r0
 8011b08:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011b0a:	79fb      	ldrb	r3, [r7, #7]
 8011b0c:	091b      	lsrs	r3, r3, #4
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	461a      	mov	r2, r3
 8011b12:	0092      	lsls	r2, r2, #2
 8011b14:	4413      	add	r3, r2
 8011b16:	005b      	lsls	r3, r3, #1
 8011b18:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011b1a:	79fb      	ldrb	r3, [r7, #7]
 8011b1c:	f003 030f 	and.w	r3, r3, #15
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	7bfb      	ldrb	r3, [r7, #15]
 8011b24:	4413      	add	r3, r2
 8011b26:	b2db      	uxtb	r3, r3
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011b42:	2301      	movs	r3, #1
 8011b44:	e10f      	b.n	8011d66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a87      	ldr	r2, [pc, #540]	; (8011d70 <HAL_SPI_Init+0x23c>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d00f      	beq.n	8011b76 <HAL_SPI_Init+0x42>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	4a86      	ldr	r2, [pc, #536]	; (8011d74 <HAL_SPI_Init+0x240>)
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d00a      	beq.n	8011b76 <HAL_SPI_Init+0x42>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4a84      	ldr	r2, [pc, #528]	; (8011d78 <HAL_SPI_Init+0x244>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d005      	beq.n	8011b76 <HAL_SPI_Init+0x42>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	68db      	ldr	r3, [r3, #12]
 8011b6e:	2b0f      	cmp	r3, #15
 8011b70:	d901      	bls.n	8011b76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011b72:	2301      	movs	r3, #1
 8011b74:	e0f7      	b.n	8011d66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fd60 	bl	801263c <SPI_GetPacketSize>
 8011b7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4a7b      	ldr	r2, [pc, #492]	; (8011d70 <HAL_SPI_Init+0x23c>)
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d00c      	beq.n	8011ba2 <HAL_SPI_Init+0x6e>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4a79      	ldr	r2, [pc, #484]	; (8011d74 <HAL_SPI_Init+0x240>)
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d007      	beq.n	8011ba2 <HAL_SPI_Init+0x6e>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	4a78      	ldr	r2, [pc, #480]	; (8011d78 <HAL_SPI_Init+0x244>)
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d002      	beq.n	8011ba2 <HAL_SPI_Init+0x6e>
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2b08      	cmp	r3, #8
 8011ba0:	d811      	bhi.n	8011bc6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011ba6:	4a72      	ldr	r2, [pc, #456]	; (8011d70 <HAL_SPI_Init+0x23c>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d009      	beq.n	8011bc0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	4a70      	ldr	r2, [pc, #448]	; (8011d74 <HAL_SPI_Init+0x240>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d004      	beq.n	8011bc0 <HAL_SPI_Init+0x8c>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	4a6f      	ldr	r2, [pc, #444]	; (8011d78 <HAL_SPI_Init+0x244>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d104      	bne.n	8011bca <HAL_SPI_Init+0x96>
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2b10      	cmp	r3, #16
 8011bc4:	d901      	bls.n	8011bca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e0cd      	b.n	8011d66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7f2 fb50 	bl	8004284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2202      	movs	r2, #2
 8011be8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f022 0201 	bic.w	r2, r2, #1
 8011bfa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011c06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	699b      	ldr	r3, [r3, #24]
 8011c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c10:	d119      	bne.n	8011c46 <HAL_SPI_Init+0x112>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c1a:	d103      	bne.n	8011c24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d008      	beq.n	8011c36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d10c      	bne.n	8011c46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011c34:	d107      	bne.n	8011c46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011c44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00f      	beq.n	8011c72 <HAL_SPI_Init+0x13e>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	2b06      	cmp	r3, #6
 8011c58:	d90b      	bls.n	8011c72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	430a      	orrs	r2, r1
 8011c6e:	601a      	str	r2, [r3, #0]
 8011c70:	e007      	b.n	8011c82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	681a      	ldr	r2, [r3, #0]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011c80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	69da      	ldr	r2, [r3, #28]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c8a:	431a      	orrs	r2, r3
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	431a      	orrs	r2, r3
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c94:	ea42 0103 	orr.w	r1, r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	68da      	ldr	r2, [r3, #12]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	430a      	orrs	r2, r1
 8011ca2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cac:	431a      	orrs	r2, r3
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cb2:	431a      	orrs	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	699b      	ldr	r3, [r3, #24]
 8011cb8:	431a      	orrs	r2, r3
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	691b      	ldr	r3, [r3, #16]
 8011cbe:	431a      	orrs	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	431a      	orrs	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a1b      	ldr	r3, [r3, #32]
 8011cca:	431a      	orrs	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	431a      	orrs	r2, r3
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cd6:	431a      	orrs	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	431a      	orrs	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ce2:	ea42 0103 	orr.w	r1, r2, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	430a      	orrs	r2, r1
 8011cf0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d113      	bne.n	8011d22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	689b      	ldr	r3, [r3, #8]
 8011d14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011d20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f022 0201 	bic.w	r2, r2, #1
 8011d30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d00a      	beq.n	8011d54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	430a      	orrs	r2, r1
 8011d52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011d64:	2300      	movs	r3, #0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	40013000 	.word	0x40013000
 8011d74:	40003800 	.word	0x40003800
 8011d78:	40003c00 	.word	0x40003c00

08011d7c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	4613      	mov	r3, r2
 8011d88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d005      	beq.n	8011da2 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011d9e:	2302      	movs	r3, #2
 8011da0:	e127      	b.n	8011ff2 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <HAL_SPI_Receive_DMA+0x32>
 8011da8:	88fb      	ldrh	r3, [r7, #6]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d105      	bne.n	8011dba <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011db6:	2301      	movs	r3, #1
 8011db8:	e11b      	b.n	8011ff2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d101      	bne.n	8011dc8 <HAL_SPI_Receive_DMA+0x4c>
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	e114      	b.n	8011ff2 <HAL_SPI_Receive_DMA+0x276>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2204      	movs	r2, #4
 8011dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	88fa      	ldrh	r2, [r7, #6]
 8011dea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	88fa      	ldrh	r2, [r7, #6]
 8011df2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2200      	movs	r2, #0
 8011e06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011e1a:	d108      	bne.n	8011e2e <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e2a:	601a      	str	r2, [r3, #0]
 8011e2c:	e009      	b.n	8011e42 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011e40:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	2b0f      	cmp	r3, #15
 8011e48:	d905      	bls.n	8011e56 <HAL_SPI_Receive_DMA+0xda>
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e54:	d10f      	bne.n	8011e76 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011e5a:	2b07      	cmp	r3, #7
 8011e5c:	d911      	bls.n	8011e82 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e62:	699b      	ldr	r3, [r3, #24]
 8011e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e68:	d00b      	beq.n	8011e82 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e6e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e74:	d005      	beq.n	8011e82 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e0b7      	b.n	8011ff2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	689a      	ldr	r2, [r3, #8]
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011e90:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	2b07      	cmp	r3, #7
 8011e98:	d820      	bhi.n	8011edc <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e9e:	699b      	ldr	r3, [r3, #24]
 8011ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ea4:	d109      	bne.n	8011eba <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	3301      	adds	r3, #1
 8011eb0:	105b      	asrs	r3, r3, #1
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ec4:	d11e      	bne.n	8011f04 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	3303      	adds	r3, #3
 8011ed0:	109b      	asrs	r3, r3, #2
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011eda:	e013      	b.n	8011f04 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	2b0f      	cmp	r3, #15
 8011ee2:	d80f      	bhi.n	8011f04 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ee8:	699b      	ldr	r3, [r3, #24]
 8011eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011eee:	d109      	bne.n	8011f04 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	3301      	adds	r3, #1
 8011efa:	105b      	asrs	r3, r3, #1
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f08:	4a3c      	ldr	r2, [pc, #240]	; (8011ffc <HAL_SPI_Receive_DMA+0x280>)
 8011f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f10:	4a3b      	ldr	r2, [pc, #236]	; (8012000 <HAL_SPI_Receive_DMA+0x284>)
 8011f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f18:	4a3a      	ldr	r2, [pc, #232]	; (8012004 <HAL_SPI_Receive_DMA+0x288>)
 8011f1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f20:	2200      	movs	r2, #0
 8011f22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	3330      	adds	r3, #48	; 0x30
 8011f2e:	4619      	mov	r1, r3
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011f3e:	f7f6 f9c1 	bl	80082c4 <HAL_DMA_Start_IT>
 8011f42:	4603      	mov	r3, r0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d011      	beq.n	8011f6c <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f4e:	f043 0210 	orr.w	r2, r3, #16
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	e042      	b.n	8011ff2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f70:	69db      	ldr	r3, [r3, #28]
 8011f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f76:	d108      	bne.n	8011f8a <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	6859      	ldr	r1, [r3, #4]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	4b21      	ldr	r3, [pc, #132]	; (8012008 <HAL_SPI_Receive_DMA+0x28c>)
 8011f84:	400b      	ands	r3, r1
 8011f86:	6053      	str	r3, [r2, #4]
 8011f88:	e009      	b.n	8011f9e <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	685a      	ldr	r2, [r3, #4]
 8011f90:	4b1d      	ldr	r3, [pc, #116]	; (8012008 <HAL_SPI_Receive_DMA+0x28c>)
 8011f92:	4013      	ands	r3, r2
 8011f94:	88f9      	ldrh	r1, [r7, #6]
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	6812      	ldr	r2, [r2, #0]
 8011f9a:	430b      	orrs	r3, r1
 8011f9c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	689a      	ldr	r2, [r3, #8]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011fac:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	691a      	ldr	r2, [r3, #16]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011fbc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f042 0201 	orr.w	r2, r2, #1
 8011fcc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011fd6:	d107      	bne.n	8011fe8 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011fe6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011ff0:	2300      	movs	r3, #0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	08012467 	.word	0x08012467
 8012000:	08012421 	.word	0x08012421
 8012004:	08012483 	.word	0x08012483
 8012008:	ffff0000 	.word	0xffff0000

0801200c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b08a      	sub	sp, #40	; 0x28
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	691b      	ldr	r3, [r3, #16]
 801201a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	695b      	ldr	r3, [r3, #20]
 8012022:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012024:	6a3a      	ldr	r2, [r7, #32]
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	4013      	ands	r3, r2
 801202a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012034:	2300      	movs	r3, #0
 8012036:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801203e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	3330      	adds	r3, #48	; 0x30
 8012046:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801204e:	2b00      	cmp	r3, #0
 8012050:	d010      	beq.n	8012074 <HAL_SPI_IRQHandler+0x68>
 8012052:	6a3b      	ldr	r3, [r7, #32]
 8012054:	f003 0308 	and.w	r3, r3, #8
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00b      	beq.n	8012074 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	699a      	ldr	r2, [r3, #24]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801206a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f000 f9cd 	bl	801240c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012072:	e192      	b.n	801239a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801207a:	2b00      	cmp	r3, #0
 801207c:	d113      	bne.n	80120a6 <HAL_SPI_IRQHandler+0x9a>
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	f003 0320 	and.w	r3, r3, #32
 8012084:	2b00      	cmp	r3, #0
 8012086:	d10e      	bne.n	80120a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801208e:	2b00      	cmp	r3, #0
 8012090:	d009      	beq.n	80120a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	4798      	blx	r3
    hspi->RxISR(hspi);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	4798      	blx	r3
    handled = 1UL;
 80120a2:	2301      	movs	r3, #1
 80120a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10f      	bne.n	80120d0 <HAL_SPI_IRQHandler+0xc4>
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	f003 0301 	and.w	r3, r3, #1
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d00a      	beq.n	80120d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80120ba:	69bb      	ldr	r3, [r7, #24]
 80120bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d105      	bne.n	80120d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	4798      	blx	r3
    handled = 1UL;
 80120cc:	2301      	movs	r3, #1
 80120ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	f003 0320 	and.w	r3, r3, #32
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d10f      	bne.n	80120fa <HAL_SPI_IRQHandler+0xee>
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	f003 0302 	and.w	r3, r3, #2
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00a      	beq.n	80120fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d105      	bne.n	80120fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	4798      	blx	r3
    handled = 1UL;
 80120f6:	2301      	movs	r3, #1
 80120f8:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80120fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f040 8147 	bne.w	8012390 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	f003 0308 	and.w	r3, r3, #8
 8012108:	2b00      	cmp	r3, #0
 801210a:	f000 808b 	beq.w	8012224 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	699a      	ldr	r2, [r3, #24]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f042 0208 	orr.w	r2, r2, #8
 801211c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	699a      	ldr	r2, [r3, #24]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f042 0210 	orr.w	r2, r2, #16
 801212c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	699a      	ldr	r2, [r3, #24]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801213c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	691a      	ldr	r2, [r3, #16]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f022 0208 	bic.w	r2, r2, #8
 801214c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012158:	2b00      	cmp	r3, #0
 801215a:	d13d      	bne.n	80121d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801215c:	e036      	b.n	80121cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	2b0f      	cmp	r3, #15
 8012164:	d90b      	bls.n	801217e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801216e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012170:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012176:	1d1a      	adds	r2, r3, #4
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	665a      	str	r2, [r3, #100]	; 0x64
 801217c:	e01d      	b.n	80121ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	2b07      	cmp	r3, #7
 8012184:	d90b      	bls.n	801219e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	8812      	ldrh	r2, [r2, #0]
 801218e:	b292      	uxth	r2, r2
 8012190:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012196:	1c9a      	adds	r2, r3, #2
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	665a      	str	r2, [r3, #100]	; 0x64
 801219c:	e00d      	b.n	80121ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121aa:	7812      	ldrb	r2, [r2, #0]
 80121ac:	b2d2      	uxtb	r2, r2
 80121ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121b4:	1c5a      	adds	r2, r3, #1
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	3b01      	subs	r3, #1
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d1c2      	bne.n	801215e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 f98f 	bl	80124fc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d003      	beq.n	80121f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f000 f901 	bl	80123f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80121f6:	e0d0      	b.n	801239a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80121f8:	7cfb      	ldrb	r3, [r7, #19]
 80121fa:	2b05      	cmp	r3, #5
 80121fc:	d103      	bne.n	8012206 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 f8e6 	bl	80123d0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012204:	e0c6      	b.n	8012394 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012206:	7cfb      	ldrb	r3, [r7, #19]
 8012208:	2b04      	cmp	r3, #4
 801220a:	d103      	bne.n	8012214 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f8d5 	bl	80123bc <HAL_SPI_RxCpltCallback>
    return;
 8012212:	e0bf      	b.n	8012394 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012214:	7cfb      	ldrb	r3, [r7, #19]
 8012216:	2b03      	cmp	r3, #3
 8012218:	f040 80bc 	bne.w	8012394 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 f8c3 	bl	80123a8 <HAL_SPI_TxCpltCallback>
    return;
 8012222:	e0b7      	b.n	8012394 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801222a:	2b00      	cmp	r3, #0
 801222c:	f000 80b5 	beq.w	801239a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012236:	2b00      	cmp	r3, #0
 8012238:	d00f      	beq.n	801225a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012240:	f043 0204 	orr.w	r2, r3, #4
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	699a      	ldr	r2, [r3, #24]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012258:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012260:	2b00      	cmp	r3, #0
 8012262:	d00f      	beq.n	8012284 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801226a:	f043 0201 	orr.w	r2, r3, #1
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	699a      	ldr	r2, [r3, #24]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012282:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00f      	beq.n	80122ae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012294:	f043 0208 	orr.w	r2, r3, #8
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	699a      	ldr	r2, [r3, #24]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80122ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	f003 0320 	and.w	r3, r3, #32
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d00f      	beq.n	80122d8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	699a      	ldr	r2, [r3, #24]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f042 0220 	orr.w	r2, r2, #32
 80122d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d05a      	beq.n	8012398 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f022 0201 	bic.w	r2, r2, #1
 80122f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	6919      	ldr	r1, [r3, #16]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	4b28      	ldr	r3, [pc, #160]	; (80123a0 <HAL_SPI_IRQHandler+0x394>)
 80122fe:	400b      	ands	r3, r1
 8012300:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012308:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801230c:	d138      	bne.n	8012380 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	689a      	ldr	r2, [r3, #8]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801231c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012322:	2b00      	cmp	r3, #0
 8012324:	d013      	beq.n	801234e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801232a:	4a1e      	ldr	r2, [pc, #120]	; (80123a4 <HAL_SPI_IRQHandler+0x398>)
 801232c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012332:	4618      	mov	r0, r3
 8012334:	f7f6 fd4e 	bl	8008dd4 <HAL_DMA_Abort_IT>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d007      	beq.n	801234e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012352:	2b00      	cmp	r3, #0
 8012354:	d020      	beq.n	8012398 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801235a:	4a12      	ldr	r2, [pc, #72]	; (80123a4 <HAL_SPI_IRQHandler+0x398>)
 801235c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012362:	4618      	mov	r0, r3
 8012364:	f7f6 fd36 	bl	8008dd4 <HAL_DMA_Abort_IT>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d014      	beq.n	8012398 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801237e:	e00b      	b.n	8012398 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2201      	movs	r2, #1
 8012384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f835 	bl	80123f8 <HAL_SPI_ErrorCallback>
    return;
 801238e:	e003      	b.n	8012398 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012390:	bf00      	nop
 8012392:	e002      	b.n	801239a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012394:	bf00      	nop
 8012396:	e000      	b.n	801239a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012398:	bf00      	nop
  }
}
 801239a:	3728      	adds	r7, #40	; 0x28
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	fffffc94 	.word	0xfffffc94
 80123a4:	080124c9 	.word	0x080124c9

080123a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80123b0:	bf00      	nop
 80123b2:	370c      	adds	r7, #12
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr

080123bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123bc:	b480      	push	{r7}
 80123be:	b083      	sub	sp, #12
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80123c4:	bf00      	nop
 80123c6:	370c      	adds	r7, #12
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123d0:	b480      	push	{r7}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80123d8:	bf00      	nop
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80123ec:	bf00      	nop
 80123ee:	370c      	adds	r7, #12
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012400:	bf00      	nop
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012414:	bf00      	nop
 8012416:	370c      	adds	r7, #12
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801242c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b07      	cmp	r3, #7
 8012438:	d011      	beq.n	801245e <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801243e:	69db      	ldr	r3, [r3, #28]
 8012440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012444:	d103      	bne.n	801244e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f7ff ffb8 	bl	80123bc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801244c:	e007      	b.n	801245e <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	691a      	ldr	r2, [r3, #16]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f042 0208 	orr.w	r2, r2, #8
 801245c:	611a      	str	r2, [r3, #16]
}
 801245e:	bf00      	nop
 8012460:	3710      	adds	r7, #16
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b084      	sub	sp, #16
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012472:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f7ff ffb5 	bl	80123e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801247a:	bf00      	nop
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012482:	b580      	push	{r7, lr}
 8012484:	b084      	sub	sp, #16
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801248e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7f7 fe1d 	bl	800a0d0 <HAL_DMA_GetError>
 8012496:	4603      	mov	r3, r0
 8012498:	2b02      	cmp	r3, #2
 801249a:	d011      	beq.n	80124c0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f000 f82d 	bl	80124fc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124a8:	f043 0210 	orr.w	r2, r3, #16
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2201      	movs	r2, #1
 80124b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80124ba:	68f8      	ldr	r0, [r7, #12]
 80124bc:	f7ff ff9c 	bl	80123f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80124c0:	bf00      	nop
 80124c2:	3710      	adds	r7, #16
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2200      	movs	r2, #0
 80124da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2200      	movs	r2, #0
 80124e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2201      	movs	r2, #1
 80124ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f7ff ff82 	bl	80123f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80124f4:	bf00      	nop
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b085      	sub	sp, #20
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	695b      	ldr	r3, [r3, #20]
 801250a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	699a      	ldr	r2, [r3, #24]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f042 0208 	orr.w	r2, r2, #8
 801251a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	699a      	ldr	r2, [r3, #24]
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	f042 0210 	orr.w	r2, r2, #16
 801252a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f022 0201 	bic.w	r2, r2, #1
 801253a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	6919      	ldr	r1, [r3, #16]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	4b3c      	ldr	r3, [pc, #240]	; (8012638 <SPI_CloseTransfer+0x13c>)
 8012548:	400b      	ands	r3, r1
 801254a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	689a      	ldr	r2, [r3, #8]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801255a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b04      	cmp	r3, #4
 8012566:	d014      	beq.n	8012592 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f003 0320 	and.w	r3, r3, #32
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00f      	beq.n	8012592 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012578:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	699a      	ldr	r2, [r3, #24]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f042 0220 	orr.w	r2, r2, #32
 8012590:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012598:	b2db      	uxtb	r3, r3
 801259a:	2b03      	cmp	r3, #3
 801259c:	d014      	beq.n	80125c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00f      	beq.n	80125c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125ae:	f043 0204 	orr.w	r2, r3, #4
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	699a      	ldr	r2, [r3, #24]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00f      	beq.n	80125f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125d8:	f043 0201 	orr.w	r2, r3, #1
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	699a      	ldr	r2, [r3, #24]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80125f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00f      	beq.n	801261c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012602:	f043 0208 	orr.w	r2, r3, #8
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	699a      	ldr	r2, [r3, #24]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801261a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2200      	movs	r2, #0
 8012620:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801262c:	bf00      	nop
 801262e:	3714      	adds	r7, #20
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr
 8012638:	fffffc90 	.word	0xfffffc90

0801263c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012648:	095b      	lsrs	r3, r3, #5
 801264a:	3301      	adds	r3, #1
 801264c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	3301      	adds	r3, #1
 8012654:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	3307      	adds	r3, #7
 801265a:	08db      	lsrs	r3, r3, #3
 801265c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	68fa      	ldr	r2, [r7, #12]
 8012662:	fb02 f303 	mul.w	r3, r2, r3
}
 8012666:	4618      	mov	r0, r3
 8012668:	3714      	adds	r7, #20
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr

08012672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012672:	b580      	push	{r7, lr}
 8012674:	b082      	sub	sp, #8
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d101      	bne.n	8012684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012680:	2301      	movs	r3, #1
 8012682:	e049      	b.n	8012718 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801268a:	b2db      	uxtb	r3, r3
 801268c:	2b00      	cmp	r3, #0
 801268e:	d106      	bne.n	801269e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7f2 faff 	bl	8004c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2202      	movs	r2, #2
 80126a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3304      	adds	r3, #4
 80126ae:	4619      	mov	r1, r3
 80126b0:	4610      	mov	r0, r2
 80126b2:	f000 fe7d 	bl	80133b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2201      	movs	r2, #1
 80126ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2201      	movs	r2, #1
 80126c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2201      	movs	r2, #1
 80126ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2201      	movs	r2, #1
 80126da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2201      	movs	r2, #1
 80126e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2201      	movs	r2, #1
 80126ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2201      	movs	r2, #1
 80126f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2201      	movs	r2, #1
 80126fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2201      	movs	r2, #1
 8012702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2201      	movs	r2, #1
 801270a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2201      	movs	r2, #1
 8012712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012720:	b480      	push	{r7}
 8012722:	b085      	sub	sp, #20
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801272e:	b2db      	uxtb	r3, r3
 8012730:	2b01      	cmp	r3, #1
 8012732:	d001      	beq.n	8012738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012734:	2301      	movs	r3, #1
 8012736:	e054      	b.n	80127e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2202      	movs	r2, #2
 801273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	68da      	ldr	r2, [r3, #12]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f042 0201 	orr.w	r2, r2, #1
 801274e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	4a26      	ldr	r2, [pc, #152]	; (80127f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d022      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012762:	d01d      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4a22      	ldr	r2, [pc, #136]	; (80127f4 <HAL_TIM_Base_Start_IT+0xd4>)
 801276a:	4293      	cmp	r3, r2
 801276c:	d018      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a21      	ldr	r2, [pc, #132]	; (80127f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d013      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	4a1f      	ldr	r2, [pc, #124]	; (80127fc <HAL_TIM_Base_Start_IT+0xdc>)
 801277e:	4293      	cmp	r3, r2
 8012780:	d00e      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4a1e      	ldr	r2, [pc, #120]	; (8012800 <HAL_TIM_Base_Start_IT+0xe0>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d009      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	4a1c      	ldr	r2, [pc, #112]	; (8012804 <HAL_TIM_Base_Start_IT+0xe4>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d004      	beq.n	80127a0 <HAL_TIM_Base_Start_IT+0x80>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4a1b      	ldr	r2, [pc, #108]	; (8012808 <HAL_TIM_Base_Start_IT+0xe8>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d115      	bne.n	80127cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	689a      	ldr	r2, [r3, #8]
 80127a6:	4b19      	ldr	r3, [pc, #100]	; (801280c <HAL_TIM_Base_Start_IT+0xec>)
 80127a8:	4013      	ands	r3, r2
 80127aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2b06      	cmp	r3, #6
 80127b0:	d015      	beq.n	80127de <HAL_TIM_Base_Start_IT+0xbe>
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127b8:	d011      	beq.n	80127de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f042 0201 	orr.w	r2, r2, #1
 80127c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127ca:	e008      	b.n	80127de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f042 0201 	orr.w	r2, r2, #1
 80127da:	601a      	str	r2, [r3, #0]
 80127dc:	e000      	b.n	80127e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop
 80127f0:	40010000 	.word	0x40010000
 80127f4:	40000400 	.word	0x40000400
 80127f8:	40000800 	.word	0x40000800
 80127fc:	40000c00 	.word	0x40000c00
 8012800:	40010400 	.word	0x40010400
 8012804:	40001800 	.word	0x40001800
 8012808:	40014000 	.word	0x40014000
 801280c:	00010007 	.word	0x00010007

08012810 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d109      	bne.n	8012838 <HAL_TIM_OC_Start_IT+0x28>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b01      	cmp	r3, #1
 801282e:	bf14      	ite	ne
 8012830:	2301      	movne	r3, #1
 8012832:	2300      	moveq	r3, #0
 8012834:	b2db      	uxtb	r3, r3
 8012836:	e03c      	b.n	80128b2 <HAL_TIM_OC_Start_IT+0xa2>
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2b04      	cmp	r3, #4
 801283c:	d109      	bne.n	8012852 <HAL_TIM_OC_Start_IT+0x42>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012844:	b2db      	uxtb	r3, r3
 8012846:	2b01      	cmp	r3, #1
 8012848:	bf14      	ite	ne
 801284a:	2301      	movne	r3, #1
 801284c:	2300      	moveq	r3, #0
 801284e:	b2db      	uxtb	r3, r3
 8012850:	e02f      	b.n	80128b2 <HAL_TIM_OC_Start_IT+0xa2>
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	2b08      	cmp	r3, #8
 8012856:	d109      	bne.n	801286c <HAL_TIM_OC_Start_IT+0x5c>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801285e:	b2db      	uxtb	r3, r3
 8012860:	2b01      	cmp	r3, #1
 8012862:	bf14      	ite	ne
 8012864:	2301      	movne	r3, #1
 8012866:	2300      	moveq	r3, #0
 8012868:	b2db      	uxtb	r3, r3
 801286a:	e022      	b.n	80128b2 <HAL_TIM_OC_Start_IT+0xa2>
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	2b0c      	cmp	r3, #12
 8012870:	d109      	bne.n	8012886 <HAL_TIM_OC_Start_IT+0x76>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012878:	b2db      	uxtb	r3, r3
 801287a:	2b01      	cmp	r3, #1
 801287c:	bf14      	ite	ne
 801287e:	2301      	movne	r3, #1
 8012880:	2300      	moveq	r3, #0
 8012882:	b2db      	uxtb	r3, r3
 8012884:	e015      	b.n	80128b2 <HAL_TIM_OC_Start_IT+0xa2>
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	2b10      	cmp	r3, #16
 801288a:	d109      	bne.n	80128a0 <HAL_TIM_OC_Start_IT+0x90>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012892:	b2db      	uxtb	r3, r3
 8012894:	2b01      	cmp	r3, #1
 8012896:	bf14      	ite	ne
 8012898:	2301      	movne	r3, #1
 801289a:	2300      	moveq	r3, #0
 801289c:	b2db      	uxtb	r3, r3
 801289e:	e008      	b.n	80128b2 <HAL_TIM_OC_Start_IT+0xa2>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	bf14      	ite	ne
 80128ac:	2301      	movne	r3, #1
 80128ae:	2300      	moveq	r3, #0
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d001      	beq.n	80128ba <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80128b6:	2301      	movs	r3, #1
 80128b8:	e0ec      	b.n	8012a94 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d104      	bne.n	80128ca <HAL_TIM_OC_Start_IT+0xba>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2202      	movs	r2, #2
 80128c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80128c8:	e023      	b.n	8012912 <HAL_TIM_OC_Start_IT+0x102>
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	2b04      	cmp	r3, #4
 80128ce:	d104      	bne.n	80128da <HAL_TIM_OC_Start_IT+0xca>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2202      	movs	r2, #2
 80128d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80128d8:	e01b      	b.n	8012912 <HAL_TIM_OC_Start_IT+0x102>
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b08      	cmp	r3, #8
 80128de:	d104      	bne.n	80128ea <HAL_TIM_OC_Start_IT+0xda>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2202      	movs	r2, #2
 80128e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80128e8:	e013      	b.n	8012912 <HAL_TIM_OC_Start_IT+0x102>
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	2b0c      	cmp	r3, #12
 80128ee:	d104      	bne.n	80128fa <HAL_TIM_OC_Start_IT+0xea>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2202      	movs	r2, #2
 80128f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80128f8:	e00b      	b.n	8012912 <HAL_TIM_OC_Start_IT+0x102>
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	2b10      	cmp	r3, #16
 80128fe:	d104      	bne.n	801290a <HAL_TIM_OC_Start_IT+0xfa>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2202      	movs	r2, #2
 8012904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012908:	e003      	b.n	8012912 <HAL_TIM_OC_Start_IT+0x102>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2202      	movs	r2, #2
 801290e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	2b0c      	cmp	r3, #12
 8012916:	d841      	bhi.n	801299c <HAL_TIM_OC_Start_IT+0x18c>
 8012918:	a201      	add	r2, pc, #4	; (adr r2, 8012920 <HAL_TIM_OC_Start_IT+0x110>)
 801291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291e:	bf00      	nop
 8012920:	08012955 	.word	0x08012955
 8012924:	0801299d 	.word	0x0801299d
 8012928:	0801299d 	.word	0x0801299d
 801292c:	0801299d 	.word	0x0801299d
 8012930:	08012967 	.word	0x08012967
 8012934:	0801299d 	.word	0x0801299d
 8012938:	0801299d 	.word	0x0801299d
 801293c:	0801299d 	.word	0x0801299d
 8012940:	08012979 	.word	0x08012979
 8012944:	0801299d 	.word	0x0801299d
 8012948:	0801299d 	.word	0x0801299d
 801294c:	0801299d 	.word	0x0801299d
 8012950:	0801298b 	.word	0x0801298b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	68da      	ldr	r2, [r3, #12]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f042 0202 	orr.w	r2, r2, #2
 8012962:	60da      	str	r2, [r3, #12]
      break;
 8012964:	e01d      	b.n	80129a2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	68da      	ldr	r2, [r3, #12]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f042 0204 	orr.w	r2, r2, #4
 8012974:	60da      	str	r2, [r3, #12]
      break;
 8012976:	e014      	b.n	80129a2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68da      	ldr	r2, [r3, #12]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f042 0208 	orr.w	r2, r2, #8
 8012986:	60da      	str	r2, [r3, #12]
      break;
 8012988:	e00b      	b.n	80129a2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	68da      	ldr	r2, [r3, #12]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f042 0210 	orr.w	r2, r2, #16
 8012998:	60da      	str	r2, [r3, #12]
      break;
 801299a:	e002      	b.n	80129a2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801299c:	2301      	movs	r3, #1
 801299e:	73fb      	strb	r3, [r7, #15]
      break;
 80129a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80129a2:	7bfb      	ldrb	r3, [r7, #15]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d174      	bne.n	8012a92 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2201      	movs	r2, #1
 80129ae:	6839      	ldr	r1, [r7, #0]
 80129b0:	4618      	mov	r0, r3
 80129b2:	f001 f917 	bl	8013be4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a38      	ldr	r2, [pc, #224]	; (8012a9c <HAL_TIM_OC_Start_IT+0x28c>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d013      	beq.n	80129e8 <HAL_TIM_OC_Start_IT+0x1d8>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4a36      	ldr	r2, [pc, #216]	; (8012aa0 <HAL_TIM_OC_Start_IT+0x290>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d00e      	beq.n	80129e8 <HAL_TIM_OC_Start_IT+0x1d8>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a35      	ldr	r2, [pc, #212]	; (8012aa4 <HAL_TIM_OC_Start_IT+0x294>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d009      	beq.n	80129e8 <HAL_TIM_OC_Start_IT+0x1d8>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4a33      	ldr	r2, [pc, #204]	; (8012aa8 <HAL_TIM_OC_Start_IT+0x298>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d004      	beq.n	80129e8 <HAL_TIM_OC_Start_IT+0x1d8>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a32      	ldr	r2, [pc, #200]	; (8012aac <HAL_TIM_OC_Start_IT+0x29c>)
 80129e4:	4293      	cmp	r3, r2
 80129e6:	d101      	bne.n	80129ec <HAL_TIM_OC_Start_IT+0x1dc>
 80129e8:	2301      	movs	r3, #1
 80129ea:	e000      	b.n	80129ee <HAL_TIM_OC_Start_IT+0x1de>
 80129ec:	2300      	movs	r3, #0
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d007      	beq.n	8012a02 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4a25      	ldr	r2, [pc, #148]	; (8012a9c <HAL_TIM_OC_Start_IT+0x28c>)
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d022      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a14:	d01d      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	4a25      	ldr	r2, [pc, #148]	; (8012ab0 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	d018      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a23      	ldr	r2, [pc, #140]	; (8012ab4 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d013      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4a22      	ldr	r2, [pc, #136]	; (8012ab8 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012a30:	4293      	cmp	r3, r2
 8012a32:	d00e      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4a19      	ldr	r2, [pc, #100]	; (8012aa0 <HAL_TIM_OC_Start_IT+0x290>)
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d009      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	4a1e      	ldr	r2, [pc, #120]	; (8012abc <HAL_TIM_OC_Start_IT+0x2ac>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d004      	beq.n	8012a52 <HAL_TIM_OC_Start_IT+0x242>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	4a15      	ldr	r2, [pc, #84]	; (8012aa4 <HAL_TIM_OC_Start_IT+0x294>)
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d115      	bne.n	8012a7e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	689a      	ldr	r2, [r3, #8]
 8012a58:	4b19      	ldr	r3, [pc, #100]	; (8012ac0 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2b06      	cmp	r3, #6
 8012a62:	d015      	beq.n	8012a90 <HAL_TIM_OC_Start_IT+0x280>
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a6a:	d011      	beq.n	8012a90 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f042 0201 	orr.w	r2, r2, #1
 8012a7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a7c:	e008      	b.n	8012a90 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f042 0201 	orr.w	r2, r2, #1
 8012a8c:	601a      	str	r2, [r3, #0]
 8012a8e:	e000      	b.n	8012a92 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a90:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3710      	adds	r7, #16
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	40010000 	.word	0x40010000
 8012aa0:	40010400 	.word	0x40010400
 8012aa4:	40014000 	.word	0x40014000
 8012aa8:	40014400 	.word	0x40014400
 8012aac:	40014800 	.word	0x40014800
 8012ab0:	40000400 	.word	0x40000400
 8012ab4:	40000800 	.word	0x40000800
 8012ab8:	40000c00 	.word	0x40000c00
 8012abc:	40001800 	.word	0x40001800
 8012ac0:	00010007 	.word	0x00010007

08012ac4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	2b0c      	cmp	r3, #12
 8012ad6:	d841      	bhi.n	8012b5c <HAL_TIM_OC_Stop_IT+0x98>
 8012ad8:	a201      	add	r2, pc, #4	; (adr r2, 8012ae0 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ade:	bf00      	nop
 8012ae0:	08012b15 	.word	0x08012b15
 8012ae4:	08012b5d 	.word	0x08012b5d
 8012ae8:	08012b5d 	.word	0x08012b5d
 8012aec:	08012b5d 	.word	0x08012b5d
 8012af0:	08012b27 	.word	0x08012b27
 8012af4:	08012b5d 	.word	0x08012b5d
 8012af8:	08012b5d 	.word	0x08012b5d
 8012afc:	08012b5d 	.word	0x08012b5d
 8012b00:	08012b39 	.word	0x08012b39
 8012b04:	08012b5d 	.word	0x08012b5d
 8012b08:	08012b5d 	.word	0x08012b5d
 8012b0c:	08012b5d 	.word	0x08012b5d
 8012b10:	08012b4b 	.word	0x08012b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f022 0202 	bic.w	r2, r2, #2
 8012b22:	60da      	str	r2, [r3, #12]
      break;
 8012b24:	e01d      	b.n	8012b62 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	68da      	ldr	r2, [r3, #12]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	f022 0204 	bic.w	r2, r2, #4
 8012b34:	60da      	str	r2, [r3, #12]
      break;
 8012b36:	e014      	b.n	8012b62 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	68da      	ldr	r2, [r3, #12]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f022 0208 	bic.w	r2, r2, #8
 8012b46:	60da      	str	r2, [r3, #12]
      break;
 8012b48:	e00b      	b.n	8012b62 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	68da      	ldr	r2, [r3, #12]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	f022 0210 	bic.w	r2, r2, #16
 8012b58:	60da      	str	r2, [r3, #12]
      break;
 8012b5a:	e002      	b.n	8012b62 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8012b60:	bf00      	nop
  }

  if (status == HAL_OK)
 8012b62:	7bfb      	ldrb	r3, [r7, #15]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	f040 8081 	bne.w	8012c6c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f001 f836 	bl	8013be4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4a3e      	ldr	r2, [pc, #248]	; (8012c78 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d013      	beq.n	8012baa <HAL_TIM_OC_Stop_IT+0xe6>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	4a3d      	ldr	r2, [pc, #244]	; (8012c7c <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d00e      	beq.n	8012baa <HAL_TIM_OC_Stop_IT+0xe6>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4a3b      	ldr	r2, [pc, #236]	; (8012c80 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d009      	beq.n	8012baa <HAL_TIM_OC_Stop_IT+0xe6>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	4a3a      	ldr	r2, [pc, #232]	; (8012c84 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d004      	beq.n	8012baa <HAL_TIM_OC_Stop_IT+0xe6>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a38      	ldr	r2, [pc, #224]	; (8012c88 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d101      	bne.n	8012bae <HAL_TIM_OC_Stop_IT+0xea>
 8012baa:	2301      	movs	r3, #1
 8012bac:	e000      	b.n	8012bb0 <HAL_TIM_OC_Stop_IT+0xec>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d017      	beq.n	8012be4 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	6a1a      	ldr	r2, [r3, #32]
 8012bba:	f241 1311 	movw	r3, #4369	; 0x1111
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d10f      	bne.n	8012be4 <HAL_TIM_OC_Stop_IT+0x120>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	6a1a      	ldr	r2, [r3, #32]
 8012bca:	f240 4344 	movw	r3, #1092	; 0x444
 8012bce:	4013      	ands	r3, r2
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d107      	bne.n	8012be4 <HAL_TIM_OC_Stop_IT+0x120>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012be2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	6a1a      	ldr	r2, [r3, #32]
 8012bea:	f241 1311 	movw	r3, #4369	; 0x1111
 8012bee:	4013      	ands	r3, r2
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10f      	bne.n	8012c14 <HAL_TIM_OC_Stop_IT+0x150>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	6a1a      	ldr	r2, [r3, #32]
 8012bfa:	f240 4344 	movw	r3, #1092	; 0x444
 8012bfe:	4013      	ands	r3, r2
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d107      	bne.n	8012c14 <HAL_TIM_OC_Stop_IT+0x150>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f022 0201 	bic.w	r2, r2, #1
 8012c12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d104      	bne.n	8012c24 <HAL_TIM_OC_Stop_IT+0x160>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c22:	e023      	b.n	8012c6c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b04      	cmp	r3, #4
 8012c28:	d104      	bne.n	8012c34 <HAL_TIM_OC_Stop_IT+0x170>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012c32:	e01b      	b.n	8012c6c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	2b08      	cmp	r3, #8
 8012c38:	d104      	bne.n	8012c44 <HAL_TIM_OC_Stop_IT+0x180>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012c42:	e013      	b.n	8012c6c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	2b0c      	cmp	r3, #12
 8012c48:	d104      	bne.n	8012c54 <HAL_TIM_OC_Stop_IT+0x190>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012c52:	e00b      	b.n	8012c6c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b10      	cmp	r3, #16
 8012c58:	d104      	bne.n	8012c64 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c62:	e003      	b.n	8012c6c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2201      	movs	r2, #1
 8012c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	40010000 	.word	0x40010000
 8012c7c:	40010400 	.word	0x40010400
 8012c80:	40014000 	.word	0x40014000
 8012c84:	40014400 	.word	0x40014400
 8012c88:	40014800 	.word	0x40014800

08012c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d101      	bne.n	8012c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e049      	b.n	8012d32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d106      	bne.n	8012cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f841 	bl	8012d3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2202      	movs	r2, #2
 8012cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	3304      	adds	r3, #4
 8012cc8:	4619      	mov	r1, r3
 8012cca:	4610      	mov	r0, r2
 8012ccc:	f000 fb70 	bl	80133b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2201      	movs	r2, #1
 8012cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2201      	movs	r2, #1
 8012d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2201      	movs	r2, #1
 8012d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012d30:	2300      	movs	r3, #0
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012d3a:	b480      	push	{r7}
 8012d3c:	b083      	sub	sp, #12
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012d42:	bf00      	nop
 8012d44:	370c      	adds	r7, #12
 8012d46:	46bd      	mov	sp, r7
 8012d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4c:	4770      	bx	lr

08012d4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b084      	sub	sp, #16
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	691b      	ldr	r3, [r3, #16]
 8012d64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	f003 0302 	and.w	r3, r3, #2
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d020      	beq.n	8012db2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	f003 0302 	and.w	r3, r3, #2
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d01b      	beq.n	8012db2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	f06f 0202 	mvn.w	r2, #2
 8012d82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2201      	movs	r2, #1
 8012d88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	699b      	ldr	r3, [r3, #24]
 8012d90:	f003 0303 	and.w	r3, r3, #3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d003      	beq.n	8012da0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 faeb 	bl	8013374 <HAL_TIM_IC_CaptureCallback>
 8012d9e:	e005      	b.n	8012dac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7ef fe01 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 faee 	bl	8013388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	f003 0304 	and.w	r3, r3, #4
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d020      	beq.n	8012dfe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f003 0304 	and.w	r3, r3, #4
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d01b      	beq.n	8012dfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f06f 0204 	mvn.w	r2, #4
 8012dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2202      	movs	r2, #2
 8012dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	699b      	ldr	r3, [r3, #24]
 8012ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d003      	beq.n	8012dec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f000 fac5 	bl	8013374 <HAL_TIM_IC_CaptureCallback>
 8012dea:	e005      	b.n	8012df8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7ef fddb 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 fac8 	bl	8013388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	f003 0308 	and.w	r3, r3, #8
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d020      	beq.n	8012e4a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f003 0308 	and.w	r3, r3, #8
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d01b      	beq.n	8012e4a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	f06f 0208 	mvn.w	r2, #8
 8012e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2204      	movs	r2, #4
 8012e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	69db      	ldr	r3, [r3, #28]
 8012e28:	f003 0303 	and.w	r3, r3, #3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d003      	beq.n	8012e38 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 fa9f 	bl	8013374 <HAL_TIM_IC_CaptureCallback>
 8012e36:	e005      	b.n	8012e44 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ef fdb5 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f000 faa2 	bl	8013388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	f003 0310 	and.w	r3, r3, #16
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d020      	beq.n	8012e96 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f003 0310 	and.w	r3, r3, #16
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d01b      	beq.n	8012e96 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f06f 0210 	mvn.w	r2, #16
 8012e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2208      	movs	r2, #8
 8012e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	69db      	ldr	r3, [r3, #28]
 8012e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d003      	beq.n	8012e84 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f000 fa79 	bl	8013374 <HAL_TIM_IC_CaptureCallback>
 8012e82:	e005      	b.n	8012e90 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7ef fd8f 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 fa7c 	bl	8013388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2200      	movs	r2, #0
 8012e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	f003 0301 	and.w	r3, r3, #1
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d00c      	beq.n	8012eba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f003 0301 	and.w	r3, r3, #1
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d007      	beq.n	8012eba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f06f 0201 	mvn.w	r2, #1
 8012eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f7f0 fce3 	bl	8003880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d104      	bne.n	8012ece <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00c      	beq.n	8012ee8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d007      	beq.n	8012ee8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f000 ffba 	bl	8013e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00c      	beq.n	8012f0c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d007      	beq.n	8012f0c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f000 ffb2 	bl	8013e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00c      	beq.n	8012f30 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d007      	beq.n	8012f30 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 fa36 	bl	801339c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	f003 0320 	and.w	r3, r3, #32
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d00c      	beq.n	8012f54 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f003 0320 	and.w	r3, r3, #32
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d007      	beq.n	8012f54 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f06f 0220 	mvn.w	r2, #32
 8012f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f000 ff7a 	bl	8013e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012f54:	bf00      	nop
 8012f56:	3710      	adds	r7, #16
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d101      	bne.n	8012f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012f76:	2302      	movs	r3, #2
 8012f78:	e0ff      	b.n	801317a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2b14      	cmp	r3, #20
 8012f86:	f200 80f0 	bhi.w	801316a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012f8a:	a201      	add	r2, pc, #4	; (adr r2, 8012f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f90:	08012fe5 	.word	0x08012fe5
 8012f94:	0801316b 	.word	0x0801316b
 8012f98:	0801316b 	.word	0x0801316b
 8012f9c:	0801316b 	.word	0x0801316b
 8012fa0:	08013025 	.word	0x08013025
 8012fa4:	0801316b 	.word	0x0801316b
 8012fa8:	0801316b 	.word	0x0801316b
 8012fac:	0801316b 	.word	0x0801316b
 8012fb0:	08013067 	.word	0x08013067
 8012fb4:	0801316b 	.word	0x0801316b
 8012fb8:	0801316b 	.word	0x0801316b
 8012fbc:	0801316b 	.word	0x0801316b
 8012fc0:	080130a7 	.word	0x080130a7
 8012fc4:	0801316b 	.word	0x0801316b
 8012fc8:	0801316b 	.word	0x0801316b
 8012fcc:	0801316b 	.word	0x0801316b
 8012fd0:	080130e9 	.word	0x080130e9
 8012fd4:	0801316b 	.word	0x0801316b
 8012fd8:	0801316b 	.word	0x0801316b
 8012fdc:	0801316b 	.word	0x0801316b
 8012fe0:	08013129 	.word	0x08013129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	68b9      	ldr	r1, [r7, #8]
 8012fea:	4618      	mov	r0, r3
 8012fec:	f000 fa86 	bl	80134fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	699a      	ldr	r2, [r3, #24]
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f042 0208 	orr.w	r2, r2, #8
 8012ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	699a      	ldr	r2, [r3, #24]
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f022 0204 	bic.w	r2, r2, #4
 801300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	6999      	ldr	r1, [r3, #24]
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	691a      	ldr	r2, [r3, #16]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	430a      	orrs	r2, r1
 8013020:	619a      	str	r2, [r3, #24]
      break;
 8013022:	e0a5      	b.n	8013170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	4618      	mov	r0, r3
 801302c:	f000 faf6 	bl	801361c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	699a      	ldr	r2, [r3, #24]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801303e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	699a      	ldr	r2, [r3, #24]
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801304e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	6999      	ldr	r1, [r3, #24]
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	691b      	ldr	r3, [r3, #16]
 801305a:	021a      	lsls	r2, r3, #8
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	430a      	orrs	r2, r1
 8013062:	619a      	str	r2, [r3, #24]
      break;
 8013064:	e084      	b.n	8013170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	68b9      	ldr	r1, [r7, #8]
 801306c:	4618      	mov	r0, r3
 801306e:	f000 fb5f 	bl	8013730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	69da      	ldr	r2, [r3, #28]
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f042 0208 	orr.w	r2, r2, #8
 8013080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	69da      	ldr	r2, [r3, #28]
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f022 0204 	bic.w	r2, r2, #4
 8013090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	69d9      	ldr	r1, [r3, #28]
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	691a      	ldr	r2, [r3, #16]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	430a      	orrs	r2, r1
 80130a2:	61da      	str	r2, [r3, #28]
      break;
 80130a4:	e064      	b.n	8013170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	68b9      	ldr	r1, [r7, #8]
 80130ac:	4618      	mov	r0, r3
 80130ae:	f000 fbc7 	bl	8013840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	69da      	ldr	r2, [r3, #28]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80130c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	69da      	ldr	r2, [r3, #28]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	69d9      	ldr	r1, [r3, #28]
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	691b      	ldr	r3, [r3, #16]
 80130dc:	021a      	lsls	r2, r3, #8
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	430a      	orrs	r2, r1
 80130e4:	61da      	str	r2, [r3, #28]
      break;
 80130e6:	e043      	b.n	8013170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68b9      	ldr	r1, [r7, #8]
 80130ee:	4618      	mov	r0, r3
 80130f0:	f000 fc10 	bl	8013914 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f042 0208 	orr.w	r2, r2, #8
 8013102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f022 0204 	bic.w	r2, r2, #4
 8013112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	691a      	ldr	r2, [r3, #16]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	430a      	orrs	r2, r1
 8013124:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013126:	e023      	b.n	8013170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	68b9      	ldr	r1, [r7, #8]
 801312e:	4618      	mov	r0, r3
 8013130:	f000 fc54 	bl	80139dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013142:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013152:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	021a      	lsls	r2, r3, #8
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	430a      	orrs	r2, r1
 8013166:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013168:	e002      	b.n	8013170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801316a:	2301      	movs	r3, #1
 801316c:	75fb      	strb	r3, [r7, #23]
      break;
 801316e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2200      	movs	r2, #0
 8013174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013178:	7dfb      	ldrb	r3, [r7, #23]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3718      	adds	r7, #24
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop

08013184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801318e:	2300      	movs	r3, #0
 8013190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013198:	2b01      	cmp	r3, #1
 801319a:	d101      	bne.n	80131a0 <HAL_TIM_ConfigClockSource+0x1c>
 801319c:	2302      	movs	r3, #2
 801319e:	e0dc      	b.n	801335a <HAL_TIM_ConfigClockSource+0x1d6>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2201      	movs	r2, #1
 80131a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2202      	movs	r2, #2
 80131ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80131b8:	68ba      	ldr	r2, [r7, #8]
 80131ba:	4b6a      	ldr	r3, [pc, #424]	; (8013364 <HAL_TIM_ConfigClockSource+0x1e0>)
 80131bc:	4013      	ands	r3, r2
 80131be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80131c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4a64      	ldr	r2, [pc, #400]	; (8013368 <HAL_TIM_ConfigClockSource+0x1e4>)
 80131d6:	4293      	cmp	r3, r2
 80131d8:	f000 80a9 	beq.w	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 80131dc:	4a62      	ldr	r2, [pc, #392]	; (8013368 <HAL_TIM_ConfigClockSource+0x1e4>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	f200 80ae 	bhi.w	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 80131e4:	4a61      	ldr	r2, [pc, #388]	; (801336c <HAL_TIM_ConfigClockSource+0x1e8>)
 80131e6:	4293      	cmp	r3, r2
 80131e8:	f000 80a1 	beq.w	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 80131ec:	4a5f      	ldr	r2, [pc, #380]	; (801336c <HAL_TIM_ConfigClockSource+0x1e8>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	f200 80a6 	bhi.w	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 80131f4:	4a5e      	ldr	r2, [pc, #376]	; (8013370 <HAL_TIM_ConfigClockSource+0x1ec>)
 80131f6:	4293      	cmp	r3, r2
 80131f8:	f000 8099 	beq.w	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 80131fc:	4a5c      	ldr	r2, [pc, #368]	; (8013370 <HAL_TIM_ConfigClockSource+0x1ec>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	f200 809e 	bhi.w	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013204:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013208:	f000 8091 	beq.w	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 801320c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013210:	f200 8096 	bhi.w	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013218:	f000 8089 	beq.w	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 801321c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013220:	f200 808e 	bhi.w	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013228:	d03e      	beq.n	80132a8 <HAL_TIM_ConfigClockSource+0x124>
 801322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801322e:	f200 8087 	bhi.w	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013236:	f000 8086 	beq.w	8013346 <HAL_TIM_ConfigClockSource+0x1c2>
 801323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801323e:	d87f      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013240:	2b70      	cmp	r3, #112	; 0x70
 8013242:	d01a      	beq.n	801327a <HAL_TIM_ConfigClockSource+0xf6>
 8013244:	2b70      	cmp	r3, #112	; 0x70
 8013246:	d87b      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013248:	2b60      	cmp	r3, #96	; 0x60
 801324a:	d050      	beq.n	80132ee <HAL_TIM_ConfigClockSource+0x16a>
 801324c:	2b60      	cmp	r3, #96	; 0x60
 801324e:	d877      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013250:	2b50      	cmp	r3, #80	; 0x50
 8013252:	d03c      	beq.n	80132ce <HAL_TIM_ConfigClockSource+0x14a>
 8013254:	2b50      	cmp	r3, #80	; 0x50
 8013256:	d873      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013258:	2b40      	cmp	r3, #64	; 0x40
 801325a:	d058      	beq.n	801330e <HAL_TIM_ConfigClockSource+0x18a>
 801325c:	2b40      	cmp	r3, #64	; 0x40
 801325e:	d86f      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013260:	2b30      	cmp	r3, #48	; 0x30
 8013262:	d064      	beq.n	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 8013264:	2b30      	cmp	r3, #48	; 0x30
 8013266:	d86b      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013268:	2b20      	cmp	r3, #32
 801326a:	d060      	beq.n	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 801326c:	2b20      	cmp	r3, #32
 801326e:	d867      	bhi.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
 8013270:	2b00      	cmp	r3, #0
 8013272:	d05c      	beq.n	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 8013274:	2b10      	cmp	r3, #16
 8013276:	d05a      	beq.n	801332e <HAL_TIM_ConfigClockSource+0x1aa>
 8013278:	e062      	b.n	8013340 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6818      	ldr	r0, [r3, #0]
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	6899      	ldr	r1, [r3, #8]
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	685a      	ldr	r2, [r3, #4]
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	f000 fc8b 	bl	8013ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	689b      	ldr	r3, [r3, #8]
 8013294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801329c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	68ba      	ldr	r2, [r7, #8]
 80132a4:	609a      	str	r2, [r3, #8]
      break;
 80132a6:	e04f      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6818      	ldr	r0, [r3, #0]
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	6899      	ldr	r1, [r3, #8]
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	685a      	ldr	r2, [r3, #4]
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	f000 fc74 	bl	8013ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	689a      	ldr	r2, [r3, #8]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80132ca:	609a      	str	r2, [r3, #8]
      break;
 80132cc:	e03c      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6818      	ldr	r0, [r3, #0]
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	6859      	ldr	r1, [r3, #4]
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	461a      	mov	r2, r3
 80132dc:	f000 fbe4 	bl	8013aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2150      	movs	r1, #80	; 0x50
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 fc3e 	bl	8013b68 <TIM_ITRx_SetConfig>
      break;
 80132ec:	e02c      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6818      	ldr	r0, [r3, #0]
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	6859      	ldr	r1, [r3, #4]
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	461a      	mov	r2, r3
 80132fc:	f000 fc03 	bl	8013b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2160      	movs	r1, #96	; 0x60
 8013306:	4618      	mov	r0, r3
 8013308:	f000 fc2e 	bl	8013b68 <TIM_ITRx_SetConfig>
      break;
 801330c:	e01c      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6818      	ldr	r0, [r3, #0]
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	6859      	ldr	r1, [r3, #4]
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	461a      	mov	r2, r3
 801331c:	f000 fbc4 	bl	8013aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2140      	movs	r1, #64	; 0x40
 8013326:	4618      	mov	r0, r3
 8013328:	f000 fc1e 	bl	8013b68 <TIM_ITRx_SetConfig>
      break;
 801332c:	e00c      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	4619      	mov	r1, r3
 8013338:	4610      	mov	r0, r2
 801333a:	f000 fc15 	bl	8013b68 <TIM_ITRx_SetConfig>
      break;
 801333e:	e003      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013340:	2301      	movs	r3, #1
 8013342:	73fb      	strb	r3, [r7, #15]
      break;
 8013344:	e000      	b.n	8013348 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2201      	movs	r2, #1
 801334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013358:	7bfb      	ldrb	r3, [r7, #15]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	ffceff88 	.word	0xffceff88
 8013368:	00100040 	.word	0x00100040
 801336c:	00100030 	.word	0x00100030
 8013370:	00100020 	.word	0x00100020

08013374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801337c:	bf00      	nop
 801337e:	370c      	adds	r7, #12
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013390:	bf00      	nop
 8013392:	370c      	adds	r7, #12
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80133a4:	bf00      	nop
 80133a6:	370c      	adds	r7, #12
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b085      	sub	sp, #20
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	4a46      	ldr	r2, [pc, #280]	; (80134dc <TIM_Base_SetConfig+0x12c>)
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d013      	beq.n	80133f0 <TIM_Base_SetConfig+0x40>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133ce:	d00f      	beq.n	80133f0 <TIM_Base_SetConfig+0x40>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	4a43      	ldr	r2, [pc, #268]	; (80134e0 <TIM_Base_SetConfig+0x130>)
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d00b      	beq.n	80133f0 <TIM_Base_SetConfig+0x40>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	4a42      	ldr	r2, [pc, #264]	; (80134e4 <TIM_Base_SetConfig+0x134>)
 80133dc:	4293      	cmp	r3, r2
 80133de:	d007      	beq.n	80133f0 <TIM_Base_SetConfig+0x40>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4a41      	ldr	r2, [pc, #260]	; (80134e8 <TIM_Base_SetConfig+0x138>)
 80133e4:	4293      	cmp	r3, r2
 80133e6:	d003      	beq.n	80133f0 <TIM_Base_SetConfig+0x40>
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4a40      	ldr	r2, [pc, #256]	; (80134ec <TIM_Base_SetConfig+0x13c>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d108      	bne.n	8013402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	4313      	orrs	r3, r2
 8013400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	4a35      	ldr	r2, [pc, #212]	; (80134dc <TIM_Base_SetConfig+0x12c>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d01f      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013410:	d01b      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	4a32      	ldr	r2, [pc, #200]	; (80134e0 <TIM_Base_SetConfig+0x130>)
 8013416:	4293      	cmp	r3, r2
 8013418:	d017      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	4a31      	ldr	r2, [pc, #196]	; (80134e4 <TIM_Base_SetConfig+0x134>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d013      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4a30      	ldr	r2, [pc, #192]	; (80134e8 <TIM_Base_SetConfig+0x138>)
 8013426:	4293      	cmp	r3, r2
 8013428:	d00f      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4a2f      	ldr	r2, [pc, #188]	; (80134ec <TIM_Base_SetConfig+0x13c>)
 801342e:	4293      	cmp	r3, r2
 8013430:	d00b      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4a2e      	ldr	r2, [pc, #184]	; (80134f0 <TIM_Base_SetConfig+0x140>)
 8013436:	4293      	cmp	r3, r2
 8013438:	d007      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4a2d      	ldr	r2, [pc, #180]	; (80134f4 <TIM_Base_SetConfig+0x144>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d003      	beq.n	801344a <TIM_Base_SetConfig+0x9a>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4a2c      	ldr	r2, [pc, #176]	; (80134f8 <TIM_Base_SetConfig+0x148>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d108      	bne.n	801345c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	68fa      	ldr	r2, [r7, #12]
 8013458:	4313      	orrs	r3, r2
 801345a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	695b      	ldr	r3, [r3, #20]
 8013466:	4313      	orrs	r3, r2
 8013468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	68fa      	ldr	r2, [r7, #12]
 801346e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	689a      	ldr	r2, [r3, #8]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	4a16      	ldr	r2, [pc, #88]	; (80134dc <TIM_Base_SetConfig+0x12c>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d00f      	beq.n	80134a8 <TIM_Base_SetConfig+0xf8>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	4a18      	ldr	r2, [pc, #96]	; (80134ec <TIM_Base_SetConfig+0x13c>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d00b      	beq.n	80134a8 <TIM_Base_SetConfig+0xf8>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4a17      	ldr	r2, [pc, #92]	; (80134f0 <TIM_Base_SetConfig+0x140>)
 8013494:	4293      	cmp	r3, r2
 8013496:	d007      	beq.n	80134a8 <TIM_Base_SetConfig+0xf8>
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	4a16      	ldr	r2, [pc, #88]	; (80134f4 <TIM_Base_SetConfig+0x144>)
 801349c:	4293      	cmp	r3, r2
 801349e:	d003      	beq.n	80134a8 <TIM_Base_SetConfig+0xf8>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	4a15      	ldr	r2, [pc, #84]	; (80134f8 <TIM_Base_SetConfig+0x148>)
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d103      	bne.n	80134b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	691a      	ldr	r2, [r3, #16]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2201      	movs	r2, #1
 80134b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	691b      	ldr	r3, [r3, #16]
 80134ba:	f003 0301 	and.w	r3, r3, #1
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d105      	bne.n	80134ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	691b      	ldr	r3, [r3, #16]
 80134c6:	f023 0201 	bic.w	r2, r3, #1
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	611a      	str	r2, [r3, #16]
  }
}
 80134ce:	bf00      	nop
 80134d0:	3714      	adds	r7, #20
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr
 80134da:	bf00      	nop
 80134dc:	40010000 	.word	0x40010000
 80134e0:	40000400 	.word	0x40000400
 80134e4:	40000800 	.word	0x40000800
 80134e8:	40000c00 	.word	0x40000c00
 80134ec:	40010400 	.word	0x40010400
 80134f0:	40014000 	.word	0x40014000
 80134f4:	40014400 	.word	0x40014400
 80134f8:	40014800 	.word	0x40014800

080134fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b087      	sub	sp, #28
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6a1b      	ldr	r3, [r3, #32]
 801350a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6a1b      	ldr	r3, [r3, #32]
 8013510:	f023 0201 	bic.w	r2, r3, #1
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	699b      	ldr	r3, [r3, #24]
 8013522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013524:	68fa      	ldr	r2, [r7, #12]
 8013526:	4b37      	ldr	r3, [pc, #220]	; (8013604 <TIM_OC1_SetConfig+0x108>)
 8013528:	4013      	ands	r3, r2
 801352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f023 0303 	bic.w	r3, r3, #3
 8013532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	4313      	orrs	r3, r2
 801353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	f023 0302 	bic.w	r3, r3, #2
 8013544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	697a      	ldr	r2, [r7, #20]
 801354c:	4313      	orrs	r3, r2
 801354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	4a2d      	ldr	r2, [pc, #180]	; (8013608 <TIM_OC1_SetConfig+0x10c>)
 8013554:	4293      	cmp	r3, r2
 8013556:	d00f      	beq.n	8013578 <TIM_OC1_SetConfig+0x7c>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4a2c      	ldr	r2, [pc, #176]	; (801360c <TIM_OC1_SetConfig+0x110>)
 801355c:	4293      	cmp	r3, r2
 801355e:	d00b      	beq.n	8013578 <TIM_OC1_SetConfig+0x7c>
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4a2b      	ldr	r2, [pc, #172]	; (8013610 <TIM_OC1_SetConfig+0x114>)
 8013564:	4293      	cmp	r3, r2
 8013566:	d007      	beq.n	8013578 <TIM_OC1_SetConfig+0x7c>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	4a2a      	ldr	r2, [pc, #168]	; (8013614 <TIM_OC1_SetConfig+0x118>)
 801356c:	4293      	cmp	r3, r2
 801356e:	d003      	beq.n	8013578 <TIM_OC1_SetConfig+0x7c>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4a29      	ldr	r2, [pc, #164]	; (8013618 <TIM_OC1_SetConfig+0x11c>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d10c      	bne.n	8013592 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	f023 0308 	bic.w	r3, r3, #8
 801357e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	697a      	ldr	r2, [r7, #20]
 8013586:	4313      	orrs	r3, r2
 8013588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	f023 0304 	bic.w	r3, r3, #4
 8013590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4a1c      	ldr	r2, [pc, #112]	; (8013608 <TIM_OC1_SetConfig+0x10c>)
 8013596:	4293      	cmp	r3, r2
 8013598:	d00f      	beq.n	80135ba <TIM_OC1_SetConfig+0xbe>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	4a1b      	ldr	r2, [pc, #108]	; (801360c <TIM_OC1_SetConfig+0x110>)
 801359e:	4293      	cmp	r3, r2
 80135a0:	d00b      	beq.n	80135ba <TIM_OC1_SetConfig+0xbe>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	4a1a      	ldr	r2, [pc, #104]	; (8013610 <TIM_OC1_SetConfig+0x114>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d007      	beq.n	80135ba <TIM_OC1_SetConfig+0xbe>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4a19      	ldr	r2, [pc, #100]	; (8013614 <TIM_OC1_SetConfig+0x118>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d003      	beq.n	80135ba <TIM_OC1_SetConfig+0xbe>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a18      	ldr	r2, [pc, #96]	; (8013618 <TIM_OC1_SetConfig+0x11c>)
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d111      	bne.n	80135de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80135c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80135c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	695b      	ldr	r3, [r3, #20]
 80135ce:	693a      	ldr	r2, [r7, #16]
 80135d0:	4313      	orrs	r3, r2
 80135d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	699b      	ldr	r3, [r3, #24]
 80135d8:	693a      	ldr	r2, [r7, #16]
 80135da:	4313      	orrs	r3, r2
 80135dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	693a      	ldr	r2, [r7, #16]
 80135e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	685a      	ldr	r2, [r3, #4]
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	697a      	ldr	r2, [r7, #20]
 80135f6:	621a      	str	r2, [r3, #32]
}
 80135f8:	bf00      	nop
 80135fa:	371c      	adds	r7, #28
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	fffeff8f 	.word	0xfffeff8f
 8013608:	40010000 	.word	0x40010000
 801360c:	40010400 	.word	0x40010400
 8013610:	40014000 	.word	0x40014000
 8013614:	40014400 	.word	0x40014400
 8013618:	40014800 	.word	0x40014800

0801361c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801361c:	b480      	push	{r7}
 801361e:	b087      	sub	sp, #28
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6a1b      	ldr	r3, [r3, #32]
 801362a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6a1b      	ldr	r3, [r3, #32]
 8013630:	f023 0210 	bic.w	r2, r3, #16
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	699b      	ldr	r3, [r3, #24]
 8013642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	4b34      	ldr	r3, [pc, #208]	; (8013718 <TIM_OC2_SetConfig+0xfc>)
 8013648:	4013      	ands	r3, r2
 801364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	021b      	lsls	r3, r3, #8
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	4313      	orrs	r3, r2
 801365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	f023 0320 	bic.w	r3, r3, #32
 8013666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	011b      	lsls	r3, r3, #4
 801366e:	697a      	ldr	r2, [r7, #20]
 8013670:	4313      	orrs	r3, r2
 8013672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	4a29      	ldr	r2, [pc, #164]	; (801371c <TIM_OC2_SetConfig+0x100>)
 8013678:	4293      	cmp	r3, r2
 801367a:	d003      	beq.n	8013684 <TIM_OC2_SetConfig+0x68>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	4a28      	ldr	r2, [pc, #160]	; (8013720 <TIM_OC2_SetConfig+0x104>)
 8013680:	4293      	cmp	r3, r2
 8013682:	d10d      	bne.n	80136a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	68db      	ldr	r3, [r3, #12]
 8013690:	011b      	lsls	r3, r3, #4
 8013692:	697a      	ldr	r2, [r7, #20]
 8013694:	4313      	orrs	r3, r2
 8013696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801369e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	4a1e      	ldr	r2, [pc, #120]	; (801371c <TIM_OC2_SetConfig+0x100>)
 80136a4:	4293      	cmp	r3, r2
 80136a6:	d00f      	beq.n	80136c8 <TIM_OC2_SetConfig+0xac>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	4a1d      	ldr	r2, [pc, #116]	; (8013720 <TIM_OC2_SetConfig+0x104>)
 80136ac:	4293      	cmp	r3, r2
 80136ae:	d00b      	beq.n	80136c8 <TIM_OC2_SetConfig+0xac>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4a1c      	ldr	r2, [pc, #112]	; (8013724 <TIM_OC2_SetConfig+0x108>)
 80136b4:	4293      	cmp	r3, r2
 80136b6:	d007      	beq.n	80136c8 <TIM_OC2_SetConfig+0xac>
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	4a1b      	ldr	r2, [pc, #108]	; (8013728 <TIM_OC2_SetConfig+0x10c>)
 80136bc:	4293      	cmp	r3, r2
 80136be:	d003      	beq.n	80136c8 <TIM_OC2_SetConfig+0xac>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a1a      	ldr	r2, [pc, #104]	; (801372c <TIM_OC2_SetConfig+0x110>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d113      	bne.n	80136f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80136ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80136d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	693a      	ldr	r2, [r7, #16]
 80136e0:	4313      	orrs	r3, r2
 80136e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	699b      	ldr	r3, [r3, #24]
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	693a      	ldr	r2, [r7, #16]
 80136ec:	4313      	orrs	r3, r2
 80136ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	693a      	ldr	r2, [r7, #16]
 80136f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	68fa      	ldr	r2, [r7, #12]
 80136fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	685a      	ldr	r2, [r3, #4]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	697a      	ldr	r2, [r7, #20]
 8013708:	621a      	str	r2, [r3, #32]
}
 801370a:	bf00      	nop
 801370c:	371c      	adds	r7, #28
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop
 8013718:	feff8fff 	.word	0xfeff8fff
 801371c:	40010000 	.word	0x40010000
 8013720:	40010400 	.word	0x40010400
 8013724:	40014000 	.word	0x40014000
 8013728:	40014400 	.word	0x40014400
 801372c:	40014800 	.word	0x40014800

08013730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013730:	b480      	push	{r7}
 8013732:	b087      	sub	sp, #28
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6a1b      	ldr	r3, [r3, #32]
 8013744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	69db      	ldr	r3, [r3, #28]
 8013756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013758:	68fa      	ldr	r2, [r7, #12]
 801375a:	4b33      	ldr	r3, [pc, #204]	; (8013828 <TIM_OC3_SetConfig+0xf8>)
 801375c:	4013      	ands	r3, r2
 801375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f023 0303 	bic.w	r3, r3, #3
 8013766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	4313      	orrs	r3, r2
 8013770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	021b      	lsls	r3, r3, #8
 8013780:	697a      	ldr	r2, [r7, #20]
 8013782:	4313      	orrs	r3, r2
 8013784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4a28      	ldr	r2, [pc, #160]	; (801382c <TIM_OC3_SetConfig+0xfc>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d003      	beq.n	8013796 <TIM_OC3_SetConfig+0x66>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	4a27      	ldr	r2, [pc, #156]	; (8013830 <TIM_OC3_SetConfig+0x100>)
 8013792:	4293      	cmp	r3, r2
 8013794:	d10d      	bne.n	80137b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801379c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	021b      	lsls	r3, r3, #8
 80137a4:	697a      	ldr	r2, [r7, #20]
 80137a6:	4313      	orrs	r3, r2
 80137a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4a1d      	ldr	r2, [pc, #116]	; (801382c <TIM_OC3_SetConfig+0xfc>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d00f      	beq.n	80137da <TIM_OC3_SetConfig+0xaa>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	4a1c      	ldr	r2, [pc, #112]	; (8013830 <TIM_OC3_SetConfig+0x100>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d00b      	beq.n	80137da <TIM_OC3_SetConfig+0xaa>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	4a1b      	ldr	r2, [pc, #108]	; (8013834 <TIM_OC3_SetConfig+0x104>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d007      	beq.n	80137da <TIM_OC3_SetConfig+0xaa>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a1a      	ldr	r2, [pc, #104]	; (8013838 <TIM_OC3_SetConfig+0x108>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d003      	beq.n	80137da <TIM_OC3_SetConfig+0xaa>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4a19      	ldr	r2, [pc, #100]	; (801383c <TIM_OC3_SetConfig+0x10c>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d113      	bne.n	8013802 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80137e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	695b      	ldr	r3, [r3, #20]
 80137ee:	011b      	lsls	r3, r3, #4
 80137f0:	693a      	ldr	r2, [r7, #16]
 80137f2:	4313      	orrs	r3, r2
 80137f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	699b      	ldr	r3, [r3, #24]
 80137fa:	011b      	lsls	r3, r3, #4
 80137fc:	693a      	ldr	r2, [r7, #16]
 80137fe:	4313      	orrs	r3, r2
 8013800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	693a      	ldr	r2, [r7, #16]
 8013806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	68fa      	ldr	r2, [r7, #12]
 801380c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	685a      	ldr	r2, [r3, #4]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	697a      	ldr	r2, [r7, #20]
 801381a:	621a      	str	r2, [r3, #32]
}
 801381c:	bf00      	nop
 801381e:	371c      	adds	r7, #28
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr
 8013828:	fffeff8f 	.word	0xfffeff8f
 801382c:	40010000 	.word	0x40010000
 8013830:	40010400 	.word	0x40010400
 8013834:	40014000 	.word	0x40014000
 8013838:	40014400 	.word	0x40014400
 801383c:	40014800 	.word	0x40014800

08013840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013840:	b480      	push	{r7}
 8013842:	b087      	sub	sp, #28
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6a1b      	ldr	r3, [r3, #32]
 801384e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6a1b      	ldr	r3, [r3, #32]
 8013854:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	69db      	ldr	r3, [r3, #28]
 8013866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013868:	68fa      	ldr	r2, [r7, #12]
 801386a:	4b24      	ldr	r3, [pc, #144]	; (80138fc <TIM_OC4_SetConfig+0xbc>)
 801386c:	4013      	ands	r3, r2
 801386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	021b      	lsls	r3, r3, #8
 801387e:	68fa      	ldr	r2, [r7, #12]
 8013880:	4313      	orrs	r3, r2
 8013882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801388a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	689b      	ldr	r3, [r3, #8]
 8013890:	031b      	lsls	r3, r3, #12
 8013892:	693a      	ldr	r2, [r7, #16]
 8013894:	4313      	orrs	r3, r2
 8013896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	4a19      	ldr	r2, [pc, #100]	; (8013900 <TIM_OC4_SetConfig+0xc0>)
 801389c:	4293      	cmp	r3, r2
 801389e:	d00f      	beq.n	80138c0 <TIM_OC4_SetConfig+0x80>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	4a18      	ldr	r2, [pc, #96]	; (8013904 <TIM_OC4_SetConfig+0xc4>)
 80138a4:	4293      	cmp	r3, r2
 80138a6:	d00b      	beq.n	80138c0 <TIM_OC4_SetConfig+0x80>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	4a17      	ldr	r2, [pc, #92]	; (8013908 <TIM_OC4_SetConfig+0xc8>)
 80138ac:	4293      	cmp	r3, r2
 80138ae:	d007      	beq.n	80138c0 <TIM_OC4_SetConfig+0x80>
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	4a16      	ldr	r2, [pc, #88]	; (801390c <TIM_OC4_SetConfig+0xcc>)
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d003      	beq.n	80138c0 <TIM_OC4_SetConfig+0x80>
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	4a15      	ldr	r2, [pc, #84]	; (8013910 <TIM_OC4_SetConfig+0xd0>)
 80138bc:	4293      	cmp	r3, r2
 80138be:	d109      	bne.n	80138d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80138c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	695b      	ldr	r3, [r3, #20]
 80138cc:	019b      	lsls	r3, r3, #6
 80138ce:	697a      	ldr	r2, [r7, #20]
 80138d0:	4313      	orrs	r3, r2
 80138d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	697a      	ldr	r2, [r7, #20]
 80138d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	68fa      	ldr	r2, [r7, #12]
 80138de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	685a      	ldr	r2, [r3, #4]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	693a      	ldr	r2, [r7, #16]
 80138ec:	621a      	str	r2, [r3, #32]
}
 80138ee:	bf00      	nop
 80138f0:	371c      	adds	r7, #28
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop
 80138fc:	feff8fff 	.word	0xfeff8fff
 8013900:	40010000 	.word	0x40010000
 8013904:	40010400 	.word	0x40010400
 8013908:	40014000 	.word	0x40014000
 801390c:	40014400 	.word	0x40014400
 8013910:	40014800 	.word	0x40014800

08013914 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013914:	b480      	push	{r7}
 8013916:	b087      	sub	sp, #28
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a1b      	ldr	r3, [r3, #32]
 8013922:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6a1b      	ldr	r3, [r3, #32]
 8013928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801393c:	68fa      	ldr	r2, [r7, #12]
 801393e:	4b21      	ldr	r3, [pc, #132]	; (80139c4 <TIM_OC5_SetConfig+0xb0>)
 8013940:	4013      	ands	r3, r2
 8013942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	4313      	orrs	r3, r2
 801394c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013954:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	689b      	ldr	r3, [r3, #8]
 801395a:	041b      	lsls	r3, r3, #16
 801395c:	693a      	ldr	r2, [r7, #16]
 801395e:	4313      	orrs	r3, r2
 8013960:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4a18      	ldr	r2, [pc, #96]	; (80139c8 <TIM_OC5_SetConfig+0xb4>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d00f      	beq.n	801398a <TIM_OC5_SetConfig+0x76>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	4a17      	ldr	r2, [pc, #92]	; (80139cc <TIM_OC5_SetConfig+0xb8>)
 801396e:	4293      	cmp	r3, r2
 8013970:	d00b      	beq.n	801398a <TIM_OC5_SetConfig+0x76>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4a16      	ldr	r2, [pc, #88]	; (80139d0 <TIM_OC5_SetConfig+0xbc>)
 8013976:	4293      	cmp	r3, r2
 8013978:	d007      	beq.n	801398a <TIM_OC5_SetConfig+0x76>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	4a15      	ldr	r2, [pc, #84]	; (80139d4 <TIM_OC5_SetConfig+0xc0>)
 801397e:	4293      	cmp	r3, r2
 8013980:	d003      	beq.n	801398a <TIM_OC5_SetConfig+0x76>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	4a14      	ldr	r2, [pc, #80]	; (80139d8 <TIM_OC5_SetConfig+0xc4>)
 8013986:	4293      	cmp	r3, r2
 8013988:	d109      	bne.n	801399e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	695b      	ldr	r3, [r3, #20]
 8013996:	021b      	lsls	r3, r3, #8
 8013998:	697a      	ldr	r2, [r7, #20]
 801399a:	4313      	orrs	r3, r2
 801399c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	697a      	ldr	r2, [r7, #20]
 80139a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	68fa      	ldr	r2, [r7, #12]
 80139a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	685a      	ldr	r2, [r3, #4]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	693a      	ldr	r2, [r7, #16]
 80139b6:	621a      	str	r2, [r3, #32]
}
 80139b8:	bf00      	nop
 80139ba:	371c      	adds	r7, #28
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr
 80139c4:	fffeff8f 	.word	0xfffeff8f
 80139c8:	40010000 	.word	0x40010000
 80139cc:	40010400 	.word	0x40010400
 80139d0:	40014000 	.word	0x40014000
 80139d4:	40014400 	.word	0x40014400
 80139d8:	40014800 	.word	0x40014800

080139dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80139dc:	b480      	push	{r7}
 80139de:	b087      	sub	sp, #28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6a1b      	ldr	r3, [r3, #32]
 80139ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a1b      	ldr	r3, [r3, #32]
 80139f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	4b22      	ldr	r3, [pc, #136]	; (8013a90 <TIM_OC6_SetConfig+0xb4>)
 8013a08:	4013      	ands	r3, r2
 8013a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	021b      	lsls	r3, r3, #8
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	4313      	orrs	r3, r2
 8013a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	689b      	ldr	r3, [r3, #8]
 8013a24:	051b      	lsls	r3, r3, #20
 8013a26:	693a      	ldr	r2, [r7, #16]
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	4a19      	ldr	r2, [pc, #100]	; (8013a94 <TIM_OC6_SetConfig+0xb8>)
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d00f      	beq.n	8013a54 <TIM_OC6_SetConfig+0x78>
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	4a18      	ldr	r2, [pc, #96]	; (8013a98 <TIM_OC6_SetConfig+0xbc>)
 8013a38:	4293      	cmp	r3, r2
 8013a3a:	d00b      	beq.n	8013a54 <TIM_OC6_SetConfig+0x78>
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	4a17      	ldr	r2, [pc, #92]	; (8013a9c <TIM_OC6_SetConfig+0xc0>)
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d007      	beq.n	8013a54 <TIM_OC6_SetConfig+0x78>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	4a16      	ldr	r2, [pc, #88]	; (8013aa0 <TIM_OC6_SetConfig+0xc4>)
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d003      	beq.n	8013a54 <TIM_OC6_SetConfig+0x78>
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	4a15      	ldr	r2, [pc, #84]	; (8013aa4 <TIM_OC6_SetConfig+0xc8>)
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d109      	bne.n	8013a68 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	695b      	ldr	r3, [r3, #20]
 8013a60:	029b      	lsls	r3, r3, #10
 8013a62:	697a      	ldr	r2, [r7, #20]
 8013a64:	4313      	orrs	r3, r2
 8013a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	697a      	ldr	r2, [r7, #20]
 8013a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	685a      	ldr	r2, [r3, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	693a      	ldr	r2, [r7, #16]
 8013a80:	621a      	str	r2, [r3, #32]
}
 8013a82:	bf00      	nop
 8013a84:	371c      	adds	r7, #28
 8013a86:	46bd      	mov	sp, r7
 8013a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8c:	4770      	bx	lr
 8013a8e:	bf00      	nop
 8013a90:	feff8fff 	.word	0xfeff8fff
 8013a94:	40010000 	.word	0x40010000
 8013a98:	40010400 	.word	0x40010400
 8013a9c:	40014000 	.word	0x40014000
 8013aa0:	40014400 	.word	0x40014400
 8013aa4:	40014800 	.word	0x40014800

08013aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b087      	sub	sp, #28
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	6a1b      	ldr	r3, [r3, #32]
 8013ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	6a1b      	ldr	r3, [r3, #32]
 8013abe:	f023 0201 	bic.w	r2, r3, #1
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	699b      	ldr	r3, [r3, #24]
 8013aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	011b      	lsls	r3, r3, #4
 8013ad8:	693a      	ldr	r2, [r7, #16]
 8013ada:	4313      	orrs	r3, r2
 8013adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	f023 030a 	bic.w	r3, r3, #10
 8013ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	693a      	ldr	r2, [r7, #16]
 8013af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	697a      	ldr	r2, [r7, #20]
 8013af8:	621a      	str	r2, [r3, #32]
}
 8013afa:	bf00      	nop
 8013afc:	371c      	adds	r7, #28
 8013afe:	46bd      	mov	sp, r7
 8013b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b04:	4770      	bx	lr

08013b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b06:	b480      	push	{r7}
 8013b08:	b087      	sub	sp, #28
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	60f8      	str	r0, [r7, #12]
 8013b0e:	60b9      	str	r1, [r7, #8]
 8013b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6a1b      	ldr	r3, [r3, #32]
 8013b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6a1b      	ldr	r3, [r3, #32]
 8013b1c:	f023 0210 	bic.w	r2, r3, #16
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	699b      	ldr	r3, [r3, #24]
 8013b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	031b      	lsls	r3, r3, #12
 8013b36:	693a      	ldr	r2, [r7, #16]
 8013b38:	4313      	orrs	r3, r2
 8013b3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013b42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	011b      	lsls	r3, r3, #4
 8013b48:	697a      	ldr	r2, [r7, #20]
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	693a      	ldr	r2, [r7, #16]
 8013b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	621a      	str	r2, [r3, #32]
}
 8013b5a:	bf00      	nop
 8013b5c:	371c      	adds	r7, #28
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b64:	4770      	bx	lr
	...

08013b68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b085      	sub	sp, #20
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	689b      	ldr	r3, [r3, #8]
 8013b76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	4b09      	ldr	r3, [pc, #36]	; (8013ba0 <TIM_ITRx_SetConfig+0x38>)
 8013b7c:	4013      	ands	r3, r2
 8013b7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013b80:	683a      	ldr	r2, [r7, #0]
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	4313      	orrs	r3, r2
 8013b86:	f043 0307 	orr.w	r3, r3, #7
 8013b8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	68fa      	ldr	r2, [r7, #12]
 8013b90:	609a      	str	r2, [r3, #8]
}
 8013b92:	bf00      	nop
 8013b94:	3714      	adds	r7, #20
 8013b96:	46bd      	mov	sp, r7
 8013b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop
 8013ba0:	ffcfff8f 	.word	0xffcfff8f

08013ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b087      	sub	sp, #28
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	689b      	ldr	r3, [r3, #8]
 8013bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	021a      	lsls	r2, r3, #8
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	431a      	orrs	r2, r3
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	4313      	orrs	r3, r2
 8013bcc:	697a      	ldr	r2, [r7, #20]
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	697a      	ldr	r2, [r7, #20]
 8013bd6:	609a      	str	r2, [r3, #8]
}
 8013bd8:	bf00      	nop
 8013bda:	371c      	adds	r7, #28
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr

08013be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b087      	sub	sp, #28
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	f003 031f 	and.w	r3, r3, #31
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8013bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	6a1a      	ldr	r2, [r3, #32]
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	43db      	mvns	r3, r3
 8013c06:	401a      	ands	r2, r3
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	6a1a      	ldr	r2, [r3, #32]
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	f003 031f 	and.w	r3, r3, #31
 8013c16:	6879      	ldr	r1, [r7, #4]
 8013c18:	fa01 f303 	lsl.w	r3, r1, r3
 8013c1c:	431a      	orrs	r2, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	621a      	str	r2, [r3, #32]
}
 8013c22:	bf00      	nop
 8013c24:	371c      	adds	r7, #28
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr
	...

08013c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013c30:	b480      	push	{r7}
 8013c32:	b085      	sub	sp, #20
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d101      	bne.n	8013c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013c44:	2302      	movs	r3, #2
 8013c46:	e06d      	b.n	8013d24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2202      	movs	r2, #2
 8013c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	689b      	ldr	r3, [r3, #8]
 8013c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	4a30      	ldr	r2, [pc, #192]	; (8013d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	d004      	beq.n	8013c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	4a2f      	ldr	r2, [pc, #188]	; (8013d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d108      	bne.n	8013c8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013c82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	68fa      	ldr	r2, [r7, #12]
 8013c8a:	4313      	orrs	r3, r2
 8013c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	68fa      	ldr	r2, [r7, #12]
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	4a20      	ldr	r2, [pc, #128]	; (8013d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013cae:	4293      	cmp	r3, r2
 8013cb0:	d022      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cba:	d01d      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	4a1d      	ldr	r2, [pc, #116]	; (8013d38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d018      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4a1c      	ldr	r2, [pc, #112]	; (8013d3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013ccc:	4293      	cmp	r3, r2
 8013cce:	d013      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	4a1a      	ldr	r2, [pc, #104]	; (8013d40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013cd6:	4293      	cmp	r3, r2
 8013cd8:	d00e      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4a15      	ldr	r2, [pc, #84]	; (8013d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	d009      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	4a16      	ldr	r2, [pc, #88]	; (8013d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013cea:	4293      	cmp	r3, r2
 8013cec:	d004      	beq.n	8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4a15      	ldr	r2, [pc, #84]	; (8013d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d10c      	bne.n	8013d12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	689b      	ldr	r3, [r3, #8]
 8013d04:	68ba      	ldr	r2, [r7, #8]
 8013d06:	4313      	orrs	r3, r2
 8013d08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	68ba      	ldr	r2, [r7, #8]
 8013d10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2201      	movs	r2, #1
 8013d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3714      	adds	r7, #20
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr
 8013d30:	40010000 	.word	0x40010000
 8013d34:	40010400 	.word	0x40010400
 8013d38:	40000400 	.word	0x40000400
 8013d3c:	40000800 	.word	0x40000800
 8013d40:	40000c00 	.word	0x40000c00
 8013d44:	40001800 	.word	0x40001800
 8013d48:	40014000 	.word	0x40014000

08013d4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b085      	sub	sp, #20
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013d56:	2300      	movs	r3, #0
 8013d58:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d101      	bne.n	8013d68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013d64:	2302      	movs	r3, #2
 8013d66:	e065      	b.n	8013e34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	4313      	orrs	r3, r2
 8013d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	4313      	orrs	r3, r2
 8013d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4313      	orrs	r3, r2
 8013da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	4313      	orrs	r3, r2
 8013db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	695b      	ldr	r3, [r3, #20]
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dce:	4313      	orrs	r3, r2
 8013dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	699b      	ldr	r3, [r3, #24]
 8013ddc:	041b      	lsls	r3, r3, #16
 8013dde:	4313      	orrs	r3, r2
 8013de0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4a16      	ldr	r2, [pc, #88]	; (8013e40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d004      	beq.n	8013df6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4a14      	ldr	r2, [pc, #80]	; (8013e44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d115      	bne.n	8013e22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e00:	051b      	lsls	r3, r3, #20
 8013e02:	4313      	orrs	r3, r2
 8013e04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	69db      	ldr	r3, [r3, #28]
 8013e10:	4313      	orrs	r3, r2
 8013e12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	6a1b      	ldr	r3, [r3, #32]
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	68fa      	ldr	r2, [r7, #12]
 8013e28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013e32:	2300      	movs	r3, #0
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3714      	adds	r7, #20
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr
 8013e40:	40010000 	.word	0x40010000
 8013e44:	40010400 	.word	0x40010400

08013e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013e50:	bf00      	nop
 8013e52:	370c      	adds	r7, #12
 8013e54:	46bd      	mov	sp, r7
 8013e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5a:	4770      	bx	lr

08013e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013e64:	bf00      	nop
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013e70:	b480      	push	{r7}
 8013e72:	b083      	sub	sp, #12
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013e78:	bf00      	nop
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013e92:	2301      	movs	r3, #1
 8013e94:	e042      	b.n	8013f1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d106      	bne.n	8013eae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7f1 f8c1 	bl	8005030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2224      	movs	r2, #36	; 0x24
 8013eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f022 0201 	bic.w	r2, r2, #1
 8013ec4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d002      	beq.n	8013ed4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f001 fbc2 	bl	8015658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f000 fe57 	bl	8014b88 <UART_SetConfig>
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d101      	bne.n	8013ee4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e01b      	b.n	8013f1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	685a      	ldr	r2, [r3, #4]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	689a      	ldr	r2, [r3, #8]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f042 0201 	orr.w	r2, r2, #1
 8013f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f001 fc41 	bl	801579c <UART_CheckIdleState>
 8013f1a:	4603      	mov	r3, r0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b08a      	sub	sp, #40	; 0x28
 8013f28:	af02      	add	r7, sp, #8
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	603b      	str	r3, [r7, #0]
 8013f30:	4613      	mov	r3, r2
 8013f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f3a:	2b20      	cmp	r3, #32
 8013f3c:	d17b      	bne.n	8014036 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d002      	beq.n	8013f4a <HAL_UART_Transmit+0x26>
 8013f44:	88fb      	ldrh	r3, [r7, #6]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d101      	bne.n	8013f4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e074      	b.n	8014038 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2200      	movs	r2, #0
 8013f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2221      	movs	r2, #33	; 0x21
 8013f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013f5e:	f7f1 fcb5 	bl	80058cc <HAL_GetTick>
 8013f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	88fa      	ldrh	r2, [r7, #6]
 8013f68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	88fa      	ldrh	r2, [r7, #6]
 8013f70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	689b      	ldr	r3, [r3, #8]
 8013f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f7c:	d108      	bne.n	8013f90 <HAL_UART_Transmit+0x6c>
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d104      	bne.n	8013f90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013f86:	2300      	movs	r3, #0
 8013f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	61bb      	str	r3, [r7, #24]
 8013f8e:	e003      	b.n	8013f98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f94:	2300      	movs	r3, #0
 8013f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013f98:	e030      	b.n	8013ffc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	9300      	str	r3, [sp, #0]
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	2180      	movs	r1, #128	; 0x80
 8013fa4:	68f8      	ldr	r0, [r7, #12]
 8013fa6:	f001 fca3 	bl	80158f0 <UART_WaitOnFlagUntilTimeout>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d005      	beq.n	8013fbc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2220      	movs	r2, #32
 8013fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013fb8:	2303      	movs	r3, #3
 8013fba:	e03d      	b.n	8014038 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d10b      	bne.n	8013fda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	881b      	ldrh	r3, [r3, #0]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013fd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013fd2:	69bb      	ldr	r3, [r7, #24]
 8013fd4:	3302      	adds	r3, #2
 8013fd6:	61bb      	str	r3, [r7, #24]
 8013fd8:	e007      	b.n	8013fea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	781a      	ldrb	r2, [r3, #0]
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	3b01      	subs	r3, #1
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014002:	b29b      	uxth	r3, r3
 8014004:	2b00      	cmp	r3, #0
 8014006:	d1c8      	bne.n	8013f9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	2200      	movs	r2, #0
 8014010:	2140      	movs	r1, #64	; 0x40
 8014012:	68f8      	ldr	r0, [r7, #12]
 8014014:	f001 fc6c 	bl	80158f0 <UART_WaitOnFlagUntilTimeout>
 8014018:	4603      	mov	r3, r0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d005      	beq.n	801402a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2220      	movs	r2, #32
 8014022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8014026:	2303      	movs	r3, #3
 8014028:	e006      	b.n	8014038 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	2220      	movs	r2, #32
 801402e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8014032:	2300      	movs	r3, #0
 8014034:	e000      	b.n	8014038 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014036:	2302      	movs	r3, #2
  }
}
 8014038:	4618      	mov	r0, r3
 801403a:	3720      	adds	r7, #32
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b08a      	sub	sp, #40	; 0x28
 8014044:	af02      	add	r7, sp, #8
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	603b      	str	r3, [r7, #0]
 801404c:	4613      	mov	r3, r2
 801404e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014056:	2b20      	cmp	r3, #32
 8014058:	f040 80b5 	bne.w	80141c6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d002      	beq.n	8014068 <HAL_UART_Receive+0x28>
 8014062:	88fb      	ldrh	r3, [r7, #6]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d101      	bne.n	801406c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014068:	2301      	movs	r3, #1
 801406a:	e0ad      	b.n	80141c8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	2200      	movs	r2, #0
 8014070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2222      	movs	r2, #34	; 0x22
 8014078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014082:	f7f1 fc23 	bl	80058cc <HAL_GetTick>
 8014086:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	88fa      	ldrh	r2, [r7, #6]
 801408c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	88fa      	ldrh	r2, [r7, #6]
 8014094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	689b      	ldr	r3, [r3, #8]
 801409c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140a0:	d10e      	bne.n	80140c0 <HAL_UART_Receive+0x80>
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	691b      	ldr	r3, [r3, #16]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d105      	bne.n	80140b6 <HAL_UART_Receive+0x76>
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80140b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140b4:	e02d      	b.n	8014112 <HAL_UART_Receive+0xd2>
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	22ff      	movs	r2, #255	; 0xff
 80140ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140be:	e028      	b.n	8014112 <HAL_UART_Receive+0xd2>
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	689b      	ldr	r3, [r3, #8]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d10d      	bne.n	80140e4 <HAL_UART_Receive+0xa4>
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	691b      	ldr	r3, [r3, #16]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d104      	bne.n	80140da <HAL_UART_Receive+0x9a>
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	22ff      	movs	r2, #255	; 0xff
 80140d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140d8:	e01b      	b.n	8014112 <HAL_UART_Receive+0xd2>
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	227f      	movs	r2, #127	; 0x7f
 80140de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140e2:	e016      	b.n	8014112 <HAL_UART_Receive+0xd2>
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	689b      	ldr	r3, [r3, #8]
 80140e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80140ec:	d10d      	bne.n	801410a <HAL_UART_Receive+0xca>
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	691b      	ldr	r3, [r3, #16]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d104      	bne.n	8014100 <HAL_UART_Receive+0xc0>
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	227f      	movs	r2, #127	; 0x7f
 80140fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140fe:	e008      	b.n	8014112 <HAL_UART_Receive+0xd2>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	223f      	movs	r2, #63	; 0x3f
 8014104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014108:	e003      	b.n	8014112 <HAL_UART_Receive+0xd2>
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2200      	movs	r2, #0
 801410e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014118:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	689b      	ldr	r3, [r3, #8]
 801411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014122:	d108      	bne.n	8014136 <HAL_UART_Receive+0xf6>
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	691b      	ldr	r3, [r3, #16]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d104      	bne.n	8014136 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801412c:	2300      	movs	r3, #0
 801412e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	61bb      	str	r3, [r7, #24]
 8014134:	e003      	b.n	801413e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801413a:	2300      	movs	r3, #0
 801413c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801413e:	e036      	b.n	80141ae <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	2200      	movs	r2, #0
 8014148:	2120      	movs	r1, #32
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f001 fbd0 	bl	80158f0 <UART_WaitOnFlagUntilTimeout>
 8014150:	4603      	mov	r3, r0
 8014152:	2b00      	cmp	r3, #0
 8014154:	d005      	beq.n	8014162 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2220      	movs	r2, #32
 801415a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801415e:	2303      	movs	r3, #3
 8014160:	e032      	b.n	80141c8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d10c      	bne.n	8014182 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801416e:	b29a      	uxth	r2, r3
 8014170:	8a7b      	ldrh	r3, [r7, #18]
 8014172:	4013      	ands	r3, r2
 8014174:	b29a      	uxth	r2, r3
 8014176:	69bb      	ldr	r3, [r7, #24]
 8014178:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801417a:	69bb      	ldr	r3, [r7, #24]
 801417c:	3302      	adds	r3, #2
 801417e:	61bb      	str	r3, [r7, #24]
 8014180:	e00c      	b.n	801419c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014188:	b2da      	uxtb	r2, r3
 801418a:	8a7b      	ldrh	r3, [r7, #18]
 801418c:	b2db      	uxtb	r3, r3
 801418e:	4013      	ands	r3, r2
 8014190:	b2da      	uxtb	r2, r3
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	3301      	adds	r3, #1
 801419a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	3b01      	subs	r3, #1
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d1c2      	bne.n	8014140 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2220      	movs	r2, #32
 80141be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80141c2:	2300      	movs	r3, #0
 80141c4:	e000      	b.n	80141c8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80141c6:	2302      	movs	r3, #2
  }
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3720      	adds	r7, #32
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b08a      	sub	sp, #40	; 0x28
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	4613      	mov	r3, r2
 80141dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141e4:	2b20      	cmp	r3, #32
 80141e6:	d137      	bne.n	8014258 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d002      	beq.n	80141f4 <HAL_UART_Receive_IT+0x24>
 80141ee:	88fb      	ldrh	r3, [r7, #6]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d101      	bne.n	80141f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80141f4:	2301      	movs	r3, #1
 80141f6:	e030      	b.n	801425a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	2200      	movs	r2, #0
 80141fc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	4a18      	ldr	r2, [pc, #96]	; (8014264 <HAL_UART_Receive_IT+0x94>)
 8014204:	4293      	cmp	r3, r2
 8014206:	d01f      	beq.n	8014248 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014212:	2b00      	cmp	r3, #0
 8014214:	d018      	beq.n	8014248 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	e853 3f00 	ldrex	r3, [r3]
 8014222:	613b      	str	r3, [r7, #16]
   return(result);
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801422a:	627b      	str	r3, [r7, #36]	; 0x24
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	461a      	mov	r2, r3
 8014232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014234:	623b      	str	r3, [r7, #32]
 8014236:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014238:	69f9      	ldr	r1, [r7, #28]
 801423a:	6a3a      	ldr	r2, [r7, #32]
 801423c:	e841 2300 	strex	r3, r2, [r1]
 8014240:	61bb      	str	r3, [r7, #24]
   return(result);
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d1e6      	bne.n	8014216 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014248:	88fb      	ldrh	r3, [r7, #6]
 801424a:	461a      	mov	r2, r3
 801424c:	68b9      	ldr	r1, [r7, #8]
 801424e:	68f8      	ldr	r0, [r7, #12]
 8014250:	f001 fbbc 	bl	80159cc <UART_Start_Receive_IT>
 8014254:	4603      	mov	r3, r0
 8014256:	e000      	b.n	801425a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014258:	2302      	movs	r3, #2
  }
}
 801425a:	4618      	mov	r0, r3
 801425c:	3728      	adds	r7, #40	; 0x28
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	58000c00 	.word	0x58000c00

08014268 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b09a      	sub	sp, #104	; 0x68
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014278:	e853 3f00 	ldrex	r3, [r3]
 801427c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014284:	667b      	str	r3, [r7, #100]	; 0x64
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	461a      	mov	r2, r3
 801428c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801428e:	657b      	str	r3, [r7, #84]	; 0x54
 8014290:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014296:	e841 2300 	strex	r3, r2, [r1]
 801429a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d1e6      	bne.n	8014270 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	3308      	adds	r3, #8
 80142a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ac:	e853 3f00 	ldrex	r3, [r3]
 80142b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80142b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142b4:	4b46      	ldr	r3, [pc, #280]	; (80143d0 <HAL_UART_AbortReceive+0x168>)
 80142b6:	4013      	ands	r3, r2
 80142b8:	663b      	str	r3, [r7, #96]	; 0x60
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	3308      	adds	r3, #8
 80142c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142c2:	643a      	str	r2, [r7, #64]	; 0x40
 80142c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142ca:	e841 2300 	strex	r3, r2, [r1]
 80142ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80142d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d1e5      	bne.n	80142a2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142da:	2b01      	cmp	r3, #1
 80142dc:	d118      	bne.n	8014310 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142e4:	6a3b      	ldr	r3, [r7, #32]
 80142e6:	e853 3f00 	ldrex	r3, [r3]
 80142ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	f023 0310 	bic.w	r3, r3, #16
 80142f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	461a      	mov	r2, r3
 80142fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014304:	e841 2300 	strex	r3, r2, [r1]
 8014308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1e6      	bne.n	80142de <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801431a:	2b40      	cmp	r3, #64	; 0x40
 801431c:	d13b      	bne.n	8014396 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	3308      	adds	r3, #8
 8014324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	e853 3f00 	ldrex	r3, [r3]
 801432c:	60bb      	str	r3, [r7, #8]
   return(result);
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014334:	65bb      	str	r3, [r7, #88]	; 0x58
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	3308      	adds	r3, #8
 801433c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801433e:	61ba      	str	r2, [r7, #24]
 8014340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014342:	6979      	ldr	r1, [r7, #20]
 8014344:	69ba      	ldr	r2, [r7, #24]
 8014346:	e841 2300 	strex	r3, r2, [r1]
 801434a:	613b      	str	r3, [r7, #16]
   return(result);
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d1e5      	bne.n	801431e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014358:	2b00      	cmp	r3, #0
 801435a:	d01c      	beq.n	8014396 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014362:	2200      	movs	r2, #0
 8014364:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801436c:	4618      	mov	r0, r3
 801436e:	f7f4 fa13 	bl	8008798 <HAL_DMA_Abort>
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d00e      	beq.n	8014396 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801437e:	4618      	mov	r0, r3
 8014380:	f7f5 fea6 	bl	800a0d0 <HAL_DMA_GetError>
 8014384:	4603      	mov	r3, r0
 8014386:	2b20      	cmp	r3, #32
 8014388:	d105      	bne.n	8014396 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2210      	movs	r2, #16
 801438e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014392:	2303      	movs	r3, #3
 8014394:	e017      	b.n	80143c6 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2200      	movs	r2, #0
 801439a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	220f      	movs	r2, #15
 80143a4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	699a      	ldr	r2, [r3, #24]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f042 0208 	orr.w	r2, r2, #8
 80143b4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2220      	movs	r2, #32
 80143ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3768      	adds	r7, #104	; 0x68
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	effffffe 	.word	0xeffffffe

080143d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b0ba      	sub	sp, #232	; 0xe8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	69db      	ldr	r3, [r3, #28]
 80143e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80143fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80143fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8014402:	4013      	ands	r3, r2
 8014404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801440c:	2b00      	cmp	r3, #0
 801440e:	d11b      	bne.n	8014448 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014414:	f003 0320 	and.w	r3, r3, #32
 8014418:	2b00      	cmp	r3, #0
 801441a:	d015      	beq.n	8014448 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014420:	f003 0320 	and.w	r3, r3, #32
 8014424:	2b00      	cmp	r3, #0
 8014426:	d105      	bne.n	8014434 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014430:	2b00      	cmp	r3, #0
 8014432:	d009      	beq.n	8014448 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014438:	2b00      	cmp	r3, #0
 801443a:	f000 8377 	beq.w	8014b2c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	4798      	blx	r3
      }
      return;
 8014446:	e371      	b.n	8014b2c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801444c:	2b00      	cmp	r3, #0
 801444e:	f000 8123 	beq.w	8014698 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014452:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014456:	4b8d      	ldr	r3, [pc, #564]	; (801468c <HAL_UART_IRQHandler+0x2b8>)
 8014458:	4013      	ands	r3, r2
 801445a:	2b00      	cmp	r3, #0
 801445c:	d106      	bne.n	801446c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801445e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014462:	4b8b      	ldr	r3, [pc, #556]	; (8014690 <HAL_UART_IRQHandler+0x2bc>)
 8014464:	4013      	ands	r3, r2
 8014466:	2b00      	cmp	r3, #0
 8014468:	f000 8116 	beq.w	8014698 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014470:	f003 0301 	and.w	r3, r3, #1
 8014474:	2b00      	cmp	r3, #0
 8014476:	d011      	beq.n	801449c <HAL_UART_IRQHandler+0xc8>
 8014478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014480:	2b00      	cmp	r3, #0
 8014482:	d00b      	beq.n	801449c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2201      	movs	r2, #1
 801448a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014492:	f043 0201 	orr.w	r2, r3, #1
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144a0:	f003 0302 	and.w	r3, r3, #2
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d011      	beq.n	80144cc <HAL_UART_IRQHandler+0xf8>
 80144a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144ac:	f003 0301 	and.w	r3, r3, #1
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d00b      	beq.n	80144cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2202      	movs	r2, #2
 80144ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144c2:	f043 0204 	orr.w	r2, r3, #4
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80144cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144d0:	f003 0304 	and.w	r3, r3, #4
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d011      	beq.n	80144fc <HAL_UART_IRQHandler+0x128>
 80144d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144dc:	f003 0301 	and.w	r3, r3, #1
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d00b      	beq.n	80144fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	2204      	movs	r2, #4
 80144ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144f2:	f043 0202 	orr.w	r2, r3, #2
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80144fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014500:	f003 0308 	and.w	r3, r3, #8
 8014504:	2b00      	cmp	r3, #0
 8014506:	d017      	beq.n	8014538 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801450c:	f003 0320 	and.w	r3, r3, #32
 8014510:	2b00      	cmp	r3, #0
 8014512:	d105      	bne.n	8014520 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014514:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014518:	4b5c      	ldr	r3, [pc, #368]	; (801468c <HAL_UART_IRQHandler+0x2b8>)
 801451a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801451c:	2b00      	cmp	r3, #0
 801451e:	d00b      	beq.n	8014538 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2208      	movs	r2, #8
 8014526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801452e:	f043 0208 	orr.w	r2, r3, #8
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801453c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014540:	2b00      	cmp	r3, #0
 8014542:	d012      	beq.n	801456a <HAL_UART_IRQHandler+0x196>
 8014544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801454c:	2b00      	cmp	r3, #0
 801454e:	d00c      	beq.n	801456a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014560:	f043 0220 	orr.w	r2, r3, #32
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014570:	2b00      	cmp	r3, #0
 8014572:	f000 82dd 	beq.w	8014b30 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801457a:	f003 0320 	and.w	r3, r3, #32
 801457e:	2b00      	cmp	r3, #0
 8014580:	d013      	beq.n	80145aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014586:	f003 0320 	and.w	r3, r3, #32
 801458a:	2b00      	cmp	r3, #0
 801458c:	d105      	bne.n	801459a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014596:	2b00      	cmp	r3, #0
 8014598:	d007      	beq.n	80145aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d003      	beq.n	80145aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	689b      	ldr	r3, [r3, #8]
 80145ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145be:	2b40      	cmp	r3, #64	; 0x40
 80145c0:	d005      	beq.n	80145ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80145c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80145c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d054      	beq.n	8014678 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f001 fb1e 	bl	8015c10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	689b      	ldr	r3, [r3, #8]
 80145da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145de:	2b40      	cmp	r3, #64	; 0x40
 80145e0:	d146      	bne.n	8014670 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	3308      	adds	r3, #8
 80145e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80145f0:	e853 3f00 	ldrex	r3, [r3]
 80145f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80145f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80145fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	3308      	adds	r3, #8
 801460a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801460e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801461a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801461e:	e841 2300 	strex	r3, r2, [r1]
 8014622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1d9      	bne.n	80145e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014634:	2b00      	cmp	r3, #0
 8014636:	d017      	beq.n	8014668 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801463e:	4a15      	ldr	r2, [pc, #84]	; (8014694 <HAL_UART_IRQHandler+0x2c0>)
 8014640:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014648:	4618      	mov	r0, r3
 801464a:	f7f4 fbc3 	bl	8008dd4 <HAL_DMA_Abort_IT>
 801464e:	4603      	mov	r3, r0
 8014650:	2b00      	cmp	r3, #0
 8014652:	d019      	beq.n	8014688 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014662:	4610      	mov	r0, r2
 8014664:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014666:	e00f      	b.n	8014688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 fa77 	bl	8014b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801466e:	e00b      	b.n	8014688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f000 fa73 	bl	8014b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014676:	e007      	b.n	8014688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f000 fa6f 	bl	8014b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2200      	movs	r2, #0
 8014682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014686:	e253      	b.n	8014b30 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014688:	bf00      	nop
    return;
 801468a:	e251      	b.n	8014b30 <HAL_UART_IRQHandler+0x75c>
 801468c:	10000001 	.word	0x10000001
 8014690:	04000120 	.word	0x04000120
 8014694:	08015cdd 	.word	0x08015cdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801469c:	2b01      	cmp	r3, #1
 801469e:	f040 81e7 	bne.w	8014a70 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80146a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146a6:	f003 0310 	and.w	r3, r3, #16
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f000 81e0 	beq.w	8014a70 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80146b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80146b4:	f003 0310 	and.w	r3, r3, #16
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f000 81d9 	beq.w	8014a70 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2210      	movs	r2, #16
 80146c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	689b      	ldr	r3, [r3, #8]
 80146cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146d0:	2b40      	cmp	r3, #64	; 0x40
 80146d2:	f040 8151 	bne.w	8014978 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	4a96      	ldr	r2, [pc, #600]	; (8014938 <HAL_UART_IRQHandler+0x564>)
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d068      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4a93      	ldr	r2, [pc, #588]	; (801493c <HAL_UART_IRQHandler+0x568>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d061      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4a91      	ldr	r2, [pc, #580]	; (8014940 <HAL_UART_IRQHandler+0x56c>)
 80146fc:	4293      	cmp	r3, r2
 80146fe:	d05a      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	4a8e      	ldr	r2, [pc, #568]	; (8014944 <HAL_UART_IRQHandler+0x570>)
 801470a:	4293      	cmp	r3, r2
 801470c:	d053      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	4a8c      	ldr	r2, [pc, #560]	; (8014948 <HAL_UART_IRQHandler+0x574>)
 8014718:	4293      	cmp	r3, r2
 801471a:	d04c      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4a89      	ldr	r2, [pc, #548]	; (801494c <HAL_UART_IRQHandler+0x578>)
 8014726:	4293      	cmp	r3, r2
 8014728:	d045      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4a87      	ldr	r2, [pc, #540]	; (8014950 <HAL_UART_IRQHandler+0x57c>)
 8014734:	4293      	cmp	r3, r2
 8014736:	d03e      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4a84      	ldr	r2, [pc, #528]	; (8014954 <HAL_UART_IRQHandler+0x580>)
 8014742:	4293      	cmp	r3, r2
 8014744:	d037      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	4a82      	ldr	r2, [pc, #520]	; (8014958 <HAL_UART_IRQHandler+0x584>)
 8014750:	4293      	cmp	r3, r2
 8014752:	d030      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	4a7f      	ldr	r2, [pc, #508]	; (801495c <HAL_UART_IRQHandler+0x588>)
 801475e:	4293      	cmp	r3, r2
 8014760:	d029      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4a7d      	ldr	r2, [pc, #500]	; (8014960 <HAL_UART_IRQHandler+0x58c>)
 801476c:	4293      	cmp	r3, r2
 801476e:	d022      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	4a7a      	ldr	r2, [pc, #488]	; (8014964 <HAL_UART_IRQHandler+0x590>)
 801477a:	4293      	cmp	r3, r2
 801477c:	d01b      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4a78      	ldr	r2, [pc, #480]	; (8014968 <HAL_UART_IRQHandler+0x594>)
 8014788:	4293      	cmp	r3, r2
 801478a:	d014      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4a75      	ldr	r2, [pc, #468]	; (801496c <HAL_UART_IRQHandler+0x598>)
 8014796:	4293      	cmp	r3, r2
 8014798:	d00d      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	4a73      	ldr	r2, [pc, #460]	; (8014970 <HAL_UART_IRQHandler+0x59c>)
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d006      	beq.n	80147b6 <HAL_UART_IRQHandler+0x3e2>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4a70      	ldr	r2, [pc, #448]	; (8014974 <HAL_UART_IRQHandler+0x5a0>)
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d106      	bne.n	80147c4 <HAL_UART_IRQHandler+0x3f0>
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	e005      	b.n	80147d0 <HAL_UART_IRQHandler+0x3fc>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80147d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80147d8:	2b00      	cmp	r3, #0
 80147da:	f000 81ab 	beq.w	8014b34 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80147e8:	429a      	cmp	r2, r3
 80147ea:	f080 81a3 	bcs.w	8014b34 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80147f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147fe:	69db      	ldr	r3, [r3, #28]
 8014800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014804:	f000 8087 	beq.w	8014916 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014814:	e853 3f00 	ldrex	r3, [r3]
 8014818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801481c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	461a      	mov	r2, r3
 801482e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014836:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801483a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801483e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014842:	e841 2300 	strex	r3, r2, [r1]
 8014846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801484a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1da      	bne.n	8014808 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3308      	adds	r3, #8
 8014858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801485c:	e853 3f00 	ldrex	r3, [r3]
 8014860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014864:	f023 0301 	bic.w	r3, r3, #1
 8014868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	3308      	adds	r3, #8
 8014872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801487a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801487c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801487e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014882:	e841 2300 	strex	r3, r2, [r1]
 8014886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801488a:	2b00      	cmp	r3, #0
 801488c:	d1e1      	bne.n	8014852 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	3308      	adds	r3, #8
 8014894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014898:	e853 3f00 	ldrex	r3, [r3]
 801489c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80148a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3308      	adds	r3, #8
 80148ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80148b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80148b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80148b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80148ba:	e841 2300 	strex	r3, r2, [r1]
 80148be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80148c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d1e3      	bne.n	801488e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2220      	movs	r2, #32
 80148ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2200      	movs	r2, #0
 80148d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148dc:	e853 3f00 	ldrex	r3, [r3]
 80148e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80148e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148e4:	f023 0310 	bic.w	r3, r3, #16
 80148e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	461a      	mov	r2, r3
 80148f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80148f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80148f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80148fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148fe:	e841 2300 	strex	r3, r2, [r1]
 8014902:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1e4      	bne.n	80148d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014910:	4618      	mov	r0, r3
 8014912:	f7f3 ff41 	bl	8008798 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2202      	movs	r2, #2
 801491a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014928:	b29b      	uxth	r3, r3
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	b29b      	uxth	r3, r3
 801492e:	4619      	mov	r1, r3
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 f91d 	bl	8014b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014936:	e0fd      	b.n	8014b34 <HAL_UART_IRQHandler+0x760>
 8014938:	40020010 	.word	0x40020010
 801493c:	40020028 	.word	0x40020028
 8014940:	40020040 	.word	0x40020040
 8014944:	40020058 	.word	0x40020058
 8014948:	40020070 	.word	0x40020070
 801494c:	40020088 	.word	0x40020088
 8014950:	400200a0 	.word	0x400200a0
 8014954:	400200b8 	.word	0x400200b8
 8014958:	40020410 	.word	0x40020410
 801495c:	40020428 	.word	0x40020428
 8014960:	40020440 	.word	0x40020440
 8014964:	40020458 	.word	0x40020458
 8014968:	40020470 	.word	0x40020470
 801496c:	40020488 	.word	0x40020488
 8014970:	400204a0 	.word	0x400204a0
 8014974:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014984:	b29b      	uxth	r3, r3
 8014986:	1ad3      	subs	r3, r2, r3
 8014988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014992:	b29b      	uxth	r3, r3
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 80cf 	beq.w	8014b38 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801499a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f000 80ca 	beq.w	8014b38 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ac:	e853 3f00 	ldrex	r3, [r3]
 80149b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80149b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80149b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	461a      	mov	r2, r3
 80149c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80149c6:	647b      	str	r3, [r7, #68]	; 0x44
 80149c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80149cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80149ce:	e841 2300 	strex	r3, r2, [r1]
 80149d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80149d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d1e4      	bne.n	80149a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	3308      	adds	r3, #8
 80149e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e4:	e853 3f00 	ldrex	r3, [r3]
 80149e8:	623b      	str	r3, [r7, #32]
   return(result);
 80149ea:	6a3a      	ldr	r2, [r7, #32]
 80149ec:	4b55      	ldr	r3, [pc, #340]	; (8014b44 <HAL_UART_IRQHandler+0x770>)
 80149ee:	4013      	ands	r3, r2
 80149f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	3308      	adds	r3, #8
 80149fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80149fe:	633a      	str	r2, [r7, #48]	; 0x30
 8014a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a06:	e841 2300 	strex	r3, r2, [r1]
 8014a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d1e3      	bne.n	80149da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2220      	movs	r2, #32
 8014a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2200      	movs	r2, #0
 8014a24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	e853 3f00 	ldrex	r3, [r3]
 8014a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f023 0310 	bic.w	r3, r3, #16
 8014a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	461a      	mov	r2, r3
 8014a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014a48:	61fb      	str	r3, [r7, #28]
 8014a4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a4c:	69b9      	ldr	r1, [r7, #24]
 8014a4e:	69fa      	ldr	r2, [r7, #28]
 8014a50:	e841 2300 	strex	r3, r2, [r1]
 8014a54:	617b      	str	r3, [r7, #20]
   return(result);
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d1e4      	bne.n	8014a26 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2202      	movs	r2, #2
 8014a60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014a66:	4619      	mov	r1, r3
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f000 f881 	bl	8014b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014a6e:	e063      	b.n	8014b38 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00e      	beq.n	8014a9a <HAL_UART_IRQHandler+0x6c6>
 8014a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d008      	beq.n	8014a9a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f001 fe80 	bl	8016798 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014a98:	e051      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d014      	beq.n	8014ad0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d105      	bne.n	8014abe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d008      	beq.n	8014ad0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d03a      	beq.n	8014b3c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	4798      	blx	r3
    }
    return;
 8014ace:	e035      	b.n	8014b3c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d009      	beq.n	8014af0 <HAL_UART_IRQHandler+0x71c>
 8014adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d003      	beq.n	8014af0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f001 f90d 	bl	8015d08 <UART_EndTransmit_IT>
    return;
 8014aee:	e026      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d009      	beq.n	8014b10 <HAL_UART_IRQHandler+0x73c>
 8014afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d003      	beq.n	8014b10 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f001 fe59 	bl	80167c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b0e:	e016      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d010      	beq.n	8014b3e <HAL_UART_IRQHandler+0x76a>
 8014b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	da0c      	bge.n	8014b3e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f001 fe41 	bl	80167ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b2a:	e008      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
      return;
 8014b2c:	bf00      	nop
 8014b2e:	e006      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
    return;
 8014b30:	bf00      	nop
 8014b32:	e004      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
      return;
 8014b34:	bf00      	nop
 8014b36:	e002      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
      return;
 8014b38:	bf00      	nop
 8014b3a:	e000      	b.n	8014b3e <HAL_UART_IRQHandler+0x76a>
    return;
 8014b3c:	bf00      	nop
  }
}
 8014b3e:	37e8      	adds	r7, #232	; 0xe8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	effffffe 	.word	0xeffffffe

08014b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014b50:	bf00      	nop
 8014b52:	370c      	adds	r7, #12
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr

08014b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b083      	sub	sp, #12
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014b64:	bf00      	nop
 8014b66:	370c      	adds	r7, #12
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b083      	sub	sp, #12
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	460b      	mov	r3, r1
 8014b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014b7c:	bf00      	nop
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014b8c:	b092      	sub	sp, #72	; 0x48
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014b92:	2300      	movs	r3, #0
 8014b94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	689a      	ldr	r2, [r3, #8]
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	691b      	ldr	r3, [r3, #16]
 8014ba0:	431a      	orrs	r2, r3
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	695b      	ldr	r3, [r3, #20]
 8014ba6:	431a      	orrs	r2, r3
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	69db      	ldr	r3, [r3, #28]
 8014bac:	4313      	orrs	r3, r2
 8014bae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	4bbe      	ldr	r3, [pc, #760]	; (8014eb0 <UART_SetConfig+0x328>)
 8014bb8:	4013      	ands	r3, r2
 8014bba:	697a      	ldr	r2, [r7, #20]
 8014bbc:	6812      	ldr	r2, [r2, #0]
 8014bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014bc0:	430b      	orrs	r3, r1
 8014bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	68da      	ldr	r2, [r3, #12]
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	430a      	orrs	r2, r1
 8014bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	699b      	ldr	r3, [r3, #24]
 8014bde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4ab3      	ldr	r2, [pc, #716]	; (8014eb4 <UART_SetConfig+0x32c>)
 8014be6:	4293      	cmp	r3, r2
 8014be8:	d004      	beq.n	8014bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	6a1b      	ldr	r3, [r3, #32]
 8014bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bf0:	4313      	orrs	r3, r2
 8014bf2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	689a      	ldr	r2, [r3, #8]
 8014bfa:	4baf      	ldr	r3, [pc, #700]	; (8014eb8 <UART_SetConfig+0x330>)
 8014bfc:	4013      	ands	r3, r2
 8014bfe:	697a      	ldr	r2, [r7, #20]
 8014c00:	6812      	ldr	r2, [r2, #0]
 8014c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014c04:	430b      	orrs	r3, r1
 8014c06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c0e:	f023 010f 	bic.w	r1, r3, #15
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	430a      	orrs	r2, r1
 8014c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	4aa6      	ldr	r2, [pc, #664]	; (8014ebc <UART_SetConfig+0x334>)
 8014c24:	4293      	cmp	r3, r2
 8014c26:	d177      	bne.n	8014d18 <UART_SetConfig+0x190>
 8014c28:	4ba5      	ldr	r3, [pc, #660]	; (8014ec0 <UART_SetConfig+0x338>)
 8014c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014c30:	2b28      	cmp	r3, #40	; 0x28
 8014c32:	d86d      	bhi.n	8014d10 <UART_SetConfig+0x188>
 8014c34:	a201      	add	r2, pc, #4	; (adr r2, 8014c3c <UART_SetConfig+0xb4>)
 8014c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c3a:	bf00      	nop
 8014c3c:	08014ce1 	.word	0x08014ce1
 8014c40:	08014d11 	.word	0x08014d11
 8014c44:	08014d11 	.word	0x08014d11
 8014c48:	08014d11 	.word	0x08014d11
 8014c4c:	08014d11 	.word	0x08014d11
 8014c50:	08014d11 	.word	0x08014d11
 8014c54:	08014d11 	.word	0x08014d11
 8014c58:	08014d11 	.word	0x08014d11
 8014c5c:	08014ce9 	.word	0x08014ce9
 8014c60:	08014d11 	.word	0x08014d11
 8014c64:	08014d11 	.word	0x08014d11
 8014c68:	08014d11 	.word	0x08014d11
 8014c6c:	08014d11 	.word	0x08014d11
 8014c70:	08014d11 	.word	0x08014d11
 8014c74:	08014d11 	.word	0x08014d11
 8014c78:	08014d11 	.word	0x08014d11
 8014c7c:	08014cf1 	.word	0x08014cf1
 8014c80:	08014d11 	.word	0x08014d11
 8014c84:	08014d11 	.word	0x08014d11
 8014c88:	08014d11 	.word	0x08014d11
 8014c8c:	08014d11 	.word	0x08014d11
 8014c90:	08014d11 	.word	0x08014d11
 8014c94:	08014d11 	.word	0x08014d11
 8014c98:	08014d11 	.word	0x08014d11
 8014c9c:	08014cf9 	.word	0x08014cf9
 8014ca0:	08014d11 	.word	0x08014d11
 8014ca4:	08014d11 	.word	0x08014d11
 8014ca8:	08014d11 	.word	0x08014d11
 8014cac:	08014d11 	.word	0x08014d11
 8014cb0:	08014d11 	.word	0x08014d11
 8014cb4:	08014d11 	.word	0x08014d11
 8014cb8:	08014d11 	.word	0x08014d11
 8014cbc:	08014d01 	.word	0x08014d01
 8014cc0:	08014d11 	.word	0x08014d11
 8014cc4:	08014d11 	.word	0x08014d11
 8014cc8:	08014d11 	.word	0x08014d11
 8014ccc:	08014d11 	.word	0x08014d11
 8014cd0:	08014d11 	.word	0x08014d11
 8014cd4:	08014d11 	.word	0x08014d11
 8014cd8:	08014d11 	.word	0x08014d11
 8014cdc:	08014d09 	.word	0x08014d09
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ce6:	e222      	b.n	801512e <UART_SetConfig+0x5a6>
 8014ce8:	2304      	movs	r3, #4
 8014cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cee:	e21e      	b.n	801512e <UART_SetConfig+0x5a6>
 8014cf0:	2308      	movs	r3, #8
 8014cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cf6:	e21a      	b.n	801512e <UART_SetConfig+0x5a6>
 8014cf8:	2310      	movs	r3, #16
 8014cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cfe:	e216      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d00:	2320      	movs	r3, #32
 8014d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d06:	e212      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d08:	2340      	movs	r3, #64	; 0x40
 8014d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d0e:	e20e      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d10:	2380      	movs	r3, #128	; 0x80
 8014d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d16:	e20a      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4a69      	ldr	r2, [pc, #420]	; (8014ec4 <UART_SetConfig+0x33c>)
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d130      	bne.n	8014d84 <UART_SetConfig+0x1fc>
 8014d22:	4b67      	ldr	r3, [pc, #412]	; (8014ec0 <UART_SetConfig+0x338>)
 8014d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d26:	f003 0307 	and.w	r3, r3, #7
 8014d2a:	2b05      	cmp	r3, #5
 8014d2c:	d826      	bhi.n	8014d7c <UART_SetConfig+0x1f4>
 8014d2e:	a201      	add	r2, pc, #4	; (adr r2, 8014d34 <UART_SetConfig+0x1ac>)
 8014d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d34:	08014d4d 	.word	0x08014d4d
 8014d38:	08014d55 	.word	0x08014d55
 8014d3c:	08014d5d 	.word	0x08014d5d
 8014d40:	08014d65 	.word	0x08014d65
 8014d44:	08014d6d 	.word	0x08014d6d
 8014d48:	08014d75 	.word	0x08014d75
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d52:	e1ec      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d54:	2304      	movs	r3, #4
 8014d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d5a:	e1e8      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d5c:	2308      	movs	r3, #8
 8014d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d62:	e1e4      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d64:	2310      	movs	r3, #16
 8014d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d6a:	e1e0      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d6c:	2320      	movs	r3, #32
 8014d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d72:	e1dc      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d74:	2340      	movs	r3, #64	; 0x40
 8014d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d7a:	e1d8      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d7c:	2380      	movs	r3, #128	; 0x80
 8014d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d82:	e1d4      	b.n	801512e <UART_SetConfig+0x5a6>
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4a4f      	ldr	r2, [pc, #316]	; (8014ec8 <UART_SetConfig+0x340>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d130      	bne.n	8014df0 <UART_SetConfig+0x268>
 8014d8e:	4b4c      	ldr	r3, [pc, #304]	; (8014ec0 <UART_SetConfig+0x338>)
 8014d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d92:	f003 0307 	and.w	r3, r3, #7
 8014d96:	2b05      	cmp	r3, #5
 8014d98:	d826      	bhi.n	8014de8 <UART_SetConfig+0x260>
 8014d9a:	a201      	add	r2, pc, #4	; (adr r2, 8014da0 <UART_SetConfig+0x218>)
 8014d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014da0:	08014db9 	.word	0x08014db9
 8014da4:	08014dc1 	.word	0x08014dc1
 8014da8:	08014dc9 	.word	0x08014dc9
 8014dac:	08014dd1 	.word	0x08014dd1
 8014db0:	08014dd9 	.word	0x08014dd9
 8014db4:	08014de1 	.word	0x08014de1
 8014db8:	2300      	movs	r3, #0
 8014dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dbe:	e1b6      	b.n	801512e <UART_SetConfig+0x5a6>
 8014dc0:	2304      	movs	r3, #4
 8014dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dc6:	e1b2      	b.n	801512e <UART_SetConfig+0x5a6>
 8014dc8:	2308      	movs	r3, #8
 8014dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dce:	e1ae      	b.n	801512e <UART_SetConfig+0x5a6>
 8014dd0:	2310      	movs	r3, #16
 8014dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dd6:	e1aa      	b.n	801512e <UART_SetConfig+0x5a6>
 8014dd8:	2320      	movs	r3, #32
 8014dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dde:	e1a6      	b.n	801512e <UART_SetConfig+0x5a6>
 8014de0:	2340      	movs	r3, #64	; 0x40
 8014de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014de6:	e1a2      	b.n	801512e <UART_SetConfig+0x5a6>
 8014de8:	2380      	movs	r3, #128	; 0x80
 8014dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dee:	e19e      	b.n	801512e <UART_SetConfig+0x5a6>
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4a35      	ldr	r2, [pc, #212]	; (8014ecc <UART_SetConfig+0x344>)
 8014df6:	4293      	cmp	r3, r2
 8014df8:	d130      	bne.n	8014e5c <UART_SetConfig+0x2d4>
 8014dfa:	4b31      	ldr	r3, [pc, #196]	; (8014ec0 <UART_SetConfig+0x338>)
 8014dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dfe:	f003 0307 	and.w	r3, r3, #7
 8014e02:	2b05      	cmp	r3, #5
 8014e04:	d826      	bhi.n	8014e54 <UART_SetConfig+0x2cc>
 8014e06:	a201      	add	r2, pc, #4	; (adr r2, 8014e0c <UART_SetConfig+0x284>)
 8014e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e0c:	08014e25 	.word	0x08014e25
 8014e10:	08014e2d 	.word	0x08014e2d
 8014e14:	08014e35 	.word	0x08014e35
 8014e18:	08014e3d 	.word	0x08014e3d
 8014e1c:	08014e45 	.word	0x08014e45
 8014e20:	08014e4d 	.word	0x08014e4d
 8014e24:	2300      	movs	r3, #0
 8014e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e2a:	e180      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e2c:	2304      	movs	r3, #4
 8014e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e32:	e17c      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e34:	2308      	movs	r3, #8
 8014e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e3a:	e178      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e3c:	2310      	movs	r3, #16
 8014e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e42:	e174      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e44:	2320      	movs	r3, #32
 8014e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e4a:	e170      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e4c:	2340      	movs	r3, #64	; 0x40
 8014e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e52:	e16c      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e54:	2380      	movs	r3, #128	; 0x80
 8014e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e5a:	e168      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	4a1b      	ldr	r2, [pc, #108]	; (8014ed0 <UART_SetConfig+0x348>)
 8014e62:	4293      	cmp	r3, r2
 8014e64:	d142      	bne.n	8014eec <UART_SetConfig+0x364>
 8014e66:	4b16      	ldr	r3, [pc, #88]	; (8014ec0 <UART_SetConfig+0x338>)
 8014e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e6a:	f003 0307 	and.w	r3, r3, #7
 8014e6e:	2b05      	cmp	r3, #5
 8014e70:	d838      	bhi.n	8014ee4 <UART_SetConfig+0x35c>
 8014e72:	a201      	add	r2, pc, #4	; (adr r2, 8014e78 <UART_SetConfig+0x2f0>)
 8014e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e78:	08014e91 	.word	0x08014e91
 8014e7c:	08014e99 	.word	0x08014e99
 8014e80:	08014ea1 	.word	0x08014ea1
 8014e84:	08014ea9 	.word	0x08014ea9
 8014e88:	08014ed5 	.word	0x08014ed5
 8014e8c:	08014edd 	.word	0x08014edd
 8014e90:	2300      	movs	r3, #0
 8014e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e96:	e14a      	b.n	801512e <UART_SetConfig+0x5a6>
 8014e98:	2304      	movs	r3, #4
 8014e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e9e:	e146      	b.n	801512e <UART_SetConfig+0x5a6>
 8014ea0:	2308      	movs	r3, #8
 8014ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ea6:	e142      	b.n	801512e <UART_SetConfig+0x5a6>
 8014ea8:	2310      	movs	r3, #16
 8014eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eae:	e13e      	b.n	801512e <UART_SetConfig+0x5a6>
 8014eb0:	cfff69f3 	.word	0xcfff69f3
 8014eb4:	58000c00 	.word	0x58000c00
 8014eb8:	11fff4ff 	.word	0x11fff4ff
 8014ebc:	40011000 	.word	0x40011000
 8014ec0:	58024400 	.word	0x58024400
 8014ec4:	40004400 	.word	0x40004400
 8014ec8:	40004800 	.word	0x40004800
 8014ecc:	40004c00 	.word	0x40004c00
 8014ed0:	40005000 	.word	0x40005000
 8014ed4:	2320      	movs	r3, #32
 8014ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eda:	e128      	b.n	801512e <UART_SetConfig+0x5a6>
 8014edc:	2340      	movs	r3, #64	; 0x40
 8014ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ee2:	e124      	b.n	801512e <UART_SetConfig+0x5a6>
 8014ee4:	2380      	movs	r3, #128	; 0x80
 8014ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eea:	e120      	b.n	801512e <UART_SetConfig+0x5a6>
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4acb      	ldr	r2, [pc, #812]	; (8015220 <UART_SetConfig+0x698>)
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	d176      	bne.n	8014fe4 <UART_SetConfig+0x45c>
 8014ef6:	4bcb      	ldr	r3, [pc, #812]	; (8015224 <UART_SetConfig+0x69c>)
 8014ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014efe:	2b28      	cmp	r3, #40	; 0x28
 8014f00:	d86c      	bhi.n	8014fdc <UART_SetConfig+0x454>
 8014f02:	a201      	add	r2, pc, #4	; (adr r2, 8014f08 <UART_SetConfig+0x380>)
 8014f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f08:	08014fad 	.word	0x08014fad
 8014f0c:	08014fdd 	.word	0x08014fdd
 8014f10:	08014fdd 	.word	0x08014fdd
 8014f14:	08014fdd 	.word	0x08014fdd
 8014f18:	08014fdd 	.word	0x08014fdd
 8014f1c:	08014fdd 	.word	0x08014fdd
 8014f20:	08014fdd 	.word	0x08014fdd
 8014f24:	08014fdd 	.word	0x08014fdd
 8014f28:	08014fb5 	.word	0x08014fb5
 8014f2c:	08014fdd 	.word	0x08014fdd
 8014f30:	08014fdd 	.word	0x08014fdd
 8014f34:	08014fdd 	.word	0x08014fdd
 8014f38:	08014fdd 	.word	0x08014fdd
 8014f3c:	08014fdd 	.word	0x08014fdd
 8014f40:	08014fdd 	.word	0x08014fdd
 8014f44:	08014fdd 	.word	0x08014fdd
 8014f48:	08014fbd 	.word	0x08014fbd
 8014f4c:	08014fdd 	.word	0x08014fdd
 8014f50:	08014fdd 	.word	0x08014fdd
 8014f54:	08014fdd 	.word	0x08014fdd
 8014f58:	08014fdd 	.word	0x08014fdd
 8014f5c:	08014fdd 	.word	0x08014fdd
 8014f60:	08014fdd 	.word	0x08014fdd
 8014f64:	08014fdd 	.word	0x08014fdd
 8014f68:	08014fc5 	.word	0x08014fc5
 8014f6c:	08014fdd 	.word	0x08014fdd
 8014f70:	08014fdd 	.word	0x08014fdd
 8014f74:	08014fdd 	.word	0x08014fdd
 8014f78:	08014fdd 	.word	0x08014fdd
 8014f7c:	08014fdd 	.word	0x08014fdd
 8014f80:	08014fdd 	.word	0x08014fdd
 8014f84:	08014fdd 	.word	0x08014fdd
 8014f88:	08014fcd 	.word	0x08014fcd
 8014f8c:	08014fdd 	.word	0x08014fdd
 8014f90:	08014fdd 	.word	0x08014fdd
 8014f94:	08014fdd 	.word	0x08014fdd
 8014f98:	08014fdd 	.word	0x08014fdd
 8014f9c:	08014fdd 	.word	0x08014fdd
 8014fa0:	08014fdd 	.word	0x08014fdd
 8014fa4:	08014fdd 	.word	0x08014fdd
 8014fa8:	08014fd5 	.word	0x08014fd5
 8014fac:	2301      	movs	r3, #1
 8014fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fb2:	e0bc      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fb4:	2304      	movs	r3, #4
 8014fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fba:	e0b8      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fbc:	2308      	movs	r3, #8
 8014fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fc2:	e0b4      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fc4:	2310      	movs	r3, #16
 8014fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fca:	e0b0      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fcc:	2320      	movs	r3, #32
 8014fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fd2:	e0ac      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fd4:	2340      	movs	r3, #64	; 0x40
 8014fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fda:	e0a8      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fdc:	2380      	movs	r3, #128	; 0x80
 8014fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fe2:	e0a4      	b.n	801512e <UART_SetConfig+0x5a6>
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	4a8f      	ldr	r2, [pc, #572]	; (8015228 <UART_SetConfig+0x6a0>)
 8014fea:	4293      	cmp	r3, r2
 8014fec:	d130      	bne.n	8015050 <UART_SetConfig+0x4c8>
 8014fee:	4b8d      	ldr	r3, [pc, #564]	; (8015224 <UART_SetConfig+0x69c>)
 8014ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ff2:	f003 0307 	and.w	r3, r3, #7
 8014ff6:	2b05      	cmp	r3, #5
 8014ff8:	d826      	bhi.n	8015048 <UART_SetConfig+0x4c0>
 8014ffa:	a201      	add	r2, pc, #4	; (adr r2, 8015000 <UART_SetConfig+0x478>)
 8014ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015000:	08015019 	.word	0x08015019
 8015004:	08015021 	.word	0x08015021
 8015008:	08015029 	.word	0x08015029
 801500c:	08015031 	.word	0x08015031
 8015010:	08015039 	.word	0x08015039
 8015014:	08015041 	.word	0x08015041
 8015018:	2300      	movs	r3, #0
 801501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801501e:	e086      	b.n	801512e <UART_SetConfig+0x5a6>
 8015020:	2304      	movs	r3, #4
 8015022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015026:	e082      	b.n	801512e <UART_SetConfig+0x5a6>
 8015028:	2308      	movs	r3, #8
 801502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801502e:	e07e      	b.n	801512e <UART_SetConfig+0x5a6>
 8015030:	2310      	movs	r3, #16
 8015032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015036:	e07a      	b.n	801512e <UART_SetConfig+0x5a6>
 8015038:	2320      	movs	r3, #32
 801503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801503e:	e076      	b.n	801512e <UART_SetConfig+0x5a6>
 8015040:	2340      	movs	r3, #64	; 0x40
 8015042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015046:	e072      	b.n	801512e <UART_SetConfig+0x5a6>
 8015048:	2380      	movs	r3, #128	; 0x80
 801504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801504e:	e06e      	b.n	801512e <UART_SetConfig+0x5a6>
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	4a75      	ldr	r2, [pc, #468]	; (801522c <UART_SetConfig+0x6a4>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d130      	bne.n	80150bc <UART_SetConfig+0x534>
 801505a:	4b72      	ldr	r3, [pc, #456]	; (8015224 <UART_SetConfig+0x69c>)
 801505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801505e:	f003 0307 	and.w	r3, r3, #7
 8015062:	2b05      	cmp	r3, #5
 8015064:	d826      	bhi.n	80150b4 <UART_SetConfig+0x52c>
 8015066:	a201      	add	r2, pc, #4	; (adr r2, 801506c <UART_SetConfig+0x4e4>)
 8015068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801506c:	08015085 	.word	0x08015085
 8015070:	0801508d 	.word	0x0801508d
 8015074:	08015095 	.word	0x08015095
 8015078:	0801509d 	.word	0x0801509d
 801507c:	080150a5 	.word	0x080150a5
 8015080:	080150ad 	.word	0x080150ad
 8015084:	2300      	movs	r3, #0
 8015086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801508a:	e050      	b.n	801512e <UART_SetConfig+0x5a6>
 801508c:	2304      	movs	r3, #4
 801508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015092:	e04c      	b.n	801512e <UART_SetConfig+0x5a6>
 8015094:	2308      	movs	r3, #8
 8015096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801509a:	e048      	b.n	801512e <UART_SetConfig+0x5a6>
 801509c:	2310      	movs	r3, #16
 801509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150a2:	e044      	b.n	801512e <UART_SetConfig+0x5a6>
 80150a4:	2320      	movs	r3, #32
 80150a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150aa:	e040      	b.n	801512e <UART_SetConfig+0x5a6>
 80150ac:	2340      	movs	r3, #64	; 0x40
 80150ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150b2:	e03c      	b.n	801512e <UART_SetConfig+0x5a6>
 80150b4:	2380      	movs	r3, #128	; 0x80
 80150b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ba:	e038      	b.n	801512e <UART_SetConfig+0x5a6>
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4a5b      	ldr	r2, [pc, #364]	; (8015230 <UART_SetConfig+0x6a8>)
 80150c2:	4293      	cmp	r3, r2
 80150c4:	d130      	bne.n	8015128 <UART_SetConfig+0x5a0>
 80150c6:	4b57      	ldr	r3, [pc, #348]	; (8015224 <UART_SetConfig+0x69c>)
 80150c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80150ca:	f003 0307 	and.w	r3, r3, #7
 80150ce:	2b05      	cmp	r3, #5
 80150d0:	d826      	bhi.n	8015120 <UART_SetConfig+0x598>
 80150d2:	a201      	add	r2, pc, #4	; (adr r2, 80150d8 <UART_SetConfig+0x550>)
 80150d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d8:	080150f1 	.word	0x080150f1
 80150dc:	080150f9 	.word	0x080150f9
 80150e0:	08015101 	.word	0x08015101
 80150e4:	08015109 	.word	0x08015109
 80150e8:	08015111 	.word	0x08015111
 80150ec:	08015119 	.word	0x08015119
 80150f0:	2302      	movs	r3, #2
 80150f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150f6:	e01a      	b.n	801512e <UART_SetConfig+0x5a6>
 80150f8:	2304      	movs	r3, #4
 80150fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150fe:	e016      	b.n	801512e <UART_SetConfig+0x5a6>
 8015100:	2308      	movs	r3, #8
 8015102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015106:	e012      	b.n	801512e <UART_SetConfig+0x5a6>
 8015108:	2310      	movs	r3, #16
 801510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801510e:	e00e      	b.n	801512e <UART_SetConfig+0x5a6>
 8015110:	2320      	movs	r3, #32
 8015112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015116:	e00a      	b.n	801512e <UART_SetConfig+0x5a6>
 8015118:	2340      	movs	r3, #64	; 0x40
 801511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801511e:	e006      	b.n	801512e <UART_SetConfig+0x5a6>
 8015120:	2380      	movs	r3, #128	; 0x80
 8015122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015126:	e002      	b.n	801512e <UART_SetConfig+0x5a6>
 8015128:	2380      	movs	r3, #128	; 0x80
 801512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	4a3f      	ldr	r2, [pc, #252]	; (8015230 <UART_SetConfig+0x6a8>)
 8015134:	4293      	cmp	r3, r2
 8015136:	f040 80f8 	bne.w	801532a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801513a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801513e:	2b20      	cmp	r3, #32
 8015140:	dc46      	bgt.n	80151d0 <UART_SetConfig+0x648>
 8015142:	2b02      	cmp	r3, #2
 8015144:	f2c0 8082 	blt.w	801524c <UART_SetConfig+0x6c4>
 8015148:	3b02      	subs	r3, #2
 801514a:	2b1e      	cmp	r3, #30
 801514c:	d87e      	bhi.n	801524c <UART_SetConfig+0x6c4>
 801514e:	a201      	add	r2, pc, #4	; (adr r2, 8015154 <UART_SetConfig+0x5cc>)
 8015150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015154:	080151d7 	.word	0x080151d7
 8015158:	0801524d 	.word	0x0801524d
 801515c:	080151df 	.word	0x080151df
 8015160:	0801524d 	.word	0x0801524d
 8015164:	0801524d 	.word	0x0801524d
 8015168:	0801524d 	.word	0x0801524d
 801516c:	080151ef 	.word	0x080151ef
 8015170:	0801524d 	.word	0x0801524d
 8015174:	0801524d 	.word	0x0801524d
 8015178:	0801524d 	.word	0x0801524d
 801517c:	0801524d 	.word	0x0801524d
 8015180:	0801524d 	.word	0x0801524d
 8015184:	0801524d 	.word	0x0801524d
 8015188:	0801524d 	.word	0x0801524d
 801518c:	080151ff 	.word	0x080151ff
 8015190:	0801524d 	.word	0x0801524d
 8015194:	0801524d 	.word	0x0801524d
 8015198:	0801524d 	.word	0x0801524d
 801519c:	0801524d 	.word	0x0801524d
 80151a0:	0801524d 	.word	0x0801524d
 80151a4:	0801524d 	.word	0x0801524d
 80151a8:	0801524d 	.word	0x0801524d
 80151ac:	0801524d 	.word	0x0801524d
 80151b0:	0801524d 	.word	0x0801524d
 80151b4:	0801524d 	.word	0x0801524d
 80151b8:	0801524d 	.word	0x0801524d
 80151bc:	0801524d 	.word	0x0801524d
 80151c0:	0801524d 	.word	0x0801524d
 80151c4:	0801524d 	.word	0x0801524d
 80151c8:	0801524d 	.word	0x0801524d
 80151cc:	0801523f 	.word	0x0801523f
 80151d0:	2b40      	cmp	r3, #64	; 0x40
 80151d2:	d037      	beq.n	8015244 <UART_SetConfig+0x6bc>
 80151d4:	e03a      	b.n	801524c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80151d6:	f7fb fc17 	bl	8010a08 <HAL_RCCEx_GetD3PCLK1Freq>
 80151da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80151dc:	e03c      	b.n	8015258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80151de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7fb fc26 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80151e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151ec:	e034      	b.n	8015258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80151ee:	f107 0318 	add.w	r3, r7, #24
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fb fd72 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151fc:	e02c      	b.n	8015258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80151fe:	4b09      	ldr	r3, [pc, #36]	; (8015224 <UART_SetConfig+0x69c>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	f003 0320 	and.w	r3, r3, #32
 8015206:	2b00      	cmp	r3, #0
 8015208:	d016      	beq.n	8015238 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801520a:	4b06      	ldr	r3, [pc, #24]	; (8015224 <UART_SetConfig+0x69c>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	08db      	lsrs	r3, r3, #3
 8015210:	f003 0303 	and.w	r3, r3, #3
 8015214:	4a07      	ldr	r2, [pc, #28]	; (8015234 <UART_SetConfig+0x6ac>)
 8015216:	fa22 f303 	lsr.w	r3, r2, r3
 801521a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801521c:	e01c      	b.n	8015258 <UART_SetConfig+0x6d0>
 801521e:	bf00      	nop
 8015220:	40011400 	.word	0x40011400
 8015224:	58024400 	.word	0x58024400
 8015228:	40007800 	.word	0x40007800
 801522c:	40007c00 	.word	0x40007c00
 8015230:	58000c00 	.word	0x58000c00
 8015234:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015238:	4b9d      	ldr	r3, [pc, #628]	; (80154b0 <UART_SetConfig+0x928>)
 801523a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801523c:	e00c      	b.n	8015258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801523e:	4b9d      	ldr	r3, [pc, #628]	; (80154b4 <UART_SetConfig+0x92c>)
 8015240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015242:	e009      	b.n	8015258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801524a:	e005      	b.n	8015258 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801524c:	2300      	movs	r3, #0
 801524e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015250:	2301      	movs	r3, #1
 8015252:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015256:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801525a:	2b00      	cmp	r3, #0
 801525c:	f000 81de 	beq.w	801561c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015264:	4a94      	ldr	r2, [pc, #592]	; (80154b8 <UART_SetConfig+0x930>)
 8015266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801526a:	461a      	mov	r2, r3
 801526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801526e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015272:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	685a      	ldr	r2, [r3, #4]
 8015278:	4613      	mov	r3, r2
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4413      	add	r3, r2
 801527e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015280:	429a      	cmp	r2, r3
 8015282:	d305      	bcc.n	8015290 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801528a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801528c:	429a      	cmp	r2, r3
 801528e:	d903      	bls.n	8015298 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015290:	2301      	movs	r3, #1
 8015292:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015296:	e1c1      	b.n	801561c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801529a:	2200      	movs	r2, #0
 801529c:	60bb      	str	r3, [r7, #8]
 801529e:	60fa      	str	r2, [r7, #12]
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a4:	4a84      	ldr	r2, [pc, #528]	; (80154b8 <UART_SetConfig+0x930>)
 80152a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	2200      	movs	r2, #0
 80152ae:	603b      	str	r3, [r7, #0]
 80152b0:	607a      	str	r2, [r7, #4]
 80152b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80152ba:	f7eb f811 	bl	80002e0 <__aeabi_uldivmod>
 80152be:	4602      	mov	r2, r0
 80152c0:	460b      	mov	r3, r1
 80152c2:	4610      	mov	r0, r2
 80152c4:	4619      	mov	r1, r3
 80152c6:	f04f 0200 	mov.w	r2, #0
 80152ca:	f04f 0300 	mov.w	r3, #0
 80152ce:	020b      	lsls	r3, r1, #8
 80152d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80152d4:	0202      	lsls	r2, r0, #8
 80152d6:	6979      	ldr	r1, [r7, #20]
 80152d8:	6849      	ldr	r1, [r1, #4]
 80152da:	0849      	lsrs	r1, r1, #1
 80152dc:	2000      	movs	r0, #0
 80152de:	460c      	mov	r4, r1
 80152e0:	4605      	mov	r5, r0
 80152e2:	eb12 0804 	adds.w	r8, r2, r4
 80152e6:	eb43 0905 	adc.w	r9, r3, r5
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	469a      	mov	sl, r3
 80152f2:	4693      	mov	fp, r2
 80152f4:	4652      	mov	r2, sl
 80152f6:	465b      	mov	r3, fp
 80152f8:	4640      	mov	r0, r8
 80152fa:	4649      	mov	r1, r9
 80152fc:	f7ea fff0 	bl	80002e0 <__aeabi_uldivmod>
 8015300:	4602      	mov	r2, r0
 8015302:	460b      	mov	r3, r1
 8015304:	4613      	mov	r3, r2
 8015306:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801530a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801530e:	d308      	bcc.n	8015322 <UART_SetConfig+0x79a>
 8015310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015316:	d204      	bcs.n	8015322 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801531e:	60da      	str	r2, [r3, #12]
 8015320:	e17c      	b.n	801561c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015322:	2301      	movs	r3, #1
 8015324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015328:	e178      	b.n	801561c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	69db      	ldr	r3, [r3, #28]
 801532e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015332:	f040 80c5 	bne.w	80154c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801533a:	2b20      	cmp	r3, #32
 801533c:	dc48      	bgt.n	80153d0 <UART_SetConfig+0x848>
 801533e:	2b00      	cmp	r3, #0
 8015340:	db7b      	blt.n	801543a <UART_SetConfig+0x8b2>
 8015342:	2b20      	cmp	r3, #32
 8015344:	d879      	bhi.n	801543a <UART_SetConfig+0x8b2>
 8015346:	a201      	add	r2, pc, #4	; (adr r2, 801534c <UART_SetConfig+0x7c4>)
 8015348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801534c:	080153d7 	.word	0x080153d7
 8015350:	080153df 	.word	0x080153df
 8015354:	0801543b 	.word	0x0801543b
 8015358:	0801543b 	.word	0x0801543b
 801535c:	080153e7 	.word	0x080153e7
 8015360:	0801543b 	.word	0x0801543b
 8015364:	0801543b 	.word	0x0801543b
 8015368:	0801543b 	.word	0x0801543b
 801536c:	080153f7 	.word	0x080153f7
 8015370:	0801543b 	.word	0x0801543b
 8015374:	0801543b 	.word	0x0801543b
 8015378:	0801543b 	.word	0x0801543b
 801537c:	0801543b 	.word	0x0801543b
 8015380:	0801543b 	.word	0x0801543b
 8015384:	0801543b 	.word	0x0801543b
 8015388:	0801543b 	.word	0x0801543b
 801538c:	08015407 	.word	0x08015407
 8015390:	0801543b 	.word	0x0801543b
 8015394:	0801543b 	.word	0x0801543b
 8015398:	0801543b 	.word	0x0801543b
 801539c:	0801543b 	.word	0x0801543b
 80153a0:	0801543b 	.word	0x0801543b
 80153a4:	0801543b 	.word	0x0801543b
 80153a8:	0801543b 	.word	0x0801543b
 80153ac:	0801543b 	.word	0x0801543b
 80153b0:	0801543b 	.word	0x0801543b
 80153b4:	0801543b 	.word	0x0801543b
 80153b8:	0801543b 	.word	0x0801543b
 80153bc:	0801543b 	.word	0x0801543b
 80153c0:	0801543b 	.word	0x0801543b
 80153c4:	0801543b 	.word	0x0801543b
 80153c8:	0801543b 	.word	0x0801543b
 80153cc:	0801542d 	.word	0x0801542d
 80153d0:	2b40      	cmp	r3, #64	; 0x40
 80153d2:	d02e      	beq.n	8015432 <UART_SetConfig+0x8aa>
 80153d4:	e031      	b.n	801543a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80153d6:	f7f9 fb1f 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 80153da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80153dc:	e033      	b.n	8015446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80153de:	f7f9 fb31 	bl	800ea44 <HAL_RCC_GetPCLK2Freq>
 80153e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80153e4:	e02f      	b.n	8015446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80153e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fb fb22 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80153f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153f4:	e027      	b.n	8015446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80153f6:	f107 0318 	add.w	r3, r7, #24
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7fb fc6e 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015404:	e01f      	b.n	8015446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015406:	4b2d      	ldr	r3, [pc, #180]	; (80154bc <UART_SetConfig+0x934>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	f003 0320 	and.w	r3, r3, #32
 801540e:	2b00      	cmp	r3, #0
 8015410:	d009      	beq.n	8015426 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015412:	4b2a      	ldr	r3, [pc, #168]	; (80154bc <UART_SetConfig+0x934>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	08db      	lsrs	r3, r3, #3
 8015418:	f003 0303 	and.w	r3, r3, #3
 801541c:	4a24      	ldr	r2, [pc, #144]	; (80154b0 <UART_SetConfig+0x928>)
 801541e:	fa22 f303 	lsr.w	r3, r2, r3
 8015422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015424:	e00f      	b.n	8015446 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015426:	4b22      	ldr	r3, [pc, #136]	; (80154b0 <UART_SetConfig+0x928>)
 8015428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801542a:	e00c      	b.n	8015446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801542c:	4b21      	ldr	r3, [pc, #132]	; (80154b4 <UART_SetConfig+0x92c>)
 801542e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015430:	e009      	b.n	8015446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015438:	e005      	b.n	8015446 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801543a:	2300      	movs	r3, #0
 801543c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801543e:	2301      	movs	r3, #1
 8015440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015448:	2b00      	cmp	r3, #0
 801544a:	f000 80e7 	beq.w	801561c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015452:	4a19      	ldr	r2, [pc, #100]	; (80154b8 <UART_SetConfig+0x930>)
 8015454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015458:	461a      	mov	r2, r3
 801545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801545c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015460:	005a      	lsls	r2, r3, #1
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	085b      	lsrs	r3, r3, #1
 8015468:	441a      	add	r2, r3
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015472:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015476:	2b0f      	cmp	r3, #15
 8015478:	d916      	bls.n	80154a8 <UART_SetConfig+0x920>
 801547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015480:	d212      	bcs.n	80154a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015484:	b29b      	uxth	r3, r3
 8015486:	f023 030f 	bic.w	r3, r3, #15
 801548a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801548e:	085b      	lsrs	r3, r3, #1
 8015490:	b29b      	uxth	r3, r3
 8015492:	f003 0307 	and.w	r3, r3, #7
 8015496:	b29a      	uxth	r2, r3
 8015498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801549a:	4313      	orrs	r3, r2
 801549c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80154a4:	60da      	str	r2, [r3, #12]
 80154a6:	e0b9      	b.n	801561c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80154a8:	2301      	movs	r3, #1
 80154aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80154ae:	e0b5      	b.n	801561c <UART_SetConfig+0xa94>
 80154b0:	03d09000 	.word	0x03d09000
 80154b4:	003d0900 	.word	0x003d0900
 80154b8:	0801adac 	.word	0x0801adac
 80154bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80154c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80154c4:	2b20      	cmp	r3, #32
 80154c6:	dc49      	bgt.n	801555c <UART_SetConfig+0x9d4>
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	db7c      	blt.n	80155c6 <UART_SetConfig+0xa3e>
 80154cc:	2b20      	cmp	r3, #32
 80154ce:	d87a      	bhi.n	80155c6 <UART_SetConfig+0xa3e>
 80154d0:	a201      	add	r2, pc, #4	; (adr r2, 80154d8 <UART_SetConfig+0x950>)
 80154d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154d6:	bf00      	nop
 80154d8:	08015563 	.word	0x08015563
 80154dc:	0801556b 	.word	0x0801556b
 80154e0:	080155c7 	.word	0x080155c7
 80154e4:	080155c7 	.word	0x080155c7
 80154e8:	08015573 	.word	0x08015573
 80154ec:	080155c7 	.word	0x080155c7
 80154f0:	080155c7 	.word	0x080155c7
 80154f4:	080155c7 	.word	0x080155c7
 80154f8:	08015583 	.word	0x08015583
 80154fc:	080155c7 	.word	0x080155c7
 8015500:	080155c7 	.word	0x080155c7
 8015504:	080155c7 	.word	0x080155c7
 8015508:	080155c7 	.word	0x080155c7
 801550c:	080155c7 	.word	0x080155c7
 8015510:	080155c7 	.word	0x080155c7
 8015514:	080155c7 	.word	0x080155c7
 8015518:	08015593 	.word	0x08015593
 801551c:	080155c7 	.word	0x080155c7
 8015520:	080155c7 	.word	0x080155c7
 8015524:	080155c7 	.word	0x080155c7
 8015528:	080155c7 	.word	0x080155c7
 801552c:	080155c7 	.word	0x080155c7
 8015530:	080155c7 	.word	0x080155c7
 8015534:	080155c7 	.word	0x080155c7
 8015538:	080155c7 	.word	0x080155c7
 801553c:	080155c7 	.word	0x080155c7
 8015540:	080155c7 	.word	0x080155c7
 8015544:	080155c7 	.word	0x080155c7
 8015548:	080155c7 	.word	0x080155c7
 801554c:	080155c7 	.word	0x080155c7
 8015550:	080155c7 	.word	0x080155c7
 8015554:	080155c7 	.word	0x080155c7
 8015558:	080155b9 	.word	0x080155b9
 801555c:	2b40      	cmp	r3, #64	; 0x40
 801555e:	d02e      	beq.n	80155be <UART_SetConfig+0xa36>
 8015560:	e031      	b.n	80155c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015562:	f7f9 fa59 	bl	800ea18 <HAL_RCC_GetPCLK1Freq>
 8015566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015568:	e033      	b.n	80155d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801556a:	f7f9 fa6b 	bl	800ea44 <HAL_RCC_GetPCLK2Freq>
 801556e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015570:	e02f      	b.n	80155d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015576:	4618      	mov	r0, r3
 8015578:	f7fb fa5c 	bl	8010a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015580:	e027      	b.n	80155d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015582:	f107 0318 	add.w	r3, r7, #24
 8015586:	4618      	mov	r0, r3
 8015588:	f7fb fba8 	bl	8010cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015590:	e01f      	b.n	80155d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015592:	4b2d      	ldr	r3, [pc, #180]	; (8015648 <UART_SetConfig+0xac0>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f003 0320 	and.w	r3, r3, #32
 801559a:	2b00      	cmp	r3, #0
 801559c:	d009      	beq.n	80155b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801559e:	4b2a      	ldr	r3, [pc, #168]	; (8015648 <UART_SetConfig+0xac0>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	08db      	lsrs	r3, r3, #3
 80155a4:	f003 0303 	and.w	r3, r3, #3
 80155a8:	4a28      	ldr	r2, [pc, #160]	; (801564c <UART_SetConfig+0xac4>)
 80155aa:	fa22 f303 	lsr.w	r3, r2, r3
 80155ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80155b0:	e00f      	b.n	80155d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80155b2:	4b26      	ldr	r3, [pc, #152]	; (801564c <UART_SetConfig+0xac4>)
 80155b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155b6:	e00c      	b.n	80155d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80155b8:	4b25      	ldr	r3, [pc, #148]	; (8015650 <UART_SetConfig+0xac8>)
 80155ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155bc:	e009      	b.n	80155d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80155be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80155c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155c4:	e005      	b.n	80155d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80155c6:	2300      	movs	r3, #0
 80155c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80155ca:	2301      	movs	r3, #1
 80155cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80155d0:	bf00      	nop
    }

    if (pclk != 0U)
 80155d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d021      	beq.n	801561c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155dc:	4a1d      	ldr	r2, [pc, #116]	; (8015654 <UART_SetConfig+0xacc>)
 80155de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80155e2:	461a      	mov	r2, r3
 80155e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	085b      	lsrs	r3, r3, #1
 80155f0:	441a      	add	r2, r3
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80155fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80155fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155fe:	2b0f      	cmp	r3, #15
 8015600:	d909      	bls.n	8015616 <UART_SetConfig+0xa8e>
 8015602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015608:	d205      	bcs.n	8015616 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560c:	b29a      	uxth	r2, r3
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	60da      	str	r2, [r3, #12]
 8015614:	e002      	b.n	801561c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015616:	2301      	movs	r3, #1
 8015618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	2201      	movs	r2, #1
 8015620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	2201      	movs	r2, #1
 8015628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2200      	movs	r2, #0
 8015630:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	2200      	movs	r2, #0
 8015636:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015638:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801563c:	4618      	mov	r0, r3
 801563e:	3748      	adds	r7, #72	; 0x48
 8015640:	46bd      	mov	sp, r7
 8015642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015646:	bf00      	nop
 8015648:	58024400 	.word	0x58024400
 801564c:	03d09000 	.word	0x03d09000
 8015650:	003d0900 	.word	0x003d0900
 8015654:	0801adac 	.word	0x0801adac

08015658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015658:	b480      	push	{r7}
 801565a:	b083      	sub	sp, #12
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015664:	f003 0308 	and.w	r3, r3, #8
 8015668:	2b00      	cmp	r3, #0
 801566a:	d00a      	beq.n	8015682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	430a      	orrs	r2, r1
 8015680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015686:	f003 0301 	and.w	r3, r3, #1
 801568a:	2b00      	cmp	r3, #0
 801568c:	d00a      	beq.n	80156a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	430a      	orrs	r2, r1
 80156a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156a8:	f003 0302 	and.w	r3, r3, #2
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d00a      	beq.n	80156c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	430a      	orrs	r2, r1
 80156c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156ca:	f003 0304 	and.w	r3, r3, #4
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d00a      	beq.n	80156e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	430a      	orrs	r2, r1
 80156e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156ec:	f003 0310 	and.w	r3, r3, #16
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d00a      	beq.n	801570a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	689b      	ldr	r3, [r3, #8]
 80156fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	430a      	orrs	r2, r1
 8015708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801570e:	f003 0320 	and.w	r3, r3, #32
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00a      	beq.n	801572c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	689b      	ldr	r3, [r3, #8]
 801571c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	430a      	orrs	r2, r1
 801572a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015734:	2b00      	cmp	r3, #0
 8015736:	d01a      	beq.n	801576e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	430a      	orrs	r2, r1
 801574c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015756:	d10a      	bne.n	801576e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	430a      	orrs	r2, r1
 801576c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015776:	2b00      	cmp	r3, #0
 8015778:	d00a      	beq.n	8015790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	430a      	orrs	r2, r1
 801578e:	605a      	str	r2, [r3, #4]
  }
}
 8015790:	bf00      	nop
 8015792:	370c      	adds	r7, #12
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr

0801579c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b098      	sub	sp, #96	; 0x60
 80157a0:	af02      	add	r7, sp, #8
 80157a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2200      	movs	r2, #0
 80157a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80157ac:	f7f0 f88e 	bl	80058cc <HAL_GetTick>
 80157b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	f003 0308 	and.w	r3, r3, #8
 80157bc:	2b08      	cmp	r3, #8
 80157be:	d12f      	bne.n	8015820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80157c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157c8:	2200      	movs	r2, #0
 80157ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f000 f88e 	bl	80158f0 <UART_WaitOnFlagUntilTimeout>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d022      	beq.n	8015820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157e2:	e853 3f00 	ldrex	r3, [r3]
 80157e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80157e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80157ee:	653b      	str	r3, [r7, #80]	; 0x50
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	461a      	mov	r2, r3
 80157f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157f8:	647b      	str	r3, [r7, #68]	; 0x44
 80157fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80157fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015800:	e841 2300 	strex	r3, r2, [r1]
 8015804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015808:	2b00      	cmp	r3, #0
 801580a:	d1e6      	bne.n	80157da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2220      	movs	r2, #32
 8015810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2200      	movs	r2, #0
 8015818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801581c:	2303      	movs	r3, #3
 801581e:	e063      	b.n	80158e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	f003 0304 	and.w	r3, r3, #4
 801582a:	2b04      	cmp	r3, #4
 801582c:	d149      	bne.n	80158c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801582e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015832:	9300      	str	r3, [sp, #0]
 8015834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015836:	2200      	movs	r2, #0
 8015838:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f000 f857 	bl	80158f0 <UART_WaitOnFlagUntilTimeout>
 8015842:	4603      	mov	r3, r0
 8015844:	2b00      	cmp	r3, #0
 8015846:	d03c      	beq.n	80158c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015850:	e853 3f00 	ldrex	r3, [r3]
 8015854:	623b      	str	r3, [r7, #32]
   return(result);
 8015856:	6a3b      	ldr	r3, [r7, #32]
 8015858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801585c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	461a      	mov	r2, r3
 8015864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015866:	633b      	str	r3, [r7, #48]	; 0x30
 8015868:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801586a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801586c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801586e:	e841 2300 	strex	r3, r2, [r1]
 8015872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015876:	2b00      	cmp	r3, #0
 8015878:	d1e6      	bne.n	8015848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	3308      	adds	r3, #8
 8015880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	e853 3f00 	ldrex	r3, [r3]
 8015888:	60fb      	str	r3, [r7, #12]
   return(result);
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	f023 0301 	bic.w	r3, r3, #1
 8015890:	64bb      	str	r3, [r7, #72]	; 0x48
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	3308      	adds	r3, #8
 8015898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801589a:	61fa      	str	r2, [r7, #28]
 801589c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801589e:	69b9      	ldr	r1, [r7, #24]
 80158a0:	69fa      	ldr	r2, [r7, #28]
 80158a2:	e841 2300 	strex	r3, r2, [r1]
 80158a6:	617b      	str	r3, [r7, #20]
   return(result);
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d1e5      	bne.n	801587a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2220      	movs	r2, #32
 80158b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2200      	movs	r2, #0
 80158ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80158be:	2303      	movs	r3, #3
 80158c0:	e012      	b.n	80158e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2220      	movs	r2, #32
 80158c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2220      	movs	r2, #32
 80158ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2200      	movs	r2, #0
 80158d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2200      	movs	r2, #0
 80158e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80158e6:	2300      	movs	r3, #0
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3758      	adds	r7, #88	; 0x58
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b084      	sub	sp, #16
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	603b      	str	r3, [r7, #0]
 80158fc:	4613      	mov	r3, r2
 80158fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015900:	e04f      	b.n	80159a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015902:	69bb      	ldr	r3, [r7, #24]
 8015904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015908:	d04b      	beq.n	80159a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801590a:	f7ef ffdf 	bl	80058cc <HAL_GetTick>
 801590e:	4602      	mov	r2, r0
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	1ad3      	subs	r3, r2, r3
 8015914:	69ba      	ldr	r2, [r7, #24]
 8015916:	429a      	cmp	r2, r3
 8015918:	d302      	bcc.n	8015920 <UART_WaitOnFlagUntilTimeout+0x30>
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d101      	bne.n	8015924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015920:	2303      	movs	r3, #3
 8015922:	e04e      	b.n	80159c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	f003 0304 	and.w	r3, r3, #4
 801592e:	2b00      	cmp	r3, #0
 8015930:	d037      	beq.n	80159a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	2b80      	cmp	r3, #128	; 0x80
 8015936:	d034      	beq.n	80159a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	2b40      	cmp	r3, #64	; 0x40
 801593c:	d031      	beq.n	80159a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	69db      	ldr	r3, [r3, #28]
 8015944:	f003 0308 	and.w	r3, r3, #8
 8015948:	2b08      	cmp	r3, #8
 801594a:	d110      	bne.n	801596e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	2208      	movs	r2, #8
 8015952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015954:	68f8      	ldr	r0, [r7, #12]
 8015956:	f000 f95b 	bl	8015c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2208      	movs	r2, #8
 801595e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2200      	movs	r2, #0
 8015966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801596a:	2301      	movs	r3, #1
 801596c:	e029      	b.n	80159c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	69db      	ldr	r3, [r3, #28]
 8015974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801597c:	d111      	bne.n	80159a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015988:	68f8      	ldr	r0, [r7, #12]
 801598a:	f000 f941 	bl	8015c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2220      	movs	r2, #32
 8015992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2200      	movs	r2, #0
 801599a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801599e:	2303      	movs	r3, #3
 80159a0:	e00f      	b.n	80159c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	69da      	ldr	r2, [r3, #28]
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	4013      	ands	r3, r2
 80159ac:	68ba      	ldr	r2, [r7, #8]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	bf0c      	ite	eq
 80159b2:	2301      	moveq	r3, #1
 80159b4:	2300      	movne	r3, #0
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	461a      	mov	r2, r3
 80159ba:	79fb      	ldrb	r3, [r7, #7]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d0a0      	beq.n	8015902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80159c0:	2300      	movs	r3, #0
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
	...

080159cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b0a3      	sub	sp, #140	; 0x8c
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	4613      	mov	r3, r2
 80159d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	68ba      	ldr	r2, [r7, #8]
 80159de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	88fa      	ldrh	r2, [r7, #6]
 80159e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	88fa      	ldrh	r2, [r7, #6]
 80159ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2200      	movs	r2, #0
 80159f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	689b      	ldr	r3, [r3, #8]
 80159fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159fe:	d10e      	bne.n	8015a1e <UART_Start_Receive_IT+0x52>
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	691b      	ldr	r3, [r3, #16]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d105      	bne.n	8015a14 <UART_Start_Receive_IT+0x48>
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a12:	e02d      	b.n	8015a70 <UART_Start_Receive_IT+0xa4>
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	22ff      	movs	r2, #255	; 0xff
 8015a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a1c:	e028      	b.n	8015a70 <UART_Start_Receive_IT+0xa4>
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	689b      	ldr	r3, [r3, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d10d      	bne.n	8015a42 <UART_Start_Receive_IT+0x76>
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	691b      	ldr	r3, [r3, #16]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d104      	bne.n	8015a38 <UART_Start_Receive_IT+0x6c>
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	22ff      	movs	r2, #255	; 0xff
 8015a32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a36:	e01b      	b.n	8015a70 <UART_Start_Receive_IT+0xa4>
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	227f      	movs	r2, #127	; 0x7f
 8015a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a40:	e016      	b.n	8015a70 <UART_Start_Receive_IT+0xa4>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	689b      	ldr	r3, [r3, #8]
 8015a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015a4a:	d10d      	bne.n	8015a68 <UART_Start_Receive_IT+0x9c>
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	691b      	ldr	r3, [r3, #16]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d104      	bne.n	8015a5e <UART_Start_Receive_IT+0x92>
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	227f      	movs	r2, #127	; 0x7f
 8015a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a5c:	e008      	b.n	8015a70 <UART_Start_Receive_IT+0xa4>
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	223f      	movs	r2, #63	; 0x3f
 8015a62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a66:	e003      	b.n	8015a70 <UART_Start_Receive_IT+0xa4>
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	2200      	movs	r2, #0
 8015a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2222      	movs	r2, #34	; 0x22
 8015a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	3308      	adds	r3, #8
 8015a86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a8a:	e853 3f00 	ldrex	r3, [r3]
 8015a8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a92:	f043 0301 	orr.w	r3, r3, #1
 8015a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	3308      	adds	r3, #8
 8015aa0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015aa4:	673a      	str	r2, [r7, #112]	; 0x70
 8015aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015aa8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015aaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015aac:	e841 2300 	strex	r3, r2, [r1]
 8015ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d1e3      	bne.n	8015a80 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015ac0:	d14f      	bne.n	8015b62 <UART_Start_Receive_IT+0x196>
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015ac8:	88fa      	ldrh	r2, [r7, #6]
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d349      	bcc.n	8015b62 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	689b      	ldr	r3, [r3, #8]
 8015ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ad6:	d107      	bne.n	8015ae8 <UART_Start_Receive_IT+0x11c>
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	691b      	ldr	r3, [r3, #16]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d103      	bne.n	8015ae8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	4a47      	ldr	r2, [pc, #284]	; (8015c00 <UART_Start_Receive_IT+0x234>)
 8015ae4:	675a      	str	r2, [r3, #116]	; 0x74
 8015ae6:	e002      	b.n	8015aee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	4a46      	ldr	r2, [pc, #280]	; (8015c04 <UART_Start_Receive_IT+0x238>)
 8015aec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	691b      	ldr	r3, [r3, #16]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d01a      	beq.n	8015b2c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015afe:	e853 3f00 	ldrex	r3, [r3]
 8015b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	461a      	mov	r2, r3
 8015b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015b1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015b20:	e841 2300 	strex	r3, r2, [r1]
 8015b24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d1e4      	bne.n	8015af6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	3308      	adds	r3, #8
 8015b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b36:	e853 3f00 	ldrex	r3, [r3]
 8015b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	3308      	adds	r3, #8
 8015b4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015b4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8015b4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b54:	e841 2300 	strex	r3, r2, [r1]
 8015b58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d1e5      	bne.n	8015b2c <UART_Start_Receive_IT+0x160>
 8015b60:	e046      	b.n	8015bf0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	689b      	ldr	r3, [r3, #8]
 8015b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b6a:	d107      	bne.n	8015b7c <UART_Start_Receive_IT+0x1b0>
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	691b      	ldr	r3, [r3, #16]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d103      	bne.n	8015b7c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	4a24      	ldr	r2, [pc, #144]	; (8015c08 <UART_Start_Receive_IT+0x23c>)
 8015b78:	675a      	str	r2, [r3, #116]	; 0x74
 8015b7a:	e002      	b.n	8015b82 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	4a23      	ldr	r2, [pc, #140]	; (8015c0c <UART_Start_Receive_IT+0x240>)
 8015b80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	691b      	ldr	r3, [r3, #16]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d019      	beq.n	8015bbe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b92:	e853 3f00 	ldrex	r3, [r3]
 8015b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015b9e:	677b      	str	r3, [r7, #116]	; 0x74
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8015baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bb0:	e841 2300 	strex	r3, r2, [r1]
 8015bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d1e6      	bne.n	8015b8a <UART_Start_Receive_IT+0x1be>
 8015bbc:	e018      	b.n	8015bf0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	e853 3f00 	ldrex	r3, [r3]
 8015bca:	613b      	str	r3, [r7, #16]
   return(result);
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	f043 0320 	orr.w	r3, r3, #32
 8015bd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	461a      	mov	r2, r3
 8015bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015bdc:	623b      	str	r3, [r7, #32]
 8015bde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015be0:	69f9      	ldr	r1, [r7, #28]
 8015be2:	6a3a      	ldr	r2, [r7, #32]
 8015be4:	e841 2300 	strex	r3, r2, [r1]
 8015be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8015bea:	69bb      	ldr	r3, [r7, #24]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1e6      	bne.n	8015bbe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015bf0:	2300      	movs	r3, #0
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	378c      	adds	r7, #140	; 0x8c
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfc:	4770      	bx	lr
 8015bfe:	bf00      	nop
 8015c00:	08016431 	.word	0x08016431
 8015c04:	080160d1 	.word	0x080160d1
 8015c08:	08015f19 	.word	0x08015f19
 8015c0c:	08015d61 	.word	0x08015d61

08015c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b095      	sub	sp, #84	; 0x54
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c20:	e853 3f00 	ldrex	r3, [r3]
 8015c24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	461a      	mov	r2, r3
 8015c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c36:	643b      	str	r3, [r7, #64]	; 0x40
 8015c38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c3e:	e841 2300 	strex	r3, r2, [r1]
 8015c42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d1e6      	bne.n	8015c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	3308      	adds	r3, #8
 8015c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c52:	6a3b      	ldr	r3, [r7, #32]
 8015c54:	e853 3f00 	ldrex	r3, [r3]
 8015c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c5a:	69fa      	ldr	r2, [r7, #28]
 8015c5c:	4b1e      	ldr	r3, [pc, #120]	; (8015cd8 <UART_EndRxTransfer+0xc8>)
 8015c5e:	4013      	ands	r3, r2
 8015c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	3308      	adds	r3, #8
 8015c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c72:	e841 2300 	strex	r3, r2, [r1]
 8015c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d1e5      	bne.n	8015c4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d118      	bne.n	8015cb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	e853 3f00 	ldrex	r3, [r3]
 8015c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	f023 0310 	bic.w	r3, r3, #16
 8015c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ca4:	61bb      	str	r3, [r7, #24]
 8015ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ca8:	6979      	ldr	r1, [r7, #20]
 8015caa:	69ba      	ldr	r2, [r7, #24]
 8015cac:	e841 2300 	strex	r3, r2, [r1]
 8015cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d1e6      	bne.n	8015c86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2220      	movs	r2, #32
 8015cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015ccc:	bf00      	nop
 8015cce:	3754      	adds	r7, #84	; 0x54
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd6:	4770      	bx	lr
 8015cd8:	effffffe 	.word	0xeffffffe

08015cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b084      	sub	sp, #16
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	2200      	movs	r2, #0
 8015cee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7fe ff2e 	bl	8014b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d00:	bf00      	nop
 8015d02:	3710      	adds	r7, #16
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b088      	sub	sp, #32
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	e853 3f00 	ldrex	r3, [r3]
 8015d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d24:	61fb      	str	r3, [r7, #28]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	69fb      	ldr	r3, [r7, #28]
 8015d2e:	61bb      	str	r3, [r7, #24]
 8015d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d32:	6979      	ldr	r1, [r7, #20]
 8015d34:	69ba      	ldr	r2, [r7, #24]
 8015d36:	e841 2300 	strex	r3, r2, [r1]
 8015d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d1e6      	bne.n	8015d10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2220      	movs	r2, #32
 8015d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7fe fef9 	bl	8014b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d56:	bf00      	nop
 8015d58:	3720      	adds	r7, #32
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
	...

08015d60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b09c      	sub	sp, #112	; 0x70
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d78:	2b22      	cmp	r3, #34	; 0x22
 8015d7a:	f040 80be 	bne.w	8015efa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015d88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015d8c:	b2d9      	uxtb	r1, r3
 8015d8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015d92:	b2da      	uxtb	r2, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d98:	400a      	ands	r2, r1
 8015d9a:	b2d2      	uxtb	r2, r2
 8015d9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015da2:	1c5a      	adds	r2, r3, #1
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	3b01      	subs	r3, #1
 8015db2:	b29a      	uxth	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	f040 80a1 	bne.w	8015f0a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dd0:	e853 3f00 	ldrex	r3, [r3]
 8015dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8015de8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015dee:	e841 2300 	strex	r3, r2, [r1]
 8015df2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1e6      	bne.n	8015dc8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	3308      	adds	r3, #8
 8015e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e04:	e853 3f00 	ldrex	r3, [r3]
 8015e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e0c:	f023 0301 	bic.w	r3, r3, #1
 8015e10:	667b      	str	r3, [r7, #100]	; 0x64
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	3308      	adds	r3, #8
 8015e18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015e1a:	647a      	str	r2, [r7, #68]	; 0x44
 8015e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e22:	e841 2300 	strex	r3, r2, [r1]
 8015e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1e5      	bne.n	8015dfa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2220      	movs	r2, #32
 8015e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	4a33      	ldr	r2, [pc, #204]	; (8015f14 <UART_RxISR_8BIT+0x1b4>)
 8015e48:	4293      	cmp	r3, r2
 8015e4a:	d01f      	beq.n	8015e8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d018      	beq.n	8015e8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e62:	e853 3f00 	ldrex	r3, [r3]
 8015e66:	623b      	str	r3, [r7, #32]
   return(result);
 8015e68:	6a3b      	ldr	r3, [r7, #32]
 8015e6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	461a      	mov	r2, r3
 8015e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e78:	633b      	str	r3, [r7, #48]	; 0x30
 8015e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e80:	e841 2300 	strex	r3, r2, [r1]
 8015e84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d1e6      	bne.n	8015e5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e90:	2b01      	cmp	r3, #1
 8015e92:	d12e      	bne.n	8015ef2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2200      	movs	r2, #0
 8015e98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	e853 3f00 	ldrex	r3, [r3]
 8015ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	f023 0310 	bic.w	r3, r3, #16
 8015eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015eb8:	61fb      	str	r3, [r7, #28]
 8015eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ebc:	69b9      	ldr	r1, [r7, #24]
 8015ebe:	69fa      	ldr	r2, [r7, #28]
 8015ec0:	e841 2300 	strex	r3, r2, [r1]
 8015ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d1e6      	bne.n	8015e9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	69db      	ldr	r3, [r3, #28]
 8015ed2:	f003 0310 	and.w	r3, r3, #16
 8015ed6:	2b10      	cmp	r3, #16
 8015ed8:	d103      	bne.n	8015ee2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	2210      	movs	r2, #16
 8015ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ee8:	4619      	mov	r1, r3
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7fe fe40 	bl	8014b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015ef0:	e00b      	b.n	8015f0a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7ec fdae 	bl	8002a54 <HAL_UART_RxCpltCallback>
}
 8015ef8:	e007      	b.n	8015f0a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	699a      	ldr	r2, [r3, #24]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	f042 0208 	orr.w	r2, r2, #8
 8015f08:	619a      	str	r2, [r3, #24]
}
 8015f0a:	bf00      	nop
 8015f0c:	3770      	adds	r7, #112	; 0x70
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	58000c00 	.word	0x58000c00

08015f18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b09c      	sub	sp, #112	; 0x70
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f26:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f30:	2b22      	cmp	r3, #34	; 0x22
 8015f32:	f040 80be 	bne.w	80160b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f44:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015f46:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015f4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015f4e:	4013      	ands	r3, r2
 8015f50:	b29a      	uxth	r2, r3
 8015f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f5a:	1c9a      	adds	r2, r3, #2
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	3b01      	subs	r3, #1
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f040 80a1 	bne.w	80160c2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f88:	e853 3f00 	ldrex	r3, [r3]
 8015f8c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015f94:	667b      	str	r3, [r7, #100]	; 0x64
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	461a      	mov	r2, r3
 8015f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8015fa0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015fa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015fa6:	e841 2300 	strex	r3, r2, [r1]
 8015faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d1e6      	bne.n	8015f80 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	3308      	adds	r3, #8
 8015fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fbc:	e853 3f00 	ldrex	r3, [r3]
 8015fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc4:	f023 0301 	bic.w	r3, r3, #1
 8015fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	3308      	adds	r3, #8
 8015fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fd2:	643a      	str	r2, [r7, #64]	; 0x40
 8015fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015fda:	e841 2300 	strex	r3, r2, [r1]
 8015fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d1e5      	bne.n	8015fb2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2220      	movs	r2, #32
 8015fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	4a33      	ldr	r2, [pc, #204]	; (80160cc <UART_RxISR_16BIT+0x1b4>)
 8016000:	4293      	cmp	r3, r2
 8016002:	d01f      	beq.n	8016044 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801600e:	2b00      	cmp	r3, #0
 8016010:	d018      	beq.n	8016044 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016018:	6a3b      	ldr	r3, [r7, #32]
 801601a:	e853 3f00 	ldrex	r3, [r3]
 801601e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016020:	69fb      	ldr	r3, [r7, #28]
 8016022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	461a      	mov	r2, r3
 801602e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016032:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016038:	e841 2300 	strex	r3, r2, [r1]
 801603c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016040:	2b00      	cmp	r3, #0
 8016042:	d1e6      	bne.n	8016012 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016048:	2b01      	cmp	r3, #1
 801604a:	d12e      	bne.n	80160aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2200      	movs	r2, #0
 8016050:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	e853 3f00 	ldrex	r3, [r3]
 801605e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	f023 0310 	bic.w	r3, r3, #16
 8016066:	65bb      	str	r3, [r7, #88]	; 0x58
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	461a      	mov	r2, r3
 801606e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016070:	61bb      	str	r3, [r7, #24]
 8016072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016074:	6979      	ldr	r1, [r7, #20]
 8016076:	69ba      	ldr	r2, [r7, #24]
 8016078:	e841 2300 	strex	r3, r2, [r1]
 801607c:	613b      	str	r3, [r7, #16]
   return(result);
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d1e6      	bne.n	8016052 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	69db      	ldr	r3, [r3, #28]
 801608a:	f003 0310 	and.w	r3, r3, #16
 801608e:	2b10      	cmp	r3, #16
 8016090:	d103      	bne.n	801609a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	2210      	movs	r2, #16
 8016098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80160a0:	4619      	mov	r1, r3
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f7fe fd64 	bl	8014b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80160a8:	e00b      	b.n	80160c2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f7ec fcd2 	bl	8002a54 <HAL_UART_RxCpltCallback>
}
 80160b0:	e007      	b.n	80160c2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	699a      	ldr	r2, [r3, #24]
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	f042 0208 	orr.w	r2, r2, #8
 80160c0:	619a      	str	r2, [r3, #24]
}
 80160c2:	bf00      	nop
 80160c4:	3770      	adds	r7, #112	; 0x70
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	58000c00 	.word	0x58000c00

080160d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b0ac      	sub	sp, #176	; 0xb0
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80160de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	69db      	ldr	r3, [r3, #28]
 80160e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	689b      	ldr	r3, [r3, #8]
 80160fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016106:	2b22      	cmp	r3, #34	; 0x22
 8016108:	f040 8180 	bne.w	801640c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016112:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016116:	e123      	b.n	8016360 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801611e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016122:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016126:	b2d9      	uxtb	r1, r3
 8016128:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801612c:	b2da      	uxtb	r2, r3
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016132:	400a      	ands	r2, r1
 8016134:	b2d2      	uxtb	r2, r2
 8016136:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801613c:	1c5a      	adds	r2, r3, #1
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016148:	b29b      	uxth	r3, r3
 801614a:	3b01      	subs	r3, #1
 801614c:	b29a      	uxth	r2, r3
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	69db      	ldr	r3, [r3, #28]
 801615a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801615e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016162:	f003 0307 	and.w	r3, r3, #7
 8016166:	2b00      	cmp	r3, #0
 8016168:	d053      	beq.n	8016212 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801616a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801616e:	f003 0301 	and.w	r3, r3, #1
 8016172:	2b00      	cmp	r3, #0
 8016174:	d011      	beq.n	801619a <UART_RxISR_8BIT_FIFOEN+0xca>
 8016176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801617e:	2b00      	cmp	r3, #0
 8016180:	d00b      	beq.n	801619a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2201      	movs	r2, #1
 8016188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016190:	f043 0201 	orr.w	r2, r3, #1
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801619a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801619e:	f003 0302 	and.w	r3, r3, #2
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d011      	beq.n	80161ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80161a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80161aa:	f003 0301 	and.w	r3, r3, #1
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d00b      	beq.n	80161ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	2202      	movs	r2, #2
 80161b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161c0:	f043 0204 	orr.w	r2, r3, #4
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80161ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161ce:	f003 0304 	and.w	r3, r3, #4
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d011      	beq.n	80161fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80161d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80161da:	f003 0301 	and.w	r3, r3, #1
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00b      	beq.n	80161fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2204      	movs	r2, #4
 80161e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161f0:	f043 0202 	orr.w	r2, r3, #2
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016200:	2b00      	cmp	r3, #0
 8016202:	d006      	beq.n	8016212 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f7fe fca9 	bl	8014b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2200      	movs	r2, #0
 801620e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016218:	b29b      	uxth	r3, r3
 801621a:	2b00      	cmp	r3, #0
 801621c:	f040 80a0 	bne.w	8016360 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016228:	e853 3f00 	ldrex	r3, [r3]
 801622c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801622e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	461a      	mov	r2, r3
 801623e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016242:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016244:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016246:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016248:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801624a:	e841 2300 	strex	r3, r2, [r1]
 801624e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016252:	2b00      	cmp	r3, #0
 8016254:	d1e4      	bne.n	8016220 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	3308      	adds	r3, #8
 801625c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801625e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016260:	e853 3f00 	ldrex	r3, [r3]
 8016264:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016266:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016268:	4b6e      	ldr	r3, [pc, #440]	; (8016424 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801626a:	4013      	ands	r3, r2
 801626c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	3308      	adds	r3, #8
 8016276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801627a:	66ba      	str	r2, [r7, #104]	; 0x68
 801627c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801627e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016280:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016282:	e841 2300 	strex	r3, r2, [r1]
 8016286:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801628a:	2b00      	cmp	r3, #0
 801628c:	d1e3      	bne.n	8016256 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2220      	movs	r2, #32
 8016292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2200      	movs	r2, #0
 80162a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	4a60      	ldr	r2, [pc, #384]	; (8016428 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80162a8:	4293      	cmp	r3, r2
 80162aa:	d021      	beq.n	80162f0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d01a      	beq.n	80162f0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162c2:	e853 3f00 	ldrex	r3, [r3]
 80162c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80162c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80162ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	461a      	mov	r2, r3
 80162d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162dc:	657b      	str	r3, [r7, #84]	; 0x54
 80162de:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80162e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80162e4:	e841 2300 	strex	r3, r2, [r1]
 80162e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80162ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1e4      	bne.n	80162ba <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162f4:	2b01      	cmp	r3, #1
 80162f6:	d130      	bne.n	801635a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2200      	movs	r2, #0
 80162fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016306:	e853 3f00 	ldrex	r3, [r3]
 801630a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630e:	f023 0310 	bic.w	r3, r3, #16
 8016312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	461a      	mov	r2, r3
 801631c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016320:	643b      	str	r3, [r7, #64]	; 0x40
 8016322:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016328:	e841 2300 	strex	r3, r2, [r1]
 801632c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016330:	2b00      	cmp	r3, #0
 8016332:	d1e4      	bne.n	80162fe <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	69db      	ldr	r3, [r3, #28]
 801633a:	f003 0310 	and.w	r3, r3, #16
 801633e:	2b10      	cmp	r3, #16
 8016340:	d103      	bne.n	801634a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	2210      	movs	r2, #16
 8016348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016350:	4619      	mov	r1, r3
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f7fe fc0c 	bl	8014b70 <HAL_UARTEx_RxEventCallback>
 8016358:	e002      	b.n	8016360 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f7ec fb7a 	bl	8002a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016360:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016364:	2b00      	cmp	r3, #0
 8016366:	d006      	beq.n	8016376 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801636c:	f003 0320 	and.w	r3, r3, #32
 8016370:	2b00      	cmp	r3, #0
 8016372:	f47f aed1 	bne.w	8016118 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801637c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016380:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016384:	2b00      	cmp	r3, #0
 8016386:	d049      	beq.n	801641c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801638e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016392:	429a      	cmp	r2, r3
 8016394:	d242      	bcs.n	801641c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	3308      	adds	r3, #8
 801639c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801639e:	6a3b      	ldr	r3, [r7, #32]
 80163a0:	e853 3f00 	ldrex	r3, [r3]
 80163a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80163ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	3308      	adds	r3, #8
 80163b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80163ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80163bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163c2:	e841 2300 	strex	r3, r2, [r1]
 80163c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80163c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1e3      	bne.n	8016396 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	4a16      	ldr	r2, [pc, #88]	; (801642c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80163d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	e853 3f00 	ldrex	r3, [r3]
 80163e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	f043 0320 	orr.w	r3, r3, #32
 80163e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	461a      	mov	r2, r3
 80163f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80163f6:	61bb      	str	r3, [r7, #24]
 80163f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163fa:	6979      	ldr	r1, [r7, #20]
 80163fc:	69ba      	ldr	r2, [r7, #24]
 80163fe:	e841 2300 	strex	r3, r2, [r1]
 8016402:	613b      	str	r3, [r7, #16]
   return(result);
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d1e4      	bne.n	80163d4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801640a:	e007      	b.n	801641c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	699a      	ldr	r2, [r3, #24]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	f042 0208 	orr.w	r2, r2, #8
 801641a:	619a      	str	r2, [r3, #24]
}
 801641c:	bf00      	nop
 801641e:	37b0      	adds	r7, #176	; 0xb0
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}
 8016424:	effffffe 	.word	0xeffffffe
 8016428:	58000c00 	.word	0x58000c00
 801642c:	08015d61 	.word	0x08015d61

08016430 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b0ae      	sub	sp, #184	; 0xb8
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801643e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	69db      	ldr	r3, [r3, #28]
 8016448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	689b      	ldr	r3, [r3, #8]
 801645c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016466:	2b22      	cmp	r3, #34	; 0x22
 8016468:	f040 8184 	bne.w	8016774 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016472:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016476:	e127      	b.n	80166c8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801647e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801648a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801648e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016492:	4013      	ands	r3, r2
 8016494:	b29a      	uxth	r2, r3
 8016496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801649a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164a0:	1c9a      	adds	r2, r3, #2
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	3b01      	subs	r3, #1
 80164b0:	b29a      	uxth	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	69db      	ldr	r3, [r3, #28]
 80164be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80164c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164c6:	f003 0307 	and.w	r3, r3, #7
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d053      	beq.n	8016576 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80164ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164d2:	f003 0301 	and.w	r3, r3, #1
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d011      	beq.n	80164fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80164da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80164de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d00b      	beq.n	80164fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	2201      	movs	r2, #1
 80164ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164f4:	f043 0201 	orr.w	r2, r3, #1
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80164fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016502:	f003 0302 	and.w	r3, r3, #2
 8016506:	2b00      	cmp	r3, #0
 8016508:	d011      	beq.n	801652e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801650a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801650e:	f003 0301 	and.w	r3, r3, #1
 8016512:	2b00      	cmp	r3, #0
 8016514:	d00b      	beq.n	801652e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2202      	movs	r2, #2
 801651c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016524:	f043 0204 	orr.w	r2, r3, #4
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801652e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016532:	f003 0304 	and.w	r3, r3, #4
 8016536:	2b00      	cmp	r3, #0
 8016538:	d011      	beq.n	801655e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801653a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801653e:	f003 0301 	and.w	r3, r3, #1
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00b      	beq.n	801655e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	2204      	movs	r2, #4
 801654c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016554:	f043 0202 	orr.w	r2, r3, #2
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016564:	2b00      	cmp	r3, #0
 8016566:	d006      	beq.n	8016576 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f7fe faf7 	bl	8014b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2200      	movs	r2, #0
 8016572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801657c:	b29b      	uxth	r3, r3
 801657e:	2b00      	cmp	r3, #0
 8016580:	f040 80a2 	bne.w	80166c8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801658a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801658c:	e853 3f00 	ldrex	r3, [r3]
 8016590:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	461a      	mov	r2, r3
 80165a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80165a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80165aa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80165ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80165b2:	e841 2300 	strex	r3, r2, [r1]
 80165b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80165b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d1e2      	bne.n	8016584 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	3308      	adds	r3, #8
 80165c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80165c8:	e853 3f00 	ldrex	r3, [r3]
 80165cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80165ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80165d0:	4b6e      	ldr	r3, [pc, #440]	; (801678c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80165d2:	4013      	ands	r3, r2
 80165d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	3308      	adds	r3, #8
 80165de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80165e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80165e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80165e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80165ea:	e841 2300 	strex	r3, r2, [r1]
 80165ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80165f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d1e3      	bne.n	80165be <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2220      	movs	r2, #32
 80165fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2200      	movs	r2, #0
 8016602:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	4a60      	ldr	r2, [pc, #384]	; (8016790 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016610:	4293      	cmp	r3, r2
 8016612:	d021      	beq.n	8016658 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	685b      	ldr	r3, [r3, #4]
 801661a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801661e:	2b00      	cmp	r3, #0
 8016620:	d01a      	beq.n	8016658 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801662a:	e853 3f00 	ldrex	r3, [r3]
 801662e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	461a      	mov	r2, r3
 8016640:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016644:	65bb      	str	r3, [r7, #88]	; 0x58
 8016646:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801664a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801664c:	e841 2300 	strex	r3, r2, [r1]
 8016650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016654:	2b00      	cmp	r3, #0
 8016656:	d1e4      	bne.n	8016622 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801665c:	2b01      	cmp	r3, #1
 801665e:	d130      	bne.n	80166c2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801666e:	e853 3f00 	ldrex	r3, [r3]
 8016672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016676:	f023 0310 	bic.w	r3, r3, #16
 801667a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	461a      	mov	r2, r3
 8016684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016688:	647b      	str	r3, [r7, #68]	; 0x44
 801668a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801668c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801668e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016690:	e841 2300 	strex	r3, r2, [r1]
 8016694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016698:	2b00      	cmp	r3, #0
 801669a:	d1e4      	bne.n	8016666 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	69db      	ldr	r3, [r3, #28]
 80166a2:	f003 0310 	and.w	r3, r3, #16
 80166a6:	2b10      	cmp	r3, #16
 80166a8:	d103      	bne.n	80166b2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2210      	movs	r2, #16
 80166b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80166b8:	4619      	mov	r1, r3
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f7fe fa58 	bl	8014b70 <HAL_UARTEx_RxEventCallback>
 80166c0:	e002      	b.n	80166c8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7ec f9c6 	bl	8002a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80166c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d006      	beq.n	80166de <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80166d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80166d4:	f003 0320 	and.w	r3, r3, #32
 80166d8:	2b00      	cmp	r3, #0
 80166da:	f47f aecd 	bne.w	8016478 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80166e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d049      	beq.n	8016784 <UART_RxISR_16BIT_FIFOEN+0x354>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80166f6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d242      	bcs.n	8016784 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	3308      	adds	r3, #8
 8016704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016708:	e853 3f00 	ldrex	r3, [r3]
 801670c:	623b      	str	r3, [r7, #32]
   return(result);
 801670e:	6a3b      	ldr	r3, [r7, #32]
 8016710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	3308      	adds	r3, #8
 801671e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016722:	633a      	str	r2, [r7, #48]	; 0x30
 8016724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801672a:	e841 2300 	strex	r3, r2, [r1]
 801672e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016732:	2b00      	cmp	r3, #0
 8016734:	d1e3      	bne.n	80166fe <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	4a16      	ldr	r2, [pc, #88]	; (8016794 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801673a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	e853 3f00 	ldrex	r3, [r3]
 8016748:	60fb      	str	r3, [r7, #12]
   return(result);
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	f043 0320 	orr.w	r3, r3, #32
 8016750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	461a      	mov	r2, r3
 801675a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801675e:	61fb      	str	r3, [r7, #28]
 8016760:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016762:	69b9      	ldr	r1, [r7, #24]
 8016764:	69fa      	ldr	r2, [r7, #28]
 8016766:	e841 2300 	strex	r3, r2, [r1]
 801676a:	617b      	str	r3, [r7, #20]
   return(result);
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d1e4      	bne.n	801673c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016772:	e007      	b.n	8016784 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	699a      	ldr	r2, [r3, #24]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	f042 0208 	orr.w	r2, r2, #8
 8016782:	619a      	str	r2, [r3, #24]
}
 8016784:	bf00      	nop
 8016786:	37b8      	adds	r7, #184	; 0xb8
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	effffffe 	.word	0xeffffffe
 8016790:	58000c00 	.word	0x58000c00
 8016794:	08015f19 	.word	0x08015f19

08016798 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016798:	b480      	push	{r7}
 801679a:	b083      	sub	sp, #12
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80167a0:	bf00      	nop
 80167a2:	370c      	adds	r7, #12
 80167a4:	46bd      	mov	sp, r7
 80167a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167aa:	4770      	bx	lr

080167ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80167b4:	bf00      	nop
 80167b6:	370c      	adds	r7, #12
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr

080167c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80167c0:	b480      	push	{r7}
 80167c2:	b083      	sub	sp, #12
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80167c8:	bf00      	nop
 80167ca:	370c      	adds	r7, #12
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr

080167d4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80167d4:	b480      	push	{r7}
 80167d6:	b089      	sub	sp, #36	; 0x24
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d101      	bne.n	80167ea <HAL_UARTEx_EnableStopMode+0x16>
 80167e6:	2302      	movs	r3, #2
 80167e8:	e021      	b.n	801682e <HAL_UARTEx_EnableStopMode+0x5a>
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2201      	movs	r2, #1
 80167ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	e853 3f00 	ldrex	r3, [r3]
 80167fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	f043 0302 	orr.w	r3, r3, #2
 8016806:	61fb      	str	r3, [r7, #28]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	461a      	mov	r2, r3
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	61bb      	str	r3, [r7, #24]
 8016812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016814:	6979      	ldr	r1, [r7, #20]
 8016816:	69ba      	ldr	r2, [r7, #24]
 8016818:	e841 2300 	strex	r3, r2, [r1]
 801681c:	613b      	str	r3, [r7, #16]
   return(result);
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d1e6      	bne.n	80167f2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2200      	movs	r2, #0
 8016828:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801682c:	2300      	movs	r3, #0
}
 801682e:	4618      	mov	r0, r3
 8016830:	3724      	adds	r7, #36	; 0x24
 8016832:	46bd      	mov	sp, r7
 8016834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016838:	4770      	bx	lr

0801683a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801683a:	b580      	push	{r7, lr}
 801683c:	b084      	sub	sp, #16
 801683e:	af00      	add	r7, sp, #0
 8016840:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016848:	2b01      	cmp	r3, #1
 801684a:	d101      	bne.n	8016850 <HAL_UARTEx_EnableFifoMode+0x16>
 801684c:	2302      	movs	r3, #2
 801684e:	e02b      	b.n	80168a8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2201      	movs	r2, #1
 8016854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2224      	movs	r2, #36	; 0x24
 801685c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	681a      	ldr	r2, [r3, #0]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f022 0201 	bic.w	r2, r2, #1
 8016876:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801687e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016886:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	68fa      	ldr	r2, [r7, #12]
 801688e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f000 f8c3 	bl	8016a1c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2220      	movs	r2, #32
 801689a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	2200      	movs	r2, #0
 80168a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80168a6:	2300      	movs	r3, #0
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3710      	adds	r7, #16
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80168b0:	b480      	push	{r7}
 80168b2:	b085      	sub	sp, #20
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80168be:	2b01      	cmp	r3, #1
 80168c0:	d101      	bne.n	80168c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80168c2:	2302      	movs	r3, #2
 80168c4:	e027      	b.n	8016916 <HAL_UARTEx_DisableFifoMode+0x66>
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2201      	movs	r2, #1
 80168ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2224      	movs	r2, #36	; 0x24
 80168d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	681a      	ldr	r2, [r3, #0]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	f022 0201 	bic.w	r2, r2, #1
 80168ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80168f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2200      	movs	r2, #0
 80168fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	68fa      	ldr	r2, [r7, #12]
 8016902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2220      	movs	r2, #32
 8016908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2200      	movs	r2, #0
 8016910:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3714      	adds	r7, #20
 801691a:	46bd      	mov	sp, r7
 801691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016920:	4770      	bx	lr

08016922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016922:	b580      	push	{r7, lr}
 8016924:	b084      	sub	sp, #16
 8016926:	af00      	add	r7, sp, #0
 8016928:	6078      	str	r0, [r7, #4]
 801692a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016932:	2b01      	cmp	r3, #1
 8016934:	d101      	bne.n	801693a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016936:	2302      	movs	r3, #2
 8016938:	e02d      	b.n	8016996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2201      	movs	r2, #1
 801693e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2224      	movs	r2, #36	; 0x24
 8016946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	681a      	ldr	r2, [r3, #0]
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	f022 0201 	bic.w	r2, r2, #1
 8016960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	689b      	ldr	r3, [r3, #8]
 8016968:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	683a      	ldr	r2, [r7, #0]
 8016972:	430a      	orrs	r2, r1
 8016974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f000 f850 	bl	8016a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	68fa      	ldr	r2, [r7, #12]
 8016982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2220      	movs	r2, #32
 8016988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2200      	movs	r2, #0
 8016990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016994:	2300      	movs	r3, #0
}
 8016996:	4618      	mov	r0, r3
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}

0801699e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801699e:	b580      	push	{r7, lr}
 80169a0:	b084      	sub	sp, #16
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6078      	str	r0, [r7, #4]
 80169a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	d101      	bne.n	80169b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80169b2:	2302      	movs	r3, #2
 80169b4:	e02d      	b.n	8016a12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2201      	movs	r2, #1
 80169ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2224      	movs	r2, #36	; 0x24
 80169c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	681a      	ldr	r2, [r3, #0]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	f022 0201 	bic.w	r2, r2, #1
 80169dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	689b      	ldr	r3, [r3, #8]
 80169e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	683a      	ldr	r2, [r7, #0]
 80169ee:	430a      	orrs	r2, r1
 80169f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f000 f812 	bl	8016a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	68fa      	ldr	r2, [r7, #12]
 80169fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2220      	movs	r2, #32
 8016a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a10:	2300      	movs	r3, #0
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3710      	adds	r7, #16
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
	...

08016a1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b085      	sub	sp, #20
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d108      	bne.n	8016a3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2201      	movs	r2, #1
 8016a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2201      	movs	r2, #1
 8016a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016a3c:	e031      	b.n	8016aa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016a3e:	2310      	movs	r3, #16
 8016a40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016a42:	2310      	movs	r3, #16
 8016a44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	689b      	ldr	r3, [r3, #8]
 8016a4c:	0e5b      	lsrs	r3, r3, #25
 8016a4e:	b2db      	uxtb	r3, r3
 8016a50:	f003 0307 	and.w	r3, r3, #7
 8016a54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	689b      	ldr	r3, [r3, #8]
 8016a5c:	0f5b      	lsrs	r3, r3, #29
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	f003 0307 	and.w	r3, r3, #7
 8016a64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016a66:	7bbb      	ldrb	r3, [r7, #14]
 8016a68:	7b3a      	ldrb	r2, [r7, #12]
 8016a6a:	4911      	ldr	r1, [pc, #68]	; (8016ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8016a6c:	5c8a      	ldrb	r2, [r1, r2]
 8016a6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016a72:	7b3a      	ldrb	r2, [r7, #12]
 8016a74:	490f      	ldr	r1, [pc, #60]	; (8016ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8016a76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a7c:	b29a      	uxth	r2, r3
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016a84:	7bfb      	ldrb	r3, [r7, #15]
 8016a86:	7b7a      	ldrb	r2, [r7, #13]
 8016a88:	4909      	ldr	r1, [pc, #36]	; (8016ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8016a8a:	5c8a      	ldrb	r2, [r1, r2]
 8016a8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016a90:	7b7a      	ldrb	r2, [r7, #13]
 8016a92:	4908      	ldr	r1, [pc, #32]	; (8016ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8016a94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a9a:	b29a      	uxth	r2, r3
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016aa2:	bf00      	nop
 8016aa4:	3714      	adds	r7, #20
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	0801adc4 	.word	0x0801adc4
 8016ab4:	0801adcc 	.word	0x0801adcc

08016ab8 <__NVIC_SetPriority>:
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	4603      	mov	r3, r0
 8016ac0:	6039      	str	r1, [r7, #0]
 8016ac2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	db0a      	blt.n	8016ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	b2da      	uxtb	r2, r3
 8016ad0:	490c      	ldr	r1, [pc, #48]	; (8016b04 <__NVIC_SetPriority+0x4c>)
 8016ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ad6:	0112      	lsls	r2, r2, #4
 8016ad8:	b2d2      	uxtb	r2, r2
 8016ada:	440b      	add	r3, r1
 8016adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016ae0:	e00a      	b.n	8016af8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	b2da      	uxtb	r2, r3
 8016ae6:	4908      	ldr	r1, [pc, #32]	; (8016b08 <__NVIC_SetPriority+0x50>)
 8016ae8:	88fb      	ldrh	r3, [r7, #6]
 8016aea:	f003 030f 	and.w	r3, r3, #15
 8016aee:	3b04      	subs	r3, #4
 8016af0:	0112      	lsls	r2, r2, #4
 8016af2:	b2d2      	uxtb	r2, r2
 8016af4:	440b      	add	r3, r1
 8016af6:	761a      	strb	r2, [r3, #24]
}
 8016af8:	bf00      	nop
 8016afa:	370c      	adds	r7, #12
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr
 8016b04:	e000e100 	.word	0xe000e100
 8016b08:	e000ed00 	.word	0xe000ed00

08016b0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016b10:	4b05      	ldr	r3, [pc, #20]	; (8016b28 <SysTick_Handler+0x1c>)
 8016b12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016b14:	f002 f958 	bl	8018dc8 <xTaskGetSchedulerState>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	d001      	beq.n	8016b22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016b1e:	f002 ff7b 	bl	8019a18 <xPortSysTickHandler>
  }
}
 8016b22:	bf00      	nop
 8016b24:	bd80      	pop	{r7, pc}
 8016b26:	bf00      	nop
 8016b28:	e000e010 	.word	0xe000e010

08016b2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016b30:	2100      	movs	r1, #0
 8016b32:	f06f 0004 	mvn.w	r0, #4
 8016b36:	f7ff ffbf 	bl	8016ab8 <__NVIC_SetPriority>
#endif
}
 8016b3a:	bf00      	nop
 8016b3c:	bd80      	pop	{r7, pc}
	...

08016b40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016b40:	b480      	push	{r7}
 8016b42:	b083      	sub	sp, #12
 8016b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b46:	f3ef 8305 	mrs	r3, IPSR
 8016b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8016b4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d003      	beq.n	8016b5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016b52:	f06f 0305 	mvn.w	r3, #5
 8016b56:	607b      	str	r3, [r7, #4]
 8016b58:	e00c      	b.n	8016b74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016b5a:	4b0a      	ldr	r3, [pc, #40]	; (8016b84 <osKernelInitialize+0x44>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d105      	bne.n	8016b6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016b62:	4b08      	ldr	r3, [pc, #32]	; (8016b84 <osKernelInitialize+0x44>)
 8016b64:	2201      	movs	r2, #1
 8016b66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	607b      	str	r3, [r7, #4]
 8016b6c:	e002      	b.n	8016b74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016b74:	687b      	ldr	r3, [r7, #4]
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	370c      	adds	r7, #12
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop
 8016b84:	24001fdc 	.word	0x24001fdc

08016b88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b8e:	f3ef 8305 	mrs	r3, IPSR
 8016b92:	603b      	str	r3, [r7, #0]
  return(result);
 8016b94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d003      	beq.n	8016ba2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016b9a:	f06f 0305 	mvn.w	r3, #5
 8016b9e:	607b      	str	r3, [r7, #4]
 8016ba0:	e010      	b.n	8016bc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016ba2:	4b0b      	ldr	r3, [pc, #44]	; (8016bd0 <osKernelStart+0x48>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d109      	bne.n	8016bbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016baa:	f7ff ffbf 	bl	8016b2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016bae:	4b08      	ldr	r3, [pc, #32]	; (8016bd0 <osKernelStart+0x48>)
 8016bb0:	2202      	movs	r2, #2
 8016bb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016bb4:	f001 fc0c 	bl	80183d0 <vTaskStartScheduler>
      stat = osOK;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	607b      	str	r3, [r7, #4]
 8016bbc:	e002      	b.n	8016bc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016bc4:	687b      	ldr	r3, [r7, #4]
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	3708      	adds	r7, #8
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}
 8016bce:	bf00      	nop
 8016bd0:	24001fdc 	.word	0x24001fdc

08016bd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b08e      	sub	sp, #56	; 0x38
 8016bd8:	af04      	add	r7, sp, #16
 8016bda:	60f8      	str	r0, [r7, #12]
 8016bdc:	60b9      	str	r1, [r7, #8]
 8016bde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016be0:	2300      	movs	r3, #0
 8016be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016be4:	f3ef 8305 	mrs	r3, IPSR
 8016be8:	617b      	str	r3, [r7, #20]
  return(result);
 8016bea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d17e      	bne.n	8016cee <osThreadNew+0x11a>
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d07b      	beq.n	8016cee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016bf6:	2380      	movs	r3, #128	; 0x80
 8016bf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016bfa:	2318      	movs	r3, #24
 8016bfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d045      	beq.n	8016c9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d002      	beq.n	8016c1c <osThreadNew+0x48>
        name = attr->name;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	699b      	ldr	r3, [r3, #24]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d002      	beq.n	8016c2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	699b      	ldr	r3, [r3, #24]
 8016c28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d008      	beq.n	8016c42 <osThreadNew+0x6e>
 8016c30:	69fb      	ldr	r3, [r7, #28]
 8016c32:	2b38      	cmp	r3, #56	; 0x38
 8016c34:	d805      	bhi.n	8016c42 <osThreadNew+0x6e>
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	f003 0301 	and.w	r3, r3, #1
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d001      	beq.n	8016c46 <osThreadNew+0x72>
        return (NULL);
 8016c42:	2300      	movs	r3, #0
 8016c44:	e054      	b.n	8016cf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	695b      	ldr	r3, [r3, #20]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d003      	beq.n	8016c56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	695b      	ldr	r3, [r3, #20]
 8016c52:	089b      	lsrs	r3, r3, #2
 8016c54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00e      	beq.n	8016c7c <osThreadNew+0xa8>
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	2b5b      	cmp	r3, #91	; 0x5b
 8016c64:	d90a      	bls.n	8016c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d006      	beq.n	8016c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	695b      	ldr	r3, [r3, #20]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d002      	beq.n	8016c7c <osThreadNew+0xa8>
        mem = 1;
 8016c76:	2301      	movs	r3, #1
 8016c78:	61bb      	str	r3, [r7, #24]
 8016c7a:	e010      	b.n	8016c9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	689b      	ldr	r3, [r3, #8]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d10c      	bne.n	8016c9e <osThreadNew+0xca>
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d108      	bne.n	8016c9e <osThreadNew+0xca>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	691b      	ldr	r3, [r3, #16]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d104      	bne.n	8016c9e <osThreadNew+0xca>
          mem = 0;
 8016c94:	2300      	movs	r3, #0
 8016c96:	61bb      	str	r3, [r7, #24]
 8016c98:	e001      	b.n	8016c9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d110      	bne.n	8016cc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016cac:	9202      	str	r2, [sp, #8]
 8016cae:	9301      	str	r3, [sp, #4]
 8016cb0:	69fb      	ldr	r3, [r7, #28]
 8016cb2:	9300      	str	r3, [sp, #0]
 8016cb4:	68bb      	ldr	r3, [r7, #8]
 8016cb6:	6a3a      	ldr	r2, [r7, #32]
 8016cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cba:	68f8      	ldr	r0, [r7, #12]
 8016cbc:	f001 f9b2 	bl	8018024 <xTaskCreateStatic>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	613b      	str	r3, [r7, #16]
 8016cc4:	e013      	b.n	8016cee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016cc6:	69bb      	ldr	r3, [r7, #24]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d110      	bne.n	8016cee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016ccc:	6a3b      	ldr	r3, [r7, #32]
 8016cce:	b29a      	uxth	r2, r3
 8016cd0:	f107 0310 	add.w	r3, r7, #16
 8016cd4:	9301      	str	r3, [sp, #4]
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	9300      	str	r3, [sp, #0]
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cde:	68f8      	ldr	r0, [r7, #12]
 8016ce0:	f001 f9fd 	bl	80180de <xTaskCreate>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b01      	cmp	r3, #1
 8016ce8:	d001      	beq.n	8016cee <osThreadNew+0x11a>
            hTask = NULL;
 8016cea:	2300      	movs	r3, #0
 8016cec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016cee:	693b      	ldr	r3, [r7, #16]
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3728      	adds	r7, #40	; 0x28
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}

08016cf8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016cfe:	f3ef 8305 	mrs	r3, IPSR
 8016d02:	603b      	str	r3, [r7, #0]
  return(result);
 8016d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d003      	beq.n	8016d12 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016d0a:	f06f 0305 	mvn.w	r3, #5
 8016d0e:	607b      	str	r3, [r7, #4]
 8016d10:	e009      	b.n	8016d26 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016d12:	2300      	movs	r3, #0
 8016d14:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016d16:	4b07      	ldr	r3, [pc, #28]	; (8016d34 <osThreadYield+0x3c>)
 8016d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d1c:	601a      	str	r2, [r3, #0]
 8016d1e:	f3bf 8f4f 	dsb	sy
 8016d22:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016d26:	687b      	ldr	r3, [r7, #4]
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	370c      	adds	r7, #12
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d32:	4770      	bx	lr
 8016d34:	e000ed04 	.word	0xe000ed04

08016d38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b084      	sub	sp, #16
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d40:	f3ef 8305 	mrs	r3, IPSR
 8016d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d003      	beq.n	8016d54 <osDelay+0x1c>
    stat = osErrorISR;
 8016d4c:	f06f 0305 	mvn.w	r3, #5
 8016d50:	60fb      	str	r3, [r7, #12]
 8016d52:	e007      	b.n	8016d64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016d54:	2300      	movs	r3, #0
 8016d56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d002      	beq.n	8016d64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016d5e:	6878      	ldr	r0, [r7, #4]
 8016d60:	f001 fb02 	bl	8018368 <vTaskDelay>
    }
  }

  return (stat);
 8016d64:	68fb      	ldr	r3, [r7, #12]
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016d6e:	b580      	push	{r7, lr}
 8016d70:	b086      	sub	sp, #24
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016d76:	2300      	movs	r3, #0
 8016d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d7a:	f3ef 8305 	mrs	r3, IPSR
 8016d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d80:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d12d      	bne.n	8016de2 <osEventFlagsNew+0x74>
    mem = -1;
 8016d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d8a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d015      	beq.n	8016dbe <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	689b      	ldr	r3, [r3, #8]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d006      	beq.n	8016da8 <osEventFlagsNew+0x3a>
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	68db      	ldr	r3, [r3, #12]
 8016d9e:	2b1f      	cmp	r3, #31
 8016da0:	d902      	bls.n	8016da8 <osEventFlagsNew+0x3a>
        mem = 1;
 8016da2:	2301      	movs	r3, #1
 8016da4:	613b      	str	r3, [r7, #16]
 8016da6:	e00c      	b.n	8016dc2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	689b      	ldr	r3, [r3, #8]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d108      	bne.n	8016dc2 <osEventFlagsNew+0x54>
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d104      	bne.n	8016dc2 <osEventFlagsNew+0x54>
          mem = 0;
 8016db8:	2300      	movs	r3, #0
 8016dba:	613b      	str	r3, [r7, #16]
 8016dbc:	e001      	b.n	8016dc2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	2b01      	cmp	r3, #1
 8016dc6:	d106      	bne.n	8016dd6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	689b      	ldr	r3, [r3, #8]
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f000 f91d 	bl	801700c <xEventGroupCreateStatic>
 8016dd2:	6178      	str	r0, [r7, #20]
 8016dd4:	e005      	b.n	8016de2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016dd6:	693b      	ldr	r3, [r7, #16]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d102      	bne.n	8016de2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016ddc:	f000 f94d 	bl	801707a <xEventGroupCreate>
 8016de0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016de2:	697b      	ldr	r3, [r7, #20]
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	3718      	adds	r7, #24
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}

08016dec <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b086      	sub	sp, #24
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
 8016df4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d004      	beq.n	8016e0a <osEventFlagsSet+0x1e>
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d003      	beq.n	8016e12 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016e0a:	f06f 0303 	mvn.w	r3, #3
 8016e0e:	617b      	str	r3, [r7, #20]
 8016e10:	e028      	b.n	8016e64 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e12:	f3ef 8305 	mrs	r3, IPSR
 8016e16:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e18:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d01d      	beq.n	8016e5a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016e22:	f107 0308 	add.w	r3, r7, #8
 8016e26:	461a      	mov	r2, r3
 8016e28:	6839      	ldr	r1, [r7, #0]
 8016e2a:	6938      	ldr	r0, [r7, #16]
 8016e2c:	f000 fb46 	bl	80174bc <xEventGroupSetBitsFromISR>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d103      	bne.n	8016e3e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016e36:	f06f 0302 	mvn.w	r3, #2
 8016e3a:	617b      	str	r3, [r7, #20]
 8016e3c:	e012      	b.n	8016e64 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d00d      	beq.n	8016e64 <osEventFlagsSet+0x78>
 8016e48:	4b09      	ldr	r3, [pc, #36]	; (8016e70 <osEventFlagsSet+0x84>)
 8016e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e4e:	601a      	str	r2, [r3, #0]
 8016e50:	f3bf 8f4f 	dsb	sy
 8016e54:	f3bf 8f6f 	isb	sy
 8016e58:	e004      	b.n	8016e64 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016e5a:	6839      	ldr	r1, [r7, #0]
 8016e5c:	6938      	ldr	r0, [r7, #16]
 8016e5e:	f000 fa65 	bl	801732c <xEventGroupSetBits>
 8016e62:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016e64:	697b      	ldr	r3, [r7, #20]
}
 8016e66:	4618      	mov	r0, r3
 8016e68:	3718      	adds	r7, #24
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}
 8016e6e:	bf00      	nop
 8016e70:	e000ed04 	.word	0xe000ed04

08016e74 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b086      	sub	sp, #24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d004      	beq.n	8016e92 <osEventFlagsClear+0x1e>
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d003      	beq.n	8016e9a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016e92:	f06f 0303 	mvn.w	r3, #3
 8016e96:	617b      	str	r3, [r7, #20]
 8016e98:	e019      	b.n	8016ece <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e9a:	f3ef 8305 	mrs	r3, IPSR
 8016e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ea0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00e      	beq.n	8016ec4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016ea6:	6938      	ldr	r0, [r7, #16]
 8016ea8:	f000 fa1c 	bl	80172e4 <xEventGroupGetBitsFromISR>
 8016eac:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016eae:	6839      	ldr	r1, [r7, #0]
 8016eb0:	6938      	ldr	r0, [r7, #16]
 8016eb2:	f000 fa03 	bl	80172bc <xEventGroupClearBitsFromISR>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d108      	bne.n	8016ece <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016ebc:	f06f 0302 	mvn.w	r3, #2
 8016ec0:	617b      	str	r3, [r7, #20]
 8016ec2:	e004      	b.n	8016ece <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016ec4:	6839      	ldr	r1, [r7, #0]
 8016ec6:	6938      	ldr	r0, [r7, #16]
 8016ec8:	f000 f9c0 	bl	801724c <xEventGroupClearBits>
 8016ecc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016ece:	697b      	ldr	r3, [r7, #20]
}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3718      	adds	r7, #24
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}

08016ed8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b08c      	sub	sp, #48	; 0x30
 8016edc:	af02      	add	r7, sp, #8
 8016ede:	60f8      	str	r0, [r7, #12]
 8016ee0:	60b9      	str	r1, [r7, #8]
 8016ee2:	607a      	str	r2, [r7, #4]
 8016ee4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d004      	beq.n	8016efa <osEventFlagsWait+0x22>
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d003      	beq.n	8016f02 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016efa:	f06f 0303 	mvn.w	r3, #3
 8016efe:	61fb      	str	r3, [r7, #28]
 8016f00:	e04b      	b.n	8016f9a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f02:	f3ef 8305 	mrs	r3, IPSR
 8016f06:	617b      	str	r3, [r7, #20]
  return(result);
 8016f08:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d003      	beq.n	8016f16 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016f0e:	f06f 0305 	mvn.w	r3, #5
 8016f12:	61fb      	str	r3, [r7, #28]
 8016f14:	e041      	b.n	8016f9a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f003 0301 	and.w	r3, r3, #1
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d002      	beq.n	8016f26 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016f20:	2301      	movs	r3, #1
 8016f22:	627b      	str	r3, [r7, #36]	; 0x24
 8016f24:	e001      	b.n	8016f2a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016f26:	2300      	movs	r3, #0
 8016f28:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	f003 0302 	and.w	r3, r3, #2
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d002      	beq.n	8016f3a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016f34:	2300      	movs	r3, #0
 8016f36:	623b      	str	r3, [r7, #32]
 8016f38:	e001      	b.n	8016f3e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	9300      	str	r3, [sp, #0]
 8016f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f44:	6a3a      	ldr	r2, [r7, #32]
 8016f46:	68b9      	ldr	r1, [r7, #8]
 8016f48:	69b8      	ldr	r0, [r7, #24]
 8016f4a:	f000 f8b1 	bl	80170b0 <xEventGroupWaitBits>
 8016f4e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f003 0301 	and.w	r3, r3, #1
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d010      	beq.n	8016f7c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016f5a:	68ba      	ldr	r2, [r7, #8]
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	4013      	ands	r3, r2
 8016f60:	68ba      	ldr	r2, [r7, #8]
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d019      	beq.n	8016f9a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d003      	beq.n	8016f74 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016f6c:	f06f 0301 	mvn.w	r3, #1
 8016f70:	61fb      	str	r3, [r7, #28]
 8016f72:	e012      	b.n	8016f9a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016f74:	f06f 0302 	mvn.w	r3, #2
 8016f78:	61fb      	str	r3, [r7, #28]
 8016f7a:	e00e      	b.n	8016f9a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016f7c:	68ba      	ldr	r2, [r7, #8]
 8016f7e:	69fb      	ldr	r3, [r7, #28]
 8016f80:	4013      	ands	r3, r2
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d109      	bne.n	8016f9a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d003      	beq.n	8016f94 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016f8c:	f06f 0301 	mvn.w	r3, #1
 8016f90:	61fb      	str	r3, [r7, #28]
 8016f92:	e002      	b.n	8016f9a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016f94:	f06f 0302 	mvn.w	r3, #2
 8016f98:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016f9a:	69fb      	ldr	r3, [r7, #28]
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3728      	adds	r7, #40	; 0x28
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016fa4:	b480      	push	{r7}
 8016fa6:	b085      	sub	sp, #20
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	4a07      	ldr	r2, [pc, #28]	; (8016fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8016fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	4a06      	ldr	r2, [pc, #24]	; (8016fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8016fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	2280      	movs	r2, #128	; 0x80
 8016fc0:	601a      	str	r2, [r3, #0]
}
 8016fc2:	bf00      	nop
 8016fc4:	3714      	adds	r7, #20
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fcc:	4770      	bx	lr
 8016fce:	bf00      	nop
 8016fd0:	24001fe0 	.word	0x24001fe0
 8016fd4:	2400203c 	.word	0x2400203c

08016fd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016fd8:	b480      	push	{r7}
 8016fda:	b085      	sub	sp, #20
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	4a07      	ldr	r2, [pc, #28]	; (8017004 <vApplicationGetTimerTaskMemory+0x2c>)
 8016fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	4a06      	ldr	r2, [pc, #24]	; (8017008 <vApplicationGetTimerTaskMemory+0x30>)
 8016fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ff6:	601a      	str	r2, [r3, #0]
}
 8016ff8:	bf00      	nop
 8016ffa:	3714      	adds	r7, #20
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr
 8017004:	2400223c 	.word	0x2400223c
 8017008:	24002298 	.word	0x24002298

0801700c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801700c:	b580      	push	{r7, lr}
 801700e:	b086      	sub	sp, #24
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10a      	bne.n	8017030 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801701e:	f383 8811 	msr	BASEPRI, r3
 8017022:	f3bf 8f6f 	isb	sy
 8017026:	f3bf 8f4f 	dsb	sy
 801702a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801702c:	bf00      	nop
 801702e:	e7fe      	b.n	801702e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017030:	2320      	movs	r3, #32
 8017032:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	2b20      	cmp	r3, #32
 8017038:	d00a      	beq.n	8017050 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801703e:	f383 8811 	msr	BASEPRI, r3
 8017042:	f3bf 8f6f 	isb	sy
 8017046:	f3bf 8f4f 	dsb	sy
 801704a:	60fb      	str	r3, [r7, #12]
}
 801704c:	bf00      	nop
 801704e:	e7fe      	b.n	801704e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d00a      	beq.n	8017070 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	2200      	movs	r2, #0
 801705e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017060:	697b      	ldr	r3, [r7, #20]
 8017062:	3304      	adds	r3, #4
 8017064:	4618      	mov	r0, r3
 8017066:	f000 fa3d 	bl	80174e4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	2201      	movs	r2, #1
 801706e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017070:	697b      	ldr	r3, [r7, #20]
	}
 8017072:	4618      	mov	r0, r3
 8017074:	3718      	adds	r7, #24
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}

0801707a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801707a:	b580      	push	{r7, lr}
 801707c:	b082      	sub	sp, #8
 801707e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017080:	2020      	movs	r0, #32
 8017082:	f002 fd59 	bl	8019b38 <pvPortMalloc>
 8017086:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d00a      	beq.n	80170a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2200      	movs	r2, #0
 8017092:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	3304      	adds	r3, #4
 8017098:	4618      	mov	r0, r3
 801709a:	f000 fa23 	bl	80174e4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	2200      	movs	r2, #0
 80170a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80170a4:	687b      	ldr	r3, [r7, #4]
	}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3708      	adds	r7, #8
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}
	...

080170b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b090      	sub	sp, #64	; 0x40
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]
 80170bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80170c2:	2300      	movs	r3, #0
 80170c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80170c6:	2300      	movs	r3, #0
 80170c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d10a      	bne.n	80170e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80170d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d4:	f383 8811 	msr	BASEPRI, r3
 80170d8:	f3bf 8f6f 	isb	sy
 80170dc:	f3bf 8f4f 	dsb	sy
 80170e0:	623b      	str	r3, [r7, #32]
}
 80170e2:	bf00      	nop
 80170e4:	e7fe      	b.n	80170e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00a      	beq.n	8017106 <xEventGroupWaitBits+0x56>
	__asm volatile
 80170f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f4:	f383 8811 	msr	BASEPRI, r3
 80170f8:	f3bf 8f6f 	isb	sy
 80170fc:	f3bf 8f4f 	dsb	sy
 8017100:	61fb      	str	r3, [r7, #28]
}
 8017102:	bf00      	nop
 8017104:	e7fe      	b.n	8017104 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d10a      	bne.n	8017122 <xEventGroupWaitBits+0x72>
	__asm volatile
 801710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017110:	f383 8811 	msr	BASEPRI, r3
 8017114:	f3bf 8f6f 	isb	sy
 8017118:	f3bf 8f4f 	dsb	sy
 801711c:	61bb      	str	r3, [r7, #24]
}
 801711e:	bf00      	nop
 8017120:	e7fe      	b.n	8017120 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017122:	f001 fe51 	bl	8018dc8 <xTaskGetSchedulerState>
 8017126:	4603      	mov	r3, r0
 8017128:	2b00      	cmp	r3, #0
 801712a:	d102      	bne.n	8017132 <xEventGroupWaitBits+0x82>
 801712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801712e:	2b00      	cmp	r3, #0
 8017130:	d101      	bne.n	8017136 <xEventGroupWaitBits+0x86>
 8017132:	2301      	movs	r3, #1
 8017134:	e000      	b.n	8017138 <xEventGroupWaitBits+0x88>
 8017136:	2300      	movs	r3, #0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d10a      	bne.n	8017152 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017140:	f383 8811 	msr	BASEPRI, r3
 8017144:	f3bf 8f6f 	isb	sy
 8017148:	f3bf 8f4f 	dsb	sy
 801714c:	617b      	str	r3, [r7, #20]
}
 801714e:	bf00      	nop
 8017150:	e7fe      	b.n	8017150 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017152:	f001 f9a3 	bl	801849c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801715c:	683a      	ldr	r2, [r7, #0]
 801715e:	68b9      	ldr	r1, [r7, #8]
 8017160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017162:	f000 f988 	bl	8017476 <prvTestWaitCondition>
 8017166:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801716a:	2b00      	cmp	r3, #0
 801716c:	d00e      	beq.n	801718c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017170:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017172:	2300      	movs	r3, #0
 8017174:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d028      	beq.n	80171ce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	43db      	mvns	r3, r3
 8017184:	401a      	ands	r2, r3
 8017186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017188:	601a      	str	r2, [r3, #0]
 801718a:	e020      	b.n	80171ce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801718c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801718e:	2b00      	cmp	r3, #0
 8017190:	d104      	bne.n	801719c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017194:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017196:	2301      	movs	r3, #1
 8017198:	633b      	str	r3, [r7, #48]	; 0x30
 801719a:	e018      	b.n	80171ce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d003      	beq.n	80171aa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80171a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171a8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d003      	beq.n	80171b8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80171b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80171b6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80171b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ba:	1d18      	adds	r0, r3, #4
 80171bc:	68ba      	ldr	r2, [r7, #8]
 80171be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c0:	4313      	orrs	r3, r2
 80171c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171c4:	4619      	mov	r1, r3
 80171c6:	f001 fb77 	bl	80188b8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80171ca:	2300      	movs	r3, #0
 80171cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80171ce:	f001 f973 	bl	80184b8 <xTaskResumeAll>
 80171d2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80171d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d031      	beq.n	801723e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80171da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d107      	bne.n	80171f0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80171e0:	4b19      	ldr	r3, [pc, #100]	; (8017248 <xEventGroupWaitBits+0x198>)
 80171e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171e6:	601a      	str	r2, [r3, #0]
 80171e8:	f3bf 8f4f 	dsb	sy
 80171ec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80171f0:	f001 fe76 	bl	8018ee0 <uxTaskResetEventItemValue>
 80171f4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80171f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d11a      	bne.n	8017236 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017200:	f002 fb78 	bl	80198f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801720a:	683a      	ldr	r2, [r7, #0]
 801720c:	68b9      	ldr	r1, [r7, #8]
 801720e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017210:	f000 f931 	bl	8017476 <prvTestWaitCondition>
 8017214:	4603      	mov	r3, r0
 8017216:	2b00      	cmp	r3, #0
 8017218:	d009      	beq.n	801722e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d006      	beq.n	801722e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017222:	681a      	ldr	r2, [r3, #0]
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	43db      	mvns	r3, r3
 8017228:	401a      	ands	r2, r3
 801722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801722c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801722e:	2301      	movs	r3, #1
 8017230:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017232:	f002 fb8f 	bl	8019954 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801723c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801723e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017240:	4618      	mov	r0, r3
 8017242:	3740      	adds	r7, #64	; 0x40
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}
 8017248:	e000ed04 	.word	0xe000ed04

0801724c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b086      	sub	sp, #24
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
 8017254:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d10a      	bne.n	8017276 <xEventGroupClearBits+0x2a>
	__asm volatile
 8017260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017264:	f383 8811 	msr	BASEPRI, r3
 8017268:	f3bf 8f6f 	isb	sy
 801726c:	f3bf 8f4f 	dsb	sy
 8017270:	60fb      	str	r3, [r7, #12]
}
 8017272:	bf00      	nop
 8017274:	e7fe      	b.n	8017274 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00a      	beq.n	8017296 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017284:	f383 8811 	msr	BASEPRI, r3
 8017288:	f3bf 8f6f 	isb	sy
 801728c:	f3bf 8f4f 	dsb	sy
 8017290:	60bb      	str	r3, [r7, #8]
}
 8017292:	bf00      	nop
 8017294:	e7fe      	b.n	8017294 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017296:	f002 fb2d 	bl	80198f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801729a:	697b      	ldr	r3, [r7, #20]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	681a      	ldr	r2, [r3, #0]
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	43db      	mvns	r3, r3
 80172a8:	401a      	ands	r2, r3
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80172ae:	f002 fb51 	bl	8019954 <vPortExitCritical>

	return uxReturn;
 80172b2:	693b      	ldr	r3, [r7, #16]
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3718      	adds	r7, #24
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}

080172bc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b084      	sub	sp, #16
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80172c6:	2300      	movs	r3, #0
 80172c8:	683a      	ldr	r2, [r7, #0]
 80172ca:	6879      	ldr	r1, [r7, #4]
 80172cc:	4804      	ldr	r0, [pc, #16]	; (80172e0 <xEventGroupClearBitsFromISR+0x24>)
 80172ce:	f002 f9c1 	bl	8019654 <xTimerPendFunctionCallFromISR>
 80172d2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80172d4:	68fb      	ldr	r3, [r7, #12]
	}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3710      	adds	r7, #16
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	bf00      	nop
 80172e0:	0801745d 	.word	0x0801745d

080172e4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80172e4:	b480      	push	{r7}
 80172e6:	b089      	sub	sp, #36	; 0x24
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80172f0:	f3ef 8211 	mrs	r2, BASEPRI
 80172f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f8:	f383 8811 	msr	BASEPRI, r3
 80172fc:	f3bf 8f6f 	isb	sy
 8017300:	f3bf 8f4f 	dsb	sy
 8017304:	60fa      	str	r2, [r7, #12]
 8017306:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017308:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801730a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801730c:	69fb      	ldr	r3, [r7, #28]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	617b      	str	r3, [r7, #20]
 8017312:	69bb      	ldr	r3, [r7, #24]
 8017314:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801731c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801731e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017320:	4618      	mov	r0, r3
 8017322:	3724      	adds	r7, #36	; 0x24
 8017324:	46bd      	mov	sp, r7
 8017326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732a:	4770      	bx	lr

0801732c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b08e      	sub	sp, #56	; 0x38
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017336:	2300      	movs	r3, #0
 8017338:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801733e:	2300      	movs	r3, #0
 8017340:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d10a      	bne.n	801735e <xEventGroupSetBits+0x32>
	__asm volatile
 8017348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801734c:	f383 8811 	msr	BASEPRI, r3
 8017350:	f3bf 8f6f 	isb	sy
 8017354:	f3bf 8f4f 	dsb	sy
 8017358:	613b      	str	r3, [r7, #16]
}
 801735a:	bf00      	nop
 801735c:	e7fe      	b.n	801735c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017364:	2b00      	cmp	r3, #0
 8017366:	d00a      	beq.n	801737e <xEventGroupSetBits+0x52>
	__asm volatile
 8017368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801736c:	f383 8811 	msr	BASEPRI, r3
 8017370:	f3bf 8f6f 	isb	sy
 8017374:	f3bf 8f4f 	dsb	sy
 8017378:	60fb      	str	r3, [r7, #12]
}
 801737a:	bf00      	nop
 801737c:	e7fe      	b.n	801737c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017380:	3304      	adds	r3, #4
 8017382:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017386:	3308      	adds	r3, #8
 8017388:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801738a:	f001 f887 	bl	801849c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	431a      	orrs	r2, r3
 801739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801739e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80173a0:	e03c      	b.n	801741c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80173a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80173a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80173ae:	2300      	movs	r3, #0
 80173b0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80173b2:	69bb      	ldr	r3, [r7, #24]
 80173b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173b8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80173ba:	69bb      	ldr	r3, [r7, #24]
 80173bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80173c0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d108      	bne.n	80173de <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80173cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	69bb      	ldr	r3, [r7, #24]
 80173d2:	4013      	ands	r3, r2
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d00b      	beq.n	80173f0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80173d8:	2301      	movs	r3, #1
 80173da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173dc:	e008      	b.n	80173f0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80173de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	69bb      	ldr	r3, [r7, #24]
 80173e4:	4013      	ands	r3, r2
 80173e6:	69ba      	ldr	r2, [r7, #24]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d101      	bne.n	80173f0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80173ec:	2301      	movs	r3, #1
 80173ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80173f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d010      	beq.n	8017418 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80173f6:	697b      	ldr	r3, [r7, #20]
 80173f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d003      	beq.n	8017408 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017402:	69bb      	ldr	r3, [r7, #24]
 8017404:	4313      	orrs	r3, r2
 8017406:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017410:	4619      	mov	r1, r3
 8017412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017414:	f001 fb1c 	bl	8018a50 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801741c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801741e:	6a3b      	ldr	r3, [r7, #32]
 8017420:	429a      	cmp	r2, r3
 8017422:	d1be      	bne.n	80173a2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801742a:	43db      	mvns	r3, r3
 801742c:	401a      	ands	r2, r3
 801742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017430:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017432:	f001 f841 	bl	80184b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017438:	681b      	ldr	r3, [r3, #0]
}
 801743a:	4618      	mov	r0, r3
 801743c:	3738      	adds	r7, #56	; 0x38
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}

08017442 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017442:	b580      	push	{r7, lr}
 8017444:	b082      	sub	sp, #8
 8017446:	af00      	add	r7, sp, #0
 8017448:	6078      	str	r0, [r7, #4]
 801744a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801744c:	6839      	ldr	r1, [r7, #0]
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f7ff ff6c 	bl	801732c <xEventGroupSetBits>
}
 8017454:	bf00      	nop
 8017456:	3708      	adds	r7, #8
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}

0801745c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017466:	6839      	ldr	r1, [r7, #0]
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f7ff feef 	bl	801724c <xEventGroupClearBits>
}
 801746e:	bf00      	nop
 8017470:	3708      	adds	r7, #8
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}

08017476 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017476:	b480      	push	{r7}
 8017478:	b087      	sub	sp, #28
 801747a:	af00      	add	r7, sp, #0
 801747c:	60f8      	str	r0, [r7, #12]
 801747e:	60b9      	str	r1, [r7, #8]
 8017480:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017482:	2300      	movs	r3, #0
 8017484:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d107      	bne.n	801749c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801748c:	68fa      	ldr	r2, [r7, #12]
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	4013      	ands	r3, r2
 8017492:	2b00      	cmp	r3, #0
 8017494:	d00a      	beq.n	80174ac <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017496:	2301      	movs	r3, #1
 8017498:	617b      	str	r3, [r7, #20]
 801749a:	e007      	b.n	80174ac <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801749c:	68fa      	ldr	r2, [r7, #12]
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	4013      	ands	r3, r2
 80174a2:	68ba      	ldr	r2, [r7, #8]
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d101      	bne.n	80174ac <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80174a8:	2301      	movs	r3, #1
 80174aa:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80174ac:	697b      	ldr	r3, [r7, #20]
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	371c      	adds	r7, #28
 80174b2:	46bd      	mov	sp, r7
 80174b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b8:	4770      	bx	lr
	...

080174bc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	68ba      	ldr	r2, [r7, #8]
 80174cc:	68f9      	ldr	r1, [r7, #12]
 80174ce:	4804      	ldr	r0, [pc, #16]	; (80174e0 <xEventGroupSetBitsFromISR+0x24>)
 80174d0:	f002 f8c0 	bl	8019654 <xTimerPendFunctionCallFromISR>
 80174d4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80174d6:	697b      	ldr	r3, [r7, #20]
	}
 80174d8:	4618      	mov	r0, r3
 80174da:	3718      	adds	r7, #24
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	08017443 	.word	0x08017443

080174e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f103 0208 	add.w	r2, r3, #8
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80174fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f103 0208 	add.w	r2, r3, #8
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	f103 0208 	add.w	r2, r3, #8
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	2200      	movs	r2, #0
 8017516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017518:	bf00      	nop
 801751a:	370c      	adds	r7, #12
 801751c:	46bd      	mov	sp, r7
 801751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017522:	4770      	bx	lr

08017524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017524:	b480      	push	{r7}
 8017526:	b083      	sub	sp, #12
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2200      	movs	r2, #0
 8017530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017532:	bf00      	nop
 8017534:	370c      	adds	r7, #12
 8017536:	46bd      	mov	sp, r7
 8017538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753c:	4770      	bx	lr

0801753e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801753e:	b480      	push	{r7}
 8017540:	b085      	sub	sp, #20
 8017542:	af00      	add	r7, sp, #0
 8017544:	6078      	str	r0, [r7, #4]
 8017546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	68fa      	ldr	r2, [r7, #12]
 8017552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	689a      	ldr	r2, [r3, #8]
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	689b      	ldr	r3, [r3, #8]
 8017560:	683a      	ldr	r2, [r7, #0]
 8017562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	683a      	ldr	r2, [r7, #0]
 8017568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	687a      	ldr	r2, [r7, #4]
 801756e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	1c5a      	adds	r2, r3, #1
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	601a      	str	r2, [r3, #0]
}
 801757a:	bf00      	nop
 801757c:	3714      	adds	r7, #20
 801757e:	46bd      	mov	sp, r7
 8017580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017584:	4770      	bx	lr

08017586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017586:	b480      	push	{r7}
 8017588:	b085      	sub	sp, #20
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
 801758e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017596:	68bb      	ldr	r3, [r7, #8]
 8017598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801759c:	d103      	bne.n	80175a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	691b      	ldr	r3, [r3, #16]
 80175a2:	60fb      	str	r3, [r7, #12]
 80175a4:	e00c      	b.n	80175c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	3308      	adds	r3, #8
 80175aa:	60fb      	str	r3, [r7, #12]
 80175ac:	e002      	b.n	80175b4 <vListInsert+0x2e>
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	685b      	ldr	r3, [r3, #4]
 80175b2:	60fb      	str	r3, [r7, #12]
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	68ba      	ldr	r2, [r7, #8]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d2f6      	bcs.n	80175ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	685a      	ldr	r2, [r3, #4]
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	683a      	ldr	r2, [r7, #0]
 80175ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	68fa      	ldr	r2, [r7, #12]
 80175d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	683a      	ldr	r2, [r7, #0]
 80175da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	1c5a      	adds	r2, r3, #1
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	601a      	str	r2, [r3, #0]
}
 80175ec:	bf00      	nop
 80175ee:	3714      	adds	r7, #20
 80175f0:	46bd      	mov	sp, r7
 80175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f6:	4770      	bx	lr

080175f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80175f8:	b480      	push	{r7}
 80175fa:	b085      	sub	sp, #20
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	691b      	ldr	r3, [r3, #16]
 8017604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	685b      	ldr	r3, [r3, #4]
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	6892      	ldr	r2, [r2, #8]
 801760e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	689b      	ldr	r3, [r3, #8]
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	6852      	ldr	r2, [r2, #4]
 8017618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	687a      	ldr	r2, [r7, #4]
 8017620:	429a      	cmp	r2, r3
 8017622:	d103      	bne.n	801762c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	689a      	ldr	r2, [r3, #8]
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2200      	movs	r2, #0
 8017630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	1e5a      	subs	r2, r3, #1
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	681b      	ldr	r3, [r3, #0]
}
 8017640:	4618      	mov	r0, r3
 8017642:	3714      	adds	r7, #20
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr

0801764c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b084      	sub	sp, #16
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
 8017654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d10a      	bne.n	8017676 <xQueueGenericReset+0x2a>
	__asm volatile
 8017660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017664:	f383 8811 	msr	BASEPRI, r3
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	f3bf 8f4f 	dsb	sy
 8017670:	60bb      	str	r3, [r7, #8]
}
 8017672:	bf00      	nop
 8017674:	e7fe      	b.n	8017674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017676:	f002 f93d 	bl	80198f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	681a      	ldr	r2, [r3, #0]
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017682:	68f9      	ldr	r1, [r7, #12]
 8017684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017686:	fb01 f303 	mul.w	r3, r1, r3
 801768a:	441a      	add	r2, r3
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2200      	movs	r2, #0
 8017694:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	681a      	ldr	r2, [r3, #0]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176a6:	3b01      	subs	r3, #1
 80176a8:	68f9      	ldr	r1, [r7, #12]
 80176aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176ac:	fb01 f303 	mul.w	r3, r1, r3
 80176b0:	441a      	add	r2, r3
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	22ff      	movs	r2, #255	; 0xff
 80176ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	22ff      	movs	r2, #255	; 0xff
 80176c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80176c6:	683b      	ldr	r3, [r7, #0]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d114      	bne.n	80176f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	691b      	ldr	r3, [r3, #16]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d01a      	beq.n	801770a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	3310      	adds	r3, #16
 80176d8:	4618      	mov	r0, r3
 80176da:	f001 f955 	bl	8018988 <xTaskRemoveFromEventList>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d012      	beq.n	801770a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80176e4:	4b0c      	ldr	r3, [pc, #48]	; (8017718 <xQueueGenericReset+0xcc>)
 80176e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176ea:	601a      	str	r2, [r3, #0]
 80176ec:	f3bf 8f4f 	dsb	sy
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	e009      	b.n	801770a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	3310      	adds	r3, #16
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7ff fef2 	bl	80174e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	3324      	adds	r3, #36	; 0x24
 8017704:	4618      	mov	r0, r3
 8017706:	f7ff feed 	bl	80174e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801770a:	f002 f923 	bl	8019954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801770e:	2301      	movs	r3, #1
}
 8017710:	4618      	mov	r0, r3
 8017712:	3710      	adds	r7, #16
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	e000ed04 	.word	0xe000ed04

0801771c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801771c:	b580      	push	{r7, lr}
 801771e:	b08e      	sub	sp, #56	; 0x38
 8017720:	af02      	add	r7, sp, #8
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	607a      	str	r2, [r7, #4]
 8017728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d10a      	bne.n	8017746 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017734:	f383 8811 	msr	BASEPRI, r3
 8017738:	f3bf 8f6f 	isb	sy
 801773c:	f3bf 8f4f 	dsb	sy
 8017740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017742:	bf00      	nop
 8017744:	e7fe      	b.n	8017744 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d10a      	bne.n	8017762 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017750:	f383 8811 	msr	BASEPRI, r3
 8017754:	f3bf 8f6f 	isb	sy
 8017758:	f3bf 8f4f 	dsb	sy
 801775c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801775e:	bf00      	nop
 8017760:	e7fe      	b.n	8017760 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d002      	beq.n	801776e <xQueueGenericCreateStatic+0x52>
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d001      	beq.n	8017772 <xQueueGenericCreateStatic+0x56>
 801776e:	2301      	movs	r3, #1
 8017770:	e000      	b.n	8017774 <xQueueGenericCreateStatic+0x58>
 8017772:	2300      	movs	r3, #0
 8017774:	2b00      	cmp	r3, #0
 8017776:	d10a      	bne.n	801778e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801777c:	f383 8811 	msr	BASEPRI, r3
 8017780:	f3bf 8f6f 	isb	sy
 8017784:	f3bf 8f4f 	dsb	sy
 8017788:	623b      	str	r3, [r7, #32]
}
 801778a:	bf00      	nop
 801778c:	e7fe      	b.n	801778c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d102      	bne.n	801779a <xQueueGenericCreateStatic+0x7e>
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d101      	bne.n	801779e <xQueueGenericCreateStatic+0x82>
 801779a:	2301      	movs	r3, #1
 801779c:	e000      	b.n	80177a0 <xQueueGenericCreateStatic+0x84>
 801779e:	2300      	movs	r3, #0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d10a      	bne.n	80177ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80177a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a8:	f383 8811 	msr	BASEPRI, r3
 80177ac:	f3bf 8f6f 	isb	sy
 80177b0:	f3bf 8f4f 	dsb	sy
 80177b4:	61fb      	str	r3, [r7, #28]
}
 80177b6:	bf00      	nop
 80177b8:	e7fe      	b.n	80177b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80177ba:	2350      	movs	r3, #80	; 0x50
 80177bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80177be:	697b      	ldr	r3, [r7, #20]
 80177c0:	2b50      	cmp	r3, #80	; 0x50
 80177c2:	d00a      	beq.n	80177da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80177c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c8:	f383 8811 	msr	BASEPRI, r3
 80177cc:	f3bf 8f6f 	isb	sy
 80177d0:	f3bf 8f4f 	dsb	sy
 80177d4:	61bb      	str	r3, [r7, #24]
}
 80177d6:	bf00      	nop
 80177d8:	e7fe      	b.n	80177d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80177da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80177e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d00d      	beq.n	8017802 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80177e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e8:	2201      	movs	r2, #1
 80177ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80177ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80177f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f4:	9300      	str	r3, [sp, #0]
 80177f6:	4613      	mov	r3, r2
 80177f8:	687a      	ldr	r2, [r7, #4]
 80177fa:	68b9      	ldr	r1, [r7, #8]
 80177fc:	68f8      	ldr	r0, [r7, #12]
 80177fe:	f000 f805 	bl	801780c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017804:	4618      	mov	r0, r3
 8017806:	3730      	adds	r7, #48	; 0x30
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b084      	sub	sp, #16
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	60b9      	str	r1, [r7, #8]
 8017816:	607a      	str	r2, [r7, #4]
 8017818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801781a:	68bb      	ldr	r3, [r7, #8]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d103      	bne.n	8017828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017820:	69bb      	ldr	r3, [r7, #24]
 8017822:	69ba      	ldr	r2, [r7, #24]
 8017824:	601a      	str	r2, [r3, #0]
 8017826:	e002      	b.n	801782e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801782e:	69bb      	ldr	r3, [r7, #24]
 8017830:	68fa      	ldr	r2, [r7, #12]
 8017832:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017834:	69bb      	ldr	r3, [r7, #24]
 8017836:	68ba      	ldr	r2, [r7, #8]
 8017838:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801783a:	2101      	movs	r1, #1
 801783c:	69b8      	ldr	r0, [r7, #24]
 801783e:	f7ff ff05 	bl	801764c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017842:	69bb      	ldr	r3, [r7, #24]
 8017844:	78fa      	ldrb	r2, [r7, #3]
 8017846:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801784a:	bf00      	nop
 801784c:	3710      	adds	r7, #16
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
	...

08017854 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b08e      	sub	sp, #56	; 0x38
 8017858:	af00      	add	r7, sp, #0
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	607a      	str	r2, [r7, #4]
 8017860:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017862:	2300      	movs	r3, #0
 8017864:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786c:	2b00      	cmp	r3, #0
 801786e:	d10a      	bne.n	8017886 <xQueueGenericSend+0x32>
	__asm volatile
 8017870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017874:	f383 8811 	msr	BASEPRI, r3
 8017878:	f3bf 8f6f 	isb	sy
 801787c:	f3bf 8f4f 	dsb	sy
 8017880:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017882:	bf00      	nop
 8017884:	e7fe      	b.n	8017884 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017886:	68bb      	ldr	r3, [r7, #8]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d103      	bne.n	8017894 <xQueueGenericSend+0x40>
 801788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017890:	2b00      	cmp	r3, #0
 8017892:	d101      	bne.n	8017898 <xQueueGenericSend+0x44>
 8017894:	2301      	movs	r3, #1
 8017896:	e000      	b.n	801789a <xQueueGenericSend+0x46>
 8017898:	2300      	movs	r3, #0
 801789a:	2b00      	cmp	r3, #0
 801789c:	d10a      	bne.n	80178b4 <xQueueGenericSend+0x60>
	__asm volatile
 801789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178a2:	f383 8811 	msr	BASEPRI, r3
 80178a6:	f3bf 8f6f 	isb	sy
 80178aa:	f3bf 8f4f 	dsb	sy
 80178ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80178b0:	bf00      	nop
 80178b2:	e7fe      	b.n	80178b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	2b02      	cmp	r3, #2
 80178b8:	d103      	bne.n	80178c2 <xQueueGenericSend+0x6e>
 80178ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178be:	2b01      	cmp	r3, #1
 80178c0:	d101      	bne.n	80178c6 <xQueueGenericSend+0x72>
 80178c2:	2301      	movs	r3, #1
 80178c4:	e000      	b.n	80178c8 <xQueueGenericSend+0x74>
 80178c6:	2300      	movs	r3, #0
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d10a      	bne.n	80178e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80178cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178d0:	f383 8811 	msr	BASEPRI, r3
 80178d4:	f3bf 8f6f 	isb	sy
 80178d8:	f3bf 8f4f 	dsb	sy
 80178dc:	623b      	str	r3, [r7, #32]
}
 80178de:	bf00      	nop
 80178e0:	e7fe      	b.n	80178e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80178e2:	f001 fa71 	bl	8018dc8 <xTaskGetSchedulerState>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d102      	bne.n	80178f2 <xQueueGenericSend+0x9e>
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d101      	bne.n	80178f6 <xQueueGenericSend+0xa2>
 80178f2:	2301      	movs	r3, #1
 80178f4:	e000      	b.n	80178f8 <xQueueGenericSend+0xa4>
 80178f6:	2300      	movs	r3, #0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d10a      	bne.n	8017912 <xQueueGenericSend+0xbe>
	__asm volatile
 80178fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017900:	f383 8811 	msr	BASEPRI, r3
 8017904:	f3bf 8f6f 	isb	sy
 8017908:	f3bf 8f4f 	dsb	sy
 801790c:	61fb      	str	r3, [r7, #28]
}
 801790e:	bf00      	nop
 8017910:	e7fe      	b.n	8017910 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017912:	f001 ffef 	bl	80198f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801791e:	429a      	cmp	r2, r3
 8017920:	d302      	bcc.n	8017928 <xQueueGenericSend+0xd4>
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	2b02      	cmp	r3, #2
 8017926:	d129      	bne.n	801797c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017928:	683a      	ldr	r2, [r7, #0]
 801792a:	68b9      	ldr	r1, [r7, #8]
 801792c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801792e:	f000 fa0b 	bl	8017d48 <prvCopyDataToQueue>
 8017932:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017938:	2b00      	cmp	r3, #0
 801793a:	d010      	beq.n	801795e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793e:	3324      	adds	r3, #36	; 0x24
 8017940:	4618      	mov	r0, r3
 8017942:	f001 f821 	bl	8018988 <xTaskRemoveFromEventList>
 8017946:	4603      	mov	r3, r0
 8017948:	2b00      	cmp	r3, #0
 801794a:	d013      	beq.n	8017974 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801794c:	4b3f      	ldr	r3, [pc, #252]	; (8017a4c <xQueueGenericSend+0x1f8>)
 801794e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017952:	601a      	str	r2, [r3, #0]
 8017954:	f3bf 8f4f 	dsb	sy
 8017958:	f3bf 8f6f 	isb	sy
 801795c:	e00a      	b.n	8017974 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017960:	2b00      	cmp	r3, #0
 8017962:	d007      	beq.n	8017974 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017964:	4b39      	ldr	r3, [pc, #228]	; (8017a4c <xQueueGenericSend+0x1f8>)
 8017966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801796a:	601a      	str	r2, [r3, #0]
 801796c:	f3bf 8f4f 	dsb	sy
 8017970:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017974:	f001 ffee 	bl	8019954 <vPortExitCritical>
				return pdPASS;
 8017978:	2301      	movs	r3, #1
 801797a:	e063      	b.n	8017a44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d103      	bne.n	801798a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017982:	f001 ffe7 	bl	8019954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017986:	2300      	movs	r3, #0
 8017988:	e05c      	b.n	8017a44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801798c:	2b00      	cmp	r3, #0
 801798e:	d106      	bne.n	801799e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017990:	f107 0314 	add.w	r3, r7, #20
 8017994:	4618      	mov	r0, r3
 8017996:	f001 f8bd 	bl	8018b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801799a:	2301      	movs	r3, #1
 801799c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801799e:	f001 ffd9 	bl	8019954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80179a2:	f000 fd7b 	bl	801849c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80179a6:	f001 ffa5 	bl	80198f4 <vPortEnterCritical>
 80179aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179b0:	b25b      	sxtb	r3, r3
 80179b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179b6:	d103      	bne.n	80179c0 <xQueueGenericSend+0x16c>
 80179b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ba:	2200      	movs	r2, #0
 80179bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179c6:	b25b      	sxtb	r3, r3
 80179c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179cc:	d103      	bne.n	80179d6 <xQueueGenericSend+0x182>
 80179ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d0:	2200      	movs	r2, #0
 80179d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179d6:	f001 ffbd 	bl	8019954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80179da:	1d3a      	adds	r2, r7, #4
 80179dc:	f107 0314 	add.w	r3, r7, #20
 80179e0:	4611      	mov	r1, r2
 80179e2:	4618      	mov	r0, r3
 80179e4:	f001 f8ac 	bl	8018b40 <xTaskCheckForTimeOut>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d124      	bne.n	8017a38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80179ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179f0:	f000 faa2 	bl	8017f38 <prvIsQueueFull>
 80179f4:	4603      	mov	r3, r0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d018      	beq.n	8017a2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80179fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fc:	3310      	adds	r3, #16
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	4611      	mov	r1, r2
 8017a02:	4618      	mov	r0, r3
 8017a04:	f000 ff34 	bl	8018870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a0a:	f000 fa2d 	bl	8017e68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017a0e:	f000 fd53 	bl	80184b8 <xTaskResumeAll>
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	f47f af7c 	bne.w	8017912 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017a1a:	4b0c      	ldr	r3, [pc, #48]	; (8017a4c <xQueueGenericSend+0x1f8>)
 8017a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a20:	601a      	str	r2, [r3, #0]
 8017a22:	f3bf 8f4f 	dsb	sy
 8017a26:	f3bf 8f6f 	isb	sy
 8017a2a:	e772      	b.n	8017912 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a2e:	f000 fa1b 	bl	8017e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a32:	f000 fd41 	bl	80184b8 <xTaskResumeAll>
 8017a36:	e76c      	b.n	8017912 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a3a:	f000 fa15 	bl	8017e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a3e:	f000 fd3b 	bl	80184b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017a42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3738      	adds	r7, #56	; 0x38
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}
 8017a4c:	e000ed04 	.word	0xe000ed04

08017a50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b090      	sub	sp, #64	; 0x40
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	60f8      	str	r0, [r7, #12]
 8017a58:	60b9      	str	r1, [r7, #8]
 8017a5a:	607a      	str	r2, [r7, #4]
 8017a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d10a      	bne.n	8017a7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a6c:	f383 8811 	msr	BASEPRI, r3
 8017a70:	f3bf 8f6f 	isb	sy
 8017a74:	f3bf 8f4f 	dsb	sy
 8017a78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017a7a:	bf00      	nop
 8017a7c:	e7fe      	b.n	8017a7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d103      	bne.n	8017a8c <xQueueGenericSendFromISR+0x3c>
 8017a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d101      	bne.n	8017a90 <xQueueGenericSendFromISR+0x40>
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	e000      	b.n	8017a92 <xQueueGenericSendFromISR+0x42>
 8017a90:	2300      	movs	r3, #0
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d10a      	bne.n	8017aac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a9a:	f383 8811 	msr	BASEPRI, r3
 8017a9e:	f3bf 8f6f 	isb	sy
 8017aa2:	f3bf 8f4f 	dsb	sy
 8017aa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017aa8:	bf00      	nop
 8017aaa:	e7fe      	b.n	8017aaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	2b02      	cmp	r3, #2
 8017ab0:	d103      	bne.n	8017aba <xQueueGenericSendFromISR+0x6a>
 8017ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ab6:	2b01      	cmp	r3, #1
 8017ab8:	d101      	bne.n	8017abe <xQueueGenericSendFromISR+0x6e>
 8017aba:	2301      	movs	r3, #1
 8017abc:	e000      	b.n	8017ac0 <xQueueGenericSendFromISR+0x70>
 8017abe:	2300      	movs	r3, #0
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d10a      	bne.n	8017ada <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ac8:	f383 8811 	msr	BASEPRI, r3
 8017acc:	f3bf 8f6f 	isb	sy
 8017ad0:	f3bf 8f4f 	dsb	sy
 8017ad4:	623b      	str	r3, [r7, #32]
}
 8017ad6:	bf00      	nop
 8017ad8:	e7fe      	b.n	8017ad8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ada:	f001 ffed 	bl	8019ab8 <vPortValidateInterruptPriority>
	__asm volatile
 8017ade:	f3ef 8211 	mrs	r2, BASEPRI
 8017ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ae6:	f383 8811 	msr	BASEPRI, r3
 8017aea:	f3bf 8f6f 	isb	sy
 8017aee:	f3bf 8f4f 	dsb	sy
 8017af2:	61fa      	str	r2, [r7, #28]
 8017af4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017af6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017af8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b02:	429a      	cmp	r2, r3
 8017b04:	d302      	bcc.n	8017b0c <xQueueGenericSendFromISR+0xbc>
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	2b02      	cmp	r3, #2
 8017b0a:	d12f      	bne.n	8017b6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017b1c:	683a      	ldr	r2, [r7, #0]
 8017b1e:	68b9      	ldr	r1, [r7, #8]
 8017b20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017b22:	f000 f911 	bl	8017d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017b26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b2e:	d112      	bne.n	8017b56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d016      	beq.n	8017b66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3a:	3324      	adds	r3, #36	; 0x24
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f000 ff23 	bl	8018988 <xTaskRemoveFromEventList>
 8017b42:	4603      	mov	r3, r0
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d00e      	beq.n	8017b66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d00b      	beq.n	8017b66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2201      	movs	r2, #1
 8017b52:	601a      	str	r2, [r3, #0]
 8017b54:	e007      	b.n	8017b66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017b56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017b5a:	3301      	adds	r3, #1
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	b25a      	sxtb	r2, r3
 8017b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017b66:	2301      	movs	r3, #1
 8017b68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017b6a:	e001      	b.n	8017b70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b72:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017b74:	697b      	ldr	r3, [r7, #20]
 8017b76:	f383 8811 	msr	BASEPRI, r3
}
 8017b7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3740      	adds	r7, #64	; 0x40
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}
	...

08017b88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b08c      	sub	sp, #48	; 0x30
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	60f8      	str	r0, [r7, #12]
 8017b90:	60b9      	str	r1, [r7, #8]
 8017b92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017b94:	2300      	movs	r3, #0
 8017b96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d10a      	bne.n	8017bb8 <xQueueReceive+0x30>
	__asm volatile
 8017ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba6:	f383 8811 	msr	BASEPRI, r3
 8017baa:	f3bf 8f6f 	isb	sy
 8017bae:	f3bf 8f4f 	dsb	sy
 8017bb2:	623b      	str	r3, [r7, #32]
}
 8017bb4:	bf00      	nop
 8017bb6:	e7fe      	b.n	8017bb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d103      	bne.n	8017bc6 <xQueueReceive+0x3e>
 8017bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d101      	bne.n	8017bca <xQueueReceive+0x42>
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	e000      	b.n	8017bcc <xQueueReceive+0x44>
 8017bca:	2300      	movs	r3, #0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d10a      	bne.n	8017be6 <xQueueReceive+0x5e>
	__asm volatile
 8017bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd4:	f383 8811 	msr	BASEPRI, r3
 8017bd8:	f3bf 8f6f 	isb	sy
 8017bdc:	f3bf 8f4f 	dsb	sy
 8017be0:	61fb      	str	r3, [r7, #28]
}
 8017be2:	bf00      	nop
 8017be4:	e7fe      	b.n	8017be4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017be6:	f001 f8ef 	bl	8018dc8 <xTaskGetSchedulerState>
 8017bea:	4603      	mov	r3, r0
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d102      	bne.n	8017bf6 <xQueueReceive+0x6e>
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d101      	bne.n	8017bfa <xQueueReceive+0x72>
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	e000      	b.n	8017bfc <xQueueReceive+0x74>
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d10a      	bne.n	8017c16 <xQueueReceive+0x8e>
	__asm volatile
 8017c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c04:	f383 8811 	msr	BASEPRI, r3
 8017c08:	f3bf 8f6f 	isb	sy
 8017c0c:	f3bf 8f4f 	dsb	sy
 8017c10:	61bb      	str	r3, [r7, #24]
}
 8017c12:	bf00      	nop
 8017c14:	e7fe      	b.n	8017c14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017c16:	f001 fe6d 	bl	80198f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d01f      	beq.n	8017c66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017c26:	68b9      	ldr	r1, [r7, #8]
 8017c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c2a:	f000 f8f7 	bl	8017e1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c30:	1e5a      	subs	r2, r3, #1
 8017c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c38:	691b      	ldr	r3, [r3, #16]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d00f      	beq.n	8017c5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	3310      	adds	r3, #16
 8017c42:	4618      	mov	r0, r3
 8017c44:	f000 fea0 	bl	8018988 <xTaskRemoveFromEventList>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d007      	beq.n	8017c5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017c4e:	4b3d      	ldr	r3, [pc, #244]	; (8017d44 <xQueueReceive+0x1bc>)
 8017c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c54:	601a      	str	r2, [r3, #0]
 8017c56:	f3bf 8f4f 	dsb	sy
 8017c5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017c5e:	f001 fe79 	bl	8019954 <vPortExitCritical>
				return pdPASS;
 8017c62:	2301      	movs	r3, #1
 8017c64:	e069      	b.n	8017d3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d103      	bne.n	8017c74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017c6c:	f001 fe72 	bl	8019954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017c70:	2300      	movs	r3, #0
 8017c72:	e062      	b.n	8017d3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d106      	bne.n	8017c88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017c7a:	f107 0310 	add.w	r3, r7, #16
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f000 ff48 	bl	8018b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017c84:	2301      	movs	r3, #1
 8017c86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017c88:	f001 fe64 	bl	8019954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017c8c:	f000 fc06 	bl	801849c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017c90:	f001 fe30 	bl	80198f4 <vPortEnterCritical>
 8017c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c9a:	b25b      	sxtb	r3, r3
 8017c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ca0:	d103      	bne.n	8017caa <xQueueReceive+0x122>
 8017ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cb0:	b25b      	sxtb	r3, r3
 8017cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017cb6:	d103      	bne.n	8017cc0 <xQueueReceive+0x138>
 8017cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cba:	2200      	movs	r2, #0
 8017cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017cc0:	f001 fe48 	bl	8019954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017cc4:	1d3a      	adds	r2, r7, #4
 8017cc6:	f107 0310 	add.w	r3, r7, #16
 8017cca:	4611      	mov	r1, r2
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f000 ff37 	bl	8018b40 <xTaskCheckForTimeOut>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d123      	bne.n	8017d20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cda:	f000 f917 	bl	8017f0c <prvIsQueueEmpty>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d017      	beq.n	8017d14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce6:	3324      	adds	r3, #36	; 0x24
 8017ce8:	687a      	ldr	r2, [r7, #4]
 8017cea:	4611      	mov	r1, r2
 8017cec:	4618      	mov	r0, r3
 8017cee:	f000 fdbf 	bl	8018870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cf4:	f000 f8b8 	bl	8017e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017cf8:	f000 fbde 	bl	80184b8 <xTaskResumeAll>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d189      	bne.n	8017c16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017d02:	4b10      	ldr	r3, [pc, #64]	; (8017d44 <xQueueReceive+0x1bc>)
 8017d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d08:	601a      	str	r2, [r3, #0]
 8017d0a:	f3bf 8f4f 	dsb	sy
 8017d0e:	f3bf 8f6f 	isb	sy
 8017d12:	e780      	b.n	8017c16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d16:	f000 f8a7 	bl	8017e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017d1a:	f000 fbcd 	bl	80184b8 <xTaskResumeAll>
 8017d1e:	e77a      	b.n	8017c16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d22:	f000 f8a1 	bl	8017e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017d26:	f000 fbc7 	bl	80184b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d2c:	f000 f8ee 	bl	8017f0c <prvIsQueueEmpty>
 8017d30:	4603      	mov	r3, r0
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	f43f af6f 	beq.w	8017c16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017d38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3730      	adds	r7, #48	; 0x30
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	e000ed04 	.word	0xe000ed04

08017d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b086      	sub	sp, #24
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	60f8      	str	r0, [r7, #12]
 8017d50:	60b9      	str	r1, [r7, #8]
 8017d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017d54:	2300      	movs	r3, #0
 8017d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d10d      	bne.n	8017d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d14d      	bne.n	8017e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	689b      	ldr	r3, [r3, #8]
 8017d72:	4618      	mov	r0, r3
 8017d74:	f001 f846 	bl	8018e04 <xTaskPriorityDisinherit>
 8017d78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	609a      	str	r2, [r3, #8]
 8017d80:	e043      	b.n	8017e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d119      	bne.n	8017dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	6858      	ldr	r0, [r3, #4]
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d90:	461a      	mov	r2, r3
 8017d92:	68b9      	ldr	r1, [r7, #8]
 8017d94:	f002 f8e4 	bl	8019f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	685a      	ldr	r2, [r3, #4]
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017da0:	441a      	add	r2, r3
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	685a      	ldr	r2, [r3, #4]
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	689b      	ldr	r3, [r3, #8]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d32b      	bcc.n	8017e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	681a      	ldr	r2, [r3, #0]
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	605a      	str	r2, [r3, #4]
 8017dba:	e026      	b.n	8017e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	68d8      	ldr	r0, [r3, #12]
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	68b9      	ldr	r1, [r7, #8]
 8017dc8:	f002 f8ca 	bl	8019f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	68da      	ldr	r2, [r3, #12]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dd4:	425b      	negs	r3, r3
 8017dd6:	441a      	add	r2, r3
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	68da      	ldr	r2, [r3, #12]
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d207      	bcs.n	8017df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	689a      	ldr	r2, [r3, #8]
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017df0:	425b      	negs	r3, r3
 8017df2:	441a      	add	r2, r3
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2b02      	cmp	r3, #2
 8017dfc:	d105      	bne.n	8017e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d002      	beq.n	8017e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	3b01      	subs	r3, #1
 8017e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017e0a:	693b      	ldr	r3, [r7, #16]
 8017e0c:	1c5a      	adds	r2, r3, #1
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017e12:	697b      	ldr	r3, [r7, #20]
}
 8017e14:	4618      	mov	r0, r3
 8017e16:	3718      	adds	r7, #24
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	bd80      	pop	{r7, pc}

08017e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b082      	sub	sp, #8
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d018      	beq.n	8017e60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	68da      	ldr	r2, [r3, #12]
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e36:	441a      	add	r2, r3
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	68da      	ldr	r2, [r3, #12]
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	689b      	ldr	r3, [r3, #8]
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d303      	bcc.n	8017e50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	68d9      	ldr	r1, [r3, #12]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e58:	461a      	mov	r2, r3
 8017e5a:	6838      	ldr	r0, [r7, #0]
 8017e5c:	f002 f880 	bl	8019f60 <memcpy>
	}
}
 8017e60:	bf00      	nop
 8017e62:	3708      	adds	r7, #8
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017e70:	f001 fd40 	bl	80198f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017e7c:	e011      	b.n	8017ea2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d012      	beq.n	8017eac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	3324      	adds	r3, #36	; 0x24
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f000 fd7c 	bl	8018988 <xTaskRemoveFromEventList>
 8017e90:	4603      	mov	r3, r0
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d001      	beq.n	8017e9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017e96:	f000 feb5 	bl	8018c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017e9a:	7bfb      	ldrb	r3, [r7, #15]
 8017e9c:	3b01      	subs	r3, #1
 8017e9e:	b2db      	uxtb	r3, r3
 8017ea0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	dce9      	bgt.n	8017e7e <prvUnlockQueue+0x16>
 8017eaa:	e000      	b.n	8017eae <prvUnlockQueue+0x46>
					break;
 8017eac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	22ff      	movs	r2, #255	; 0xff
 8017eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017eb6:	f001 fd4d 	bl	8019954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017eba:	f001 fd1b 	bl	80198f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ec4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017ec6:	e011      	b.n	8017eec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	691b      	ldr	r3, [r3, #16]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d012      	beq.n	8017ef6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	3310      	adds	r3, #16
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f000 fd57 	bl	8018988 <xTaskRemoveFromEventList>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d001      	beq.n	8017ee4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017ee0:	f000 fe90 	bl	8018c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017ee4:	7bbb      	ldrb	r3, [r7, #14]
 8017ee6:	3b01      	subs	r3, #1
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	dce9      	bgt.n	8017ec8 <prvUnlockQueue+0x60>
 8017ef4:	e000      	b.n	8017ef8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017ef6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	22ff      	movs	r2, #255	; 0xff
 8017efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017f00:	f001 fd28 	bl	8019954 <vPortExitCritical>
}
 8017f04:	bf00      	nop
 8017f06:	3710      	adds	r7, #16
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}

08017f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b084      	sub	sp, #16
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017f14:	f001 fcee 	bl	80198f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d102      	bne.n	8017f26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017f20:	2301      	movs	r3, #1
 8017f22:	60fb      	str	r3, [r7, #12]
 8017f24:	e001      	b.n	8017f2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017f26:	2300      	movs	r3, #0
 8017f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017f2a:	f001 fd13 	bl	8019954 <vPortExitCritical>

	return xReturn;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	3710      	adds	r7, #16
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd80      	pop	{r7, pc}

08017f38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017f40:	f001 fcd8 	bl	80198f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d102      	bne.n	8017f56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017f50:	2301      	movs	r3, #1
 8017f52:	60fb      	str	r3, [r7, #12]
 8017f54:	e001      	b.n	8017f5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017f56:	2300      	movs	r3, #0
 8017f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017f5a:	f001 fcfb 	bl	8019954 <vPortExitCritical>

	return xReturn;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
}
 8017f60:	4618      	mov	r0, r3
 8017f62:	3710      	adds	r7, #16
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}

08017f68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017f68:	b480      	push	{r7}
 8017f6a:	b085      	sub	sp, #20
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017f72:	2300      	movs	r3, #0
 8017f74:	60fb      	str	r3, [r7, #12]
 8017f76:	e014      	b.n	8017fa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017f78:	4a0f      	ldr	r2, [pc, #60]	; (8017fb8 <vQueueAddToRegistry+0x50>)
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d10b      	bne.n	8017f9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017f84:	490c      	ldr	r1, [pc, #48]	; (8017fb8 <vQueueAddToRegistry+0x50>)
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	683a      	ldr	r2, [r7, #0]
 8017f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017f8e:	4a0a      	ldr	r2, [pc, #40]	; (8017fb8 <vQueueAddToRegistry+0x50>)
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	00db      	lsls	r3, r3, #3
 8017f94:	4413      	add	r3, r2
 8017f96:	687a      	ldr	r2, [r7, #4]
 8017f98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017f9a:	e006      	b.n	8017faa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	60fb      	str	r3, [r7, #12]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	2b07      	cmp	r3, #7
 8017fa6:	d9e7      	bls.n	8017f78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017fa8:	bf00      	nop
 8017faa:	bf00      	nop
 8017fac:	3714      	adds	r7, #20
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb4:	4770      	bx	lr
 8017fb6:	bf00      	nop
 8017fb8:	24002698 	.word	0x24002698

08017fbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b086      	sub	sp, #24
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	60f8      	str	r0, [r7, #12]
 8017fc4:	60b9      	str	r1, [r7, #8]
 8017fc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017fcc:	f001 fc92 	bl	80198f4 <vPortEnterCritical>
 8017fd0:	697b      	ldr	r3, [r7, #20]
 8017fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017fd6:	b25b      	sxtb	r3, r3
 8017fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fdc:	d103      	bne.n	8017fe6 <vQueueWaitForMessageRestricted+0x2a>
 8017fde:	697b      	ldr	r3, [r7, #20]
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017fec:	b25b      	sxtb	r3, r3
 8017fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ff2:	d103      	bne.n	8017ffc <vQueueWaitForMessageRestricted+0x40>
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017ffc:	f001 fcaa 	bl	8019954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018000:	697b      	ldr	r3, [r7, #20]
 8018002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018004:	2b00      	cmp	r3, #0
 8018006:	d106      	bne.n	8018016 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	3324      	adds	r3, #36	; 0x24
 801800c:	687a      	ldr	r2, [r7, #4]
 801800e:	68b9      	ldr	r1, [r7, #8]
 8018010:	4618      	mov	r0, r3
 8018012:	f000 fc8d 	bl	8018930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018016:	6978      	ldr	r0, [r7, #20]
 8018018:	f7ff ff26 	bl	8017e68 <prvUnlockQueue>
	}
 801801c:	bf00      	nop
 801801e:	3718      	adds	r7, #24
 8018020:	46bd      	mov	sp, r7
 8018022:	bd80      	pop	{r7, pc}

08018024 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018024:	b580      	push	{r7, lr}
 8018026:	b08e      	sub	sp, #56	; 0x38
 8018028:	af04      	add	r7, sp, #16
 801802a:	60f8      	str	r0, [r7, #12]
 801802c:	60b9      	str	r1, [r7, #8]
 801802e:	607a      	str	r2, [r7, #4]
 8018030:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018034:	2b00      	cmp	r3, #0
 8018036:	d10a      	bne.n	801804e <xTaskCreateStatic+0x2a>
	__asm volatile
 8018038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803c:	f383 8811 	msr	BASEPRI, r3
 8018040:	f3bf 8f6f 	isb	sy
 8018044:	f3bf 8f4f 	dsb	sy
 8018048:	623b      	str	r3, [r7, #32]
}
 801804a:	bf00      	nop
 801804c:	e7fe      	b.n	801804c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018050:	2b00      	cmp	r3, #0
 8018052:	d10a      	bne.n	801806a <xTaskCreateStatic+0x46>
	__asm volatile
 8018054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018058:	f383 8811 	msr	BASEPRI, r3
 801805c:	f3bf 8f6f 	isb	sy
 8018060:	f3bf 8f4f 	dsb	sy
 8018064:	61fb      	str	r3, [r7, #28]
}
 8018066:	bf00      	nop
 8018068:	e7fe      	b.n	8018068 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801806a:	235c      	movs	r3, #92	; 0x5c
 801806c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	2b5c      	cmp	r3, #92	; 0x5c
 8018072:	d00a      	beq.n	801808a <xTaskCreateStatic+0x66>
	__asm volatile
 8018074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018078:	f383 8811 	msr	BASEPRI, r3
 801807c:	f3bf 8f6f 	isb	sy
 8018080:	f3bf 8f4f 	dsb	sy
 8018084:	61bb      	str	r3, [r7, #24]
}
 8018086:	bf00      	nop
 8018088:	e7fe      	b.n	8018088 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801808a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801808e:	2b00      	cmp	r3, #0
 8018090:	d01e      	beq.n	80180d0 <xTaskCreateStatic+0xac>
 8018092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018094:	2b00      	cmp	r3, #0
 8018096:	d01b      	beq.n	80180d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801809a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801809e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	2202      	movs	r2, #2
 80180a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80180aa:	2300      	movs	r3, #0
 80180ac:	9303      	str	r3, [sp, #12]
 80180ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b0:	9302      	str	r3, [sp, #8]
 80180b2:	f107 0314 	add.w	r3, r7, #20
 80180b6:	9301      	str	r3, [sp, #4]
 80180b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ba:	9300      	str	r3, [sp, #0]
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	687a      	ldr	r2, [r7, #4]
 80180c0:	68b9      	ldr	r1, [r7, #8]
 80180c2:	68f8      	ldr	r0, [r7, #12]
 80180c4:	f000 f850 	bl	8018168 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80180c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180ca:	f000 f8dd 	bl	8018288 <prvAddNewTaskToReadyList>
 80180ce:	e001      	b.n	80180d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80180d0:	2300      	movs	r3, #0
 80180d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80180d4:	697b      	ldr	r3, [r7, #20]
	}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3728      	adds	r7, #40	; 0x28
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}

080180de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80180de:	b580      	push	{r7, lr}
 80180e0:	b08c      	sub	sp, #48	; 0x30
 80180e2:	af04      	add	r7, sp, #16
 80180e4:	60f8      	str	r0, [r7, #12]
 80180e6:	60b9      	str	r1, [r7, #8]
 80180e8:	603b      	str	r3, [r7, #0]
 80180ea:	4613      	mov	r3, r2
 80180ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80180ee:	88fb      	ldrh	r3, [r7, #6]
 80180f0:	009b      	lsls	r3, r3, #2
 80180f2:	4618      	mov	r0, r3
 80180f4:	f001 fd20 	bl	8019b38 <pvPortMalloc>
 80180f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80180fa:	697b      	ldr	r3, [r7, #20]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d00e      	beq.n	801811e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018100:	205c      	movs	r0, #92	; 0x5c
 8018102:	f001 fd19 	bl	8019b38 <pvPortMalloc>
 8018106:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d003      	beq.n	8018116 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801810e:	69fb      	ldr	r3, [r7, #28]
 8018110:	697a      	ldr	r2, [r7, #20]
 8018112:	631a      	str	r2, [r3, #48]	; 0x30
 8018114:	e005      	b.n	8018122 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018116:	6978      	ldr	r0, [r7, #20]
 8018118:	f001 fdda 	bl	8019cd0 <vPortFree>
 801811c:	e001      	b.n	8018122 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801811e:	2300      	movs	r3, #0
 8018120:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d017      	beq.n	8018158 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018128:	69fb      	ldr	r3, [r7, #28]
 801812a:	2200      	movs	r2, #0
 801812c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018130:	88fa      	ldrh	r2, [r7, #6]
 8018132:	2300      	movs	r3, #0
 8018134:	9303      	str	r3, [sp, #12]
 8018136:	69fb      	ldr	r3, [r7, #28]
 8018138:	9302      	str	r3, [sp, #8]
 801813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813c:	9301      	str	r3, [sp, #4]
 801813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018140:	9300      	str	r3, [sp, #0]
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	68b9      	ldr	r1, [r7, #8]
 8018146:	68f8      	ldr	r0, [r7, #12]
 8018148:	f000 f80e 	bl	8018168 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801814c:	69f8      	ldr	r0, [r7, #28]
 801814e:	f000 f89b 	bl	8018288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018152:	2301      	movs	r3, #1
 8018154:	61bb      	str	r3, [r7, #24]
 8018156:	e002      	b.n	801815e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801815c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801815e:	69bb      	ldr	r3, [r7, #24]
	}
 8018160:	4618      	mov	r0, r3
 8018162:	3720      	adds	r7, #32
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}

08018168 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b088      	sub	sp, #32
 801816c:	af00      	add	r7, sp, #0
 801816e:	60f8      	str	r0, [r7, #12]
 8018170:	60b9      	str	r1, [r7, #8]
 8018172:	607a      	str	r2, [r7, #4]
 8018174:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018178:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	009b      	lsls	r3, r3, #2
 801817e:	461a      	mov	r2, r3
 8018180:	21a5      	movs	r1, #165	; 0xa5
 8018182:	f001 fefb 	bl	8019f7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801818a:	6879      	ldr	r1, [r7, #4]
 801818c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018190:	440b      	add	r3, r1
 8018192:	009b      	lsls	r3, r3, #2
 8018194:	4413      	add	r3, r2
 8018196:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018198:	69bb      	ldr	r3, [r7, #24]
 801819a:	f023 0307 	bic.w	r3, r3, #7
 801819e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80181a0:	69bb      	ldr	r3, [r7, #24]
 80181a2:	f003 0307 	and.w	r3, r3, #7
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d00a      	beq.n	80181c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80181aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ae:	f383 8811 	msr	BASEPRI, r3
 80181b2:	f3bf 8f6f 	isb	sy
 80181b6:	f3bf 8f4f 	dsb	sy
 80181ba:	617b      	str	r3, [r7, #20]
}
 80181bc:	bf00      	nop
 80181be:	e7fe      	b.n	80181be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d01f      	beq.n	8018206 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80181c6:	2300      	movs	r3, #0
 80181c8:	61fb      	str	r3, [r7, #28]
 80181ca:	e012      	b.n	80181f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80181cc:	68ba      	ldr	r2, [r7, #8]
 80181ce:	69fb      	ldr	r3, [r7, #28]
 80181d0:	4413      	add	r3, r2
 80181d2:	7819      	ldrb	r1, [r3, #0]
 80181d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181d6:	69fb      	ldr	r3, [r7, #28]
 80181d8:	4413      	add	r3, r2
 80181da:	3334      	adds	r3, #52	; 0x34
 80181dc:	460a      	mov	r2, r1
 80181de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80181e0:	68ba      	ldr	r2, [r7, #8]
 80181e2:	69fb      	ldr	r3, [r7, #28]
 80181e4:	4413      	add	r3, r2
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d006      	beq.n	80181fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	3301      	adds	r3, #1
 80181f0:	61fb      	str	r3, [r7, #28]
 80181f2:	69fb      	ldr	r3, [r7, #28]
 80181f4:	2b0f      	cmp	r3, #15
 80181f6:	d9e9      	bls.n	80181cc <prvInitialiseNewTask+0x64>
 80181f8:	e000      	b.n	80181fc <prvInitialiseNewTask+0x94>
			{
				break;
 80181fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80181fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fe:	2200      	movs	r2, #0
 8018200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018204:	e003      	b.n	801820e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018208:	2200      	movs	r2, #0
 801820a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018210:	2b37      	cmp	r3, #55	; 0x37
 8018212:	d901      	bls.n	8018218 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018214:	2337      	movs	r3, #55	; 0x37
 8018216:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801821a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801821c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018222:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018226:	2200      	movs	r2, #0
 8018228:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822c:	3304      	adds	r3, #4
 801822e:	4618      	mov	r0, r3
 8018230:	f7ff f978 	bl	8017524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018236:	3318      	adds	r3, #24
 8018238:	4618      	mov	r0, r3
 801823a:	f7ff f973 	bl	8017524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018242:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018246:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018252:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018256:	2200      	movs	r2, #0
 8018258:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825c:	2200      	movs	r2, #0
 801825e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018262:	683a      	ldr	r2, [r7, #0]
 8018264:	68f9      	ldr	r1, [r7, #12]
 8018266:	69b8      	ldr	r0, [r7, #24]
 8018268:	f001 fa14 	bl	8019694 <pxPortInitialiseStack>
 801826c:	4602      	mov	r2, r0
 801826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018270:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018274:	2b00      	cmp	r3, #0
 8018276:	d002      	beq.n	801827e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801827a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801827c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801827e:	bf00      	nop
 8018280:	3720      	adds	r7, #32
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}
	...

08018288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b082      	sub	sp, #8
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018290:	f001 fb30 	bl	80198f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018294:	4b2d      	ldr	r3, [pc, #180]	; (801834c <prvAddNewTaskToReadyList+0xc4>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	3301      	adds	r3, #1
 801829a:	4a2c      	ldr	r2, [pc, #176]	; (801834c <prvAddNewTaskToReadyList+0xc4>)
 801829c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801829e:	4b2c      	ldr	r3, [pc, #176]	; (8018350 <prvAddNewTaskToReadyList+0xc8>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d109      	bne.n	80182ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80182a6:	4a2a      	ldr	r2, [pc, #168]	; (8018350 <prvAddNewTaskToReadyList+0xc8>)
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80182ac:	4b27      	ldr	r3, [pc, #156]	; (801834c <prvAddNewTaskToReadyList+0xc4>)
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	2b01      	cmp	r3, #1
 80182b2:	d110      	bne.n	80182d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80182b4:	f000 fcca 	bl	8018c4c <prvInitialiseTaskLists>
 80182b8:	e00d      	b.n	80182d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80182ba:	4b26      	ldr	r3, [pc, #152]	; (8018354 <prvAddNewTaskToReadyList+0xcc>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d109      	bne.n	80182d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80182c2:	4b23      	ldr	r3, [pc, #140]	; (8018350 <prvAddNewTaskToReadyList+0xc8>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d802      	bhi.n	80182d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80182d0:	4a1f      	ldr	r2, [pc, #124]	; (8018350 <prvAddNewTaskToReadyList+0xc8>)
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80182d6:	4b20      	ldr	r3, [pc, #128]	; (8018358 <prvAddNewTaskToReadyList+0xd0>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	3301      	adds	r3, #1
 80182dc:	4a1e      	ldr	r2, [pc, #120]	; (8018358 <prvAddNewTaskToReadyList+0xd0>)
 80182de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80182e0:	4b1d      	ldr	r3, [pc, #116]	; (8018358 <prvAddNewTaskToReadyList+0xd0>)
 80182e2:	681a      	ldr	r2, [r3, #0]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182ec:	4b1b      	ldr	r3, [pc, #108]	; (801835c <prvAddNewTaskToReadyList+0xd4>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d903      	bls.n	80182fc <prvAddNewTaskToReadyList+0x74>
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182f8:	4a18      	ldr	r2, [pc, #96]	; (801835c <prvAddNewTaskToReadyList+0xd4>)
 80182fa:	6013      	str	r3, [r2, #0]
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018300:	4613      	mov	r3, r2
 8018302:	009b      	lsls	r3, r3, #2
 8018304:	4413      	add	r3, r2
 8018306:	009b      	lsls	r3, r3, #2
 8018308:	4a15      	ldr	r2, [pc, #84]	; (8018360 <prvAddNewTaskToReadyList+0xd8>)
 801830a:	441a      	add	r2, r3
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	3304      	adds	r3, #4
 8018310:	4619      	mov	r1, r3
 8018312:	4610      	mov	r0, r2
 8018314:	f7ff f913 	bl	801753e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018318:	f001 fb1c 	bl	8019954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801831c:	4b0d      	ldr	r3, [pc, #52]	; (8018354 <prvAddNewTaskToReadyList+0xcc>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d00e      	beq.n	8018342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018324:	4b0a      	ldr	r3, [pc, #40]	; (8018350 <prvAddNewTaskToReadyList+0xc8>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801832e:	429a      	cmp	r2, r3
 8018330:	d207      	bcs.n	8018342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018332:	4b0c      	ldr	r3, [pc, #48]	; (8018364 <prvAddNewTaskToReadyList+0xdc>)
 8018334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018338:	601a      	str	r2, [r3, #0]
 801833a:	f3bf 8f4f 	dsb	sy
 801833e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018342:	bf00      	nop
 8018344:	3708      	adds	r7, #8
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
 801834a:	bf00      	nop
 801834c:	24002bac 	.word	0x24002bac
 8018350:	240026d8 	.word	0x240026d8
 8018354:	24002bb8 	.word	0x24002bb8
 8018358:	24002bc8 	.word	0x24002bc8
 801835c:	24002bb4 	.word	0x24002bb4
 8018360:	240026dc 	.word	0x240026dc
 8018364:	e000ed04 	.word	0xe000ed04

08018368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018368:	b580      	push	{r7, lr}
 801836a:	b084      	sub	sp, #16
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018370:	2300      	movs	r3, #0
 8018372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d017      	beq.n	80183aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801837a:	4b13      	ldr	r3, [pc, #76]	; (80183c8 <vTaskDelay+0x60>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d00a      	beq.n	8018398 <vTaskDelay+0x30>
	__asm volatile
 8018382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018386:	f383 8811 	msr	BASEPRI, r3
 801838a:	f3bf 8f6f 	isb	sy
 801838e:	f3bf 8f4f 	dsb	sy
 8018392:	60bb      	str	r3, [r7, #8]
}
 8018394:	bf00      	nop
 8018396:	e7fe      	b.n	8018396 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018398:	f000 f880 	bl	801849c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801839c:	2100      	movs	r1, #0
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f000 fdb6 	bl	8018f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80183a4:	f000 f888 	bl	80184b8 <xTaskResumeAll>
 80183a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d107      	bne.n	80183c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80183b0:	4b06      	ldr	r3, [pc, #24]	; (80183cc <vTaskDelay+0x64>)
 80183b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183b6:	601a      	str	r2, [r3, #0]
 80183b8:	f3bf 8f4f 	dsb	sy
 80183bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80183c0:	bf00      	nop
 80183c2:	3710      	adds	r7, #16
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd80      	pop	{r7, pc}
 80183c8:	24002bd4 	.word	0x24002bd4
 80183cc:	e000ed04 	.word	0xe000ed04

080183d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b08a      	sub	sp, #40	; 0x28
 80183d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80183d6:	2300      	movs	r3, #0
 80183d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80183da:	2300      	movs	r3, #0
 80183dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80183de:	463a      	mov	r2, r7
 80183e0:	1d39      	adds	r1, r7, #4
 80183e2:	f107 0308 	add.w	r3, r7, #8
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7fe fddc 	bl	8016fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80183ec:	6839      	ldr	r1, [r7, #0]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	68ba      	ldr	r2, [r7, #8]
 80183f2:	9202      	str	r2, [sp, #8]
 80183f4:	9301      	str	r3, [sp, #4]
 80183f6:	2300      	movs	r3, #0
 80183f8:	9300      	str	r3, [sp, #0]
 80183fa:	2300      	movs	r3, #0
 80183fc:	460a      	mov	r2, r1
 80183fe:	4921      	ldr	r1, [pc, #132]	; (8018484 <vTaskStartScheduler+0xb4>)
 8018400:	4821      	ldr	r0, [pc, #132]	; (8018488 <vTaskStartScheduler+0xb8>)
 8018402:	f7ff fe0f 	bl	8018024 <xTaskCreateStatic>
 8018406:	4603      	mov	r3, r0
 8018408:	4a20      	ldr	r2, [pc, #128]	; (801848c <vTaskStartScheduler+0xbc>)
 801840a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801840c:	4b1f      	ldr	r3, [pc, #124]	; (801848c <vTaskStartScheduler+0xbc>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d002      	beq.n	801841a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018414:	2301      	movs	r3, #1
 8018416:	617b      	str	r3, [r7, #20]
 8018418:	e001      	b.n	801841e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801841a:	2300      	movs	r3, #0
 801841c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	2b01      	cmp	r3, #1
 8018422:	d102      	bne.n	801842a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018424:	f000 fdc8 	bl	8018fb8 <xTimerCreateTimerTask>
 8018428:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801842a:	697b      	ldr	r3, [r7, #20]
 801842c:	2b01      	cmp	r3, #1
 801842e:	d116      	bne.n	801845e <vTaskStartScheduler+0x8e>
	__asm volatile
 8018430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018434:	f383 8811 	msr	BASEPRI, r3
 8018438:	f3bf 8f6f 	isb	sy
 801843c:	f3bf 8f4f 	dsb	sy
 8018440:	613b      	str	r3, [r7, #16]
}
 8018442:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018444:	4b12      	ldr	r3, [pc, #72]	; (8018490 <vTaskStartScheduler+0xc0>)
 8018446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801844a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801844c:	4b11      	ldr	r3, [pc, #68]	; (8018494 <vTaskStartScheduler+0xc4>)
 801844e:	2201      	movs	r2, #1
 8018450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018452:	4b11      	ldr	r3, [pc, #68]	; (8018498 <vTaskStartScheduler+0xc8>)
 8018454:	2200      	movs	r2, #0
 8018456:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018458:	f001 f9aa 	bl	80197b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801845c:	e00e      	b.n	801847c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018464:	d10a      	bne.n	801847c <vTaskStartScheduler+0xac>
	__asm volatile
 8018466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801846a:	f383 8811 	msr	BASEPRI, r3
 801846e:	f3bf 8f6f 	isb	sy
 8018472:	f3bf 8f4f 	dsb	sy
 8018476:	60fb      	str	r3, [r7, #12]
}
 8018478:	bf00      	nop
 801847a:	e7fe      	b.n	801847a <vTaskStartScheduler+0xaa>
}
 801847c:	bf00      	nop
 801847e:	3718      	adds	r7, #24
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	0801abf0 	.word	0x0801abf0
 8018488:	08018c1d 	.word	0x08018c1d
 801848c:	24002bd0 	.word	0x24002bd0
 8018490:	24002bcc 	.word	0x24002bcc
 8018494:	24002bb8 	.word	0x24002bb8
 8018498:	24002bb0 	.word	0x24002bb0

0801849c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801849c:	b480      	push	{r7}
 801849e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80184a0:	4b04      	ldr	r3, [pc, #16]	; (80184b4 <vTaskSuspendAll+0x18>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	3301      	adds	r3, #1
 80184a6:	4a03      	ldr	r2, [pc, #12]	; (80184b4 <vTaskSuspendAll+0x18>)
 80184a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80184aa:	bf00      	nop
 80184ac:	46bd      	mov	sp, r7
 80184ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b2:	4770      	bx	lr
 80184b4:	24002bd4 	.word	0x24002bd4

080184b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80184be:	2300      	movs	r3, #0
 80184c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80184c2:	2300      	movs	r3, #0
 80184c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80184c6:	4b42      	ldr	r3, [pc, #264]	; (80185d0 <xTaskResumeAll+0x118>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d10a      	bne.n	80184e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80184ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184d2:	f383 8811 	msr	BASEPRI, r3
 80184d6:	f3bf 8f6f 	isb	sy
 80184da:	f3bf 8f4f 	dsb	sy
 80184de:	603b      	str	r3, [r7, #0]
}
 80184e0:	bf00      	nop
 80184e2:	e7fe      	b.n	80184e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80184e4:	f001 fa06 	bl	80198f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80184e8:	4b39      	ldr	r3, [pc, #228]	; (80185d0 <xTaskResumeAll+0x118>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	3b01      	subs	r3, #1
 80184ee:	4a38      	ldr	r2, [pc, #224]	; (80185d0 <xTaskResumeAll+0x118>)
 80184f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184f2:	4b37      	ldr	r3, [pc, #220]	; (80185d0 <xTaskResumeAll+0x118>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d162      	bne.n	80185c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80184fa:	4b36      	ldr	r3, [pc, #216]	; (80185d4 <xTaskResumeAll+0x11c>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d05e      	beq.n	80185c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018502:	e02f      	b.n	8018564 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018504:	4b34      	ldr	r3, [pc, #208]	; (80185d8 <xTaskResumeAll+0x120>)
 8018506:	68db      	ldr	r3, [r3, #12]
 8018508:	68db      	ldr	r3, [r3, #12]
 801850a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	3318      	adds	r3, #24
 8018510:	4618      	mov	r0, r3
 8018512:	f7ff f871 	bl	80175f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	3304      	adds	r3, #4
 801851a:	4618      	mov	r0, r3
 801851c:	f7ff f86c 	bl	80175f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018524:	4b2d      	ldr	r3, [pc, #180]	; (80185dc <xTaskResumeAll+0x124>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	429a      	cmp	r2, r3
 801852a:	d903      	bls.n	8018534 <xTaskResumeAll+0x7c>
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018530:	4a2a      	ldr	r2, [pc, #168]	; (80185dc <xTaskResumeAll+0x124>)
 8018532:	6013      	str	r3, [r2, #0]
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018538:	4613      	mov	r3, r2
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	4413      	add	r3, r2
 801853e:	009b      	lsls	r3, r3, #2
 8018540:	4a27      	ldr	r2, [pc, #156]	; (80185e0 <xTaskResumeAll+0x128>)
 8018542:	441a      	add	r2, r3
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	3304      	adds	r3, #4
 8018548:	4619      	mov	r1, r3
 801854a:	4610      	mov	r0, r2
 801854c:	f7fe fff7 	bl	801753e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018554:	4b23      	ldr	r3, [pc, #140]	; (80185e4 <xTaskResumeAll+0x12c>)
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801855a:	429a      	cmp	r2, r3
 801855c:	d302      	bcc.n	8018564 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801855e:	4b22      	ldr	r3, [pc, #136]	; (80185e8 <xTaskResumeAll+0x130>)
 8018560:	2201      	movs	r2, #1
 8018562:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018564:	4b1c      	ldr	r3, [pc, #112]	; (80185d8 <xTaskResumeAll+0x120>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d1cb      	bne.n	8018504 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d001      	beq.n	8018576 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018572:	f000 fc09 	bl	8018d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018576:	4b1d      	ldr	r3, [pc, #116]	; (80185ec <xTaskResumeAll+0x134>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d010      	beq.n	80185a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018582:	f000 f847 	bl	8018614 <xTaskIncrementTick>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d002      	beq.n	8018592 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801858c:	4b16      	ldr	r3, [pc, #88]	; (80185e8 <xTaskResumeAll+0x130>)
 801858e:	2201      	movs	r2, #1
 8018590:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	3b01      	subs	r3, #1
 8018596:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d1f1      	bne.n	8018582 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801859e:	4b13      	ldr	r3, [pc, #76]	; (80185ec <xTaskResumeAll+0x134>)
 80185a0:	2200      	movs	r2, #0
 80185a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80185a4:	4b10      	ldr	r3, [pc, #64]	; (80185e8 <xTaskResumeAll+0x130>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d009      	beq.n	80185c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80185ac:	2301      	movs	r3, #1
 80185ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80185b0:	4b0f      	ldr	r3, [pc, #60]	; (80185f0 <xTaskResumeAll+0x138>)
 80185b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185b6:	601a      	str	r2, [r3, #0]
 80185b8:	f3bf 8f4f 	dsb	sy
 80185bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80185c0:	f001 f9c8 	bl	8019954 <vPortExitCritical>

	return xAlreadyYielded;
 80185c4:	68bb      	ldr	r3, [r7, #8]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3710      	adds	r7, #16
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	24002bd4 	.word	0x24002bd4
 80185d4:	24002bac 	.word	0x24002bac
 80185d8:	24002b6c 	.word	0x24002b6c
 80185dc:	24002bb4 	.word	0x24002bb4
 80185e0:	240026dc 	.word	0x240026dc
 80185e4:	240026d8 	.word	0x240026d8
 80185e8:	24002bc0 	.word	0x24002bc0
 80185ec:	24002bbc 	.word	0x24002bbc
 80185f0:	e000ed04 	.word	0xe000ed04

080185f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80185f4:	b480      	push	{r7}
 80185f6:	b083      	sub	sp, #12
 80185f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80185fa:	4b05      	ldr	r3, [pc, #20]	; (8018610 <xTaskGetTickCount+0x1c>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018600:	687b      	ldr	r3, [r7, #4]
}
 8018602:	4618      	mov	r0, r3
 8018604:	370c      	adds	r7, #12
 8018606:	46bd      	mov	sp, r7
 8018608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860c:	4770      	bx	lr
 801860e:	bf00      	nop
 8018610:	24002bb0 	.word	0x24002bb0

08018614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b086      	sub	sp, #24
 8018618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801861a:	2300      	movs	r3, #0
 801861c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801861e:	4b53      	ldr	r3, [pc, #332]	; (801876c <xTaskIncrementTick+0x158>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	f040 8095 	bne.w	8018752 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018628:	4b51      	ldr	r3, [pc, #324]	; (8018770 <xTaskIncrementTick+0x15c>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	3301      	adds	r3, #1
 801862e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018630:	4a4f      	ldr	r2, [pc, #316]	; (8018770 <xTaskIncrementTick+0x15c>)
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d120      	bne.n	801867e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801863c:	4b4d      	ldr	r3, [pc, #308]	; (8018774 <xTaskIncrementTick+0x160>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d00a      	beq.n	801865c <xTaskIncrementTick+0x48>
	__asm volatile
 8018646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864a:	f383 8811 	msr	BASEPRI, r3
 801864e:	f3bf 8f6f 	isb	sy
 8018652:	f3bf 8f4f 	dsb	sy
 8018656:	603b      	str	r3, [r7, #0]
}
 8018658:	bf00      	nop
 801865a:	e7fe      	b.n	801865a <xTaskIncrementTick+0x46>
 801865c:	4b45      	ldr	r3, [pc, #276]	; (8018774 <xTaskIncrementTick+0x160>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	60fb      	str	r3, [r7, #12]
 8018662:	4b45      	ldr	r3, [pc, #276]	; (8018778 <xTaskIncrementTick+0x164>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	4a43      	ldr	r2, [pc, #268]	; (8018774 <xTaskIncrementTick+0x160>)
 8018668:	6013      	str	r3, [r2, #0]
 801866a:	4a43      	ldr	r2, [pc, #268]	; (8018778 <xTaskIncrementTick+0x164>)
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	6013      	str	r3, [r2, #0]
 8018670:	4b42      	ldr	r3, [pc, #264]	; (801877c <xTaskIncrementTick+0x168>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	3301      	adds	r3, #1
 8018676:	4a41      	ldr	r2, [pc, #260]	; (801877c <xTaskIncrementTick+0x168>)
 8018678:	6013      	str	r3, [r2, #0]
 801867a:	f000 fb85 	bl	8018d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801867e:	4b40      	ldr	r3, [pc, #256]	; (8018780 <xTaskIncrementTick+0x16c>)
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	693a      	ldr	r2, [r7, #16]
 8018684:	429a      	cmp	r2, r3
 8018686:	d349      	bcc.n	801871c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018688:	4b3a      	ldr	r3, [pc, #232]	; (8018774 <xTaskIncrementTick+0x160>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d104      	bne.n	801869c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018692:	4b3b      	ldr	r3, [pc, #236]	; (8018780 <xTaskIncrementTick+0x16c>)
 8018694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018698:	601a      	str	r2, [r3, #0]
					break;
 801869a:	e03f      	b.n	801871c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801869c:	4b35      	ldr	r3, [pc, #212]	; (8018774 <xTaskIncrementTick+0x160>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	68db      	ldr	r3, [r3, #12]
 80186a2:	68db      	ldr	r3, [r3, #12]
 80186a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80186ac:	693a      	ldr	r2, [r7, #16]
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	429a      	cmp	r2, r3
 80186b2:	d203      	bcs.n	80186bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80186b4:	4a32      	ldr	r2, [pc, #200]	; (8018780 <xTaskIncrementTick+0x16c>)
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80186ba:	e02f      	b.n	801871c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	3304      	adds	r3, #4
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7fe ff99 	bl	80175f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d004      	beq.n	80186d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	3318      	adds	r3, #24
 80186d2:	4618      	mov	r0, r3
 80186d4:	f7fe ff90 	bl	80175f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186dc:	4b29      	ldr	r3, [pc, #164]	; (8018784 <xTaskIncrementTick+0x170>)
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d903      	bls.n	80186ec <xTaskIncrementTick+0xd8>
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186e8:	4a26      	ldr	r2, [pc, #152]	; (8018784 <xTaskIncrementTick+0x170>)
 80186ea:	6013      	str	r3, [r2, #0]
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186f0:	4613      	mov	r3, r2
 80186f2:	009b      	lsls	r3, r3, #2
 80186f4:	4413      	add	r3, r2
 80186f6:	009b      	lsls	r3, r3, #2
 80186f8:	4a23      	ldr	r2, [pc, #140]	; (8018788 <xTaskIncrementTick+0x174>)
 80186fa:	441a      	add	r2, r3
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	3304      	adds	r3, #4
 8018700:	4619      	mov	r1, r3
 8018702:	4610      	mov	r0, r2
 8018704:	f7fe ff1b 	bl	801753e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801870c:	4b1f      	ldr	r3, [pc, #124]	; (801878c <xTaskIncrementTick+0x178>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018712:	429a      	cmp	r2, r3
 8018714:	d3b8      	bcc.n	8018688 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018716:	2301      	movs	r3, #1
 8018718:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801871a:	e7b5      	b.n	8018688 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801871c:	4b1b      	ldr	r3, [pc, #108]	; (801878c <xTaskIncrementTick+0x178>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018722:	4919      	ldr	r1, [pc, #100]	; (8018788 <xTaskIncrementTick+0x174>)
 8018724:	4613      	mov	r3, r2
 8018726:	009b      	lsls	r3, r3, #2
 8018728:	4413      	add	r3, r2
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	440b      	add	r3, r1
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	2b01      	cmp	r3, #1
 8018732:	d901      	bls.n	8018738 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018734:	2301      	movs	r3, #1
 8018736:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018738:	4b15      	ldr	r3, [pc, #84]	; (8018790 <xTaskIncrementTick+0x17c>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d101      	bne.n	8018744 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018740:	f7e9 fd26 	bl	8002190 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018744:	4b13      	ldr	r3, [pc, #76]	; (8018794 <xTaskIncrementTick+0x180>)
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d009      	beq.n	8018760 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801874c:	2301      	movs	r3, #1
 801874e:	617b      	str	r3, [r7, #20]
 8018750:	e006      	b.n	8018760 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018752:	4b0f      	ldr	r3, [pc, #60]	; (8018790 <xTaskIncrementTick+0x17c>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	3301      	adds	r3, #1
 8018758:	4a0d      	ldr	r2, [pc, #52]	; (8018790 <xTaskIncrementTick+0x17c>)
 801875a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801875c:	f7e9 fd18 	bl	8002190 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018760:	697b      	ldr	r3, [r7, #20]
}
 8018762:	4618      	mov	r0, r3
 8018764:	3718      	adds	r7, #24
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}
 801876a:	bf00      	nop
 801876c:	24002bd4 	.word	0x24002bd4
 8018770:	24002bb0 	.word	0x24002bb0
 8018774:	24002b64 	.word	0x24002b64
 8018778:	24002b68 	.word	0x24002b68
 801877c:	24002bc4 	.word	0x24002bc4
 8018780:	24002bcc 	.word	0x24002bcc
 8018784:	24002bb4 	.word	0x24002bb4
 8018788:	240026dc 	.word	0x240026dc
 801878c:	240026d8 	.word	0x240026d8
 8018790:	24002bbc 	.word	0x24002bbc
 8018794:	24002bc0 	.word	0x24002bc0

08018798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b084      	sub	sp, #16
 801879c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801879e:	4b2f      	ldr	r3, [pc, #188]	; (801885c <vTaskSwitchContext+0xc4>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d003      	beq.n	80187ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80187a6:	4b2e      	ldr	r3, [pc, #184]	; (8018860 <vTaskSwitchContext+0xc8>)
 80187a8:	2201      	movs	r2, #1
 80187aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80187ac:	e052      	b.n	8018854 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80187ae:	4b2c      	ldr	r3, [pc, #176]	; (8018860 <vTaskSwitchContext+0xc8>)
 80187b0:	2200      	movs	r2, #0
 80187b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80187b4:	4b2b      	ldr	r3, [pc, #172]	; (8018864 <vTaskSwitchContext+0xcc>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	681a      	ldr	r2, [r3, #0]
 80187ba:	4b2a      	ldr	r3, [pc, #168]	; (8018864 <vTaskSwitchContext+0xcc>)
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187c0:	429a      	cmp	r2, r3
 80187c2:	d808      	bhi.n	80187d6 <vTaskSwitchContext+0x3e>
 80187c4:	4b27      	ldr	r3, [pc, #156]	; (8018864 <vTaskSwitchContext+0xcc>)
 80187c6:	681a      	ldr	r2, [r3, #0]
 80187c8:	4b26      	ldr	r3, [pc, #152]	; (8018864 <vTaskSwitchContext+0xcc>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	3334      	adds	r3, #52	; 0x34
 80187ce:	4619      	mov	r1, r3
 80187d0:	4610      	mov	r0, r2
 80187d2:	f7e9 fceb 	bl	80021ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187d6:	4b24      	ldr	r3, [pc, #144]	; (8018868 <vTaskSwitchContext+0xd0>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	60fb      	str	r3, [r7, #12]
 80187dc:	e010      	b.n	8018800 <vTaskSwitchContext+0x68>
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d10a      	bne.n	80187fa <vTaskSwitchContext+0x62>
	__asm volatile
 80187e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e8:	f383 8811 	msr	BASEPRI, r3
 80187ec:	f3bf 8f6f 	isb	sy
 80187f0:	f3bf 8f4f 	dsb	sy
 80187f4:	607b      	str	r3, [r7, #4]
}
 80187f6:	bf00      	nop
 80187f8:	e7fe      	b.n	80187f8 <vTaskSwitchContext+0x60>
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	3b01      	subs	r3, #1
 80187fe:	60fb      	str	r3, [r7, #12]
 8018800:	491a      	ldr	r1, [pc, #104]	; (801886c <vTaskSwitchContext+0xd4>)
 8018802:	68fa      	ldr	r2, [r7, #12]
 8018804:	4613      	mov	r3, r2
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	4413      	add	r3, r2
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	440b      	add	r3, r1
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d0e4      	beq.n	80187de <vTaskSwitchContext+0x46>
 8018814:	68fa      	ldr	r2, [r7, #12]
 8018816:	4613      	mov	r3, r2
 8018818:	009b      	lsls	r3, r3, #2
 801881a:	4413      	add	r3, r2
 801881c:	009b      	lsls	r3, r3, #2
 801881e:	4a13      	ldr	r2, [pc, #76]	; (801886c <vTaskSwitchContext+0xd4>)
 8018820:	4413      	add	r3, r2
 8018822:	60bb      	str	r3, [r7, #8]
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	685b      	ldr	r3, [r3, #4]
 8018828:	685a      	ldr	r2, [r3, #4]
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	605a      	str	r2, [r3, #4]
 801882e:	68bb      	ldr	r3, [r7, #8]
 8018830:	685a      	ldr	r2, [r3, #4]
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	3308      	adds	r3, #8
 8018836:	429a      	cmp	r2, r3
 8018838:	d104      	bne.n	8018844 <vTaskSwitchContext+0xac>
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	685b      	ldr	r3, [r3, #4]
 801883e:	685a      	ldr	r2, [r3, #4]
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	605a      	str	r2, [r3, #4]
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	68db      	ldr	r3, [r3, #12]
 801884a:	4a06      	ldr	r2, [pc, #24]	; (8018864 <vTaskSwitchContext+0xcc>)
 801884c:	6013      	str	r3, [r2, #0]
 801884e:	4a06      	ldr	r2, [pc, #24]	; (8018868 <vTaskSwitchContext+0xd0>)
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	6013      	str	r3, [r2, #0]
}
 8018854:	bf00      	nop
 8018856:	3710      	adds	r7, #16
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}
 801885c:	24002bd4 	.word	0x24002bd4
 8018860:	24002bc0 	.word	0x24002bc0
 8018864:	240026d8 	.word	0x240026d8
 8018868:	24002bb4 	.word	0x24002bb4
 801886c:	240026dc 	.word	0x240026dc

08018870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
 8018878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d10a      	bne.n	8018896 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018884:	f383 8811 	msr	BASEPRI, r3
 8018888:	f3bf 8f6f 	isb	sy
 801888c:	f3bf 8f4f 	dsb	sy
 8018890:	60fb      	str	r3, [r7, #12]
}
 8018892:	bf00      	nop
 8018894:	e7fe      	b.n	8018894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018896:	4b07      	ldr	r3, [pc, #28]	; (80188b4 <vTaskPlaceOnEventList+0x44>)
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	3318      	adds	r3, #24
 801889c:	4619      	mov	r1, r3
 801889e:	6878      	ldr	r0, [r7, #4]
 80188a0:	f7fe fe71 	bl	8017586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80188a4:	2101      	movs	r1, #1
 80188a6:	6838      	ldr	r0, [r7, #0]
 80188a8:	f000 fb32 	bl	8018f10 <prvAddCurrentTaskToDelayedList>
}
 80188ac:	bf00      	nop
 80188ae:	3710      	adds	r7, #16
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}
 80188b4:	240026d8 	.word	0x240026d8

080188b8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b086      	sub	sp, #24
 80188bc:	af00      	add	r7, sp, #0
 80188be:	60f8      	str	r0, [r7, #12]
 80188c0:	60b9      	str	r1, [r7, #8]
 80188c2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d10a      	bne.n	80188e0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80188ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ce:	f383 8811 	msr	BASEPRI, r3
 80188d2:	f3bf 8f6f 	isb	sy
 80188d6:	f3bf 8f4f 	dsb	sy
 80188da:	617b      	str	r3, [r7, #20]
}
 80188dc:	bf00      	nop
 80188de:	e7fe      	b.n	80188de <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80188e0:	4b11      	ldr	r3, [pc, #68]	; (8018928 <vTaskPlaceOnUnorderedEventList+0x70>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d10a      	bne.n	80188fe <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80188e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ec:	f383 8811 	msr	BASEPRI, r3
 80188f0:	f3bf 8f6f 	isb	sy
 80188f4:	f3bf 8f4f 	dsb	sy
 80188f8:	613b      	str	r3, [r7, #16]
}
 80188fa:	bf00      	nop
 80188fc:	e7fe      	b.n	80188fc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80188fe:	4b0b      	ldr	r3, [pc, #44]	; (801892c <vTaskPlaceOnUnorderedEventList+0x74>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	68ba      	ldr	r2, [r7, #8]
 8018904:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018908:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801890a:	4b08      	ldr	r3, [pc, #32]	; (801892c <vTaskPlaceOnUnorderedEventList+0x74>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	3318      	adds	r3, #24
 8018910:	4619      	mov	r1, r3
 8018912:	68f8      	ldr	r0, [r7, #12]
 8018914:	f7fe fe13 	bl	801753e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018918:	2101      	movs	r1, #1
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f000 faf8 	bl	8018f10 <prvAddCurrentTaskToDelayedList>
}
 8018920:	bf00      	nop
 8018922:	3718      	adds	r7, #24
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}
 8018928:	24002bd4 	.word	0x24002bd4
 801892c:	240026d8 	.word	0x240026d8

08018930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018930:	b580      	push	{r7, lr}
 8018932:	b086      	sub	sp, #24
 8018934:	af00      	add	r7, sp, #0
 8018936:	60f8      	str	r0, [r7, #12]
 8018938:	60b9      	str	r1, [r7, #8]
 801893a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d10a      	bne.n	8018958 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018946:	f383 8811 	msr	BASEPRI, r3
 801894a:	f3bf 8f6f 	isb	sy
 801894e:	f3bf 8f4f 	dsb	sy
 8018952:	617b      	str	r3, [r7, #20]
}
 8018954:	bf00      	nop
 8018956:	e7fe      	b.n	8018956 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018958:	4b0a      	ldr	r3, [pc, #40]	; (8018984 <vTaskPlaceOnEventListRestricted+0x54>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	3318      	adds	r3, #24
 801895e:	4619      	mov	r1, r3
 8018960:	68f8      	ldr	r0, [r7, #12]
 8018962:	f7fe fdec 	bl	801753e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d002      	beq.n	8018972 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801896c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018970:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018972:	6879      	ldr	r1, [r7, #4]
 8018974:	68b8      	ldr	r0, [r7, #8]
 8018976:	f000 facb 	bl	8018f10 <prvAddCurrentTaskToDelayedList>
	}
 801897a:	bf00      	nop
 801897c:	3718      	adds	r7, #24
 801897e:	46bd      	mov	sp, r7
 8018980:	bd80      	pop	{r7, pc}
 8018982:	bf00      	nop
 8018984:	240026d8 	.word	0x240026d8

08018988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b086      	sub	sp, #24
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	68db      	ldr	r3, [r3, #12]
 8018996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018998:	693b      	ldr	r3, [r7, #16]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d10a      	bne.n	80189b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189a2:	f383 8811 	msr	BASEPRI, r3
 80189a6:	f3bf 8f6f 	isb	sy
 80189aa:	f3bf 8f4f 	dsb	sy
 80189ae:	60fb      	str	r3, [r7, #12]
}
 80189b0:	bf00      	nop
 80189b2:	e7fe      	b.n	80189b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80189b4:	693b      	ldr	r3, [r7, #16]
 80189b6:	3318      	adds	r3, #24
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7fe fe1d 	bl	80175f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189be:	4b1e      	ldr	r3, [pc, #120]	; (8018a38 <xTaskRemoveFromEventList+0xb0>)
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d11d      	bne.n	8018a02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80189c6:	693b      	ldr	r3, [r7, #16]
 80189c8:	3304      	adds	r3, #4
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fe fe14 	bl	80175f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80189d0:	693b      	ldr	r3, [r7, #16]
 80189d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189d4:	4b19      	ldr	r3, [pc, #100]	; (8018a3c <xTaskRemoveFromEventList+0xb4>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	429a      	cmp	r2, r3
 80189da:	d903      	bls.n	80189e4 <xTaskRemoveFromEventList+0x5c>
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189e0:	4a16      	ldr	r2, [pc, #88]	; (8018a3c <xTaskRemoveFromEventList+0xb4>)
 80189e2:	6013      	str	r3, [r2, #0]
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189e8:	4613      	mov	r3, r2
 80189ea:	009b      	lsls	r3, r3, #2
 80189ec:	4413      	add	r3, r2
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	4a13      	ldr	r2, [pc, #76]	; (8018a40 <xTaskRemoveFromEventList+0xb8>)
 80189f2:	441a      	add	r2, r3
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	3304      	adds	r3, #4
 80189f8:	4619      	mov	r1, r3
 80189fa:	4610      	mov	r0, r2
 80189fc:	f7fe fd9f 	bl	801753e <vListInsertEnd>
 8018a00:	e005      	b.n	8018a0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018a02:	693b      	ldr	r3, [r7, #16]
 8018a04:	3318      	adds	r3, #24
 8018a06:	4619      	mov	r1, r3
 8018a08:	480e      	ldr	r0, [pc, #56]	; (8018a44 <xTaskRemoveFromEventList+0xbc>)
 8018a0a:	f7fe fd98 	bl	801753e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018a0e:	693b      	ldr	r3, [r7, #16]
 8018a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a12:	4b0d      	ldr	r3, [pc, #52]	; (8018a48 <xTaskRemoveFromEventList+0xc0>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d905      	bls.n	8018a28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018a1c:	2301      	movs	r3, #1
 8018a1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018a20:	4b0a      	ldr	r3, [pc, #40]	; (8018a4c <xTaskRemoveFromEventList+0xc4>)
 8018a22:	2201      	movs	r2, #1
 8018a24:	601a      	str	r2, [r3, #0]
 8018a26:	e001      	b.n	8018a2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018a2c:	697b      	ldr	r3, [r7, #20]
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	3718      	adds	r7, #24
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	24002bd4 	.word	0x24002bd4
 8018a3c:	24002bb4 	.word	0x24002bb4
 8018a40:	240026dc 	.word	0x240026dc
 8018a44:	24002b6c 	.word	0x24002b6c
 8018a48:	240026d8 	.word	0x240026d8
 8018a4c:	24002bc0 	.word	0x24002bc0

08018a50 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b086      	sub	sp, #24
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
 8018a58:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018a5a:	4b29      	ldr	r3, [pc, #164]	; (8018b00 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d10a      	bne.n	8018a78 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a66:	f383 8811 	msr	BASEPRI, r3
 8018a6a:	f3bf 8f6f 	isb	sy
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	613b      	str	r3, [r7, #16]
}
 8018a74:	bf00      	nop
 8018a76:	e7fe      	b.n	8018a76 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d10a      	bne.n	8018aa4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a92:	f383 8811 	msr	BASEPRI, r3
 8018a96:	f3bf 8f6f 	isb	sy
 8018a9a:	f3bf 8f4f 	dsb	sy
 8018a9e:	60fb      	str	r3, [r7, #12]
}
 8018aa0:	bf00      	nop
 8018aa2:	e7fe      	b.n	8018aa2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f7fe fda7 	bl	80175f8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018aaa:	697b      	ldr	r3, [r7, #20]
 8018aac:	3304      	adds	r3, #4
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f7fe fda2 	bl	80175f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018ab4:	697b      	ldr	r3, [r7, #20]
 8018ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab8:	4b12      	ldr	r3, [pc, #72]	; (8018b04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	429a      	cmp	r2, r3
 8018abe:	d903      	bls.n	8018ac8 <vTaskRemoveFromUnorderedEventList+0x78>
 8018ac0:	697b      	ldr	r3, [r7, #20]
 8018ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac4:	4a0f      	ldr	r2, [pc, #60]	; (8018b04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018ac6:	6013      	str	r3, [r2, #0]
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018acc:	4613      	mov	r3, r2
 8018ace:	009b      	lsls	r3, r3, #2
 8018ad0:	4413      	add	r3, r2
 8018ad2:	009b      	lsls	r3, r3, #2
 8018ad4:	4a0c      	ldr	r2, [pc, #48]	; (8018b08 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018ad6:	441a      	add	r2, r3
 8018ad8:	697b      	ldr	r3, [r7, #20]
 8018ada:	3304      	adds	r3, #4
 8018adc:	4619      	mov	r1, r3
 8018ade:	4610      	mov	r0, r2
 8018ae0:	f7fe fd2d 	bl	801753e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ae8:	4b08      	ldr	r3, [pc, #32]	; (8018b0c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aee:	429a      	cmp	r2, r3
 8018af0:	d902      	bls.n	8018af8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018af2:	4b07      	ldr	r3, [pc, #28]	; (8018b10 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018af4:	2201      	movs	r2, #1
 8018af6:	601a      	str	r2, [r3, #0]
	}
}
 8018af8:	bf00      	nop
 8018afa:	3718      	adds	r7, #24
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	24002bd4 	.word	0x24002bd4
 8018b04:	24002bb4 	.word	0x24002bb4
 8018b08:	240026dc 	.word	0x240026dc
 8018b0c:	240026d8 	.word	0x240026d8
 8018b10:	24002bc0 	.word	0x24002bc0

08018b14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018b14:	b480      	push	{r7}
 8018b16:	b083      	sub	sp, #12
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018b1c:	4b06      	ldr	r3, [pc, #24]	; (8018b38 <vTaskInternalSetTimeOutState+0x24>)
 8018b1e:	681a      	ldr	r2, [r3, #0]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018b24:	4b05      	ldr	r3, [pc, #20]	; (8018b3c <vTaskInternalSetTimeOutState+0x28>)
 8018b26:	681a      	ldr	r2, [r3, #0]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	605a      	str	r2, [r3, #4]
}
 8018b2c:	bf00      	nop
 8018b2e:	370c      	adds	r7, #12
 8018b30:	46bd      	mov	sp, r7
 8018b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b36:	4770      	bx	lr
 8018b38:	24002bc4 	.word	0x24002bc4
 8018b3c:	24002bb0 	.word	0x24002bb0

08018b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b088      	sub	sp, #32
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d10a      	bne.n	8018b66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b54:	f383 8811 	msr	BASEPRI, r3
 8018b58:	f3bf 8f6f 	isb	sy
 8018b5c:	f3bf 8f4f 	dsb	sy
 8018b60:	613b      	str	r3, [r7, #16]
}
 8018b62:	bf00      	nop
 8018b64:	e7fe      	b.n	8018b64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d10a      	bne.n	8018b82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b70:	f383 8811 	msr	BASEPRI, r3
 8018b74:	f3bf 8f6f 	isb	sy
 8018b78:	f3bf 8f4f 	dsb	sy
 8018b7c:	60fb      	str	r3, [r7, #12]
}
 8018b7e:	bf00      	nop
 8018b80:	e7fe      	b.n	8018b80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018b82:	f000 feb7 	bl	80198f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018b86:	4b1d      	ldr	r3, [pc, #116]	; (8018bfc <xTaskCheckForTimeOut+0xbc>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	69ba      	ldr	r2, [r7, #24]
 8018b92:	1ad3      	subs	r3, r2, r3
 8018b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b9e:	d102      	bne.n	8018ba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	61fb      	str	r3, [r7, #28]
 8018ba4:	e023      	b.n	8018bee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	4b15      	ldr	r3, [pc, #84]	; (8018c00 <xTaskCheckForTimeOut+0xc0>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d007      	beq.n	8018bc2 <xTaskCheckForTimeOut+0x82>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	685b      	ldr	r3, [r3, #4]
 8018bb6:	69ba      	ldr	r2, [r7, #24]
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d302      	bcc.n	8018bc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	61fb      	str	r3, [r7, #28]
 8018bc0:	e015      	b.n	8018bee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	697a      	ldr	r2, [r7, #20]
 8018bc8:	429a      	cmp	r2, r3
 8018bca:	d20b      	bcs.n	8018be4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	681a      	ldr	r2, [r3, #0]
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	1ad2      	subs	r2, r2, r3
 8018bd4:	683b      	ldr	r3, [r7, #0]
 8018bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f7ff ff9b 	bl	8018b14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018bde:	2300      	movs	r3, #0
 8018be0:	61fb      	str	r3, [r7, #28]
 8018be2:	e004      	b.n	8018bee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	2200      	movs	r2, #0
 8018be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018bea:	2301      	movs	r3, #1
 8018bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018bee:	f000 feb1 	bl	8019954 <vPortExitCritical>

	return xReturn;
 8018bf2:	69fb      	ldr	r3, [r7, #28]
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3720      	adds	r7, #32
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	24002bb0 	.word	0x24002bb0
 8018c00:	24002bc4 	.word	0x24002bc4

08018c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018c04:	b480      	push	{r7}
 8018c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018c08:	4b03      	ldr	r3, [pc, #12]	; (8018c18 <vTaskMissedYield+0x14>)
 8018c0a:	2201      	movs	r2, #1
 8018c0c:	601a      	str	r2, [r3, #0]
}
 8018c0e:	bf00      	nop
 8018c10:	46bd      	mov	sp, r7
 8018c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c16:	4770      	bx	lr
 8018c18:	24002bc0 	.word	0x24002bc0

08018c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018c24:	f000 f852 	bl	8018ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018c28:	4b06      	ldr	r3, [pc, #24]	; (8018c44 <prvIdleTask+0x28>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	2b01      	cmp	r3, #1
 8018c2e:	d9f9      	bls.n	8018c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018c30:	4b05      	ldr	r3, [pc, #20]	; (8018c48 <prvIdleTask+0x2c>)
 8018c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c36:	601a      	str	r2, [r3, #0]
 8018c38:	f3bf 8f4f 	dsb	sy
 8018c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018c40:	e7f0      	b.n	8018c24 <prvIdleTask+0x8>
 8018c42:	bf00      	nop
 8018c44:	240026dc 	.word	0x240026dc
 8018c48:	e000ed04 	.word	0xe000ed04

08018c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c52:	2300      	movs	r3, #0
 8018c54:	607b      	str	r3, [r7, #4]
 8018c56:	e00c      	b.n	8018c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018c58:	687a      	ldr	r2, [r7, #4]
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	009b      	lsls	r3, r3, #2
 8018c5e:	4413      	add	r3, r2
 8018c60:	009b      	lsls	r3, r3, #2
 8018c62:	4a12      	ldr	r2, [pc, #72]	; (8018cac <prvInitialiseTaskLists+0x60>)
 8018c64:	4413      	add	r3, r2
 8018c66:	4618      	mov	r0, r3
 8018c68:	f7fe fc3c 	bl	80174e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	3301      	adds	r3, #1
 8018c70:	607b      	str	r3, [r7, #4]
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2b37      	cmp	r3, #55	; 0x37
 8018c76:	d9ef      	bls.n	8018c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018c78:	480d      	ldr	r0, [pc, #52]	; (8018cb0 <prvInitialiseTaskLists+0x64>)
 8018c7a:	f7fe fc33 	bl	80174e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018c7e:	480d      	ldr	r0, [pc, #52]	; (8018cb4 <prvInitialiseTaskLists+0x68>)
 8018c80:	f7fe fc30 	bl	80174e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018c84:	480c      	ldr	r0, [pc, #48]	; (8018cb8 <prvInitialiseTaskLists+0x6c>)
 8018c86:	f7fe fc2d 	bl	80174e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018c8a:	480c      	ldr	r0, [pc, #48]	; (8018cbc <prvInitialiseTaskLists+0x70>)
 8018c8c:	f7fe fc2a 	bl	80174e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018c90:	480b      	ldr	r0, [pc, #44]	; (8018cc0 <prvInitialiseTaskLists+0x74>)
 8018c92:	f7fe fc27 	bl	80174e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018c96:	4b0b      	ldr	r3, [pc, #44]	; (8018cc4 <prvInitialiseTaskLists+0x78>)
 8018c98:	4a05      	ldr	r2, [pc, #20]	; (8018cb0 <prvInitialiseTaskLists+0x64>)
 8018c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018c9c:	4b0a      	ldr	r3, [pc, #40]	; (8018cc8 <prvInitialiseTaskLists+0x7c>)
 8018c9e:	4a05      	ldr	r2, [pc, #20]	; (8018cb4 <prvInitialiseTaskLists+0x68>)
 8018ca0:	601a      	str	r2, [r3, #0]
}
 8018ca2:	bf00      	nop
 8018ca4:	3708      	adds	r7, #8
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}
 8018caa:	bf00      	nop
 8018cac:	240026dc 	.word	0x240026dc
 8018cb0:	24002b3c 	.word	0x24002b3c
 8018cb4:	24002b50 	.word	0x24002b50
 8018cb8:	24002b6c 	.word	0x24002b6c
 8018cbc:	24002b80 	.word	0x24002b80
 8018cc0:	24002b98 	.word	0x24002b98
 8018cc4:	24002b64 	.word	0x24002b64
 8018cc8:	24002b68 	.word	0x24002b68

08018ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b082      	sub	sp, #8
 8018cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018cd2:	e019      	b.n	8018d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018cd4:	f000 fe0e 	bl	80198f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cd8:	4b10      	ldr	r3, [pc, #64]	; (8018d1c <prvCheckTasksWaitingTermination+0x50>)
 8018cda:	68db      	ldr	r3, [r3, #12]
 8018cdc:	68db      	ldr	r3, [r3, #12]
 8018cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	3304      	adds	r3, #4
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7fe fc87 	bl	80175f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018cea:	4b0d      	ldr	r3, [pc, #52]	; (8018d20 <prvCheckTasksWaitingTermination+0x54>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	3b01      	subs	r3, #1
 8018cf0:	4a0b      	ldr	r2, [pc, #44]	; (8018d20 <prvCheckTasksWaitingTermination+0x54>)
 8018cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018cf4:	4b0b      	ldr	r3, [pc, #44]	; (8018d24 <prvCheckTasksWaitingTermination+0x58>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	4a0a      	ldr	r2, [pc, #40]	; (8018d24 <prvCheckTasksWaitingTermination+0x58>)
 8018cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018cfe:	f000 fe29 	bl	8019954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	f000 f810 	bl	8018d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018d08:	4b06      	ldr	r3, [pc, #24]	; (8018d24 <prvCheckTasksWaitingTermination+0x58>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d1e1      	bne.n	8018cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018d10:	bf00      	nop
 8018d12:	bf00      	nop
 8018d14:	3708      	adds	r7, #8
 8018d16:	46bd      	mov	sp, r7
 8018d18:	bd80      	pop	{r7, pc}
 8018d1a:	bf00      	nop
 8018d1c:	24002b80 	.word	0x24002b80
 8018d20:	24002bac 	.word	0x24002bac
 8018d24:	24002b94 	.word	0x24002b94

08018d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b084      	sub	sp, #16
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d108      	bne.n	8018d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f000 ffc6 	bl	8019cd0 <vPortFree>
				vPortFree( pxTCB );
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f000 ffc3 	bl	8019cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018d4a:	e018      	b.n	8018d7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d52:	2b01      	cmp	r3, #1
 8018d54:	d103      	bne.n	8018d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f000 ffba 	bl	8019cd0 <vPortFree>
	}
 8018d5c:	e00f      	b.n	8018d7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d64:	2b02      	cmp	r3, #2
 8018d66:	d00a      	beq.n	8018d7e <prvDeleteTCB+0x56>
	__asm volatile
 8018d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d6c:	f383 8811 	msr	BASEPRI, r3
 8018d70:	f3bf 8f6f 	isb	sy
 8018d74:	f3bf 8f4f 	dsb	sy
 8018d78:	60fb      	str	r3, [r7, #12]
}
 8018d7a:	bf00      	nop
 8018d7c:	e7fe      	b.n	8018d7c <prvDeleteTCB+0x54>
	}
 8018d7e:	bf00      	nop
 8018d80:	3710      	adds	r7, #16
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}
	...

08018d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018d88:	b480      	push	{r7}
 8018d8a:	b083      	sub	sp, #12
 8018d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018d8e:	4b0c      	ldr	r3, [pc, #48]	; (8018dc0 <prvResetNextTaskUnblockTime+0x38>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d104      	bne.n	8018da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018d98:	4b0a      	ldr	r3, [pc, #40]	; (8018dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8018d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018da0:	e008      	b.n	8018db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018da2:	4b07      	ldr	r3, [pc, #28]	; (8018dc0 <prvResetNextTaskUnblockTime+0x38>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	68db      	ldr	r3, [r3, #12]
 8018da8:	68db      	ldr	r3, [r3, #12]
 8018daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	685b      	ldr	r3, [r3, #4]
 8018db0:	4a04      	ldr	r2, [pc, #16]	; (8018dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8018db2:	6013      	str	r3, [r2, #0]
}
 8018db4:	bf00      	nop
 8018db6:	370c      	adds	r7, #12
 8018db8:	46bd      	mov	sp, r7
 8018dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dbe:	4770      	bx	lr
 8018dc0:	24002b64 	.word	0x24002b64
 8018dc4:	24002bcc 	.word	0x24002bcc

08018dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018dc8:	b480      	push	{r7}
 8018dca:	b083      	sub	sp, #12
 8018dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018dce:	4b0b      	ldr	r3, [pc, #44]	; (8018dfc <xTaskGetSchedulerState+0x34>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d102      	bne.n	8018ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	607b      	str	r3, [r7, #4]
 8018dda:	e008      	b.n	8018dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018ddc:	4b08      	ldr	r3, [pc, #32]	; (8018e00 <xTaskGetSchedulerState+0x38>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d102      	bne.n	8018dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018de4:	2302      	movs	r3, #2
 8018de6:	607b      	str	r3, [r7, #4]
 8018de8:	e001      	b.n	8018dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018dea:	2300      	movs	r3, #0
 8018dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018dee:	687b      	ldr	r3, [r7, #4]
	}
 8018df0:	4618      	mov	r0, r3
 8018df2:	370c      	adds	r7, #12
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr
 8018dfc:	24002bb8 	.word	0x24002bb8
 8018e00:	24002bd4 	.word	0x24002bd4

08018e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b086      	sub	sp, #24
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018e10:	2300      	movs	r3, #0
 8018e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d056      	beq.n	8018ec8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018e1a:	4b2e      	ldr	r3, [pc, #184]	; (8018ed4 <xTaskPriorityDisinherit+0xd0>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	693a      	ldr	r2, [r7, #16]
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d00a      	beq.n	8018e3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e28:	f383 8811 	msr	BASEPRI, r3
 8018e2c:	f3bf 8f6f 	isb	sy
 8018e30:	f3bf 8f4f 	dsb	sy
 8018e34:	60fb      	str	r3, [r7, #12]
}
 8018e36:	bf00      	nop
 8018e38:	e7fe      	b.n	8018e38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d10a      	bne.n	8018e58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e46:	f383 8811 	msr	BASEPRI, r3
 8018e4a:	f3bf 8f6f 	isb	sy
 8018e4e:	f3bf 8f4f 	dsb	sy
 8018e52:	60bb      	str	r3, [r7, #8]
}
 8018e54:	bf00      	nop
 8018e56:	e7fe      	b.n	8018e56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e5c:	1e5a      	subs	r2, r3, #1
 8018e5e:	693b      	ldr	r3, [r7, #16]
 8018e60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018e62:	693b      	ldr	r3, [r7, #16]
 8018e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e66:	693b      	ldr	r3, [r7, #16]
 8018e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d02c      	beq.n	8018ec8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018e6e:	693b      	ldr	r3, [r7, #16]
 8018e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d128      	bne.n	8018ec8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e76:	693b      	ldr	r3, [r7, #16]
 8018e78:	3304      	adds	r3, #4
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f7fe fbbc 	bl	80175f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018e80:	693b      	ldr	r3, [r7, #16]
 8018e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018e90:	693b      	ldr	r3, [r7, #16]
 8018e92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e98:	4b0f      	ldr	r3, [pc, #60]	; (8018ed8 <xTaskPriorityDisinherit+0xd4>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d903      	bls.n	8018ea8 <xTaskPriorityDisinherit+0xa4>
 8018ea0:	693b      	ldr	r3, [r7, #16]
 8018ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ea4:	4a0c      	ldr	r2, [pc, #48]	; (8018ed8 <xTaskPriorityDisinherit+0xd4>)
 8018ea6:	6013      	str	r3, [r2, #0]
 8018ea8:	693b      	ldr	r3, [r7, #16]
 8018eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eac:	4613      	mov	r3, r2
 8018eae:	009b      	lsls	r3, r3, #2
 8018eb0:	4413      	add	r3, r2
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	4a09      	ldr	r2, [pc, #36]	; (8018edc <xTaskPriorityDisinherit+0xd8>)
 8018eb6:	441a      	add	r2, r3
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	3304      	adds	r3, #4
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	4610      	mov	r0, r2
 8018ec0:	f7fe fb3d 	bl	801753e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018ec4:	2301      	movs	r3, #1
 8018ec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018ec8:	697b      	ldr	r3, [r7, #20]
	}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3718      	adds	r7, #24
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	bf00      	nop
 8018ed4:	240026d8 	.word	0x240026d8
 8018ed8:	24002bb4 	.word	0x24002bb4
 8018edc:	240026dc 	.word	0x240026dc

08018ee0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b083      	sub	sp, #12
 8018ee4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018ee6:	4b09      	ldr	r3, [pc, #36]	; (8018f0c <uxTaskResetEventItemValue+0x2c>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	699b      	ldr	r3, [r3, #24]
 8018eec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018eee:	4b07      	ldr	r3, [pc, #28]	; (8018f0c <uxTaskResetEventItemValue+0x2c>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ef4:	4b05      	ldr	r3, [pc, #20]	; (8018f0c <uxTaskResetEventItemValue+0x2c>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018efc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018efe:	687b      	ldr	r3, [r7, #4]
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	370c      	adds	r7, #12
 8018f04:	46bd      	mov	sp, r7
 8018f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0a:	4770      	bx	lr
 8018f0c:	240026d8 	.word	0x240026d8

08018f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b084      	sub	sp, #16
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
 8018f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018f1a:	4b21      	ldr	r3, [pc, #132]	; (8018fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f20:	4b20      	ldr	r3, [pc, #128]	; (8018fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	3304      	adds	r3, #4
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7fe fb66 	bl	80175f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f32:	d10a      	bne.n	8018f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d007      	beq.n	8018f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f3a:	4b1a      	ldr	r3, [pc, #104]	; (8018fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	3304      	adds	r3, #4
 8018f40:	4619      	mov	r1, r3
 8018f42:	4819      	ldr	r0, [pc, #100]	; (8018fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8018f44:	f7fe fafb 	bl	801753e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018f48:	e026      	b.n	8018f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018f4a:	68fa      	ldr	r2, [r7, #12]
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	4413      	add	r3, r2
 8018f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018f52:	4b14      	ldr	r3, [pc, #80]	; (8018fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	68ba      	ldr	r2, [r7, #8]
 8018f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018f5a:	68ba      	ldr	r2, [r7, #8]
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d209      	bcs.n	8018f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f62:	4b12      	ldr	r3, [pc, #72]	; (8018fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8018f64:	681a      	ldr	r2, [r3, #0]
 8018f66:	4b0f      	ldr	r3, [pc, #60]	; (8018fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	3304      	adds	r3, #4
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	4610      	mov	r0, r2
 8018f70:	f7fe fb09 	bl	8017586 <vListInsert>
}
 8018f74:	e010      	b.n	8018f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f76:	4b0e      	ldr	r3, [pc, #56]	; (8018fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	4b0a      	ldr	r3, [pc, #40]	; (8018fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	3304      	adds	r3, #4
 8018f80:	4619      	mov	r1, r3
 8018f82:	4610      	mov	r0, r2
 8018f84:	f7fe faff 	bl	8017586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018f88:	4b0a      	ldr	r3, [pc, #40]	; (8018fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	68ba      	ldr	r2, [r7, #8]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d202      	bcs.n	8018f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018f92:	4a08      	ldr	r2, [pc, #32]	; (8018fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018f94:	68bb      	ldr	r3, [r7, #8]
 8018f96:	6013      	str	r3, [r2, #0]
}
 8018f98:	bf00      	nop
 8018f9a:	3710      	adds	r7, #16
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}
 8018fa0:	24002bb0 	.word	0x24002bb0
 8018fa4:	240026d8 	.word	0x240026d8
 8018fa8:	24002b98 	.word	0x24002b98
 8018fac:	24002b68 	.word	0x24002b68
 8018fb0:	24002b64 	.word	0x24002b64
 8018fb4:	24002bcc 	.word	0x24002bcc

08018fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b08a      	sub	sp, #40	; 0x28
 8018fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018fc2:	f000 fb07 	bl	80195d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018fc6:	4b1c      	ldr	r3, [pc, #112]	; (8019038 <xTimerCreateTimerTask+0x80>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d021      	beq.n	8019012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018fd6:	1d3a      	adds	r2, r7, #4
 8018fd8:	f107 0108 	add.w	r1, r7, #8
 8018fdc:	f107 030c 	add.w	r3, r7, #12
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7fd fff9 	bl	8016fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018fe6:	6879      	ldr	r1, [r7, #4]
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	68fa      	ldr	r2, [r7, #12]
 8018fec:	9202      	str	r2, [sp, #8]
 8018fee:	9301      	str	r3, [sp, #4]
 8018ff0:	2302      	movs	r3, #2
 8018ff2:	9300      	str	r3, [sp, #0]
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	460a      	mov	r2, r1
 8018ff8:	4910      	ldr	r1, [pc, #64]	; (801903c <xTimerCreateTimerTask+0x84>)
 8018ffa:	4811      	ldr	r0, [pc, #68]	; (8019040 <xTimerCreateTimerTask+0x88>)
 8018ffc:	f7ff f812 	bl	8018024 <xTaskCreateStatic>
 8019000:	4603      	mov	r3, r0
 8019002:	4a10      	ldr	r2, [pc, #64]	; (8019044 <xTimerCreateTimerTask+0x8c>)
 8019004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019006:	4b0f      	ldr	r3, [pc, #60]	; (8019044 <xTimerCreateTimerTask+0x8c>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d001      	beq.n	8019012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801900e:	2301      	movs	r3, #1
 8019010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d10a      	bne.n	801902e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801901c:	f383 8811 	msr	BASEPRI, r3
 8019020:	f3bf 8f6f 	isb	sy
 8019024:	f3bf 8f4f 	dsb	sy
 8019028:	613b      	str	r3, [r7, #16]
}
 801902a:	bf00      	nop
 801902c:	e7fe      	b.n	801902c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801902e:	697b      	ldr	r3, [r7, #20]
}
 8019030:	4618      	mov	r0, r3
 8019032:	3718      	adds	r7, #24
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}
 8019038:	24002c08 	.word	0x24002c08
 801903c:	0801abf8 	.word	0x0801abf8
 8019040:	0801917d 	.word	0x0801917d
 8019044:	24002c0c 	.word	0x24002c0c

08019048 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b08a      	sub	sp, #40	; 0x28
 801904c:	af00      	add	r7, sp, #0
 801904e:	60f8      	str	r0, [r7, #12]
 8019050:	60b9      	str	r1, [r7, #8]
 8019052:	607a      	str	r2, [r7, #4]
 8019054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019056:	2300      	movs	r3, #0
 8019058:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d10a      	bne.n	8019076 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019064:	f383 8811 	msr	BASEPRI, r3
 8019068:	f3bf 8f6f 	isb	sy
 801906c:	f3bf 8f4f 	dsb	sy
 8019070:	623b      	str	r3, [r7, #32]
}
 8019072:	bf00      	nop
 8019074:	e7fe      	b.n	8019074 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019076:	4b1a      	ldr	r3, [pc, #104]	; (80190e0 <xTimerGenericCommand+0x98>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d02a      	beq.n	80190d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801908a:	68bb      	ldr	r3, [r7, #8]
 801908c:	2b05      	cmp	r3, #5
 801908e:	dc18      	bgt.n	80190c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019090:	f7ff fe9a 	bl	8018dc8 <xTaskGetSchedulerState>
 8019094:	4603      	mov	r3, r0
 8019096:	2b02      	cmp	r3, #2
 8019098:	d109      	bne.n	80190ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801909a:	4b11      	ldr	r3, [pc, #68]	; (80190e0 <xTimerGenericCommand+0x98>)
 801909c:	6818      	ldr	r0, [r3, #0]
 801909e:	f107 0110 	add.w	r1, r7, #16
 80190a2:	2300      	movs	r3, #0
 80190a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190a6:	f7fe fbd5 	bl	8017854 <xQueueGenericSend>
 80190aa:	6278      	str	r0, [r7, #36]	; 0x24
 80190ac:	e012      	b.n	80190d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80190ae:	4b0c      	ldr	r3, [pc, #48]	; (80190e0 <xTimerGenericCommand+0x98>)
 80190b0:	6818      	ldr	r0, [r3, #0]
 80190b2:	f107 0110 	add.w	r1, r7, #16
 80190b6:	2300      	movs	r3, #0
 80190b8:	2200      	movs	r2, #0
 80190ba:	f7fe fbcb 	bl	8017854 <xQueueGenericSend>
 80190be:	6278      	str	r0, [r7, #36]	; 0x24
 80190c0:	e008      	b.n	80190d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80190c2:	4b07      	ldr	r3, [pc, #28]	; (80190e0 <xTimerGenericCommand+0x98>)
 80190c4:	6818      	ldr	r0, [r3, #0]
 80190c6:	f107 0110 	add.w	r1, r7, #16
 80190ca:	2300      	movs	r3, #0
 80190cc:	683a      	ldr	r2, [r7, #0]
 80190ce:	f7fe fcbf 	bl	8017a50 <xQueueGenericSendFromISR>
 80190d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80190d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3728      	adds	r7, #40	; 0x28
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}
 80190de:	bf00      	nop
 80190e0:	24002c08 	.word	0x24002c08

080190e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b088      	sub	sp, #32
 80190e8:	af02      	add	r7, sp, #8
 80190ea:	6078      	str	r0, [r7, #4]
 80190ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190ee:	4b22      	ldr	r3, [pc, #136]	; (8019178 <prvProcessExpiredTimer+0x94>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	68db      	ldr	r3, [r3, #12]
 80190f4:	68db      	ldr	r3, [r3, #12]
 80190f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	3304      	adds	r3, #4
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7fe fa7b 	bl	80175f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019108:	f003 0304 	and.w	r3, r3, #4
 801910c:	2b00      	cmp	r3, #0
 801910e:	d022      	beq.n	8019156 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019110:	697b      	ldr	r3, [r7, #20]
 8019112:	699a      	ldr	r2, [r3, #24]
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	18d1      	adds	r1, r2, r3
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	683a      	ldr	r2, [r7, #0]
 801911c:	6978      	ldr	r0, [r7, #20]
 801911e:	f000 f8d1 	bl	80192c4 <prvInsertTimerInActiveList>
 8019122:	4603      	mov	r3, r0
 8019124:	2b00      	cmp	r3, #0
 8019126:	d01f      	beq.n	8019168 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019128:	2300      	movs	r3, #0
 801912a:	9300      	str	r3, [sp, #0]
 801912c:	2300      	movs	r3, #0
 801912e:	687a      	ldr	r2, [r7, #4]
 8019130:	2100      	movs	r1, #0
 8019132:	6978      	ldr	r0, [r7, #20]
 8019134:	f7ff ff88 	bl	8019048 <xTimerGenericCommand>
 8019138:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d113      	bne.n	8019168 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019144:	f383 8811 	msr	BASEPRI, r3
 8019148:	f3bf 8f6f 	isb	sy
 801914c:	f3bf 8f4f 	dsb	sy
 8019150:	60fb      	str	r3, [r7, #12]
}
 8019152:	bf00      	nop
 8019154:	e7fe      	b.n	8019154 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801915c:	f023 0301 	bic.w	r3, r3, #1
 8019160:	b2da      	uxtb	r2, r3
 8019162:	697b      	ldr	r3, [r7, #20]
 8019164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	6a1b      	ldr	r3, [r3, #32]
 801916c:	6978      	ldr	r0, [r7, #20]
 801916e:	4798      	blx	r3
}
 8019170:	bf00      	nop
 8019172:	3718      	adds	r7, #24
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}
 8019178:	24002c00 	.word	0x24002c00

0801917c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b084      	sub	sp, #16
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019184:	f107 0308 	add.w	r3, r7, #8
 8019188:	4618      	mov	r0, r3
 801918a:	f000 f857 	bl	801923c <prvGetNextExpireTime>
 801918e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019190:	68bb      	ldr	r3, [r7, #8]
 8019192:	4619      	mov	r1, r3
 8019194:	68f8      	ldr	r0, [r7, #12]
 8019196:	f000 f803 	bl	80191a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801919a:	f000 f8d5 	bl	8019348 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801919e:	e7f1      	b.n	8019184 <prvTimerTask+0x8>

080191a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b084      	sub	sp, #16
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80191aa:	f7ff f977 	bl	801849c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80191ae:	f107 0308 	add.w	r3, r7, #8
 80191b2:	4618      	mov	r0, r3
 80191b4:	f000 f866 	bl	8019284 <prvSampleTimeNow>
 80191b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d130      	bne.n	8019222 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d10a      	bne.n	80191dc <prvProcessTimerOrBlockTask+0x3c>
 80191c6:	687a      	ldr	r2, [r7, #4]
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	429a      	cmp	r2, r3
 80191cc:	d806      	bhi.n	80191dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80191ce:	f7ff f973 	bl	80184b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80191d2:	68f9      	ldr	r1, [r7, #12]
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	f7ff ff85 	bl	80190e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80191da:	e024      	b.n	8019226 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80191dc:	683b      	ldr	r3, [r7, #0]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d008      	beq.n	80191f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80191e2:	4b13      	ldr	r3, [pc, #76]	; (8019230 <prvProcessTimerOrBlockTask+0x90>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d101      	bne.n	80191f0 <prvProcessTimerOrBlockTask+0x50>
 80191ec:	2301      	movs	r3, #1
 80191ee:	e000      	b.n	80191f2 <prvProcessTimerOrBlockTask+0x52>
 80191f0:	2300      	movs	r3, #0
 80191f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80191f4:	4b0f      	ldr	r3, [pc, #60]	; (8019234 <prvProcessTimerOrBlockTask+0x94>)
 80191f6:	6818      	ldr	r0, [r3, #0]
 80191f8:	687a      	ldr	r2, [r7, #4]
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	1ad3      	subs	r3, r2, r3
 80191fe:	683a      	ldr	r2, [r7, #0]
 8019200:	4619      	mov	r1, r3
 8019202:	f7fe fedb 	bl	8017fbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019206:	f7ff f957 	bl	80184b8 <xTaskResumeAll>
 801920a:	4603      	mov	r3, r0
 801920c:	2b00      	cmp	r3, #0
 801920e:	d10a      	bne.n	8019226 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019210:	4b09      	ldr	r3, [pc, #36]	; (8019238 <prvProcessTimerOrBlockTask+0x98>)
 8019212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019216:	601a      	str	r2, [r3, #0]
 8019218:	f3bf 8f4f 	dsb	sy
 801921c:	f3bf 8f6f 	isb	sy
}
 8019220:	e001      	b.n	8019226 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019222:	f7ff f949 	bl	80184b8 <xTaskResumeAll>
}
 8019226:	bf00      	nop
 8019228:	3710      	adds	r7, #16
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	24002c04 	.word	0x24002c04
 8019234:	24002c08 	.word	0x24002c08
 8019238:	e000ed04 	.word	0xe000ed04

0801923c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801923c:	b480      	push	{r7}
 801923e:	b085      	sub	sp, #20
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019244:	4b0e      	ldr	r3, [pc, #56]	; (8019280 <prvGetNextExpireTime+0x44>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d101      	bne.n	8019252 <prvGetNextExpireTime+0x16>
 801924e:	2201      	movs	r2, #1
 8019250:	e000      	b.n	8019254 <prvGetNextExpireTime+0x18>
 8019252:	2200      	movs	r2, #0
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d105      	bne.n	801926c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019260:	4b07      	ldr	r3, [pc, #28]	; (8019280 <prvGetNextExpireTime+0x44>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	68db      	ldr	r3, [r3, #12]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	60fb      	str	r3, [r7, #12]
 801926a:	e001      	b.n	8019270 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801926c:	2300      	movs	r3, #0
 801926e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019270:	68fb      	ldr	r3, [r7, #12]
}
 8019272:	4618      	mov	r0, r3
 8019274:	3714      	adds	r7, #20
 8019276:	46bd      	mov	sp, r7
 8019278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927c:	4770      	bx	lr
 801927e:	bf00      	nop
 8019280:	24002c00 	.word	0x24002c00

08019284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b084      	sub	sp, #16
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801928c:	f7ff f9b2 	bl	80185f4 <xTaskGetTickCount>
 8019290:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019292:	4b0b      	ldr	r3, [pc, #44]	; (80192c0 <prvSampleTimeNow+0x3c>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	68fa      	ldr	r2, [r7, #12]
 8019298:	429a      	cmp	r2, r3
 801929a:	d205      	bcs.n	80192a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801929c:	f000 f936 	bl	801950c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	2201      	movs	r2, #1
 80192a4:	601a      	str	r2, [r3, #0]
 80192a6:	e002      	b.n	80192ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	2200      	movs	r2, #0
 80192ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80192ae:	4a04      	ldr	r2, [pc, #16]	; (80192c0 <prvSampleTimeNow+0x3c>)
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80192b4:	68fb      	ldr	r3, [r7, #12]
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3710      	adds	r7, #16
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	24002c10 	.word	0x24002c10

080192c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b086      	sub	sp, #24
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	60f8      	str	r0, [r7, #12]
 80192cc:	60b9      	str	r1, [r7, #8]
 80192ce:	607a      	str	r2, [r7, #4]
 80192d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80192d2:	2300      	movs	r3, #0
 80192d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	68ba      	ldr	r2, [r7, #8]
 80192da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	68fa      	ldr	r2, [r7, #12]
 80192e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80192e2:	68ba      	ldr	r2, [r7, #8]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	429a      	cmp	r2, r3
 80192e8:	d812      	bhi.n	8019310 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192ea:	687a      	ldr	r2, [r7, #4]
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	1ad2      	subs	r2, r2, r3
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	699b      	ldr	r3, [r3, #24]
 80192f4:	429a      	cmp	r2, r3
 80192f6:	d302      	bcc.n	80192fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80192f8:	2301      	movs	r3, #1
 80192fa:	617b      	str	r3, [r7, #20]
 80192fc:	e01b      	b.n	8019336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80192fe:	4b10      	ldr	r3, [pc, #64]	; (8019340 <prvInsertTimerInActiveList+0x7c>)
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	3304      	adds	r3, #4
 8019306:	4619      	mov	r1, r3
 8019308:	4610      	mov	r0, r2
 801930a:	f7fe f93c 	bl	8017586 <vListInsert>
 801930e:	e012      	b.n	8019336 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019310:	687a      	ldr	r2, [r7, #4]
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	429a      	cmp	r2, r3
 8019316:	d206      	bcs.n	8019326 <prvInsertTimerInActiveList+0x62>
 8019318:	68ba      	ldr	r2, [r7, #8]
 801931a:	683b      	ldr	r3, [r7, #0]
 801931c:	429a      	cmp	r2, r3
 801931e:	d302      	bcc.n	8019326 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019320:	2301      	movs	r3, #1
 8019322:	617b      	str	r3, [r7, #20]
 8019324:	e007      	b.n	8019336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019326:	4b07      	ldr	r3, [pc, #28]	; (8019344 <prvInsertTimerInActiveList+0x80>)
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	3304      	adds	r3, #4
 801932e:	4619      	mov	r1, r3
 8019330:	4610      	mov	r0, r2
 8019332:	f7fe f928 	bl	8017586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019336:	697b      	ldr	r3, [r7, #20]
}
 8019338:	4618      	mov	r0, r3
 801933a:	3718      	adds	r7, #24
 801933c:	46bd      	mov	sp, r7
 801933e:	bd80      	pop	{r7, pc}
 8019340:	24002c04 	.word	0x24002c04
 8019344:	24002c00 	.word	0x24002c00

08019348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b08e      	sub	sp, #56	; 0x38
 801934c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801934e:	e0ca      	b.n	80194e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	da18      	bge.n	8019388 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019356:	1d3b      	adds	r3, r7, #4
 8019358:	3304      	adds	r3, #4
 801935a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801935e:	2b00      	cmp	r3, #0
 8019360:	d10a      	bne.n	8019378 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019366:	f383 8811 	msr	BASEPRI, r3
 801936a:	f3bf 8f6f 	isb	sy
 801936e:	f3bf 8f4f 	dsb	sy
 8019372:	61fb      	str	r3, [r7, #28]
}
 8019374:	bf00      	nop
 8019376:	e7fe      	b.n	8019376 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801937e:	6850      	ldr	r0, [r2, #4]
 8019380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019382:	6892      	ldr	r2, [r2, #8]
 8019384:	4611      	mov	r1, r2
 8019386:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	f2c0 80aa 	blt.w	80194e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019396:	695b      	ldr	r3, [r3, #20]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d004      	beq.n	80193a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801939e:	3304      	adds	r3, #4
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7fe f929 	bl	80175f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80193a6:	463b      	mov	r3, r7
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7ff ff6b 	bl	8019284 <prvSampleTimeNow>
 80193ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2b09      	cmp	r3, #9
 80193b4:	f200 8097 	bhi.w	80194e6 <prvProcessReceivedCommands+0x19e>
 80193b8:	a201      	add	r2, pc, #4	; (adr r2, 80193c0 <prvProcessReceivedCommands+0x78>)
 80193ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193be:	bf00      	nop
 80193c0:	080193e9 	.word	0x080193e9
 80193c4:	080193e9 	.word	0x080193e9
 80193c8:	080193e9 	.word	0x080193e9
 80193cc:	0801945d 	.word	0x0801945d
 80193d0:	08019471 	.word	0x08019471
 80193d4:	080194bb 	.word	0x080194bb
 80193d8:	080193e9 	.word	0x080193e9
 80193dc:	080193e9 	.word	0x080193e9
 80193e0:	0801945d 	.word	0x0801945d
 80193e4:	08019471 	.word	0x08019471
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80193e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193ee:	f043 0301 	orr.w	r3, r3, #1
 80193f2:	b2da      	uxtb	r2, r3
 80193f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80193fa:	68ba      	ldr	r2, [r7, #8]
 80193fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193fe:	699b      	ldr	r3, [r3, #24]
 8019400:	18d1      	adds	r1, r2, r3
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019408:	f7ff ff5c 	bl	80192c4 <prvInsertTimerInActiveList>
 801940c:	4603      	mov	r3, r0
 801940e:	2b00      	cmp	r3, #0
 8019410:	d069      	beq.n	80194e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019414:	6a1b      	ldr	r3, [r3, #32]
 8019416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019418:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019420:	f003 0304 	and.w	r3, r3, #4
 8019424:	2b00      	cmp	r3, #0
 8019426:	d05e      	beq.n	80194e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019428:	68ba      	ldr	r2, [r7, #8]
 801942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801942c:	699b      	ldr	r3, [r3, #24]
 801942e:	441a      	add	r2, r3
 8019430:	2300      	movs	r3, #0
 8019432:	9300      	str	r3, [sp, #0]
 8019434:	2300      	movs	r3, #0
 8019436:	2100      	movs	r1, #0
 8019438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801943a:	f7ff fe05 	bl	8019048 <xTimerGenericCommand>
 801943e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019440:	6a3b      	ldr	r3, [r7, #32]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d14f      	bne.n	80194e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801944a:	f383 8811 	msr	BASEPRI, r3
 801944e:	f3bf 8f6f 	isb	sy
 8019452:	f3bf 8f4f 	dsb	sy
 8019456:	61bb      	str	r3, [r7, #24]
}
 8019458:	bf00      	nop
 801945a:	e7fe      	b.n	801945a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019462:	f023 0301 	bic.w	r3, r3, #1
 8019466:	b2da      	uxtb	r2, r3
 8019468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801946a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801946e:	e03a      	b.n	80194e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019476:	f043 0301 	orr.w	r3, r3, #1
 801947a:	b2da      	uxtb	r2, r3
 801947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801947e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019482:	68ba      	ldr	r2, [r7, #8]
 8019484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019486:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801948a:	699b      	ldr	r3, [r3, #24]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d10a      	bne.n	80194a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019494:	f383 8811 	msr	BASEPRI, r3
 8019498:	f3bf 8f6f 	isb	sy
 801949c:	f3bf 8f4f 	dsb	sy
 80194a0:	617b      	str	r3, [r7, #20]
}
 80194a2:	bf00      	nop
 80194a4:	e7fe      	b.n	80194a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80194a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194a8:	699a      	ldr	r2, [r3, #24]
 80194aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ac:	18d1      	adds	r1, r2, r3
 80194ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194b4:	f7ff ff06 	bl	80192c4 <prvInsertTimerInActiveList>
					break;
 80194b8:	e015      	b.n	80194e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80194ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194c0:	f003 0302 	and.w	r3, r3, #2
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d103      	bne.n	80194d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80194c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194ca:	f000 fc01 	bl	8019cd0 <vPortFree>
 80194ce:	e00a      	b.n	80194e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80194d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194d6:	f023 0301 	bic.w	r3, r3, #1
 80194da:	b2da      	uxtb	r2, r3
 80194dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80194e2:	e000      	b.n	80194e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80194e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80194e6:	4b08      	ldr	r3, [pc, #32]	; (8019508 <prvProcessReceivedCommands+0x1c0>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	1d39      	adds	r1, r7, #4
 80194ec:	2200      	movs	r2, #0
 80194ee:	4618      	mov	r0, r3
 80194f0:	f7fe fb4a 	bl	8017b88 <xQueueReceive>
 80194f4:	4603      	mov	r3, r0
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	f47f af2a 	bne.w	8019350 <prvProcessReceivedCommands+0x8>
	}
}
 80194fc:	bf00      	nop
 80194fe:	bf00      	nop
 8019500:	3730      	adds	r7, #48	; 0x30
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	24002c08 	.word	0x24002c08

0801950c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b088      	sub	sp, #32
 8019510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019512:	e048      	b.n	80195a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019514:	4b2d      	ldr	r3, [pc, #180]	; (80195cc <prvSwitchTimerLists+0xc0>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	68db      	ldr	r3, [r3, #12]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801951e:	4b2b      	ldr	r3, [pc, #172]	; (80195cc <prvSwitchTimerLists+0xc0>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	68db      	ldr	r3, [r3, #12]
 8019524:	68db      	ldr	r3, [r3, #12]
 8019526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	3304      	adds	r3, #4
 801952c:	4618      	mov	r0, r3
 801952e:	f7fe f863 	bl	80175f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	6a1b      	ldr	r3, [r3, #32]
 8019536:	68f8      	ldr	r0, [r7, #12]
 8019538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019540:	f003 0304 	and.w	r3, r3, #4
 8019544:	2b00      	cmp	r3, #0
 8019546:	d02e      	beq.n	80195a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	699b      	ldr	r3, [r3, #24]
 801954c:	693a      	ldr	r2, [r7, #16]
 801954e:	4413      	add	r3, r2
 8019550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019552:	68ba      	ldr	r2, [r7, #8]
 8019554:	693b      	ldr	r3, [r7, #16]
 8019556:	429a      	cmp	r2, r3
 8019558:	d90e      	bls.n	8019578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	68ba      	ldr	r2, [r7, #8]
 801955e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	68fa      	ldr	r2, [r7, #12]
 8019564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019566:	4b19      	ldr	r3, [pc, #100]	; (80195cc <prvSwitchTimerLists+0xc0>)
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	3304      	adds	r3, #4
 801956e:	4619      	mov	r1, r3
 8019570:	4610      	mov	r0, r2
 8019572:	f7fe f808 	bl	8017586 <vListInsert>
 8019576:	e016      	b.n	80195a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019578:	2300      	movs	r3, #0
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	2300      	movs	r3, #0
 801957e:	693a      	ldr	r2, [r7, #16]
 8019580:	2100      	movs	r1, #0
 8019582:	68f8      	ldr	r0, [r7, #12]
 8019584:	f7ff fd60 	bl	8019048 <xTimerGenericCommand>
 8019588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d10a      	bne.n	80195a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019594:	f383 8811 	msr	BASEPRI, r3
 8019598:	f3bf 8f6f 	isb	sy
 801959c:	f3bf 8f4f 	dsb	sy
 80195a0:	603b      	str	r3, [r7, #0]
}
 80195a2:	bf00      	nop
 80195a4:	e7fe      	b.n	80195a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80195a6:	4b09      	ldr	r3, [pc, #36]	; (80195cc <prvSwitchTimerLists+0xc0>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d1b1      	bne.n	8019514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80195b0:	4b06      	ldr	r3, [pc, #24]	; (80195cc <prvSwitchTimerLists+0xc0>)
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80195b6:	4b06      	ldr	r3, [pc, #24]	; (80195d0 <prvSwitchTimerLists+0xc4>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	4a04      	ldr	r2, [pc, #16]	; (80195cc <prvSwitchTimerLists+0xc0>)
 80195bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80195be:	4a04      	ldr	r2, [pc, #16]	; (80195d0 <prvSwitchTimerLists+0xc4>)
 80195c0:	697b      	ldr	r3, [r7, #20]
 80195c2:	6013      	str	r3, [r2, #0]
}
 80195c4:	bf00      	nop
 80195c6:	3718      	adds	r7, #24
 80195c8:	46bd      	mov	sp, r7
 80195ca:	bd80      	pop	{r7, pc}
 80195cc:	24002c00 	.word	0x24002c00
 80195d0:	24002c04 	.word	0x24002c04

080195d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b082      	sub	sp, #8
 80195d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80195da:	f000 f98b 	bl	80198f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80195de:	4b15      	ldr	r3, [pc, #84]	; (8019634 <prvCheckForValidListAndQueue+0x60>)
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d120      	bne.n	8019628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80195e6:	4814      	ldr	r0, [pc, #80]	; (8019638 <prvCheckForValidListAndQueue+0x64>)
 80195e8:	f7fd ff7c 	bl	80174e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80195ec:	4813      	ldr	r0, [pc, #76]	; (801963c <prvCheckForValidListAndQueue+0x68>)
 80195ee:	f7fd ff79 	bl	80174e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80195f2:	4b13      	ldr	r3, [pc, #76]	; (8019640 <prvCheckForValidListAndQueue+0x6c>)
 80195f4:	4a10      	ldr	r2, [pc, #64]	; (8019638 <prvCheckForValidListAndQueue+0x64>)
 80195f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80195f8:	4b12      	ldr	r3, [pc, #72]	; (8019644 <prvCheckForValidListAndQueue+0x70>)
 80195fa:	4a10      	ldr	r2, [pc, #64]	; (801963c <prvCheckForValidListAndQueue+0x68>)
 80195fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80195fe:	2300      	movs	r3, #0
 8019600:	9300      	str	r3, [sp, #0]
 8019602:	4b11      	ldr	r3, [pc, #68]	; (8019648 <prvCheckForValidListAndQueue+0x74>)
 8019604:	4a11      	ldr	r2, [pc, #68]	; (801964c <prvCheckForValidListAndQueue+0x78>)
 8019606:	2110      	movs	r1, #16
 8019608:	200a      	movs	r0, #10
 801960a:	f7fe f887 	bl	801771c <xQueueGenericCreateStatic>
 801960e:	4603      	mov	r3, r0
 8019610:	4a08      	ldr	r2, [pc, #32]	; (8019634 <prvCheckForValidListAndQueue+0x60>)
 8019612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019614:	4b07      	ldr	r3, [pc, #28]	; (8019634 <prvCheckForValidListAndQueue+0x60>)
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d005      	beq.n	8019628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801961c:	4b05      	ldr	r3, [pc, #20]	; (8019634 <prvCheckForValidListAndQueue+0x60>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	490b      	ldr	r1, [pc, #44]	; (8019650 <prvCheckForValidListAndQueue+0x7c>)
 8019622:	4618      	mov	r0, r3
 8019624:	f7fe fca0 	bl	8017f68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019628:	f000 f994 	bl	8019954 <vPortExitCritical>
}
 801962c:	bf00      	nop
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}
 8019632:	bf00      	nop
 8019634:	24002c08 	.word	0x24002c08
 8019638:	24002bd8 	.word	0x24002bd8
 801963c:	24002bec 	.word	0x24002bec
 8019640:	24002c00 	.word	0x24002c00
 8019644:	24002c04 	.word	0x24002c04
 8019648:	24002cb4 	.word	0x24002cb4
 801964c:	24002c14 	.word	0x24002c14
 8019650:	0801ac00 	.word	0x0801ac00

08019654 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019654:	b580      	push	{r7, lr}
 8019656:	b08a      	sub	sp, #40	; 0x28
 8019658:	af00      	add	r7, sp, #0
 801965a:	60f8      	str	r0, [r7, #12]
 801965c:	60b9      	str	r1, [r7, #8]
 801965e:	607a      	str	r2, [r7, #4]
 8019660:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019662:	f06f 0301 	mvn.w	r3, #1
 8019666:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019674:	4b06      	ldr	r3, [pc, #24]	; (8019690 <xTimerPendFunctionCallFromISR+0x3c>)
 8019676:	6818      	ldr	r0, [r3, #0]
 8019678:	f107 0114 	add.w	r1, r7, #20
 801967c:	2300      	movs	r3, #0
 801967e:	683a      	ldr	r2, [r7, #0]
 8019680:	f7fe f9e6 	bl	8017a50 <xQueueGenericSendFromISR>
 8019684:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019688:	4618      	mov	r0, r3
 801968a:	3728      	adds	r7, #40	; 0x28
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	24002c08 	.word	0x24002c08

08019694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019694:	b480      	push	{r7}
 8019696:	b085      	sub	sp, #20
 8019698:	af00      	add	r7, sp, #0
 801969a:	60f8      	str	r0, [r7, #12]
 801969c:	60b9      	str	r1, [r7, #8]
 801969e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	3b04      	subs	r3, #4
 80196a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80196ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	3b04      	subs	r3, #4
 80196b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80196b4:	68bb      	ldr	r3, [r7, #8]
 80196b6:	f023 0201 	bic.w	r2, r3, #1
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	3b04      	subs	r3, #4
 80196c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80196c4:	4a0c      	ldr	r2, [pc, #48]	; (80196f8 <pxPortInitialiseStack+0x64>)
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	3b14      	subs	r3, #20
 80196ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80196d0:	687a      	ldr	r2, [r7, #4]
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	3b04      	subs	r3, #4
 80196da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	f06f 0202 	mvn.w	r2, #2
 80196e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	3b20      	subs	r3, #32
 80196e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80196ea:	68fb      	ldr	r3, [r7, #12]
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	3714      	adds	r7, #20
 80196f0:	46bd      	mov	sp, r7
 80196f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f6:	4770      	bx	lr
 80196f8:	080196fd 	.word	0x080196fd

080196fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80196fc:	b480      	push	{r7}
 80196fe:	b085      	sub	sp, #20
 8019700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019702:	2300      	movs	r3, #0
 8019704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019706:	4b12      	ldr	r3, [pc, #72]	; (8019750 <prvTaskExitError+0x54>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801970e:	d00a      	beq.n	8019726 <prvTaskExitError+0x2a>
	__asm volatile
 8019710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019714:	f383 8811 	msr	BASEPRI, r3
 8019718:	f3bf 8f6f 	isb	sy
 801971c:	f3bf 8f4f 	dsb	sy
 8019720:	60fb      	str	r3, [r7, #12]
}
 8019722:	bf00      	nop
 8019724:	e7fe      	b.n	8019724 <prvTaskExitError+0x28>
	__asm volatile
 8019726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801972a:	f383 8811 	msr	BASEPRI, r3
 801972e:	f3bf 8f6f 	isb	sy
 8019732:	f3bf 8f4f 	dsb	sy
 8019736:	60bb      	str	r3, [r7, #8]
}
 8019738:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801973a:	bf00      	nop
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d0fc      	beq.n	801973c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019742:	bf00      	nop
 8019744:	bf00      	nop
 8019746:	3714      	adds	r7, #20
 8019748:	46bd      	mov	sp, r7
 801974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974e:	4770      	bx	lr
 8019750:	240000a0 	.word	0x240000a0
	...

08019760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019760:	4b07      	ldr	r3, [pc, #28]	; (8019780 <pxCurrentTCBConst2>)
 8019762:	6819      	ldr	r1, [r3, #0]
 8019764:	6808      	ldr	r0, [r1, #0]
 8019766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801976a:	f380 8809 	msr	PSP, r0
 801976e:	f3bf 8f6f 	isb	sy
 8019772:	f04f 0000 	mov.w	r0, #0
 8019776:	f380 8811 	msr	BASEPRI, r0
 801977a:	4770      	bx	lr
 801977c:	f3af 8000 	nop.w

08019780 <pxCurrentTCBConst2>:
 8019780:	240026d8 	.word	0x240026d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019784:	bf00      	nop
 8019786:	bf00      	nop

08019788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019788:	4808      	ldr	r0, [pc, #32]	; (80197ac <prvPortStartFirstTask+0x24>)
 801978a:	6800      	ldr	r0, [r0, #0]
 801978c:	6800      	ldr	r0, [r0, #0]
 801978e:	f380 8808 	msr	MSP, r0
 8019792:	f04f 0000 	mov.w	r0, #0
 8019796:	f380 8814 	msr	CONTROL, r0
 801979a:	b662      	cpsie	i
 801979c:	b661      	cpsie	f
 801979e:	f3bf 8f4f 	dsb	sy
 80197a2:	f3bf 8f6f 	isb	sy
 80197a6:	df00      	svc	0
 80197a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80197aa:	bf00      	nop
 80197ac:	e000ed08 	.word	0xe000ed08

080197b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b086      	sub	sp, #24
 80197b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80197b6:	4b46      	ldr	r3, [pc, #280]	; (80198d0 <xPortStartScheduler+0x120>)
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	4a46      	ldr	r2, [pc, #280]	; (80198d4 <xPortStartScheduler+0x124>)
 80197bc:	4293      	cmp	r3, r2
 80197be:	d10a      	bne.n	80197d6 <xPortStartScheduler+0x26>
	__asm volatile
 80197c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197c4:	f383 8811 	msr	BASEPRI, r3
 80197c8:	f3bf 8f6f 	isb	sy
 80197cc:	f3bf 8f4f 	dsb	sy
 80197d0:	613b      	str	r3, [r7, #16]
}
 80197d2:	bf00      	nop
 80197d4:	e7fe      	b.n	80197d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80197d6:	4b3e      	ldr	r3, [pc, #248]	; (80198d0 <xPortStartScheduler+0x120>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	4a3f      	ldr	r2, [pc, #252]	; (80198d8 <xPortStartScheduler+0x128>)
 80197dc:	4293      	cmp	r3, r2
 80197de:	d10a      	bne.n	80197f6 <xPortStartScheduler+0x46>
	__asm volatile
 80197e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197e4:	f383 8811 	msr	BASEPRI, r3
 80197e8:	f3bf 8f6f 	isb	sy
 80197ec:	f3bf 8f4f 	dsb	sy
 80197f0:	60fb      	str	r3, [r7, #12]
}
 80197f2:	bf00      	nop
 80197f4:	e7fe      	b.n	80197f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80197f6:	4b39      	ldr	r3, [pc, #228]	; (80198dc <xPortStartScheduler+0x12c>)
 80197f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019802:	697b      	ldr	r3, [r7, #20]
 8019804:	22ff      	movs	r2, #255	; 0xff
 8019806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	781b      	ldrb	r3, [r3, #0]
 801980c:	b2db      	uxtb	r3, r3
 801980e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019810:	78fb      	ldrb	r3, [r7, #3]
 8019812:	b2db      	uxtb	r3, r3
 8019814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019818:	b2da      	uxtb	r2, r3
 801981a:	4b31      	ldr	r3, [pc, #196]	; (80198e0 <xPortStartScheduler+0x130>)
 801981c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801981e:	4b31      	ldr	r3, [pc, #196]	; (80198e4 <xPortStartScheduler+0x134>)
 8019820:	2207      	movs	r2, #7
 8019822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019824:	e009      	b.n	801983a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019826:	4b2f      	ldr	r3, [pc, #188]	; (80198e4 <xPortStartScheduler+0x134>)
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	3b01      	subs	r3, #1
 801982c:	4a2d      	ldr	r2, [pc, #180]	; (80198e4 <xPortStartScheduler+0x134>)
 801982e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019830:	78fb      	ldrb	r3, [r7, #3]
 8019832:	b2db      	uxtb	r3, r3
 8019834:	005b      	lsls	r3, r3, #1
 8019836:	b2db      	uxtb	r3, r3
 8019838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801983a:	78fb      	ldrb	r3, [r7, #3]
 801983c:	b2db      	uxtb	r3, r3
 801983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019842:	2b80      	cmp	r3, #128	; 0x80
 8019844:	d0ef      	beq.n	8019826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019846:	4b27      	ldr	r3, [pc, #156]	; (80198e4 <xPortStartScheduler+0x134>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	f1c3 0307 	rsb	r3, r3, #7
 801984e:	2b04      	cmp	r3, #4
 8019850:	d00a      	beq.n	8019868 <xPortStartScheduler+0xb8>
	__asm volatile
 8019852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019856:	f383 8811 	msr	BASEPRI, r3
 801985a:	f3bf 8f6f 	isb	sy
 801985e:	f3bf 8f4f 	dsb	sy
 8019862:	60bb      	str	r3, [r7, #8]
}
 8019864:	bf00      	nop
 8019866:	e7fe      	b.n	8019866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019868:	4b1e      	ldr	r3, [pc, #120]	; (80198e4 <xPortStartScheduler+0x134>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	021b      	lsls	r3, r3, #8
 801986e:	4a1d      	ldr	r2, [pc, #116]	; (80198e4 <xPortStartScheduler+0x134>)
 8019870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019872:	4b1c      	ldr	r3, [pc, #112]	; (80198e4 <xPortStartScheduler+0x134>)
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801987a:	4a1a      	ldr	r2, [pc, #104]	; (80198e4 <xPortStartScheduler+0x134>)
 801987c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	b2da      	uxtb	r2, r3
 8019882:	697b      	ldr	r3, [r7, #20]
 8019884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019886:	4b18      	ldr	r3, [pc, #96]	; (80198e8 <xPortStartScheduler+0x138>)
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	4a17      	ldr	r2, [pc, #92]	; (80198e8 <xPortStartScheduler+0x138>)
 801988c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019892:	4b15      	ldr	r3, [pc, #84]	; (80198e8 <xPortStartScheduler+0x138>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	4a14      	ldr	r2, [pc, #80]	; (80198e8 <xPortStartScheduler+0x138>)
 8019898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801989c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801989e:	f000 f8dd 	bl	8019a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80198a2:	4b12      	ldr	r3, [pc, #72]	; (80198ec <xPortStartScheduler+0x13c>)
 80198a4:	2200      	movs	r2, #0
 80198a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80198a8:	f000 f8fc 	bl	8019aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80198ac:	4b10      	ldr	r3, [pc, #64]	; (80198f0 <xPortStartScheduler+0x140>)
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	4a0f      	ldr	r2, [pc, #60]	; (80198f0 <xPortStartScheduler+0x140>)
 80198b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80198b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80198b8:	f7ff ff66 	bl	8019788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80198bc:	f7fe ff6c 	bl	8018798 <vTaskSwitchContext>
	prvTaskExitError();
 80198c0:	f7ff ff1c 	bl	80196fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80198c4:	2300      	movs	r3, #0
}
 80198c6:	4618      	mov	r0, r3
 80198c8:	3718      	adds	r7, #24
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}
 80198ce:	bf00      	nop
 80198d0:	e000ed00 	.word	0xe000ed00
 80198d4:	410fc271 	.word	0x410fc271
 80198d8:	410fc270 	.word	0x410fc270
 80198dc:	e000e400 	.word	0xe000e400
 80198e0:	24002d04 	.word	0x24002d04
 80198e4:	24002d08 	.word	0x24002d08
 80198e8:	e000ed20 	.word	0xe000ed20
 80198ec:	240000a0 	.word	0x240000a0
 80198f0:	e000ef34 	.word	0xe000ef34

080198f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80198f4:	b480      	push	{r7}
 80198f6:	b083      	sub	sp, #12
 80198f8:	af00      	add	r7, sp, #0
	__asm volatile
 80198fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198fe:	f383 8811 	msr	BASEPRI, r3
 8019902:	f3bf 8f6f 	isb	sy
 8019906:	f3bf 8f4f 	dsb	sy
 801990a:	607b      	str	r3, [r7, #4]
}
 801990c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801990e:	4b0f      	ldr	r3, [pc, #60]	; (801994c <vPortEnterCritical+0x58>)
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	3301      	adds	r3, #1
 8019914:	4a0d      	ldr	r2, [pc, #52]	; (801994c <vPortEnterCritical+0x58>)
 8019916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019918:	4b0c      	ldr	r3, [pc, #48]	; (801994c <vPortEnterCritical+0x58>)
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	2b01      	cmp	r3, #1
 801991e:	d10f      	bne.n	8019940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019920:	4b0b      	ldr	r3, [pc, #44]	; (8019950 <vPortEnterCritical+0x5c>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	b2db      	uxtb	r3, r3
 8019926:	2b00      	cmp	r3, #0
 8019928:	d00a      	beq.n	8019940 <vPortEnterCritical+0x4c>
	__asm volatile
 801992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801992e:	f383 8811 	msr	BASEPRI, r3
 8019932:	f3bf 8f6f 	isb	sy
 8019936:	f3bf 8f4f 	dsb	sy
 801993a:	603b      	str	r3, [r7, #0]
}
 801993c:	bf00      	nop
 801993e:	e7fe      	b.n	801993e <vPortEnterCritical+0x4a>
	}
}
 8019940:	bf00      	nop
 8019942:	370c      	adds	r7, #12
 8019944:	46bd      	mov	sp, r7
 8019946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994a:	4770      	bx	lr
 801994c:	240000a0 	.word	0x240000a0
 8019950:	e000ed04 	.word	0xe000ed04

08019954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019954:	b480      	push	{r7}
 8019956:	b083      	sub	sp, #12
 8019958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801995a:	4b12      	ldr	r3, [pc, #72]	; (80199a4 <vPortExitCritical+0x50>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d10a      	bne.n	8019978 <vPortExitCritical+0x24>
	__asm volatile
 8019962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019966:	f383 8811 	msr	BASEPRI, r3
 801996a:	f3bf 8f6f 	isb	sy
 801996e:	f3bf 8f4f 	dsb	sy
 8019972:	607b      	str	r3, [r7, #4]
}
 8019974:	bf00      	nop
 8019976:	e7fe      	b.n	8019976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019978:	4b0a      	ldr	r3, [pc, #40]	; (80199a4 <vPortExitCritical+0x50>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	3b01      	subs	r3, #1
 801997e:	4a09      	ldr	r2, [pc, #36]	; (80199a4 <vPortExitCritical+0x50>)
 8019980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019982:	4b08      	ldr	r3, [pc, #32]	; (80199a4 <vPortExitCritical+0x50>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d105      	bne.n	8019996 <vPortExitCritical+0x42>
 801998a:	2300      	movs	r3, #0
 801998c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801998e:	683b      	ldr	r3, [r7, #0]
 8019990:	f383 8811 	msr	BASEPRI, r3
}
 8019994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019996:	bf00      	nop
 8019998:	370c      	adds	r7, #12
 801999a:	46bd      	mov	sp, r7
 801999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a0:	4770      	bx	lr
 80199a2:	bf00      	nop
 80199a4:	240000a0 	.word	0x240000a0
	...

080199b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80199b0:	f3ef 8009 	mrs	r0, PSP
 80199b4:	f3bf 8f6f 	isb	sy
 80199b8:	4b15      	ldr	r3, [pc, #84]	; (8019a10 <pxCurrentTCBConst>)
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	f01e 0f10 	tst.w	lr, #16
 80199c0:	bf08      	it	eq
 80199c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80199c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199ca:	6010      	str	r0, [r2, #0]
 80199cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80199d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80199d4:	f380 8811 	msr	BASEPRI, r0
 80199d8:	f3bf 8f4f 	dsb	sy
 80199dc:	f3bf 8f6f 	isb	sy
 80199e0:	f7fe feda 	bl	8018798 <vTaskSwitchContext>
 80199e4:	f04f 0000 	mov.w	r0, #0
 80199e8:	f380 8811 	msr	BASEPRI, r0
 80199ec:	bc09      	pop	{r0, r3}
 80199ee:	6819      	ldr	r1, [r3, #0]
 80199f0:	6808      	ldr	r0, [r1, #0]
 80199f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f6:	f01e 0f10 	tst.w	lr, #16
 80199fa:	bf08      	it	eq
 80199fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019a00:	f380 8809 	msr	PSP, r0
 8019a04:	f3bf 8f6f 	isb	sy
 8019a08:	4770      	bx	lr
 8019a0a:	bf00      	nop
 8019a0c:	f3af 8000 	nop.w

08019a10 <pxCurrentTCBConst>:
 8019a10:	240026d8 	.word	0x240026d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019a14:	bf00      	nop
 8019a16:	bf00      	nop

08019a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b082      	sub	sp, #8
 8019a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8019a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a22:	f383 8811 	msr	BASEPRI, r3
 8019a26:	f3bf 8f6f 	isb	sy
 8019a2a:	f3bf 8f4f 	dsb	sy
 8019a2e:	607b      	str	r3, [r7, #4]
}
 8019a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019a32:	f7fe fdef 	bl	8018614 <xTaskIncrementTick>
 8019a36:	4603      	mov	r3, r0
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d003      	beq.n	8019a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019a3c:	4b06      	ldr	r3, [pc, #24]	; (8019a58 <xPortSysTickHandler+0x40>)
 8019a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a42:	601a      	str	r2, [r3, #0]
 8019a44:	2300      	movs	r3, #0
 8019a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	f383 8811 	msr	BASEPRI, r3
}
 8019a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019a50:	bf00      	nop
 8019a52:	3708      	adds	r7, #8
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}
 8019a58:	e000ed04 	.word	0xe000ed04

08019a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019a60:	4b0b      	ldr	r3, [pc, #44]	; (8019a90 <vPortSetupTimerInterrupt+0x34>)
 8019a62:	2200      	movs	r2, #0
 8019a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019a66:	4b0b      	ldr	r3, [pc, #44]	; (8019a94 <vPortSetupTimerInterrupt+0x38>)
 8019a68:	2200      	movs	r2, #0
 8019a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019a6c:	4b0a      	ldr	r3, [pc, #40]	; (8019a98 <vPortSetupTimerInterrupt+0x3c>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	4a0a      	ldr	r2, [pc, #40]	; (8019a9c <vPortSetupTimerInterrupt+0x40>)
 8019a72:	fba2 2303 	umull	r2, r3, r2, r3
 8019a76:	099b      	lsrs	r3, r3, #6
 8019a78:	4a09      	ldr	r2, [pc, #36]	; (8019aa0 <vPortSetupTimerInterrupt+0x44>)
 8019a7a:	3b01      	subs	r3, #1
 8019a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019a7e:	4b04      	ldr	r3, [pc, #16]	; (8019a90 <vPortSetupTimerInterrupt+0x34>)
 8019a80:	2207      	movs	r2, #7
 8019a82:	601a      	str	r2, [r3, #0]
}
 8019a84:	bf00      	nop
 8019a86:	46bd      	mov	sp, r7
 8019a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8c:	4770      	bx	lr
 8019a8e:	bf00      	nop
 8019a90:	e000e010 	.word	0xe000e010
 8019a94:	e000e018 	.word	0xe000e018
 8019a98:	24000090 	.word	0x24000090
 8019a9c:	10624dd3 	.word	0x10624dd3
 8019aa0:	e000e014 	.word	0xe000e014

08019aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019ab4 <vPortEnableVFP+0x10>
 8019aa8:	6801      	ldr	r1, [r0, #0]
 8019aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019aae:	6001      	str	r1, [r0, #0]
 8019ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019ab2:	bf00      	nop
 8019ab4:	e000ed88 	.word	0xe000ed88

08019ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019ab8:	b480      	push	{r7}
 8019aba:	b085      	sub	sp, #20
 8019abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019abe:	f3ef 8305 	mrs	r3, IPSR
 8019ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	2b0f      	cmp	r3, #15
 8019ac8:	d914      	bls.n	8019af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019aca:	4a17      	ldr	r2, [pc, #92]	; (8019b28 <vPortValidateInterruptPriority+0x70>)
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	4413      	add	r3, r2
 8019ad0:	781b      	ldrb	r3, [r3, #0]
 8019ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019ad4:	4b15      	ldr	r3, [pc, #84]	; (8019b2c <vPortValidateInterruptPriority+0x74>)
 8019ad6:	781b      	ldrb	r3, [r3, #0]
 8019ad8:	7afa      	ldrb	r2, [r7, #11]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d20a      	bcs.n	8019af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ae2:	f383 8811 	msr	BASEPRI, r3
 8019ae6:	f3bf 8f6f 	isb	sy
 8019aea:	f3bf 8f4f 	dsb	sy
 8019aee:	607b      	str	r3, [r7, #4]
}
 8019af0:	bf00      	nop
 8019af2:	e7fe      	b.n	8019af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019af4:	4b0e      	ldr	r3, [pc, #56]	; (8019b30 <vPortValidateInterruptPriority+0x78>)
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019afc:	4b0d      	ldr	r3, [pc, #52]	; (8019b34 <vPortValidateInterruptPriority+0x7c>)
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d90a      	bls.n	8019b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b08:	f383 8811 	msr	BASEPRI, r3
 8019b0c:	f3bf 8f6f 	isb	sy
 8019b10:	f3bf 8f4f 	dsb	sy
 8019b14:	603b      	str	r3, [r7, #0]
}
 8019b16:	bf00      	nop
 8019b18:	e7fe      	b.n	8019b18 <vPortValidateInterruptPriority+0x60>
	}
 8019b1a:	bf00      	nop
 8019b1c:	3714      	adds	r7, #20
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b24:	4770      	bx	lr
 8019b26:	bf00      	nop
 8019b28:	e000e3f0 	.word	0xe000e3f0
 8019b2c:	24002d04 	.word	0x24002d04
 8019b30:	e000ed0c 	.word	0xe000ed0c
 8019b34:	24002d08 	.word	0x24002d08

08019b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b08a      	sub	sp, #40	; 0x28
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019b40:	2300      	movs	r3, #0
 8019b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019b44:	f7fe fcaa 	bl	801849c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019b48:	4b5b      	ldr	r3, [pc, #364]	; (8019cb8 <pvPortMalloc+0x180>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d101      	bne.n	8019b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019b50:	f000 f920 	bl	8019d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019b54:	4b59      	ldr	r3, [pc, #356]	; (8019cbc <pvPortMalloc+0x184>)
 8019b56:	681a      	ldr	r2, [r3, #0]
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	4013      	ands	r3, r2
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	f040 8093 	bne.w	8019c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d01d      	beq.n	8019ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019b68:	2208      	movs	r2, #8
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	4413      	add	r3, r2
 8019b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	f003 0307 	and.w	r3, r3, #7
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d014      	beq.n	8019ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	f023 0307 	bic.w	r3, r3, #7
 8019b80:	3308      	adds	r3, #8
 8019b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	f003 0307 	and.w	r3, r3, #7
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d00a      	beq.n	8019ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8019b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b92:	f383 8811 	msr	BASEPRI, r3
 8019b96:	f3bf 8f6f 	isb	sy
 8019b9a:	f3bf 8f4f 	dsb	sy
 8019b9e:	617b      	str	r3, [r7, #20]
}
 8019ba0:	bf00      	nop
 8019ba2:	e7fe      	b.n	8019ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d06e      	beq.n	8019c88 <pvPortMalloc+0x150>
 8019baa:	4b45      	ldr	r3, [pc, #276]	; (8019cc0 <pvPortMalloc+0x188>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	687a      	ldr	r2, [r7, #4]
 8019bb0:	429a      	cmp	r2, r3
 8019bb2:	d869      	bhi.n	8019c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019bb4:	4b43      	ldr	r3, [pc, #268]	; (8019cc4 <pvPortMalloc+0x18c>)
 8019bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019bb8:	4b42      	ldr	r3, [pc, #264]	; (8019cc4 <pvPortMalloc+0x18c>)
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019bbe:	e004      	b.n	8019bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bcc:	685b      	ldr	r3, [r3, #4]
 8019bce:	687a      	ldr	r2, [r7, #4]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	d903      	bls.n	8019bdc <pvPortMalloc+0xa4>
 8019bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d1f1      	bne.n	8019bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019bdc:	4b36      	ldr	r3, [pc, #216]	; (8019cb8 <pvPortMalloc+0x180>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019be2:	429a      	cmp	r2, r3
 8019be4:	d050      	beq.n	8019c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019be6:	6a3b      	ldr	r3, [r7, #32]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	2208      	movs	r2, #8
 8019bec:	4413      	add	r3, r2
 8019bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	6a3b      	ldr	r3, [r7, #32]
 8019bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfa:	685a      	ldr	r2, [r3, #4]
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	1ad2      	subs	r2, r2, r3
 8019c00:	2308      	movs	r3, #8
 8019c02:	005b      	lsls	r3, r3, #1
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d91f      	bls.n	8019c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	4413      	add	r3, r2
 8019c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c10:	69bb      	ldr	r3, [r7, #24]
 8019c12:	f003 0307 	and.w	r3, r3, #7
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d00a      	beq.n	8019c30 <pvPortMalloc+0xf8>
	__asm volatile
 8019c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c1e:	f383 8811 	msr	BASEPRI, r3
 8019c22:	f3bf 8f6f 	isb	sy
 8019c26:	f3bf 8f4f 	dsb	sy
 8019c2a:	613b      	str	r3, [r7, #16]
}
 8019c2c:	bf00      	nop
 8019c2e:	e7fe      	b.n	8019c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c32:	685a      	ldr	r2, [r3, #4]
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	1ad2      	subs	r2, r2, r3
 8019c38:	69bb      	ldr	r3, [r7, #24]
 8019c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3e:	687a      	ldr	r2, [r7, #4]
 8019c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019c42:	69b8      	ldr	r0, [r7, #24]
 8019c44:	f000 f908 	bl	8019e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019c48:	4b1d      	ldr	r3, [pc, #116]	; (8019cc0 <pvPortMalloc+0x188>)
 8019c4a:	681a      	ldr	r2, [r3, #0]
 8019c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4e:	685b      	ldr	r3, [r3, #4]
 8019c50:	1ad3      	subs	r3, r2, r3
 8019c52:	4a1b      	ldr	r2, [pc, #108]	; (8019cc0 <pvPortMalloc+0x188>)
 8019c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019c56:	4b1a      	ldr	r3, [pc, #104]	; (8019cc0 <pvPortMalloc+0x188>)
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	4b1b      	ldr	r3, [pc, #108]	; (8019cc8 <pvPortMalloc+0x190>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	429a      	cmp	r2, r3
 8019c60:	d203      	bcs.n	8019c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019c62:	4b17      	ldr	r3, [pc, #92]	; (8019cc0 <pvPortMalloc+0x188>)
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	4a18      	ldr	r2, [pc, #96]	; (8019cc8 <pvPortMalloc+0x190>)
 8019c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c6c:	685a      	ldr	r2, [r3, #4]
 8019c6e:	4b13      	ldr	r3, [pc, #76]	; (8019cbc <pvPortMalloc+0x184>)
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	431a      	orrs	r2, r3
 8019c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019c7e:	4b13      	ldr	r3, [pc, #76]	; (8019ccc <pvPortMalloc+0x194>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	3301      	adds	r3, #1
 8019c84:	4a11      	ldr	r2, [pc, #68]	; (8019ccc <pvPortMalloc+0x194>)
 8019c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019c88:	f7fe fc16 	bl	80184b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c8c:	69fb      	ldr	r3, [r7, #28]
 8019c8e:	f003 0307 	and.w	r3, r3, #7
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d00a      	beq.n	8019cac <pvPortMalloc+0x174>
	__asm volatile
 8019c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c9a:	f383 8811 	msr	BASEPRI, r3
 8019c9e:	f3bf 8f6f 	isb	sy
 8019ca2:	f3bf 8f4f 	dsb	sy
 8019ca6:	60fb      	str	r3, [r7, #12]
}
 8019ca8:	bf00      	nop
 8019caa:	e7fe      	b.n	8019caa <pvPortMalloc+0x172>
	return pvReturn;
 8019cac:	69fb      	ldr	r3, [r7, #28]
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	3728      	adds	r7, #40	; 0x28
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}
 8019cb6:	bf00      	nop
 8019cb8:	24006914 	.word	0x24006914
 8019cbc:	24006928 	.word	0x24006928
 8019cc0:	24006918 	.word	0x24006918
 8019cc4:	2400690c 	.word	0x2400690c
 8019cc8:	2400691c 	.word	0x2400691c
 8019ccc:	24006920 	.word	0x24006920

08019cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b086      	sub	sp, #24
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d04d      	beq.n	8019d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019ce2:	2308      	movs	r3, #8
 8019ce4:	425b      	negs	r3, r3
 8019ce6:	697a      	ldr	r2, [r7, #20]
 8019ce8:	4413      	add	r3, r2
 8019cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019cec:	697b      	ldr	r3, [r7, #20]
 8019cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019cf0:	693b      	ldr	r3, [r7, #16]
 8019cf2:	685a      	ldr	r2, [r3, #4]
 8019cf4:	4b24      	ldr	r3, [pc, #144]	; (8019d88 <vPortFree+0xb8>)
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	4013      	ands	r3, r2
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d10a      	bne.n	8019d14 <vPortFree+0x44>
	__asm volatile
 8019cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d02:	f383 8811 	msr	BASEPRI, r3
 8019d06:	f3bf 8f6f 	isb	sy
 8019d0a:	f3bf 8f4f 	dsb	sy
 8019d0e:	60fb      	str	r3, [r7, #12]
}
 8019d10:	bf00      	nop
 8019d12:	e7fe      	b.n	8019d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019d14:	693b      	ldr	r3, [r7, #16]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d00a      	beq.n	8019d32 <vPortFree+0x62>
	__asm volatile
 8019d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d20:	f383 8811 	msr	BASEPRI, r3
 8019d24:	f3bf 8f6f 	isb	sy
 8019d28:	f3bf 8f4f 	dsb	sy
 8019d2c:	60bb      	str	r3, [r7, #8]
}
 8019d2e:	bf00      	nop
 8019d30:	e7fe      	b.n	8019d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019d32:	693b      	ldr	r3, [r7, #16]
 8019d34:	685a      	ldr	r2, [r3, #4]
 8019d36:	4b14      	ldr	r3, [pc, #80]	; (8019d88 <vPortFree+0xb8>)
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	4013      	ands	r3, r2
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d01e      	beq.n	8019d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019d40:	693b      	ldr	r3, [r7, #16]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d11a      	bne.n	8019d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019d48:	693b      	ldr	r3, [r7, #16]
 8019d4a:	685a      	ldr	r2, [r3, #4]
 8019d4c:	4b0e      	ldr	r3, [pc, #56]	; (8019d88 <vPortFree+0xb8>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	43db      	mvns	r3, r3
 8019d52:	401a      	ands	r2, r3
 8019d54:	693b      	ldr	r3, [r7, #16]
 8019d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019d58:	f7fe fba0 	bl	801849c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019d5c:	693b      	ldr	r3, [r7, #16]
 8019d5e:	685a      	ldr	r2, [r3, #4]
 8019d60:	4b0a      	ldr	r3, [pc, #40]	; (8019d8c <vPortFree+0xbc>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	4413      	add	r3, r2
 8019d66:	4a09      	ldr	r2, [pc, #36]	; (8019d8c <vPortFree+0xbc>)
 8019d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019d6a:	6938      	ldr	r0, [r7, #16]
 8019d6c:	f000 f874 	bl	8019e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019d70:	4b07      	ldr	r3, [pc, #28]	; (8019d90 <vPortFree+0xc0>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	3301      	adds	r3, #1
 8019d76:	4a06      	ldr	r2, [pc, #24]	; (8019d90 <vPortFree+0xc0>)
 8019d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019d7a:	f7fe fb9d 	bl	80184b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019d7e:	bf00      	nop
 8019d80:	3718      	adds	r7, #24
 8019d82:	46bd      	mov	sp, r7
 8019d84:	bd80      	pop	{r7, pc}
 8019d86:	bf00      	nop
 8019d88:	24006928 	.word	0x24006928
 8019d8c:	24006918 	.word	0x24006918
 8019d90:	24006924 	.word	0x24006924

08019d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019d94:	b480      	push	{r7}
 8019d96:	b085      	sub	sp, #20
 8019d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019da0:	4b27      	ldr	r3, [pc, #156]	; (8019e40 <prvHeapInit+0xac>)
 8019da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	f003 0307 	and.w	r3, r3, #7
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d00c      	beq.n	8019dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	3307      	adds	r3, #7
 8019db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	f023 0307 	bic.w	r3, r3, #7
 8019dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019dbc:	68ba      	ldr	r2, [r7, #8]
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	1ad3      	subs	r3, r2, r3
 8019dc2:	4a1f      	ldr	r2, [pc, #124]	; (8019e40 <prvHeapInit+0xac>)
 8019dc4:	4413      	add	r3, r2
 8019dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019dcc:	4a1d      	ldr	r2, [pc, #116]	; (8019e44 <prvHeapInit+0xb0>)
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019dd2:	4b1c      	ldr	r3, [pc, #112]	; (8019e44 <prvHeapInit+0xb0>)
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	68ba      	ldr	r2, [r7, #8]
 8019ddc:	4413      	add	r3, r2
 8019dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019de0:	2208      	movs	r2, #8
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	1a9b      	subs	r3, r3, r2
 8019de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	f023 0307 	bic.w	r3, r3, #7
 8019dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	4a15      	ldr	r2, [pc, #84]	; (8019e48 <prvHeapInit+0xb4>)
 8019df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019df6:	4b14      	ldr	r3, [pc, #80]	; (8019e48 <prvHeapInit+0xb4>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019dfe:	4b12      	ldr	r3, [pc, #72]	; (8019e48 <prvHeapInit+0xb4>)
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	2200      	movs	r2, #0
 8019e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	68fa      	ldr	r2, [r7, #12]
 8019e0e:	1ad2      	subs	r2, r2, r3
 8019e10:	683b      	ldr	r3, [r7, #0]
 8019e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019e14:	4b0c      	ldr	r3, [pc, #48]	; (8019e48 <prvHeapInit+0xb4>)
 8019e16:	681a      	ldr	r2, [r3, #0]
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	685b      	ldr	r3, [r3, #4]
 8019e20:	4a0a      	ldr	r2, [pc, #40]	; (8019e4c <prvHeapInit+0xb8>)
 8019e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	685b      	ldr	r3, [r3, #4]
 8019e28:	4a09      	ldr	r2, [pc, #36]	; (8019e50 <prvHeapInit+0xbc>)
 8019e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019e2c:	4b09      	ldr	r3, [pc, #36]	; (8019e54 <prvHeapInit+0xc0>)
 8019e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019e32:	601a      	str	r2, [r3, #0]
}
 8019e34:	bf00      	nop
 8019e36:	3714      	adds	r7, #20
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3e:	4770      	bx	lr
 8019e40:	24002d0c 	.word	0x24002d0c
 8019e44:	2400690c 	.word	0x2400690c
 8019e48:	24006914 	.word	0x24006914
 8019e4c:	2400691c 	.word	0x2400691c
 8019e50:	24006918 	.word	0x24006918
 8019e54:	24006928 	.word	0x24006928

08019e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b085      	sub	sp, #20
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019e60:	4b28      	ldr	r3, [pc, #160]	; (8019f04 <prvInsertBlockIntoFreeList+0xac>)
 8019e62:	60fb      	str	r3, [r7, #12]
 8019e64:	e002      	b.n	8019e6c <prvInsertBlockIntoFreeList+0x14>
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	60fb      	str	r3, [r7, #12]
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	687a      	ldr	r2, [r7, #4]
 8019e72:	429a      	cmp	r2, r3
 8019e74:	d8f7      	bhi.n	8019e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	685b      	ldr	r3, [r3, #4]
 8019e7e:	68ba      	ldr	r2, [r7, #8]
 8019e80:	4413      	add	r3, r2
 8019e82:	687a      	ldr	r2, [r7, #4]
 8019e84:	429a      	cmp	r2, r3
 8019e86:	d108      	bne.n	8019e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	685a      	ldr	r2, [r3, #4]
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	685b      	ldr	r3, [r3, #4]
 8019e90:	441a      	add	r2, r3
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	685b      	ldr	r3, [r3, #4]
 8019ea2:	68ba      	ldr	r2, [r7, #8]
 8019ea4:	441a      	add	r2, r3
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	d118      	bne.n	8019ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	681a      	ldr	r2, [r3, #0]
 8019eb2:	4b15      	ldr	r3, [pc, #84]	; (8019f08 <prvInsertBlockIntoFreeList+0xb0>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	429a      	cmp	r2, r3
 8019eb8:	d00d      	beq.n	8019ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	685a      	ldr	r2, [r3, #4]
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	685b      	ldr	r3, [r3, #4]
 8019ec4:	441a      	add	r2, r3
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	681a      	ldr	r2, [r3, #0]
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	601a      	str	r2, [r3, #0]
 8019ed4:	e008      	b.n	8019ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019ed6:	4b0c      	ldr	r3, [pc, #48]	; (8019f08 <prvInsertBlockIntoFreeList+0xb0>)
 8019ed8:	681a      	ldr	r2, [r3, #0]
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	601a      	str	r2, [r3, #0]
 8019ede:	e003      	b.n	8019ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	681a      	ldr	r2, [r3, #0]
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019ee8:	68fa      	ldr	r2, [r7, #12]
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d002      	beq.n	8019ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	687a      	ldr	r2, [r7, #4]
 8019ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019ef6:	bf00      	nop
 8019ef8:	3714      	adds	r7, #20
 8019efa:	46bd      	mov	sp, r7
 8019efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f00:	4770      	bx	lr
 8019f02:	bf00      	nop
 8019f04:	2400690c 	.word	0x2400690c
 8019f08:	24006914 	.word	0x24006914

08019f0c <__errno>:
 8019f0c:	4b01      	ldr	r3, [pc, #4]	; (8019f14 <__errno+0x8>)
 8019f0e:	6818      	ldr	r0, [r3, #0]
 8019f10:	4770      	bx	lr
 8019f12:	bf00      	nop
 8019f14:	240000a4 	.word	0x240000a4

08019f18 <__libc_init_array>:
 8019f18:	b570      	push	{r4, r5, r6, lr}
 8019f1a:	4d0d      	ldr	r5, [pc, #52]	; (8019f50 <__libc_init_array+0x38>)
 8019f1c:	4c0d      	ldr	r4, [pc, #52]	; (8019f54 <__libc_init_array+0x3c>)
 8019f1e:	1b64      	subs	r4, r4, r5
 8019f20:	10a4      	asrs	r4, r4, #2
 8019f22:	2600      	movs	r6, #0
 8019f24:	42a6      	cmp	r6, r4
 8019f26:	d109      	bne.n	8019f3c <__libc_init_array+0x24>
 8019f28:	4d0b      	ldr	r5, [pc, #44]	; (8019f58 <__libc_init_array+0x40>)
 8019f2a:	4c0c      	ldr	r4, [pc, #48]	; (8019f5c <__libc_init_array+0x44>)
 8019f2c:	f000 fd2c 	bl	801a988 <_init>
 8019f30:	1b64      	subs	r4, r4, r5
 8019f32:	10a4      	asrs	r4, r4, #2
 8019f34:	2600      	movs	r6, #0
 8019f36:	42a6      	cmp	r6, r4
 8019f38:	d105      	bne.n	8019f46 <__libc_init_array+0x2e>
 8019f3a:	bd70      	pop	{r4, r5, r6, pc}
 8019f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f40:	4798      	blx	r3
 8019f42:	3601      	adds	r6, #1
 8019f44:	e7ee      	b.n	8019f24 <__libc_init_array+0xc>
 8019f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f4a:	4798      	blx	r3
 8019f4c:	3601      	adds	r6, #1
 8019f4e:	e7f2      	b.n	8019f36 <__libc_init_array+0x1e>
 8019f50:	0801ae40 	.word	0x0801ae40
 8019f54:	0801ae40 	.word	0x0801ae40
 8019f58:	0801ae40 	.word	0x0801ae40
 8019f5c:	0801ae44 	.word	0x0801ae44

08019f60 <memcpy>:
 8019f60:	440a      	add	r2, r1
 8019f62:	4291      	cmp	r1, r2
 8019f64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019f68:	d100      	bne.n	8019f6c <memcpy+0xc>
 8019f6a:	4770      	bx	lr
 8019f6c:	b510      	push	{r4, lr}
 8019f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019f76:	4291      	cmp	r1, r2
 8019f78:	d1f9      	bne.n	8019f6e <memcpy+0xe>
 8019f7a:	bd10      	pop	{r4, pc}

08019f7c <memset>:
 8019f7c:	4402      	add	r2, r0
 8019f7e:	4603      	mov	r3, r0
 8019f80:	4293      	cmp	r3, r2
 8019f82:	d100      	bne.n	8019f86 <memset+0xa>
 8019f84:	4770      	bx	lr
 8019f86:	f803 1b01 	strb.w	r1, [r3], #1
 8019f8a:	e7f9      	b.n	8019f80 <memset+0x4>

08019f8c <_puts_r>:
 8019f8c:	b570      	push	{r4, r5, r6, lr}
 8019f8e:	460e      	mov	r6, r1
 8019f90:	4605      	mov	r5, r0
 8019f92:	b118      	cbz	r0, 8019f9c <_puts_r+0x10>
 8019f94:	6983      	ldr	r3, [r0, #24]
 8019f96:	b90b      	cbnz	r3, 8019f9c <_puts_r+0x10>
 8019f98:	f000 fa48 	bl	801a42c <__sinit>
 8019f9c:	69ab      	ldr	r3, [r5, #24]
 8019f9e:	68ac      	ldr	r4, [r5, #8]
 8019fa0:	b913      	cbnz	r3, 8019fa8 <_puts_r+0x1c>
 8019fa2:	4628      	mov	r0, r5
 8019fa4:	f000 fa42 	bl	801a42c <__sinit>
 8019fa8:	4b2c      	ldr	r3, [pc, #176]	; (801a05c <_puts_r+0xd0>)
 8019faa:	429c      	cmp	r4, r3
 8019fac:	d120      	bne.n	8019ff0 <_puts_r+0x64>
 8019fae:	686c      	ldr	r4, [r5, #4]
 8019fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019fb2:	07db      	lsls	r3, r3, #31
 8019fb4:	d405      	bmi.n	8019fc2 <_puts_r+0x36>
 8019fb6:	89a3      	ldrh	r3, [r4, #12]
 8019fb8:	0598      	lsls	r0, r3, #22
 8019fba:	d402      	bmi.n	8019fc2 <_puts_r+0x36>
 8019fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fbe:	f000 fad3 	bl	801a568 <__retarget_lock_acquire_recursive>
 8019fc2:	89a3      	ldrh	r3, [r4, #12]
 8019fc4:	0719      	lsls	r1, r3, #28
 8019fc6:	d51d      	bpl.n	801a004 <_puts_r+0x78>
 8019fc8:	6923      	ldr	r3, [r4, #16]
 8019fca:	b1db      	cbz	r3, 801a004 <_puts_r+0x78>
 8019fcc:	3e01      	subs	r6, #1
 8019fce:	68a3      	ldr	r3, [r4, #8]
 8019fd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019fd4:	3b01      	subs	r3, #1
 8019fd6:	60a3      	str	r3, [r4, #8]
 8019fd8:	bb39      	cbnz	r1, 801a02a <_puts_r+0x9e>
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	da38      	bge.n	801a050 <_puts_r+0xc4>
 8019fde:	4622      	mov	r2, r4
 8019fe0:	210a      	movs	r1, #10
 8019fe2:	4628      	mov	r0, r5
 8019fe4:	f000 f848 	bl	801a078 <__swbuf_r>
 8019fe8:	3001      	adds	r0, #1
 8019fea:	d011      	beq.n	801a010 <_puts_r+0x84>
 8019fec:	250a      	movs	r5, #10
 8019fee:	e011      	b.n	801a014 <_puts_r+0x88>
 8019ff0:	4b1b      	ldr	r3, [pc, #108]	; (801a060 <_puts_r+0xd4>)
 8019ff2:	429c      	cmp	r4, r3
 8019ff4:	d101      	bne.n	8019ffa <_puts_r+0x6e>
 8019ff6:	68ac      	ldr	r4, [r5, #8]
 8019ff8:	e7da      	b.n	8019fb0 <_puts_r+0x24>
 8019ffa:	4b1a      	ldr	r3, [pc, #104]	; (801a064 <_puts_r+0xd8>)
 8019ffc:	429c      	cmp	r4, r3
 8019ffe:	bf08      	it	eq
 801a000:	68ec      	ldreq	r4, [r5, #12]
 801a002:	e7d5      	b.n	8019fb0 <_puts_r+0x24>
 801a004:	4621      	mov	r1, r4
 801a006:	4628      	mov	r0, r5
 801a008:	f000 f888 	bl	801a11c <__swsetup_r>
 801a00c:	2800      	cmp	r0, #0
 801a00e:	d0dd      	beq.n	8019fcc <_puts_r+0x40>
 801a010:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a016:	07da      	lsls	r2, r3, #31
 801a018:	d405      	bmi.n	801a026 <_puts_r+0x9a>
 801a01a:	89a3      	ldrh	r3, [r4, #12]
 801a01c:	059b      	lsls	r3, r3, #22
 801a01e:	d402      	bmi.n	801a026 <_puts_r+0x9a>
 801a020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a022:	f000 faa2 	bl	801a56a <__retarget_lock_release_recursive>
 801a026:	4628      	mov	r0, r5
 801a028:	bd70      	pop	{r4, r5, r6, pc}
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	da04      	bge.n	801a038 <_puts_r+0xac>
 801a02e:	69a2      	ldr	r2, [r4, #24]
 801a030:	429a      	cmp	r2, r3
 801a032:	dc06      	bgt.n	801a042 <_puts_r+0xb6>
 801a034:	290a      	cmp	r1, #10
 801a036:	d004      	beq.n	801a042 <_puts_r+0xb6>
 801a038:	6823      	ldr	r3, [r4, #0]
 801a03a:	1c5a      	adds	r2, r3, #1
 801a03c:	6022      	str	r2, [r4, #0]
 801a03e:	7019      	strb	r1, [r3, #0]
 801a040:	e7c5      	b.n	8019fce <_puts_r+0x42>
 801a042:	4622      	mov	r2, r4
 801a044:	4628      	mov	r0, r5
 801a046:	f000 f817 	bl	801a078 <__swbuf_r>
 801a04a:	3001      	adds	r0, #1
 801a04c:	d1bf      	bne.n	8019fce <_puts_r+0x42>
 801a04e:	e7df      	b.n	801a010 <_puts_r+0x84>
 801a050:	6823      	ldr	r3, [r4, #0]
 801a052:	250a      	movs	r5, #10
 801a054:	1c5a      	adds	r2, r3, #1
 801a056:	6022      	str	r2, [r4, #0]
 801a058:	701d      	strb	r5, [r3, #0]
 801a05a:	e7db      	b.n	801a014 <_puts_r+0x88>
 801a05c:	0801adf8 	.word	0x0801adf8
 801a060:	0801ae18 	.word	0x0801ae18
 801a064:	0801add8 	.word	0x0801add8

0801a068 <puts>:
 801a068:	4b02      	ldr	r3, [pc, #8]	; (801a074 <puts+0xc>)
 801a06a:	4601      	mov	r1, r0
 801a06c:	6818      	ldr	r0, [r3, #0]
 801a06e:	f7ff bf8d 	b.w	8019f8c <_puts_r>
 801a072:	bf00      	nop
 801a074:	240000a4 	.word	0x240000a4

0801a078 <__swbuf_r>:
 801a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a07a:	460e      	mov	r6, r1
 801a07c:	4614      	mov	r4, r2
 801a07e:	4605      	mov	r5, r0
 801a080:	b118      	cbz	r0, 801a08a <__swbuf_r+0x12>
 801a082:	6983      	ldr	r3, [r0, #24]
 801a084:	b90b      	cbnz	r3, 801a08a <__swbuf_r+0x12>
 801a086:	f000 f9d1 	bl	801a42c <__sinit>
 801a08a:	4b21      	ldr	r3, [pc, #132]	; (801a110 <__swbuf_r+0x98>)
 801a08c:	429c      	cmp	r4, r3
 801a08e:	d12b      	bne.n	801a0e8 <__swbuf_r+0x70>
 801a090:	686c      	ldr	r4, [r5, #4]
 801a092:	69a3      	ldr	r3, [r4, #24]
 801a094:	60a3      	str	r3, [r4, #8]
 801a096:	89a3      	ldrh	r3, [r4, #12]
 801a098:	071a      	lsls	r2, r3, #28
 801a09a:	d52f      	bpl.n	801a0fc <__swbuf_r+0x84>
 801a09c:	6923      	ldr	r3, [r4, #16]
 801a09e:	b36b      	cbz	r3, 801a0fc <__swbuf_r+0x84>
 801a0a0:	6923      	ldr	r3, [r4, #16]
 801a0a2:	6820      	ldr	r0, [r4, #0]
 801a0a4:	1ac0      	subs	r0, r0, r3
 801a0a6:	6963      	ldr	r3, [r4, #20]
 801a0a8:	b2f6      	uxtb	r6, r6
 801a0aa:	4283      	cmp	r3, r0
 801a0ac:	4637      	mov	r7, r6
 801a0ae:	dc04      	bgt.n	801a0ba <__swbuf_r+0x42>
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	f000 f926 	bl	801a304 <_fflush_r>
 801a0b8:	bb30      	cbnz	r0, 801a108 <__swbuf_r+0x90>
 801a0ba:	68a3      	ldr	r3, [r4, #8]
 801a0bc:	3b01      	subs	r3, #1
 801a0be:	60a3      	str	r3, [r4, #8]
 801a0c0:	6823      	ldr	r3, [r4, #0]
 801a0c2:	1c5a      	adds	r2, r3, #1
 801a0c4:	6022      	str	r2, [r4, #0]
 801a0c6:	701e      	strb	r6, [r3, #0]
 801a0c8:	6963      	ldr	r3, [r4, #20]
 801a0ca:	3001      	adds	r0, #1
 801a0cc:	4283      	cmp	r3, r0
 801a0ce:	d004      	beq.n	801a0da <__swbuf_r+0x62>
 801a0d0:	89a3      	ldrh	r3, [r4, #12]
 801a0d2:	07db      	lsls	r3, r3, #31
 801a0d4:	d506      	bpl.n	801a0e4 <__swbuf_r+0x6c>
 801a0d6:	2e0a      	cmp	r6, #10
 801a0d8:	d104      	bne.n	801a0e4 <__swbuf_r+0x6c>
 801a0da:	4621      	mov	r1, r4
 801a0dc:	4628      	mov	r0, r5
 801a0de:	f000 f911 	bl	801a304 <_fflush_r>
 801a0e2:	b988      	cbnz	r0, 801a108 <__swbuf_r+0x90>
 801a0e4:	4638      	mov	r0, r7
 801a0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0e8:	4b0a      	ldr	r3, [pc, #40]	; (801a114 <__swbuf_r+0x9c>)
 801a0ea:	429c      	cmp	r4, r3
 801a0ec:	d101      	bne.n	801a0f2 <__swbuf_r+0x7a>
 801a0ee:	68ac      	ldr	r4, [r5, #8]
 801a0f0:	e7cf      	b.n	801a092 <__swbuf_r+0x1a>
 801a0f2:	4b09      	ldr	r3, [pc, #36]	; (801a118 <__swbuf_r+0xa0>)
 801a0f4:	429c      	cmp	r4, r3
 801a0f6:	bf08      	it	eq
 801a0f8:	68ec      	ldreq	r4, [r5, #12]
 801a0fa:	e7ca      	b.n	801a092 <__swbuf_r+0x1a>
 801a0fc:	4621      	mov	r1, r4
 801a0fe:	4628      	mov	r0, r5
 801a100:	f000 f80c 	bl	801a11c <__swsetup_r>
 801a104:	2800      	cmp	r0, #0
 801a106:	d0cb      	beq.n	801a0a0 <__swbuf_r+0x28>
 801a108:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a10c:	e7ea      	b.n	801a0e4 <__swbuf_r+0x6c>
 801a10e:	bf00      	nop
 801a110:	0801adf8 	.word	0x0801adf8
 801a114:	0801ae18 	.word	0x0801ae18
 801a118:	0801add8 	.word	0x0801add8

0801a11c <__swsetup_r>:
 801a11c:	4b32      	ldr	r3, [pc, #200]	; (801a1e8 <__swsetup_r+0xcc>)
 801a11e:	b570      	push	{r4, r5, r6, lr}
 801a120:	681d      	ldr	r5, [r3, #0]
 801a122:	4606      	mov	r6, r0
 801a124:	460c      	mov	r4, r1
 801a126:	b125      	cbz	r5, 801a132 <__swsetup_r+0x16>
 801a128:	69ab      	ldr	r3, [r5, #24]
 801a12a:	b913      	cbnz	r3, 801a132 <__swsetup_r+0x16>
 801a12c:	4628      	mov	r0, r5
 801a12e:	f000 f97d 	bl	801a42c <__sinit>
 801a132:	4b2e      	ldr	r3, [pc, #184]	; (801a1ec <__swsetup_r+0xd0>)
 801a134:	429c      	cmp	r4, r3
 801a136:	d10f      	bne.n	801a158 <__swsetup_r+0x3c>
 801a138:	686c      	ldr	r4, [r5, #4]
 801a13a:	89a3      	ldrh	r3, [r4, #12]
 801a13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a140:	0719      	lsls	r1, r3, #28
 801a142:	d42c      	bmi.n	801a19e <__swsetup_r+0x82>
 801a144:	06dd      	lsls	r5, r3, #27
 801a146:	d411      	bmi.n	801a16c <__swsetup_r+0x50>
 801a148:	2309      	movs	r3, #9
 801a14a:	6033      	str	r3, [r6, #0]
 801a14c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a150:	81a3      	strh	r3, [r4, #12]
 801a152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a156:	e03e      	b.n	801a1d6 <__swsetup_r+0xba>
 801a158:	4b25      	ldr	r3, [pc, #148]	; (801a1f0 <__swsetup_r+0xd4>)
 801a15a:	429c      	cmp	r4, r3
 801a15c:	d101      	bne.n	801a162 <__swsetup_r+0x46>
 801a15e:	68ac      	ldr	r4, [r5, #8]
 801a160:	e7eb      	b.n	801a13a <__swsetup_r+0x1e>
 801a162:	4b24      	ldr	r3, [pc, #144]	; (801a1f4 <__swsetup_r+0xd8>)
 801a164:	429c      	cmp	r4, r3
 801a166:	bf08      	it	eq
 801a168:	68ec      	ldreq	r4, [r5, #12]
 801a16a:	e7e6      	b.n	801a13a <__swsetup_r+0x1e>
 801a16c:	0758      	lsls	r0, r3, #29
 801a16e:	d512      	bpl.n	801a196 <__swsetup_r+0x7a>
 801a170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a172:	b141      	cbz	r1, 801a186 <__swsetup_r+0x6a>
 801a174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a178:	4299      	cmp	r1, r3
 801a17a:	d002      	beq.n	801a182 <__swsetup_r+0x66>
 801a17c:	4630      	mov	r0, r6
 801a17e:	f000 fa5b 	bl	801a638 <_free_r>
 801a182:	2300      	movs	r3, #0
 801a184:	6363      	str	r3, [r4, #52]	; 0x34
 801a186:	89a3      	ldrh	r3, [r4, #12]
 801a188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a18c:	81a3      	strh	r3, [r4, #12]
 801a18e:	2300      	movs	r3, #0
 801a190:	6063      	str	r3, [r4, #4]
 801a192:	6923      	ldr	r3, [r4, #16]
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	89a3      	ldrh	r3, [r4, #12]
 801a198:	f043 0308 	orr.w	r3, r3, #8
 801a19c:	81a3      	strh	r3, [r4, #12]
 801a19e:	6923      	ldr	r3, [r4, #16]
 801a1a0:	b94b      	cbnz	r3, 801a1b6 <__swsetup_r+0x9a>
 801a1a2:	89a3      	ldrh	r3, [r4, #12]
 801a1a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1ac:	d003      	beq.n	801a1b6 <__swsetup_r+0x9a>
 801a1ae:	4621      	mov	r1, r4
 801a1b0:	4630      	mov	r0, r6
 801a1b2:	f000 fa01 	bl	801a5b8 <__smakebuf_r>
 801a1b6:	89a0      	ldrh	r0, [r4, #12]
 801a1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1bc:	f010 0301 	ands.w	r3, r0, #1
 801a1c0:	d00a      	beq.n	801a1d8 <__swsetup_r+0xbc>
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	60a3      	str	r3, [r4, #8]
 801a1c6:	6963      	ldr	r3, [r4, #20]
 801a1c8:	425b      	negs	r3, r3
 801a1ca:	61a3      	str	r3, [r4, #24]
 801a1cc:	6923      	ldr	r3, [r4, #16]
 801a1ce:	b943      	cbnz	r3, 801a1e2 <__swsetup_r+0xc6>
 801a1d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a1d4:	d1ba      	bne.n	801a14c <__swsetup_r+0x30>
 801a1d6:	bd70      	pop	{r4, r5, r6, pc}
 801a1d8:	0781      	lsls	r1, r0, #30
 801a1da:	bf58      	it	pl
 801a1dc:	6963      	ldrpl	r3, [r4, #20]
 801a1de:	60a3      	str	r3, [r4, #8]
 801a1e0:	e7f4      	b.n	801a1cc <__swsetup_r+0xb0>
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	e7f7      	b.n	801a1d6 <__swsetup_r+0xba>
 801a1e6:	bf00      	nop
 801a1e8:	240000a4 	.word	0x240000a4
 801a1ec:	0801adf8 	.word	0x0801adf8
 801a1f0:	0801ae18 	.word	0x0801ae18
 801a1f4:	0801add8 	.word	0x0801add8

0801a1f8 <__sflush_r>:
 801a1f8:	898a      	ldrh	r2, [r1, #12]
 801a1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1fe:	4605      	mov	r5, r0
 801a200:	0710      	lsls	r0, r2, #28
 801a202:	460c      	mov	r4, r1
 801a204:	d458      	bmi.n	801a2b8 <__sflush_r+0xc0>
 801a206:	684b      	ldr	r3, [r1, #4]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	dc05      	bgt.n	801a218 <__sflush_r+0x20>
 801a20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a20e:	2b00      	cmp	r3, #0
 801a210:	dc02      	bgt.n	801a218 <__sflush_r+0x20>
 801a212:	2000      	movs	r0, #0
 801a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a21a:	2e00      	cmp	r6, #0
 801a21c:	d0f9      	beq.n	801a212 <__sflush_r+0x1a>
 801a21e:	2300      	movs	r3, #0
 801a220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a224:	682f      	ldr	r7, [r5, #0]
 801a226:	602b      	str	r3, [r5, #0]
 801a228:	d032      	beq.n	801a290 <__sflush_r+0x98>
 801a22a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a22c:	89a3      	ldrh	r3, [r4, #12]
 801a22e:	075a      	lsls	r2, r3, #29
 801a230:	d505      	bpl.n	801a23e <__sflush_r+0x46>
 801a232:	6863      	ldr	r3, [r4, #4]
 801a234:	1ac0      	subs	r0, r0, r3
 801a236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a238:	b10b      	cbz	r3, 801a23e <__sflush_r+0x46>
 801a23a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a23c:	1ac0      	subs	r0, r0, r3
 801a23e:	2300      	movs	r3, #0
 801a240:	4602      	mov	r2, r0
 801a242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a244:	6a21      	ldr	r1, [r4, #32]
 801a246:	4628      	mov	r0, r5
 801a248:	47b0      	blx	r6
 801a24a:	1c43      	adds	r3, r0, #1
 801a24c:	89a3      	ldrh	r3, [r4, #12]
 801a24e:	d106      	bne.n	801a25e <__sflush_r+0x66>
 801a250:	6829      	ldr	r1, [r5, #0]
 801a252:	291d      	cmp	r1, #29
 801a254:	d82c      	bhi.n	801a2b0 <__sflush_r+0xb8>
 801a256:	4a2a      	ldr	r2, [pc, #168]	; (801a300 <__sflush_r+0x108>)
 801a258:	40ca      	lsrs	r2, r1
 801a25a:	07d6      	lsls	r6, r2, #31
 801a25c:	d528      	bpl.n	801a2b0 <__sflush_r+0xb8>
 801a25e:	2200      	movs	r2, #0
 801a260:	6062      	str	r2, [r4, #4]
 801a262:	04d9      	lsls	r1, r3, #19
 801a264:	6922      	ldr	r2, [r4, #16]
 801a266:	6022      	str	r2, [r4, #0]
 801a268:	d504      	bpl.n	801a274 <__sflush_r+0x7c>
 801a26a:	1c42      	adds	r2, r0, #1
 801a26c:	d101      	bne.n	801a272 <__sflush_r+0x7a>
 801a26e:	682b      	ldr	r3, [r5, #0]
 801a270:	b903      	cbnz	r3, 801a274 <__sflush_r+0x7c>
 801a272:	6560      	str	r0, [r4, #84]	; 0x54
 801a274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a276:	602f      	str	r7, [r5, #0]
 801a278:	2900      	cmp	r1, #0
 801a27a:	d0ca      	beq.n	801a212 <__sflush_r+0x1a>
 801a27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a280:	4299      	cmp	r1, r3
 801a282:	d002      	beq.n	801a28a <__sflush_r+0x92>
 801a284:	4628      	mov	r0, r5
 801a286:	f000 f9d7 	bl	801a638 <_free_r>
 801a28a:	2000      	movs	r0, #0
 801a28c:	6360      	str	r0, [r4, #52]	; 0x34
 801a28e:	e7c1      	b.n	801a214 <__sflush_r+0x1c>
 801a290:	6a21      	ldr	r1, [r4, #32]
 801a292:	2301      	movs	r3, #1
 801a294:	4628      	mov	r0, r5
 801a296:	47b0      	blx	r6
 801a298:	1c41      	adds	r1, r0, #1
 801a29a:	d1c7      	bne.n	801a22c <__sflush_r+0x34>
 801a29c:	682b      	ldr	r3, [r5, #0]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d0c4      	beq.n	801a22c <__sflush_r+0x34>
 801a2a2:	2b1d      	cmp	r3, #29
 801a2a4:	d001      	beq.n	801a2aa <__sflush_r+0xb2>
 801a2a6:	2b16      	cmp	r3, #22
 801a2a8:	d101      	bne.n	801a2ae <__sflush_r+0xb6>
 801a2aa:	602f      	str	r7, [r5, #0]
 801a2ac:	e7b1      	b.n	801a212 <__sflush_r+0x1a>
 801a2ae:	89a3      	ldrh	r3, [r4, #12]
 801a2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2b4:	81a3      	strh	r3, [r4, #12]
 801a2b6:	e7ad      	b.n	801a214 <__sflush_r+0x1c>
 801a2b8:	690f      	ldr	r7, [r1, #16]
 801a2ba:	2f00      	cmp	r7, #0
 801a2bc:	d0a9      	beq.n	801a212 <__sflush_r+0x1a>
 801a2be:	0793      	lsls	r3, r2, #30
 801a2c0:	680e      	ldr	r6, [r1, #0]
 801a2c2:	bf08      	it	eq
 801a2c4:	694b      	ldreq	r3, [r1, #20]
 801a2c6:	600f      	str	r7, [r1, #0]
 801a2c8:	bf18      	it	ne
 801a2ca:	2300      	movne	r3, #0
 801a2cc:	eba6 0807 	sub.w	r8, r6, r7
 801a2d0:	608b      	str	r3, [r1, #8]
 801a2d2:	f1b8 0f00 	cmp.w	r8, #0
 801a2d6:	dd9c      	ble.n	801a212 <__sflush_r+0x1a>
 801a2d8:	6a21      	ldr	r1, [r4, #32]
 801a2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a2dc:	4643      	mov	r3, r8
 801a2de:	463a      	mov	r2, r7
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	47b0      	blx	r6
 801a2e4:	2800      	cmp	r0, #0
 801a2e6:	dc06      	bgt.n	801a2f6 <__sflush_r+0xfe>
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2ee:	81a3      	strh	r3, [r4, #12]
 801a2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2f4:	e78e      	b.n	801a214 <__sflush_r+0x1c>
 801a2f6:	4407      	add	r7, r0
 801a2f8:	eba8 0800 	sub.w	r8, r8, r0
 801a2fc:	e7e9      	b.n	801a2d2 <__sflush_r+0xda>
 801a2fe:	bf00      	nop
 801a300:	20400001 	.word	0x20400001

0801a304 <_fflush_r>:
 801a304:	b538      	push	{r3, r4, r5, lr}
 801a306:	690b      	ldr	r3, [r1, #16]
 801a308:	4605      	mov	r5, r0
 801a30a:	460c      	mov	r4, r1
 801a30c:	b913      	cbnz	r3, 801a314 <_fflush_r+0x10>
 801a30e:	2500      	movs	r5, #0
 801a310:	4628      	mov	r0, r5
 801a312:	bd38      	pop	{r3, r4, r5, pc}
 801a314:	b118      	cbz	r0, 801a31e <_fflush_r+0x1a>
 801a316:	6983      	ldr	r3, [r0, #24]
 801a318:	b90b      	cbnz	r3, 801a31e <_fflush_r+0x1a>
 801a31a:	f000 f887 	bl	801a42c <__sinit>
 801a31e:	4b14      	ldr	r3, [pc, #80]	; (801a370 <_fflush_r+0x6c>)
 801a320:	429c      	cmp	r4, r3
 801a322:	d11b      	bne.n	801a35c <_fflush_r+0x58>
 801a324:	686c      	ldr	r4, [r5, #4]
 801a326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d0ef      	beq.n	801a30e <_fflush_r+0xa>
 801a32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a330:	07d0      	lsls	r0, r2, #31
 801a332:	d404      	bmi.n	801a33e <_fflush_r+0x3a>
 801a334:	0599      	lsls	r1, r3, #22
 801a336:	d402      	bmi.n	801a33e <_fflush_r+0x3a>
 801a338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a33a:	f000 f915 	bl	801a568 <__retarget_lock_acquire_recursive>
 801a33e:	4628      	mov	r0, r5
 801a340:	4621      	mov	r1, r4
 801a342:	f7ff ff59 	bl	801a1f8 <__sflush_r>
 801a346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a348:	07da      	lsls	r2, r3, #31
 801a34a:	4605      	mov	r5, r0
 801a34c:	d4e0      	bmi.n	801a310 <_fflush_r+0xc>
 801a34e:	89a3      	ldrh	r3, [r4, #12]
 801a350:	059b      	lsls	r3, r3, #22
 801a352:	d4dd      	bmi.n	801a310 <_fflush_r+0xc>
 801a354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a356:	f000 f908 	bl	801a56a <__retarget_lock_release_recursive>
 801a35a:	e7d9      	b.n	801a310 <_fflush_r+0xc>
 801a35c:	4b05      	ldr	r3, [pc, #20]	; (801a374 <_fflush_r+0x70>)
 801a35e:	429c      	cmp	r4, r3
 801a360:	d101      	bne.n	801a366 <_fflush_r+0x62>
 801a362:	68ac      	ldr	r4, [r5, #8]
 801a364:	e7df      	b.n	801a326 <_fflush_r+0x22>
 801a366:	4b04      	ldr	r3, [pc, #16]	; (801a378 <_fflush_r+0x74>)
 801a368:	429c      	cmp	r4, r3
 801a36a:	bf08      	it	eq
 801a36c:	68ec      	ldreq	r4, [r5, #12]
 801a36e:	e7da      	b.n	801a326 <_fflush_r+0x22>
 801a370:	0801adf8 	.word	0x0801adf8
 801a374:	0801ae18 	.word	0x0801ae18
 801a378:	0801add8 	.word	0x0801add8

0801a37c <std>:
 801a37c:	2300      	movs	r3, #0
 801a37e:	b510      	push	{r4, lr}
 801a380:	4604      	mov	r4, r0
 801a382:	e9c0 3300 	strd	r3, r3, [r0]
 801a386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a38a:	6083      	str	r3, [r0, #8]
 801a38c:	8181      	strh	r1, [r0, #12]
 801a38e:	6643      	str	r3, [r0, #100]	; 0x64
 801a390:	81c2      	strh	r2, [r0, #14]
 801a392:	6183      	str	r3, [r0, #24]
 801a394:	4619      	mov	r1, r3
 801a396:	2208      	movs	r2, #8
 801a398:	305c      	adds	r0, #92	; 0x5c
 801a39a:	f7ff fdef 	bl	8019f7c <memset>
 801a39e:	4b05      	ldr	r3, [pc, #20]	; (801a3b4 <std+0x38>)
 801a3a0:	6263      	str	r3, [r4, #36]	; 0x24
 801a3a2:	4b05      	ldr	r3, [pc, #20]	; (801a3b8 <std+0x3c>)
 801a3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a3a6:	4b05      	ldr	r3, [pc, #20]	; (801a3bc <std+0x40>)
 801a3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a3aa:	4b05      	ldr	r3, [pc, #20]	; (801a3c0 <std+0x44>)
 801a3ac:	6224      	str	r4, [r4, #32]
 801a3ae:	6323      	str	r3, [r4, #48]	; 0x30
 801a3b0:	bd10      	pop	{r4, pc}
 801a3b2:	bf00      	nop
 801a3b4:	0801a819 	.word	0x0801a819
 801a3b8:	0801a83b 	.word	0x0801a83b
 801a3bc:	0801a873 	.word	0x0801a873
 801a3c0:	0801a897 	.word	0x0801a897

0801a3c4 <_cleanup_r>:
 801a3c4:	4901      	ldr	r1, [pc, #4]	; (801a3cc <_cleanup_r+0x8>)
 801a3c6:	f000 b8af 	b.w	801a528 <_fwalk_reent>
 801a3ca:	bf00      	nop
 801a3cc:	0801a305 	.word	0x0801a305

0801a3d0 <__sfmoreglue>:
 801a3d0:	b570      	push	{r4, r5, r6, lr}
 801a3d2:	2268      	movs	r2, #104	; 0x68
 801a3d4:	1e4d      	subs	r5, r1, #1
 801a3d6:	4355      	muls	r5, r2
 801a3d8:	460e      	mov	r6, r1
 801a3da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a3de:	f000 f997 	bl	801a710 <_malloc_r>
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	b140      	cbz	r0, 801a3f8 <__sfmoreglue+0x28>
 801a3e6:	2100      	movs	r1, #0
 801a3e8:	e9c0 1600 	strd	r1, r6, [r0]
 801a3ec:	300c      	adds	r0, #12
 801a3ee:	60a0      	str	r0, [r4, #8]
 801a3f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a3f4:	f7ff fdc2 	bl	8019f7c <memset>
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	bd70      	pop	{r4, r5, r6, pc}

0801a3fc <__sfp_lock_acquire>:
 801a3fc:	4801      	ldr	r0, [pc, #4]	; (801a404 <__sfp_lock_acquire+0x8>)
 801a3fe:	f000 b8b3 	b.w	801a568 <__retarget_lock_acquire_recursive>
 801a402:	bf00      	nop
 801a404:	2400692d 	.word	0x2400692d

0801a408 <__sfp_lock_release>:
 801a408:	4801      	ldr	r0, [pc, #4]	; (801a410 <__sfp_lock_release+0x8>)
 801a40a:	f000 b8ae 	b.w	801a56a <__retarget_lock_release_recursive>
 801a40e:	bf00      	nop
 801a410:	2400692d 	.word	0x2400692d

0801a414 <__sinit_lock_acquire>:
 801a414:	4801      	ldr	r0, [pc, #4]	; (801a41c <__sinit_lock_acquire+0x8>)
 801a416:	f000 b8a7 	b.w	801a568 <__retarget_lock_acquire_recursive>
 801a41a:	bf00      	nop
 801a41c:	2400692e 	.word	0x2400692e

0801a420 <__sinit_lock_release>:
 801a420:	4801      	ldr	r0, [pc, #4]	; (801a428 <__sinit_lock_release+0x8>)
 801a422:	f000 b8a2 	b.w	801a56a <__retarget_lock_release_recursive>
 801a426:	bf00      	nop
 801a428:	2400692e 	.word	0x2400692e

0801a42c <__sinit>:
 801a42c:	b510      	push	{r4, lr}
 801a42e:	4604      	mov	r4, r0
 801a430:	f7ff fff0 	bl	801a414 <__sinit_lock_acquire>
 801a434:	69a3      	ldr	r3, [r4, #24]
 801a436:	b11b      	cbz	r3, 801a440 <__sinit+0x14>
 801a438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a43c:	f7ff bff0 	b.w	801a420 <__sinit_lock_release>
 801a440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a444:	6523      	str	r3, [r4, #80]	; 0x50
 801a446:	4b13      	ldr	r3, [pc, #76]	; (801a494 <__sinit+0x68>)
 801a448:	4a13      	ldr	r2, [pc, #76]	; (801a498 <__sinit+0x6c>)
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a44e:	42a3      	cmp	r3, r4
 801a450:	bf04      	itt	eq
 801a452:	2301      	moveq	r3, #1
 801a454:	61a3      	streq	r3, [r4, #24]
 801a456:	4620      	mov	r0, r4
 801a458:	f000 f820 	bl	801a49c <__sfp>
 801a45c:	6060      	str	r0, [r4, #4]
 801a45e:	4620      	mov	r0, r4
 801a460:	f000 f81c 	bl	801a49c <__sfp>
 801a464:	60a0      	str	r0, [r4, #8]
 801a466:	4620      	mov	r0, r4
 801a468:	f000 f818 	bl	801a49c <__sfp>
 801a46c:	2200      	movs	r2, #0
 801a46e:	60e0      	str	r0, [r4, #12]
 801a470:	2104      	movs	r1, #4
 801a472:	6860      	ldr	r0, [r4, #4]
 801a474:	f7ff ff82 	bl	801a37c <std>
 801a478:	68a0      	ldr	r0, [r4, #8]
 801a47a:	2201      	movs	r2, #1
 801a47c:	2109      	movs	r1, #9
 801a47e:	f7ff ff7d 	bl	801a37c <std>
 801a482:	68e0      	ldr	r0, [r4, #12]
 801a484:	2202      	movs	r2, #2
 801a486:	2112      	movs	r1, #18
 801a488:	f7ff ff78 	bl	801a37c <std>
 801a48c:	2301      	movs	r3, #1
 801a48e:	61a3      	str	r3, [r4, #24]
 801a490:	e7d2      	b.n	801a438 <__sinit+0xc>
 801a492:	bf00      	nop
 801a494:	0801add4 	.word	0x0801add4
 801a498:	0801a3c5 	.word	0x0801a3c5

0801a49c <__sfp>:
 801a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a49e:	4607      	mov	r7, r0
 801a4a0:	f7ff ffac 	bl	801a3fc <__sfp_lock_acquire>
 801a4a4:	4b1e      	ldr	r3, [pc, #120]	; (801a520 <__sfp+0x84>)
 801a4a6:	681e      	ldr	r6, [r3, #0]
 801a4a8:	69b3      	ldr	r3, [r6, #24]
 801a4aa:	b913      	cbnz	r3, 801a4b2 <__sfp+0x16>
 801a4ac:	4630      	mov	r0, r6
 801a4ae:	f7ff ffbd 	bl	801a42c <__sinit>
 801a4b2:	3648      	adds	r6, #72	; 0x48
 801a4b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a4b8:	3b01      	subs	r3, #1
 801a4ba:	d503      	bpl.n	801a4c4 <__sfp+0x28>
 801a4bc:	6833      	ldr	r3, [r6, #0]
 801a4be:	b30b      	cbz	r3, 801a504 <__sfp+0x68>
 801a4c0:	6836      	ldr	r6, [r6, #0]
 801a4c2:	e7f7      	b.n	801a4b4 <__sfp+0x18>
 801a4c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a4c8:	b9d5      	cbnz	r5, 801a500 <__sfp+0x64>
 801a4ca:	4b16      	ldr	r3, [pc, #88]	; (801a524 <__sfp+0x88>)
 801a4cc:	60e3      	str	r3, [r4, #12]
 801a4ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a4d2:	6665      	str	r5, [r4, #100]	; 0x64
 801a4d4:	f000 f847 	bl	801a566 <__retarget_lock_init_recursive>
 801a4d8:	f7ff ff96 	bl	801a408 <__sfp_lock_release>
 801a4dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a4e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a4e4:	6025      	str	r5, [r4, #0]
 801a4e6:	61a5      	str	r5, [r4, #24]
 801a4e8:	2208      	movs	r2, #8
 801a4ea:	4629      	mov	r1, r5
 801a4ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a4f0:	f7ff fd44 	bl	8019f7c <memset>
 801a4f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a4f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a500:	3468      	adds	r4, #104	; 0x68
 801a502:	e7d9      	b.n	801a4b8 <__sfp+0x1c>
 801a504:	2104      	movs	r1, #4
 801a506:	4638      	mov	r0, r7
 801a508:	f7ff ff62 	bl	801a3d0 <__sfmoreglue>
 801a50c:	4604      	mov	r4, r0
 801a50e:	6030      	str	r0, [r6, #0]
 801a510:	2800      	cmp	r0, #0
 801a512:	d1d5      	bne.n	801a4c0 <__sfp+0x24>
 801a514:	f7ff ff78 	bl	801a408 <__sfp_lock_release>
 801a518:	230c      	movs	r3, #12
 801a51a:	603b      	str	r3, [r7, #0]
 801a51c:	e7ee      	b.n	801a4fc <__sfp+0x60>
 801a51e:	bf00      	nop
 801a520:	0801add4 	.word	0x0801add4
 801a524:	ffff0001 	.word	0xffff0001

0801a528 <_fwalk_reent>:
 801a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a52c:	4606      	mov	r6, r0
 801a52e:	4688      	mov	r8, r1
 801a530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a534:	2700      	movs	r7, #0
 801a536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a53a:	f1b9 0901 	subs.w	r9, r9, #1
 801a53e:	d505      	bpl.n	801a54c <_fwalk_reent+0x24>
 801a540:	6824      	ldr	r4, [r4, #0]
 801a542:	2c00      	cmp	r4, #0
 801a544:	d1f7      	bne.n	801a536 <_fwalk_reent+0xe>
 801a546:	4638      	mov	r0, r7
 801a548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a54c:	89ab      	ldrh	r3, [r5, #12]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d907      	bls.n	801a562 <_fwalk_reent+0x3a>
 801a552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a556:	3301      	adds	r3, #1
 801a558:	d003      	beq.n	801a562 <_fwalk_reent+0x3a>
 801a55a:	4629      	mov	r1, r5
 801a55c:	4630      	mov	r0, r6
 801a55e:	47c0      	blx	r8
 801a560:	4307      	orrs	r7, r0
 801a562:	3568      	adds	r5, #104	; 0x68
 801a564:	e7e9      	b.n	801a53a <_fwalk_reent+0x12>

0801a566 <__retarget_lock_init_recursive>:
 801a566:	4770      	bx	lr

0801a568 <__retarget_lock_acquire_recursive>:
 801a568:	4770      	bx	lr

0801a56a <__retarget_lock_release_recursive>:
 801a56a:	4770      	bx	lr

0801a56c <__swhatbuf_r>:
 801a56c:	b570      	push	{r4, r5, r6, lr}
 801a56e:	460e      	mov	r6, r1
 801a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a574:	2900      	cmp	r1, #0
 801a576:	b096      	sub	sp, #88	; 0x58
 801a578:	4614      	mov	r4, r2
 801a57a:	461d      	mov	r5, r3
 801a57c:	da08      	bge.n	801a590 <__swhatbuf_r+0x24>
 801a57e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a582:	2200      	movs	r2, #0
 801a584:	602a      	str	r2, [r5, #0]
 801a586:	061a      	lsls	r2, r3, #24
 801a588:	d410      	bmi.n	801a5ac <__swhatbuf_r+0x40>
 801a58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a58e:	e00e      	b.n	801a5ae <__swhatbuf_r+0x42>
 801a590:	466a      	mov	r2, sp
 801a592:	f000 f9a7 	bl	801a8e4 <_fstat_r>
 801a596:	2800      	cmp	r0, #0
 801a598:	dbf1      	blt.n	801a57e <__swhatbuf_r+0x12>
 801a59a:	9a01      	ldr	r2, [sp, #4]
 801a59c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a5a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a5a4:	425a      	negs	r2, r3
 801a5a6:	415a      	adcs	r2, r3
 801a5a8:	602a      	str	r2, [r5, #0]
 801a5aa:	e7ee      	b.n	801a58a <__swhatbuf_r+0x1e>
 801a5ac:	2340      	movs	r3, #64	; 0x40
 801a5ae:	2000      	movs	r0, #0
 801a5b0:	6023      	str	r3, [r4, #0]
 801a5b2:	b016      	add	sp, #88	; 0x58
 801a5b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a5b8 <__smakebuf_r>:
 801a5b8:	898b      	ldrh	r3, [r1, #12]
 801a5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a5bc:	079d      	lsls	r5, r3, #30
 801a5be:	4606      	mov	r6, r0
 801a5c0:	460c      	mov	r4, r1
 801a5c2:	d507      	bpl.n	801a5d4 <__smakebuf_r+0x1c>
 801a5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a5c8:	6023      	str	r3, [r4, #0]
 801a5ca:	6123      	str	r3, [r4, #16]
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	6163      	str	r3, [r4, #20]
 801a5d0:	b002      	add	sp, #8
 801a5d2:	bd70      	pop	{r4, r5, r6, pc}
 801a5d4:	ab01      	add	r3, sp, #4
 801a5d6:	466a      	mov	r2, sp
 801a5d8:	f7ff ffc8 	bl	801a56c <__swhatbuf_r>
 801a5dc:	9900      	ldr	r1, [sp, #0]
 801a5de:	4605      	mov	r5, r0
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	f000 f895 	bl	801a710 <_malloc_r>
 801a5e6:	b948      	cbnz	r0, 801a5fc <__smakebuf_r+0x44>
 801a5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5ec:	059a      	lsls	r2, r3, #22
 801a5ee:	d4ef      	bmi.n	801a5d0 <__smakebuf_r+0x18>
 801a5f0:	f023 0303 	bic.w	r3, r3, #3
 801a5f4:	f043 0302 	orr.w	r3, r3, #2
 801a5f8:	81a3      	strh	r3, [r4, #12]
 801a5fa:	e7e3      	b.n	801a5c4 <__smakebuf_r+0xc>
 801a5fc:	4b0d      	ldr	r3, [pc, #52]	; (801a634 <__smakebuf_r+0x7c>)
 801a5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 801a600:	89a3      	ldrh	r3, [r4, #12]
 801a602:	6020      	str	r0, [r4, #0]
 801a604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a608:	81a3      	strh	r3, [r4, #12]
 801a60a:	9b00      	ldr	r3, [sp, #0]
 801a60c:	6163      	str	r3, [r4, #20]
 801a60e:	9b01      	ldr	r3, [sp, #4]
 801a610:	6120      	str	r0, [r4, #16]
 801a612:	b15b      	cbz	r3, 801a62c <__smakebuf_r+0x74>
 801a614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a618:	4630      	mov	r0, r6
 801a61a:	f000 f975 	bl	801a908 <_isatty_r>
 801a61e:	b128      	cbz	r0, 801a62c <__smakebuf_r+0x74>
 801a620:	89a3      	ldrh	r3, [r4, #12]
 801a622:	f023 0303 	bic.w	r3, r3, #3
 801a626:	f043 0301 	orr.w	r3, r3, #1
 801a62a:	81a3      	strh	r3, [r4, #12]
 801a62c:	89a0      	ldrh	r0, [r4, #12]
 801a62e:	4305      	orrs	r5, r0
 801a630:	81a5      	strh	r5, [r4, #12]
 801a632:	e7cd      	b.n	801a5d0 <__smakebuf_r+0x18>
 801a634:	0801a3c5 	.word	0x0801a3c5

0801a638 <_free_r>:
 801a638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a63a:	2900      	cmp	r1, #0
 801a63c:	d044      	beq.n	801a6c8 <_free_r+0x90>
 801a63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a642:	9001      	str	r0, [sp, #4]
 801a644:	2b00      	cmp	r3, #0
 801a646:	f1a1 0404 	sub.w	r4, r1, #4
 801a64a:	bfb8      	it	lt
 801a64c:	18e4      	addlt	r4, r4, r3
 801a64e:	f000 f97d 	bl	801a94c <__malloc_lock>
 801a652:	4a1e      	ldr	r2, [pc, #120]	; (801a6cc <_free_r+0x94>)
 801a654:	9801      	ldr	r0, [sp, #4]
 801a656:	6813      	ldr	r3, [r2, #0]
 801a658:	b933      	cbnz	r3, 801a668 <_free_r+0x30>
 801a65a:	6063      	str	r3, [r4, #4]
 801a65c:	6014      	str	r4, [r2, #0]
 801a65e:	b003      	add	sp, #12
 801a660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a664:	f000 b978 	b.w	801a958 <__malloc_unlock>
 801a668:	42a3      	cmp	r3, r4
 801a66a:	d908      	bls.n	801a67e <_free_r+0x46>
 801a66c:	6825      	ldr	r5, [r4, #0]
 801a66e:	1961      	adds	r1, r4, r5
 801a670:	428b      	cmp	r3, r1
 801a672:	bf01      	itttt	eq
 801a674:	6819      	ldreq	r1, [r3, #0]
 801a676:	685b      	ldreq	r3, [r3, #4]
 801a678:	1949      	addeq	r1, r1, r5
 801a67a:	6021      	streq	r1, [r4, #0]
 801a67c:	e7ed      	b.n	801a65a <_free_r+0x22>
 801a67e:	461a      	mov	r2, r3
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	b10b      	cbz	r3, 801a688 <_free_r+0x50>
 801a684:	42a3      	cmp	r3, r4
 801a686:	d9fa      	bls.n	801a67e <_free_r+0x46>
 801a688:	6811      	ldr	r1, [r2, #0]
 801a68a:	1855      	adds	r5, r2, r1
 801a68c:	42a5      	cmp	r5, r4
 801a68e:	d10b      	bne.n	801a6a8 <_free_r+0x70>
 801a690:	6824      	ldr	r4, [r4, #0]
 801a692:	4421      	add	r1, r4
 801a694:	1854      	adds	r4, r2, r1
 801a696:	42a3      	cmp	r3, r4
 801a698:	6011      	str	r1, [r2, #0]
 801a69a:	d1e0      	bne.n	801a65e <_free_r+0x26>
 801a69c:	681c      	ldr	r4, [r3, #0]
 801a69e:	685b      	ldr	r3, [r3, #4]
 801a6a0:	6053      	str	r3, [r2, #4]
 801a6a2:	4421      	add	r1, r4
 801a6a4:	6011      	str	r1, [r2, #0]
 801a6a6:	e7da      	b.n	801a65e <_free_r+0x26>
 801a6a8:	d902      	bls.n	801a6b0 <_free_r+0x78>
 801a6aa:	230c      	movs	r3, #12
 801a6ac:	6003      	str	r3, [r0, #0]
 801a6ae:	e7d6      	b.n	801a65e <_free_r+0x26>
 801a6b0:	6825      	ldr	r5, [r4, #0]
 801a6b2:	1961      	adds	r1, r4, r5
 801a6b4:	428b      	cmp	r3, r1
 801a6b6:	bf04      	itt	eq
 801a6b8:	6819      	ldreq	r1, [r3, #0]
 801a6ba:	685b      	ldreq	r3, [r3, #4]
 801a6bc:	6063      	str	r3, [r4, #4]
 801a6be:	bf04      	itt	eq
 801a6c0:	1949      	addeq	r1, r1, r5
 801a6c2:	6021      	streq	r1, [r4, #0]
 801a6c4:	6054      	str	r4, [r2, #4]
 801a6c6:	e7ca      	b.n	801a65e <_free_r+0x26>
 801a6c8:	b003      	add	sp, #12
 801a6ca:	bd30      	pop	{r4, r5, pc}
 801a6cc:	24006930 	.word	0x24006930

0801a6d0 <sbrk_aligned>:
 801a6d0:	b570      	push	{r4, r5, r6, lr}
 801a6d2:	4e0e      	ldr	r6, [pc, #56]	; (801a70c <sbrk_aligned+0x3c>)
 801a6d4:	460c      	mov	r4, r1
 801a6d6:	6831      	ldr	r1, [r6, #0]
 801a6d8:	4605      	mov	r5, r0
 801a6da:	b911      	cbnz	r1, 801a6e2 <sbrk_aligned+0x12>
 801a6dc:	f000 f88c 	bl	801a7f8 <_sbrk_r>
 801a6e0:	6030      	str	r0, [r6, #0]
 801a6e2:	4621      	mov	r1, r4
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f000 f887 	bl	801a7f8 <_sbrk_r>
 801a6ea:	1c43      	adds	r3, r0, #1
 801a6ec:	d00a      	beq.n	801a704 <sbrk_aligned+0x34>
 801a6ee:	1cc4      	adds	r4, r0, #3
 801a6f0:	f024 0403 	bic.w	r4, r4, #3
 801a6f4:	42a0      	cmp	r0, r4
 801a6f6:	d007      	beq.n	801a708 <sbrk_aligned+0x38>
 801a6f8:	1a21      	subs	r1, r4, r0
 801a6fa:	4628      	mov	r0, r5
 801a6fc:	f000 f87c 	bl	801a7f8 <_sbrk_r>
 801a700:	3001      	adds	r0, #1
 801a702:	d101      	bne.n	801a708 <sbrk_aligned+0x38>
 801a704:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a708:	4620      	mov	r0, r4
 801a70a:	bd70      	pop	{r4, r5, r6, pc}
 801a70c:	24006934 	.word	0x24006934

0801a710 <_malloc_r>:
 801a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a714:	1ccd      	adds	r5, r1, #3
 801a716:	f025 0503 	bic.w	r5, r5, #3
 801a71a:	3508      	adds	r5, #8
 801a71c:	2d0c      	cmp	r5, #12
 801a71e:	bf38      	it	cc
 801a720:	250c      	movcc	r5, #12
 801a722:	2d00      	cmp	r5, #0
 801a724:	4607      	mov	r7, r0
 801a726:	db01      	blt.n	801a72c <_malloc_r+0x1c>
 801a728:	42a9      	cmp	r1, r5
 801a72a:	d905      	bls.n	801a738 <_malloc_r+0x28>
 801a72c:	230c      	movs	r3, #12
 801a72e:	603b      	str	r3, [r7, #0]
 801a730:	2600      	movs	r6, #0
 801a732:	4630      	mov	r0, r6
 801a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a738:	4e2e      	ldr	r6, [pc, #184]	; (801a7f4 <_malloc_r+0xe4>)
 801a73a:	f000 f907 	bl	801a94c <__malloc_lock>
 801a73e:	6833      	ldr	r3, [r6, #0]
 801a740:	461c      	mov	r4, r3
 801a742:	bb34      	cbnz	r4, 801a792 <_malloc_r+0x82>
 801a744:	4629      	mov	r1, r5
 801a746:	4638      	mov	r0, r7
 801a748:	f7ff ffc2 	bl	801a6d0 <sbrk_aligned>
 801a74c:	1c43      	adds	r3, r0, #1
 801a74e:	4604      	mov	r4, r0
 801a750:	d14d      	bne.n	801a7ee <_malloc_r+0xde>
 801a752:	6834      	ldr	r4, [r6, #0]
 801a754:	4626      	mov	r6, r4
 801a756:	2e00      	cmp	r6, #0
 801a758:	d140      	bne.n	801a7dc <_malloc_r+0xcc>
 801a75a:	6823      	ldr	r3, [r4, #0]
 801a75c:	4631      	mov	r1, r6
 801a75e:	4638      	mov	r0, r7
 801a760:	eb04 0803 	add.w	r8, r4, r3
 801a764:	f000 f848 	bl	801a7f8 <_sbrk_r>
 801a768:	4580      	cmp	r8, r0
 801a76a:	d13a      	bne.n	801a7e2 <_malloc_r+0xd2>
 801a76c:	6821      	ldr	r1, [r4, #0]
 801a76e:	3503      	adds	r5, #3
 801a770:	1a6d      	subs	r5, r5, r1
 801a772:	f025 0503 	bic.w	r5, r5, #3
 801a776:	3508      	adds	r5, #8
 801a778:	2d0c      	cmp	r5, #12
 801a77a:	bf38      	it	cc
 801a77c:	250c      	movcc	r5, #12
 801a77e:	4629      	mov	r1, r5
 801a780:	4638      	mov	r0, r7
 801a782:	f7ff ffa5 	bl	801a6d0 <sbrk_aligned>
 801a786:	3001      	adds	r0, #1
 801a788:	d02b      	beq.n	801a7e2 <_malloc_r+0xd2>
 801a78a:	6823      	ldr	r3, [r4, #0]
 801a78c:	442b      	add	r3, r5
 801a78e:	6023      	str	r3, [r4, #0]
 801a790:	e00e      	b.n	801a7b0 <_malloc_r+0xa0>
 801a792:	6822      	ldr	r2, [r4, #0]
 801a794:	1b52      	subs	r2, r2, r5
 801a796:	d41e      	bmi.n	801a7d6 <_malloc_r+0xc6>
 801a798:	2a0b      	cmp	r2, #11
 801a79a:	d916      	bls.n	801a7ca <_malloc_r+0xba>
 801a79c:	1961      	adds	r1, r4, r5
 801a79e:	42a3      	cmp	r3, r4
 801a7a0:	6025      	str	r5, [r4, #0]
 801a7a2:	bf18      	it	ne
 801a7a4:	6059      	strne	r1, [r3, #4]
 801a7a6:	6863      	ldr	r3, [r4, #4]
 801a7a8:	bf08      	it	eq
 801a7aa:	6031      	streq	r1, [r6, #0]
 801a7ac:	5162      	str	r2, [r4, r5]
 801a7ae:	604b      	str	r3, [r1, #4]
 801a7b0:	4638      	mov	r0, r7
 801a7b2:	f104 060b 	add.w	r6, r4, #11
 801a7b6:	f000 f8cf 	bl	801a958 <__malloc_unlock>
 801a7ba:	f026 0607 	bic.w	r6, r6, #7
 801a7be:	1d23      	adds	r3, r4, #4
 801a7c0:	1af2      	subs	r2, r6, r3
 801a7c2:	d0b6      	beq.n	801a732 <_malloc_r+0x22>
 801a7c4:	1b9b      	subs	r3, r3, r6
 801a7c6:	50a3      	str	r3, [r4, r2]
 801a7c8:	e7b3      	b.n	801a732 <_malloc_r+0x22>
 801a7ca:	6862      	ldr	r2, [r4, #4]
 801a7cc:	42a3      	cmp	r3, r4
 801a7ce:	bf0c      	ite	eq
 801a7d0:	6032      	streq	r2, [r6, #0]
 801a7d2:	605a      	strne	r2, [r3, #4]
 801a7d4:	e7ec      	b.n	801a7b0 <_malloc_r+0xa0>
 801a7d6:	4623      	mov	r3, r4
 801a7d8:	6864      	ldr	r4, [r4, #4]
 801a7da:	e7b2      	b.n	801a742 <_malloc_r+0x32>
 801a7dc:	4634      	mov	r4, r6
 801a7de:	6876      	ldr	r6, [r6, #4]
 801a7e0:	e7b9      	b.n	801a756 <_malloc_r+0x46>
 801a7e2:	230c      	movs	r3, #12
 801a7e4:	603b      	str	r3, [r7, #0]
 801a7e6:	4638      	mov	r0, r7
 801a7e8:	f000 f8b6 	bl	801a958 <__malloc_unlock>
 801a7ec:	e7a1      	b.n	801a732 <_malloc_r+0x22>
 801a7ee:	6025      	str	r5, [r4, #0]
 801a7f0:	e7de      	b.n	801a7b0 <_malloc_r+0xa0>
 801a7f2:	bf00      	nop
 801a7f4:	24006930 	.word	0x24006930

0801a7f8 <_sbrk_r>:
 801a7f8:	b538      	push	{r3, r4, r5, lr}
 801a7fa:	4d06      	ldr	r5, [pc, #24]	; (801a814 <_sbrk_r+0x1c>)
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	4604      	mov	r4, r0
 801a800:	4608      	mov	r0, r1
 801a802:	602b      	str	r3, [r5, #0]
 801a804:	f7ea f868 	bl	80048d8 <_sbrk>
 801a808:	1c43      	adds	r3, r0, #1
 801a80a:	d102      	bne.n	801a812 <_sbrk_r+0x1a>
 801a80c:	682b      	ldr	r3, [r5, #0]
 801a80e:	b103      	cbz	r3, 801a812 <_sbrk_r+0x1a>
 801a810:	6023      	str	r3, [r4, #0]
 801a812:	bd38      	pop	{r3, r4, r5, pc}
 801a814:	24006938 	.word	0x24006938

0801a818 <__sread>:
 801a818:	b510      	push	{r4, lr}
 801a81a:	460c      	mov	r4, r1
 801a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a820:	f000 f8a0 	bl	801a964 <_read_r>
 801a824:	2800      	cmp	r0, #0
 801a826:	bfab      	itete	ge
 801a828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a82a:	89a3      	ldrhlt	r3, [r4, #12]
 801a82c:	181b      	addge	r3, r3, r0
 801a82e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a832:	bfac      	ite	ge
 801a834:	6563      	strge	r3, [r4, #84]	; 0x54
 801a836:	81a3      	strhlt	r3, [r4, #12]
 801a838:	bd10      	pop	{r4, pc}

0801a83a <__swrite>:
 801a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a83e:	461f      	mov	r7, r3
 801a840:	898b      	ldrh	r3, [r1, #12]
 801a842:	05db      	lsls	r3, r3, #23
 801a844:	4605      	mov	r5, r0
 801a846:	460c      	mov	r4, r1
 801a848:	4616      	mov	r6, r2
 801a84a:	d505      	bpl.n	801a858 <__swrite+0x1e>
 801a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a850:	2302      	movs	r3, #2
 801a852:	2200      	movs	r2, #0
 801a854:	f000 f868 	bl	801a928 <_lseek_r>
 801a858:	89a3      	ldrh	r3, [r4, #12]
 801a85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a85e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a862:	81a3      	strh	r3, [r4, #12]
 801a864:	4632      	mov	r2, r6
 801a866:	463b      	mov	r3, r7
 801a868:	4628      	mov	r0, r5
 801a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a86e:	f000 b817 	b.w	801a8a0 <_write_r>

0801a872 <__sseek>:
 801a872:	b510      	push	{r4, lr}
 801a874:	460c      	mov	r4, r1
 801a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a87a:	f000 f855 	bl	801a928 <_lseek_r>
 801a87e:	1c43      	adds	r3, r0, #1
 801a880:	89a3      	ldrh	r3, [r4, #12]
 801a882:	bf15      	itete	ne
 801a884:	6560      	strne	r0, [r4, #84]	; 0x54
 801a886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a88a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a88e:	81a3      	strheq	r3, [r4, #12]
 801a890:	bf18      	it	ne
 801a892:	81a3      	strhne	r3, [r4, #12]
 801a894:	bd10      	pop	{r4, pc}

0801a896 <__sclose>:
 801a896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a89a:	f000 b813 	b.w	801a8c4 <_close_r>
	...

0801a8a0 <_write_r>:
 801a8a0:	b538      	push	{r3, r4, r5, lr}
 801a8a2:	4d07      	ldr	r5, [pc, #28]	; (801a8c0 <_write_r+0x20>)
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	4608      	mov	r0, r1
 801a8a8:	4611      	mov	r1, r2
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	602a      	str	r2, [r5, #0]
 801a8ae:	461a      	mov	r2, r3
 801a8b0:	f7e9 ffc1 	bl	8004836 <_write>
 801a8b4:	1c43      	adds	r3, r0, #1
 801a8b6:	d102      	bne.n	801a8be <_write_r+0x1e>
 801a8b8:	682b      	ldr	r3, [r5, #0]
 801a8ba:	b103      	cbz	r3, 801a8be <_write_r+0x1e>
 801a8bc:	6023      	str	r3, [r4, #0]
 801a8be:	bd38      	pop	{r3, r4, r5, pc}
 801a8c0:	24006938 	.word	0x24006938

0801a8c4 <_close_r>:
 801a8c4:	b538      	push	{r3, r4, r5, lr}
 801a8c6:	4d06      	ldr	r5, [pc, #24]	; (801a8e0 <_close_r+0x1c>)
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	4604      	mov	r4, r0
 801a8cc:	4608      	mov	r0, r1
 801a8ce:	602b      	str	r3, [r5, #0]
 801a8d0:	f7e9 ffcd 	bl	800486e <_close>
 801a8d4:	1c43      	adds	r3, r0, #1
 801a8d6:	d102      	bne.n	801a8de <_close_r+0x1a>
 801a8d8:	682b      	ldr	r3, [r5, #0]
 801a8da:	b103      	cbz	r3, 801a8de <_close_r+0x1a>
 801a8dc:	6023      	str	r3, [r4, #0]
 801a8de:	bd38      	pop	{r3, r4, r5, pc}
 801a8e0:	24006938 	.word	0x24006938

0801a8e4 <_fstat_r>:
 801a8e4:	b538      	push	{r3, r4, r5, lr}
 801a8e6:	4d07      	ldr	r5, [pc, #28]	; (801a904 <_fstat_r+0x20>)
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	4608      	mov	r0, r1
 801a8ee:	4611      	mov	r1, r2
 801a8f0:	602b      	str	r3, [r5, #0]
 801a8f2:	f7e9 ffc8 	bl	8004886 <_fstat>
 801a8f6:	1c43      	adds	r3, r0, #1
 801a8f8:	d102      	bne.n	801a900 <_fstat_r+0x1c>
 801a8fa:	682b      	ldr	r3, [r5, #0]
 801a8fc:	b103      	cbz	r3, 801a900 <_fstat_r+0x1c>
 801a8fe:	6023      	str	r3, [r4, #0]
 801a900:	bd38      	pop	{r3, r4, r5, pc}
 801a902:	bf00      	nop
 801a904:	24006938 	.word	0x24006938

0801a908 <_isatty_r>:
 801a908:	b538      	push	{r3, r4, r5, lr}
 801a90a:	4d06      	ldr	r5, [pc, #24]	; (801a924 <_isatty_r+0x1c>)
 801a90c:	2300      	movs	r3, #0
 801a90e:	4604      	mov	r4, r0
 801a910:	4608      	mov	r0, r1
 801a912:	602b      	str	r3, [r5, #0]
 801a914:	f7e9 ffc7 	bl	80048a6 <_isatty>
 801a918:	1c43      	adds	r3, r0, #1
 801a91a:	d102      	bne.n	801a922 <_isatty_r+0x1a>
 801a91c:	682b      	ldr	r3, [r5, #0]
 801a91e:	b103      	cbz	r3, 801a922 <_isatty_r+0x1a>
 801a920:	6023      	str	r3, [r4, #0]
 801a922:	bd38      	pop	{r3, r4, r5, pc}
 801a924:	24006938 	.word	0x24006938

0801a928 <_lseek_r>:
 801a928:	b538      	push	{r3, r4, r5, lr}
 801a92a:	4d07      	ldr	r5, [pc, #28]	; (801a948 <_lseek_r+0x20>)
 801a92c:	4604      	mov	r4, r0
 801a92e:	4608      	mov	r0, r1
 801a930:	4611      	mov	r1, r2
 801a932:	2200      	movs	r2, #0
 801a934:	602a      	str	r2, [r5, #0]
 801a936:	461a      	mov	r2, r3
 801a938:	f7e9 ffc0 	bl	80048bc <_lseek>
 801a93c:	1c43      	adds	r3, r0, #1
 801a93e:	d102      	bne.n	801a946 <_lseek_r+0x1e>
 801a940:	682b      	ldr	r3, [r5, #0]
 801a942:	b103      	cbz	r3, 801a946 <_lseek_r+0x1e>
 801a944:	6023      	str	r3, [r4, #0]
 801a946:	bd38      	pop	{r3, r4, r5, pc}
 801a948:	24006938 	.word	0x24006938

0801a94c <__malloc_lock>:
 801a94c:	4801      	ldr	r0, [pc, #4]	; (801a954 <__malloc_lock+0x8>)
 801a94e:	f7ff be0b 	b.w	801a568 <__retarget_lock_acquire_recursive>
 801a952:	bf00      	nop
 801a954:	2400692c 	.word	0x2400692c

0801a958 <__malloc_unlock>:
 801a958:	4801      	ldr	r0, [pc, #4]	; (801a960 <__malloc_unlock+0x8>)
 801a95a:	f7ff be06 	b.w	801a56a <__retarget_lock_release_recursive>
 801a95e:	bf00      	nop
 801a960:	2400692c 	.word	0x2400692c

0801a964 <_read_r>:
 801a964:	b538      	push	{r3, r4, r5, lr}
 801a966:	4d07      	ldr	r5, [pc, #28]	; (801a984 <_read_r+0x20>)
 801a968:	4604      	mov	r4, r0
 801a96a:	4608      	mov	r0, r1
 801a96c:	4611      	mov	r1, r2
 801a96e:	2200      	movs	r2, #0
 801a970:	602a      	str	r2, [r5, #0]
 801a972:	461a      	mov	r2, r3
 801a974:	f7e9 ff42 	bl	80047fc <_read>
 801a978:	1c43      	adds	r3, r0, #1
 801a97a:	d102      	bne.n	801a982 <_read_r+0x1e>
 801a97c:	682b      	ldr	r3, [r5, #0]
 801a97e:	b103      	cbz	r3, 801a982 <_read_r+0x1e>
 801a980:	6023      	str	r3, [r4, #0]
 801a982:	bd38      	pop	{r3, r4, r5, pc}
 801a984:	24006938 	.word	0x24006938

0801a988 <_init>:
 801a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a98a:	bf00      	nop
 801a98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a98e:	bc08      	pop	{r3}
 801a990:	469e      	mov	lr, r3
 801a992:	4770      	bx	lr

0801a994 <_fini>:
 801a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a996:	bf00      	nop
 801a998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a99a:	bc08      	pop	{r3}
 801a99c:	469e      	mov	lr, r3
 801a99e:	4770      	bx	lr
