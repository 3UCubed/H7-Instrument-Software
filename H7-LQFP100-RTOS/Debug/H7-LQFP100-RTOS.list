
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  0800723c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004ac8  24000078  080072b4  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004b40  080072b4  00024b40  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000190c3  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000336a  00000000  00000000  00039169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001528  00000000  00000000  0003c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000013d0  00000000  00000000  0003da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000049f7  00000000  00000000  0003edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001667d  00000000  00000000  000437c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00169199  00000000  00000000  00059e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c2fdd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006070  00000000  00000000  001c3030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007074 	.word	0x08007074

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08007074 	.word	0x08007074

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a18      	ldr	r2, [pc, #96]	; (80003ec <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d109      	bne.n	80003a4 <HAL_TIM_OC_DelayElapsedCallback+0x24>
  {
	  printf("Sample PMT\n");
 8000390:	4817      	ldr	r0, [pc, #92]	; (80003f0 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000392:	f005 fef1 	bl	8006178 <puts>
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2101      	movs	r1, #1
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fe8f 	bl	80030c0 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80003a2:	e01e      	b.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x62>
  else if (htim == &htim2)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d109      	bne.n	80003c0 <HAL_TIM_OC_DelayElapsedCallback+0x40>
	  printf("Sample ERPA\n");
 80003ac:	4813      	ldr	r0, [pc, #76]	; (80003fc <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80003ae:	f005 fee3 	bl	8006178 <puts>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2102      	movs	r1, #2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f002 fe81 	bl	80030c0 <osEventFlagsSet>
}
 80003be:	e010      	b.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x62>
  else if (htim == &htim3)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d109      	bne.n	80003dc <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	  printf("Sample HK\n");
 80003c8:	480e      	ldr	r0, [pc, #56]	; (8000404 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80003ca:	f005 fed5 	bl	8006178 <puts>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2104      	movs	r1, #4
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 fe73 	bl	80030c0 <osEventFlagsSet>
}
 80003da:	e002      	b.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x62>
	  printf("Unknown Timer Interrupt\n");
 80003dc:	480a      	ldr	r0, [pc, #40]	; (8000408 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80003de:	f005 fecb 	bl	8006178 <puts>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	24000094 	.word	0x24000094
 80003f0:	080070ac 	.word	0x080070ac
 80003f4:	24000188 	.word	0x24000188
 80003f8:	240000e0 	.word	0x240000e0
 80003fc:	080070b8 	.word	0x080070b8
 8000400:	2400012c 	.word	0x2400012c
 8000404:	080070c4 	.word	0x080070c4
 8000408:	080070d0 	.word	0x080070d0

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fd04 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f850 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM1_Init();
 8000418:	f000 f8b8 	bl	800058c <MX_TIM1_Init>
  MX_TIM2_Init();
 800041c:	f000 f90a 	bl	8000634 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000420:	f000 f956 	bl	80006d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000424:	2100      	movs	r1, #0
 8000426:	4817      	ldr	r0, [pc, #92]	; (8000484 <main+0x78>)
 8000428:	f001 ff5c 	bl	80022e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800042c:	2100      	movs	r1, #0
 800042e:	4816      	ldr	r0, [pc, #88]	; (8000488 <main+0x7c>)
 8000430:	f001 ff58 	bl	80022e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000434:	2100      	movs	r1, #0
 8000436:	4815      	ldr	r0, [pc, #84]	; (800048c <main+0x80>)
 8000438:	f001 ff54 	bl	80022e4 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800043c:	f002 fd24 	bl	8002e88 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <main+0x84>)
 8000442:	2100      	movs	r1, #0
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <main+0x88>)
 8000446:	f002 fd69 	bl	8002f1c <osThreadNew>
 800044a:	4603      	mov	r3, r0
 800044c:	4a12      	ldr	r2, [pc, #72]	; (8000498 <main+0x8c>)
 800044e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <main+0x90>)
 8000452:	2100      	movs	r1, #0
 8000454:	4812      	ldr	r0, [pc, #72]	; (80004a0 <main+0x94>)
 8000456:	f002 fd61 	bl	8002f1c <osThreadNew>
 800045a:	4603      	mov	r3, r0
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <main+0x98>)
 800045e:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000460:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <main+0x9c>)
 8000462:	2100      	movs	r1, #0
 8000464:	4811      	ldr	r0, [pc, #68]	; (80004ac <main+0xa0>)
 8000466:	f002 fd59 	bl	8002f1c <osThreadNew>
 800046a:	4603      	mov	r3, r0
 800046c:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <main+0xa4>)
 800046e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 8000470:	2000      	movs	r0, #0
 8000472:	f002 fde5 	bl	8003040 <osEventFlagsNew>
 8000476:	4603      	mov	r3, r0
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <main+0xa8>)
 800047a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800047c:	f002 fd28 	bl	8002ed0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000480:	e7fe      	b.n	8000480 <main+0x74>
 8000482:	bf00      	nop
 8000484:	24000094 	.word	0x24000094
 8000488:	240000e0 	.word	0x240000e0
 800048c:	2400012c 	.word	0x2400012c
 8000490:	08007120 	.word	0x08007120
 8000494:	0800076d 	.word	0x0800076d
 8000498:	24000178 	.word	0x24000178
 800049c:	08007144 	.word	0x08007144
 80004a0:	080007ad 	.word	0x080007ad
 80004a4:	2400017c 	.word	0x2400017c
 80004a8:	08007168 	.word	0x08007168
 80004ac:	080007ed 	.word	0x080007ed
 80004b0:	24000180 	.word	0x24000180
 80004b4:	24000188 	.word	0x24000188

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09c      	sub	sp, #112	; 0x70
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	224c      	movs	r2, #76	; 0x4c
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f005 fdc8 	bl	800605c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f005 fdc2 	bl	800605c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d8:	2002      	movs	r0, #2
 80004da:	f000 fde7 	bl	80010ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <SystemClock_Config+0xcc>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	4a27      	ldr	r2, [pc, #156]	; (8000584 <SystemClock_Config+0xcc>)
 80004e8:	f023 0301 	bic.w	r3, r3, #1
 80004ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <SystemClock_Config+0xcc>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <SystemClock_Config+0xd0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000500:	4a21      	ldr	r2, [pc, #132]	; (8000588 <SystemClock_Config+0xd0>)
 8000502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <SystemClock_Config+0xd0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000514:	bf00      	nop
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <SystemClock_Config+0xd0>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800051e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000522:	d1f8      	bne.n	8000516 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000528:	2301      	movs	r3, #1
 800052a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052c:	2340      	movs	r3, #64	; 0x40
 800052e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000530:	2300      	movs	r3, #0
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fdf1 	bl	8001120 <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000544:	f000 f984 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	233f      	movs	r3, #63	; 0x3f
 800054a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fa31 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000578:	f000 f96a 	bl	8000850 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3770      	adds	r7, #112	; 0x70
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	58000400 	.word	0x58000400
 8000588:	58024800 	.word	0x58024800

0800058c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_TIM1_Init+0xa0>)
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <MX_TIM1_Init+0xa4>)
 80005ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_TIM1_Init+0xa0>)
 80005b2:	227f      	movs	r2, #127	; 0x7f
 80005b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_TIM1_Init+0xa0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_TIM1_Init+0xa0>)
 80005be:	f24f 4223 	movw	r2, #62499	; 0xf423
 80005c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_TIM1_Init+0xa0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_TIM1_Init+0xa0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_TIM1_Init+0xa0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005d6:	4815      	ldr	r0, [pc, #84]	; (800062c <MX_TIM1_Init+0xa0>)
 80005d8:	f001 fdb4 	bl	8002144 <HAL_TIM_Base_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80005e2:	f000 f935 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <MX_TIM1_Init+0xa0>)
 80005f4:	f002 f8d8 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005fe:	f000 f927 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_TIM1_Init+0xa0>)
 8000614:	f002 fb48 	bl	8002ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800061e:	f000 f917 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	24000094 	.word	0x24000094
 8000630:	40010000 	.word	0x40010000

08000634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_TIM2_Init+0x98>)
 8000654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000658:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_TIM2_Init+0x98>)
 800065c:	223f      	movs	r2, #63	; 0x3f
 800065e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_TIM2_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_TIM2_Init+0x98>)
 8000668:	f640 4234 	movw	r2, #3124	; 0xc34
 800066c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_TIM2_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM2_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_TIM2_Init+0x98>)
 800067c:	f001 fd62 	bl	8002144 <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000686:	f000 f8e3 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_TIM2_Init+0x98>)
 8000698:	f002 f886 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006a2:	f000 f8d5 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_TIM2_Init+0x98>)
 80006b4:	f002 faf8 	bl	8002ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006be:	f000 f8c7 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	240000e0 	.word	0x240000e0

080006d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_TIM3_Init+0x94>)
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <MX_TIM3_Init+0x98>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_TIM3_Init+0x94>)
 80006f6:	223f      	movs	r2, #63	; 0x3f
 80006f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_TIM3_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_TIM3_Init+0x94>)
 8000702:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_TIM3_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM3_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <MX_TIM3_Init+0x94>)
 8000716:	f001 fd15 	bl	8002144 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000720:	f000 f896 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_TIM3_Init+0x94>)
 8000732:	f002 f839 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800073c:	f000 f888 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_TIM3_Init+0x94>)
 800074e:	f002 faab 	bl	8002ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000758:	f000 f87a 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2400012c 	.word	0x2400012c
 8000768:	40000400 	.word	0x40000400

0800076c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <PMT_init+0x34>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077c:	2200      	movs	r2, #0
 800077e:	2101      	movs	r1, #1
 8000780:	f002 fce2 	bl	8003148 <osEventFlagsWait>
		pmt_seq++;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <PMT_init+0x38>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <PMT_init+0x38>)
 800078e:	701a      	strb	r2, [r3, #0]
		printf("PMT: %d\n", pmt_seq);
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <PMT_init+0x38>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <PMT_init+0x3c>)
 8000798:	f005 fc68 	bl	800606c <iprintf>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800079c:	e7ea      	b.n	8000774 <PMT_init+0x8>
 800079e:	bf00      	nop
 80007a0:	24000188 	.word	0x24000188
 80007a4:	24000184 	.word	0x24000184
 80007a8:	080070e8 	.word	0x080070e8

080007ac <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <ERPA_init+0x34>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	f002 fcc2 	bl	8003148 <osEventFlagsWait>
		erpa_seq++;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <ERPA_init+0x38>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <ERPA_init+0x38>)
 80007ce:	701a      	strb	r2, [r3, #0]
		printf("ERPA: %d\n", erpa_seq);  }
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <ERPA_init+0x38>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <ERPA_init+0x3c>)
 80007d8:	f005 fc48 	bl	800606c <iprintf>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80007dc:	e7ea      	b.n	80007b4 <ERPA_init+0x8>
 80007de:	bf00      	nop
 80007e0:	24000188 	.word	0x24000188
 80007e4:	24000185 	.word	0x24000185
 80007e8:	080070f4 	.word	0x080070f4

080007ec <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HK_init+0x34>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007fc:	2200      	movs	r2, #0
 80007fe:	2104      	movs	r1, #4
 8000800:	f002 fca2 	bl	8003148 <osEventFlagsWait>
		hk_seq++;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <HK_init+0x38>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HK_init+0x38>)
 800080e:	701a      	strb	r2, [r3, #0]
		printf("HK: %d\n", hk_seq);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <HK_init+0x38>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <HK_init+0x3c>)
 8000818:	f005 fc28 	bl	800606c <iprintf>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800081c:	e7ea      	b.n	80007f4 <HK_init+0x8>
 800081e:	bf00      	nop
 8000820:	24000188 	.word	0x24000188
 8000824:	24000186 	.word	0x24000186
 8000828:	08007100 	.word	0x08007100

0800082c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083e:	f000 fb29 	bl	8000e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40001000 	.word	0x40001000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x38>)
 8000864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_MspInit+0x38>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x38>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	210f      	movs	r1, #15
 8000884:	f06f 0001 	mvn.w	r0, #1
 8000888:	f000 fbe8 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58024400 	.word	0x58024400

08000898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a37      	ldr	r2, [pc, #220]	; (8000984 <HAL_TIM_Base_MspInit+0xec>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12f      	bne.n	800090a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008aa:	4b37      	ldr	r3, [pc, #220]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 80008ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008b0:	4a35      	ldr	r2, [pc, #212]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 80008bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2105      	movs	r1, #5
 80008cc:	2018      	movs	r0, #24
 80008ce:	f000 fbc5 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80008d2:	2018      	movs	r0, #24
 80008d4:	f000 fbdc 	bl	8001090 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2105      	movs	r1, #5
 80008dc:	2019      	movs	r0, #25
 80008de:	f000 fbbd 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 fbd4 	bl	8001090 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2105      	movs	r1, #5
 80008ec:	201a      	movs	r0, #26
 80008ee:	f000 fbb5 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80008f2:	201a      	movs	r0, #26
 80008f4:	f000 fbcc 	bl	8001090 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2105      	movs	r1, #5
 80008fc:	201b      	movs	r0, #27
 80008fe:	f000 fbad 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000902:	201b      	movs	r0, #27
 8000904:	f000 fbc4 	bl	8001090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000908:	e038      	b.n	800097c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000912:	d117      	bne.n	8000944 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 8000916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800091a:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 8000926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2105      	movs	r1, #5
 8000936:	201c      	movs	r0, #28
 8000938:	f000 fb90 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800093c:	201c      	movs	r0, #28
 800093e:	f000 fba7 	bl	8001090 <HAL_NVIC_EnableIRQ>
}
 8000942:	e01b      	b.n	800097c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_TIM_Base_MspInit+0xf4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d116      	bne.n	800097c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 8000950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_TIM_Base_MspInit+0xf0>)
 8000960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2105      	movs	r1, #5
 8000970:	201d      	movs	r0, #29
 8000972:	f000 fb73 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000976:	201d      	movs	r0, #29
 8000978:	f000 fb8a 	bl	8001090 <HAL_NVIC_EnableIRQ>
}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40010000 	.word	0x40010000
 8000988:	58024400 	.word	0x58024400
 800098c:	40000400 	.word	0x40000400

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b0f      	cmp	r3, #15
 800099c:	d827      	bhi.n	80009ee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800099e:	2200      	movs	r2, #0
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	2036      	movs	r0, #54	; 0x36
 80009a4:	f000 fb5a 	bl	800105c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a8:	2036      	movs	r0, #54	; 0x36
 80009aa:	f000 fb71 	bl	8001090 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <HAL_InitTick+0xc4>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <HAL_InitTick+0xc8>)
 80009b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <HAL_InitTick+0xc8>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <HAL_InitTick+0xc8>)
 80009c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d2:	f107 0210 	add.w	r2, r7, #16
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fb6f 	bl	80020c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <HAL_InitTick+0x6a>
 80009ec:	e001      	b.n	80009f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e02b      	b.n	8000a4a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f2:	f001 fb4f 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 80009f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80009f8:	e004      	b.n	8000a04 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009fa:	f001 fb4b 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 80009fe:	4603      	mov	r3, r0
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <HAL_InitTick+0xcc>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	0c9b      	lsrs	r3, r3, #18
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_InitTick+0xd4>)
 8000a16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a32:	480b      	ldr	r0, [pc, #44]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a34:	f001 fb86 	bl	8002144 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d104      	bne.n	8000a48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <HAL_InitTick+0xd0>)
 8000a40:	f001 fbd8 	bl	80021f4 <HAL_TIM_Base_Start_IT>
 8000a44:	4603      	mov	r3, r0
 8000a46:	e000      	b.n	8000a4a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3740      	adds	r7, #64	; 0x40
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000008 	.word	0x24000008
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	2400018c 	.word	0x2400018c
 8000a64:	40001000 	.word	0x40001000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM1_BRK_IRQHandler+0x10>)
 8000a9a:	f001 fd7d 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	24000094 	.word	0x24000094

08000aa8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM1_UP_IRQHandler+0x10>)
 8000aae:	f001 fd73 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24000094 	.word	0x24000094

08000abc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM1_TRG_COM_IRQHandler+0x10>)
 8000ac2:	f001 fd69 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	24000094 	.word	0x24000094

08000ad0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM1_CC_IRQHandler+0x10>)
 8000ad6:	f001 fd5f 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	24000094 	.word	0x24000094

08000ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM2_IRQHandler+0x10>)
 8000aea:	f001 fd55 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	240000e0 	.word	0x240000e0

08000af8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM3_IRQHandler+0x10>)
 8000afe:	f001 fd4b 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2400012c 	.word	0x2400012c

08000b0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM6_DAC_IRQHandler+0x10>)
 8000b12:	f001 fd41 	bl	8002598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2400018c 	.word	0x2400018c

08000b20 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <ITM_SendChar+0x48>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <ITM_SendChar+0x48>)
 8000b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b34:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <ITM_SendChar+0x4c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <ITM_SendChar+0x4c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8000b42:	bf00      	nop
 8000b44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f8      	beq.n	8000b44 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8000b52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000edfc 	.word	0xe000edfc
 8000b6c:	e0000e00 	.word	0xe0000e00

08000b70 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
		*ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
	}

	return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e009      	b.n	8000bd0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ffab 	bl	8000b20 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf1      	blt.n	8000bbc <_write+0x12>
	}
	return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_close>:

int _close(int file) {
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_fstat>:

int _fstat(int file, struct stat *st) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_isatty>:

int _isatty(int file) {
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
		errno = ENOMEM;
 8000c7c:	f005 f9b6 	bl	8005fec <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	24080000 	.word	0x24080000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	240001d8 	.word	0x240001d8
 8000cb4:	24004b40 	.word	0x24004b40

08000cb8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8000cbc:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <SystemInit+0xe4>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <SystemInit+0xe4>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <SystemInit+0xe8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	2b06      	cmp	r3, #6
 8000cd6:	d807      	bhi.n	8000ce8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <SystemInit+0xe8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f023 030f 	bic.w	r3, r3, #15
 8000ce0:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <SystemInit+0xe8>)
 8000ce2:	f043 0307 	orr.w	r3, r3, #7
 8000ce6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <SystemInit+0xec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <SystemInit+0xec>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <SystemInit+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <SystemInit+0xec>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4929      	ldr	r1, [pc, #164]	; (8000da4 <SystemInit+0xec>)
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <SystemInit+0xf0>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <SystemInit+0xe8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <SystemInit+0xe8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 030f 	bic.w	r3, r3, #15
 8000d1a:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <SystemInit+0xe8>)
 8000d1c:	f043 0307 	orr.w	r3, r3, #7
 8000d20:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <SystemInit+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <SystemInit+0xec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <SystemInit+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <SystemInit+0xec>)
 8000d36:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <SystemInit+0xf4>)
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <SystemInit+0xec>)
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <SystemInit+0xf8>)
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <SystemInit+0xec>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <SystemInit+0xfc>)
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <SystemInit+0xec>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <SystemInit+0xec>)
 8000d4e:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <SystemInit+0xfc>)
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <SystemInit+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <SystemInit+0xec>)
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <SystemInit+0xfc>)
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <SystemInit+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <SystemInit+0xec>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <SystemInit+0xec>)
 8000d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <SystemInit+0xec>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SystemInit+0x100>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <SystemInit+0x104>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d82:	d202      	bcs.n	8000d8a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <SystemInit+0x108>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <SystemInit+0x10c>)
 8000d8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	52002000 	.word	0x52002000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dac:	02020200 	.word	0x02020200
 8000db0:	01ff0000 	.word	0x01ff0000
 8000db4:	01010280 	.word	0x01010280
 8000db8:	5c001000 	.word	0x5c001000
 8000dbc:	ffff0000 	.word	0xffff0000
 8000dc0:	51008108 	.word	0x51008108
 8000dc4:	52004000 	.word	0x52004000

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dcc:	f7ff ff74 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f005 f8ff 	bl	8005ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fb07 	bl	800040c <main>
  bx  lr
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e08:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000e0c:	0800723c 	.word	0x0800723c
  ldr r2, =_sbss
 8000e10:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000e14:	24004b40 	.word	0x24004b40

08000e18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC3_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e22:	2003      	movs	r0, #3
 8000e24:	f000 f90f 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e28:	f000 ff8a 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_Init+0x68>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	4913      	ldr	r1, [pc, #76]	; (8000e88 <HAL_Init+0x6c>)
 8000e3a:	5ccb      	ldrb	r3, [r1, r3]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa22 f303 	lsr.w	r3, r2, r3
 8000e44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_Init+0x68>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_Init+0x6c>)
 8000e50:	5cd3      	ldrb	r3, [r2, r3]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_Init+0x70>)
 8000e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_Init+0x74>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e66:	200f      	movs	r0, #15
 8000e68:	f7ff fd92 	bl	8000990 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e002      	b.n	8000e7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e76:	f7ff fcf1 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400
 8000e88:	0800718c 	.word	0x0800718c
 8000e8c:	24000004 	.word	0x24000004
 8000e90:	24000000 	.word	0x24000000

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2400000c 	.word	0x2400000c
 8000eb8:	240001dc 	.word	0x240001dc

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	240001dc 	.word	0x240001dc

08000ed4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetREVID+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0c1b      	lsrs	r3, r3, #16
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	5c001000 	.word	0x5c001000

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff63 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb3 	bl	8000fe0 <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff82 	bl	8000f8c <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff56 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_PWREx_ConfigSupply+0x70>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d00a      	beq.n	80010d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_PWREx_ConfigSupply+0x70>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d001      	beq.n	80010d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e01f      	b.n	8001112 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e01d      	b.n	8001112 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_PWREx_ConfigSupply+0x70>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f023 0207 	bic.w	r2, r3, #7
 80010de:	490f      	ldr	r1, [pc, #60]	; (800111c <HAL_PWREx_ConfigSupply+0x70>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010e6:	f7ff fee9 	bl	8000ebc <HAL_GetTick>
 80010ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ec:	e009      	b.n	8001102 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010ee:	f7ff fee5 	bl	8000ebc <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010fc:	d901      	bls.n	8001102 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_PWREx_ConfigSupply+0x70>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110e:	d1ee      	bne.n	80010ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58024800 	.word	0x58024800

08001120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f000 bc48 	b.w	80019c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8088 	beq.w	8001252 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001142:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800114c:	4b96      	ldr	r3, [pc, #600]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	2b10      	cmp	r3, #16
 8001156:	d007      	beq.n	8001168 <HAL_RCC_OscConfig+0x48>
 8001158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115a:	2b18      	cmp	r3, #24
 800115c:	d111      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b8f      	ldr	r3, [pc, #572]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d06d      	beq.n	8001250 <HAL_RCC_OscConfig+0x130>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d169      	bne.n	8001250 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	f000 bc21 	b.w	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x7a>
 800118c:	4b86      	ldr	r3, [pc, #536]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a85      	ldr	r2, [pc, #532]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e02e      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x9c>
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b7e      	ldr	r3, [pc, #504]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a7d      	ldr	r2, [pc, #500]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011c6:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a74      	ldr	r2, [pc, #464]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 80011e0:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a70      	ldr	r2, [pc, #448]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a6d      	ldr	r2, [pc, #436]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fe5c 	bl	8000ebc <HAL_GetTick>
 8001204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fe58 	bl	8000ebc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e3d4      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xe8>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fe48 	bl	8000ebc <HAL_GetTick>
 800122c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fe44 	bl	8000ebc <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e3c0      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x110>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80ca 	beq.w	80013f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001260:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001268:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800126a:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_RCC_OscConfig+0x166>
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b18      	cmp	r3, #24
 800127a:	d156      	bne.n	800132a <HAL_RCC_OscConfig+0x20a>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d151      	bne.n	800132a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001286:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x17e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e392      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 0219 	bic.w	r2, r3, #25
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	493f      	ldr	r1, [pc, #252]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fe04 	bl	8000ebc <HAL_GetTick>
 80012b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b8:	f7ff fe00 	bl	8000ebc <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e37c      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	f7ff fdfd 	bl	8000ed4 <HAL_GetREVID>
 80012da:	4603      	mov	r3, r0
 80012dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d817      	bhi.n	8001314 <HAL_RCC_OscConfig+0x1f4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b40      	cmp	r3, #64	; 0x40
 80012ea:	d108      	bne.n	80012fe <HAL_RCC_OscConfig+0x1de>
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012f4:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012fc:	e07a      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	031b      	lsls	r3, r3, #12
 800130c:	4926      	ldr	r1, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001312:	e06f      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	4921      	ldr	r1, [pc, #132]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001328:	e064      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d047      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0219 	bic.w	r2, r3, #25
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	491a      	ldr	r1, [pc, #104]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fdba 	bl	8000ebc <HAL_GetTick>
 8001348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fdb6 	bl	8000ebc <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e332      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	f7ff fdb3 	bl	8000ed4 <HAL_GetREVID>
 800136e:	4603      	mov	r3, r0
 8001370:	f241 0203 	movw	r2, #4099	; 0x1003
 8001374:	4293      	cmp	r3, r2
 8001376:	d819      	bhi.n	80013ac <HAL_RCC_OscConfig+0x28c>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b40      	cmp	r3, #64	; 0x40
 800137e:	d108      	bne.n	8001392 <HAL_RCC_OscConfig+0x272>
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 800138a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	e030      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	031b      	lsls	r3, r3, #12
 80013a0:	4901      	ldr	r1, [pc, #4]	; (80013a8 <HAL_RCC_OscConfig+0x288>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
 80013a6:	e025      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
 80013a8:	58024400 	.word	0x58024400
 80013ac:	4b9a      	ldr	r3, [pc, #616]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	4997      	ldr	r1, [pc, #604]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b95      	ldr	r3, [pc, #596]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fd75 	bl	8000ebc <HAL_GetTick>
 80013d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fd71 	bl	8000ebc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e2ed      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e8:	4b8b      	ldr	r3, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a9 	beq.w	8001554 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	4b85      	ldr	r3, [pc, #532]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800140a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800140c:	4b82      	ldr	r3, [pc, #520]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d007      	beq.n	8001428 <HAL_RCC_OscConfig+0x308>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b18      	cmp	r3, #24
 800141c:	d13a      	bne.n	8001494 <HAL_RCC_OscConfig+0x374>
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d135      	bne.n	8001494 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001428:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x320>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b80      	cmp	r3, #128	; 0x80
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e2c1      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001440:	f7ff fd48 	bl	8000ed4 <HAL_GetREVID>
 8001444:	4603      	mov	r3, r0
 8001446:	f241 0203 	movw	r2, #4099	; 0x1003
 800144a:	4293      	cmp	r3, r2
 800144c:	d817      	bhi.n	800147e <HAL_RCC_OscConfig+0x35e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b20      	cmp	r3, #32
 8001454:	d108      	bne.n	8001468 <HAL_RCC_OscConfig+0x348>
 8001456:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001464:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001466:	e075      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001468:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	069b      	lsls	r3, r3, #26
 8001476:	4968      	ldr	r1, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800147c:	e06a      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	4962      	ldr	r1, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001492:	e05f      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d042      	beq.n	8001522 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800149c:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a5d      	ldr	r2, [pc, #372]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fd08 	bl	8000ebc <HAL_GetTick>
 80014ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014b0:	f7ff fd04 	bl	8000ebc <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e280      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014c2:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ce:	f7ff fd01 	bl	8000ed4 <HAL_GetREVID>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80014d8:	4293      	cmp	r3, r2
 80014da:	d817      	bhi.n	800150c <HAL_RCC_OscConfig+0x3ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d108      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3d6>
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014ec:	4a4a      	ldr	r2, [pc, #296]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014f2:	6053      	str	r3, [r2, #4]
 80014f4:	e02e      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
 80014f6:	4b48      	ldr	r3, [pc, #288]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	069b      	lsls	r3, r3, #26
 8001504:	4944      	ldr	r1, [pc, #272]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e023      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	493f      	ldr	r1, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fcc5 	bl	8000ebc <HAL_GetTick>
 8001532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001536:	f7ff fcc1 	bl	8000ebc <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e23d      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d036      	beq.n	80015ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d019      	beq.n	800159c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fca2 	bl	8000ebc <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fc9e 	bl	8000ebc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e21a      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x45c>
 800159a:	e018      	b.n	80015ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc88 	bl	8000ebc <HAL_GetTick>
 80015ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc84 	bl	8000ebc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e200      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d039      	beq.n	800164e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01c      	beq.n	800161c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fc65 	bl	8000ebc <HAL_GetTick>
 80015f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f6:	f7ff fc61 	bl	8000ebc <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1dd      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
 8001614:	e01b      	b.n	800164e <HAL_RCC_OscConfig+0x52e>
 8001616:	bf00      	nop
 8001618:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800161c:	4b9b      	ldr	r3, [pc, #620]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a9a      	ldr	r2, [pc, #616]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001626:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001628:	f7ff fc48 	bl	8000ebc <HAL_GetTick>
 800162c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001630:	f7ff fc44 	bl	8000ebc <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1c0      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001642:	4b92      	ldr	r3, [pc, #584]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8081 	beq.w	800175e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800165c:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <HAL_RCC_OscConfig+0x770>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a8b      	ldr	r2, [pc, #556]	; (8001890 <HAL_RCC_OscConfig+0x770>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001668:	f7ff fc28 	bl	8000ebc <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff fc24 	bl	8000ebc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1a0      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001682:	4b83      	ldr	r3, [pc, #524]	; (8001890 <HAL_RCC_OscConfig+0x770>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x584>
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	e02d      	b.n	8001700 <HAL_RCC_OscConfig+0x5e0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5a6>
 80016ac:	4b77      	ldr	r3, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a76      	ldr	r2, [pc, #472]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	4b74      	ldr	r3, [pc, #464]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	4a73      	ldr	r2, [pc, #460]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6713      	str	r3, [r2, #112]	; 0x70
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x5e0>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c8>
 80016ce:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	4b6c      	ldr	r3, [pc, #432]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a6b      	ldr	r2, [pc, #428]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x5e0>
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a67      	ldr	r2, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	4b65      	ldr	r3, [pc, #404]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a64      	ldr	r2, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fbd8 	bl	8000ebc <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fbd4 	bl	8000ebc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e14e      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ee      	beq.n	8001710 <HAL_RCC_OscConfig+0x5f0>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fbc2 	bl	8000ebc <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fbbe 	bl	8000ebc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e138      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001752:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ee      	bne.n	800173c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 812d 	beq.w	80019c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001768:	4b48      	ldr	r3, [pc, #288]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001770:	2b18      	cmp	r3, #24
 8001772:	f000 80bd 	beq.w	80018f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	2b02      	cmp	r3, #2
 800177c:	f040 809e 	bne.w	80018bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb96 	bl	8000ebc <HAL_GetTick>
 8001790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fb92 	bl	8000ebc <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e10e      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b6:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x774>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	4931      	ldr	r1, [pc, #196]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	628b      	str	r3, [r1, #40]	; 0x28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	3b01      	subs	r3, #1
 80017d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	3b01      	subs	r3, #1
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	b29b      	uxth	r3, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	3b01      	subs	r3, #1
 80017f6:	061b      	lsls	r3, r3, #24
 80017f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017fc:	4923      	ldr	r1, [pc, #140]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x778>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800181a:	00d2      	lsls	r2, r2, #3
 800181c:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	f023 020c 	bic.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4917      	ldr	r1, [pc, #92]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	f023 0202 	bic.w	r2, r3, #2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	4912      	ldr	r1, [pc, #72]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_RCC_OscConfig+0x76c>)
 800187c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fb1b 	bl	8000ebc <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001888:	e011      	b.n	80018ae <HAL_RCC_OscConfig+0x78e>
 800188a:	bf00      	nop
 800188c:	58024400 	.word	0x58024400
 8001890:	58024800 	.word	0x58024800
 8001894:	fffffc0c 	.word	0xfffffc0c
 8001898:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fb0e 	bl	8000ebc <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e08a      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x77c>
 80018ba:	e082      	b.n	80019c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a42      	ldr	r2, [pc, #264]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff faf8 	bl	8000ebc <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff faf4 	bl	8000ebc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e070      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x7b0>
 80018ee:	e068      	b.n	80019c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	2b01      	cmp	r3, #1
 8001902:	d031      	beq.n	8001968 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d12a      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d122      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11a      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0a5b      	lsrs	r3, r3, #9
 8001936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d111      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	0c1b      	lsrs	r3, r3, #16
 8001948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0e1b      	lsrs	r3, r3, #24
 800195a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001962:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e02b      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001976:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d01f      	beq.n	80019c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800198e:	f7ff fa95 	bl	8000ebc <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001994:	bf00      	nop
 8001996:	f7ff fa91 	bl	8000ebc <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	4293      	cmp	r3, r2
 80019a0:	d0f9      	beq.n	8001996 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_RCC_OscConfig+0x8b0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019ae:	00d2      	lsls	r2, r2, #3
 80019b0:	4906      	ldr	r1, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400
 80019d0:	ffff0007 	.word	0xffff0007

080019d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e19c      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b8a      	ldr	r3, [pc, #552]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b87      	ldr	r3, [pc, #540]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	4985      	ldr	r1, [pc, #532]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b83      	ldr	r3, [pc, #524]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e184      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d908      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a34:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	4975      	ldr	r1, [pc, #468]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b70      	ldr	r3, [pc, #448]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a62:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	496a      	ldr	r1, [pc, #424]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	4b64      	ldr	r3, [pc, #400]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a90:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	495e      	ldr	r1, [pc, #376]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4953      	ldr	r1, [pc, #332]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d908      	bls.n	8001afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f023 020f 	bic.w	r2, r3, #15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4947      	ldr	r1, [pc, #284]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d055      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4940      	ldr	r1, [pc, #256]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d121      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0f6      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d115      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0ea      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0de      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d6      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f023 0207 	bic.w	r2, r3, #7
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4925      	ldr	r1, [pc, #148]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b86:	f7ff f999 	bl	8000ebc <HAL_GetTick>
 8001b8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f7ff f995 	bl	8000ebc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0be      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d1eb      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d208      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f023 020f 	bic.w	r2, r3, #15
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d214      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e086      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
 8001c14:	52002000 	.word	0x52002000
 8001c18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d208      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4939      	ldr	r1, [pc, #228]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d208      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	492e      	ldr	r1, [pc, #184]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d208      	bcs.n	8001ca6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4922      	ldr	r1, [pc, #136]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d208      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4917      	ldr	r1, [pc, #92]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cd4:	f000 f834 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	4912      	ldr	r1, [pc, #72]	; (8001d30 <HAL_RCC_ClockConfig+0x35c>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_RCC_ClockConfig+0x35c>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x360>)
 8001d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_RCC_ClockConfig+0x364>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x368>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fe3a 	bl	8000990 <HAL_InitTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	0800718c 	.word	0x0800718c
 8001d34:	24000004 	.word	0x24000004
 8001d38:	24000000 	.word	0x24000000
 8001d3c:	24000008 	.word	0x24000008

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d46:	4bb3      	ldr	r3, [pc, #716]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	f200 8155 	bhi.w	8001ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001dc1 	.word	0x08001dc1
 8001d60:	08001fff 	.word	0x08001fff
 8001d64:	08001fff 	.word	0x08001fff
 8001d68:	08001fff 	.word	0x08001fff
 8001d6c:	08001fff 	.word	0x08001fff
 8001d70:	08001fff 	.word	0x08001fff
 8001d74:	08001fff 	.word	0x08001fff
 8001d78:	08001fff 	.word	0x08001fff
 8001d7c:	08001de7 	.word	0x08001de7
 8001d80:	08001fff 	.word	0x08001fff
 8001d84:	08001fff 	.word	0x08001fff
 8001d88:	08001fff 	.word	0x08001fff
 8001d8c:	08001fff 	.word	0x08001fff
 8001d90:	08001fff 	.word	0x08001fff
 8001d94:	08001fff 	.word	0x08001fff
 8001d98:	08001fff 	.word	0x08001fff
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001fff 	.word	0x08001fff
 8001da4:	08001fff 	.word	0x08001fff
 8001da8:	08001fff 	.word	0x08001fff
 8001dac:	08001fff 	.word	0x08001fff
 8001db0:	08001fff 	.word	0x08001fff
 8001db4:	08001fff 	.word	0x08001fff
 8001db8:	08001fff 	.word	0x08001fff
 8001dbc:	08001df3 	.word	0x08001df3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dc0:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dcc:	4b91      	ldr	r3, [pc, #580]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	4a90      	ldr	r2, [pc, #576]	; (8002018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001dde:	e111      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001de0:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001de2:	61bb      	str	r3, [r7, #24]
      break;
 8001de4:	e10e      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001de6:	4b8d      	ldr	r3, [pc, #564]	; (800201c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001de8:	61bb      	str	r3, [r7, #24]
      break;
 8001dea:	e10b      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001dec:	4b8c      	ldr	r3, [pc, #560]	; (8002020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001dee:	61bb      	str	r3, [r7, #24]
      break;
 8001df0:	e108      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001df2:	4b88      	ldr	r3, [pc, #544]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001dfc:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e08:	4b82      	ldr	r3, [pc, #520]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e12:	4b80      	ldr	r3, [pc, #512]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80e1 	beq.w	8001ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	f000 8083 	beq.w	8001f44 <HAL_RCC_GetSysClockFreq+0x204>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	f200 80a1 	bhi.w	8001f88 <HAL_RCC_GetSysClockFreq+0x248>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x114>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d056      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e52:	e099      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d02d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e60:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	4a6b      	ldr	r2, [pc, #428]	; (8002018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8a:	4b62      	ldr	r3, [pc, #392]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001eba:	e087      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ece:	4b51      	ldr	r3, [pc, #324]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001efe:	e065      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800202c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f12:	4b40      	ldr	r3, [pc, #256]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f42:	e043      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f86:	e021      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800202c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	0a5b      	lsrs	r3, r3, #9
 8001fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
      break;
 8001ffc:	e002      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002000:	61bb      	str	r3, [r7, #24]
      break;
 8002002:	bf00      	nop
  }

  return sysclockfreq;
 8002004:	69bb      	ldr	r3, [r7, #24]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	58024400 	.word	0x58024400
 8002018:	03d09000 	.word	0x03d09000
 800201c:	003d0900 	.word	0x003d0900
 8002020:	017d7840 	.word	0x017d7840
 8002024:	46000000 	.word	0x46000000
 8002028:	4c742400 	.word	0x4c742400
 800202c:	4a742400 	.word	0x4a742400
 8002030:	4bbebc20 	.word	0x4bbebc20

08002034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800203a:	f7ff fe81 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_GetHCLKFreq+0x50>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490f      	ldr	r1, [pc, #60]	; (8002088 <HAL_RCC_GetHCLKFreq+0x54>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_GetHCLKFreq+0x50>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_GetHCLKFreq+0x54>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_RCC_GetHCLKFreq+0x58>)
 8002070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_GetHCLKFreq+0x58>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	58024400 	.word	0x58024400
 8002088:	0800718c 	.word	0x0800718c
 800208c:	24000004 	.word	0x24000004
 8002090:	24000000 	.word	0x24000000

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002098:	f7ff ffcc 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4904      	ldr	r1, [pc, #16]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58024400 	.word	0x58024400
 80020bc:	0800718c 	.word	0x0800718c

080020c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	223f      	movs	r2, #63	; 0x3f
 80020ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0207 	and.w	r2, r3, #7
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_GetClockConfig+0x7c>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetClockConfig+0x80>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	601a      	str	r2, [r3, #0]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	58024400 	.word	0x58024400
 8002140:	52002000 	.word	0x52002000

08002144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e049      	b.n	80021ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fb94 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fc26 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e054      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d01d      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_TIM_Base_Start_IT+0xe8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d115      	bne.n	80022a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_TIM_Base_Start_IT+0xec>)
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b06      	cmp	r3, #6
 8002284:	d015      	beq.n	80022b2 <HAL_TIM_Base_Start_IT+0xbe>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d011      	beq.n	80022b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229e:	e008      	b.n	80022b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40000c00 	.word	0x40000c00
 80022d4:	40010400 	.word	0x40010400
 80022d8:	40001800 	.word	0x40001800
 80022dc:	40014000 	.word	0x40014000
 80022e0:	00010007 	.word	0x00010007

080022e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_TIM_OC_Start_IT+0x28>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e03c      	b.n	8002386 <HAL_TIM_OC_Start_IT+0xa2>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d109      	bne.n	8002326 <HAL_TIM_OC_Start_IT+0x42>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	e02f      	b.n	8002386 <HAL_TIM_OC_Start_IT+0xa2>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d109      	bne.n	8002340 <HAL_TIM_OC_Start_IT+0x5c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e022      	b.n	8002386 <HAL_TIM_OC_Start_IT+0xa2>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d109      	bne.n	800235a <HAL_TIM_OC_Start_IT+0x76>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e015      	b.n	8002386 <HAL_TIM_OC_Start_IT+0xa2>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d109      	bne.n	8002374 <HAL_TIM_OC_Start_IT+0x90>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e008      	b.n	8002386 <HAL_TIM_OC_Start_IT+0xa2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0ec      	b.n	8002568 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <HAL_TIM_OC_Start_IT+0xba>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800239c:	e023      	b.n	80023e6 <HAL_TIM_OC_Start_IT+0x102>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d104      	bne.n	80023ae <HAL_TIM_OC_Start_IT+0xca>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ac:	e01b      	b.n	80023e6 <HAL_TIM_OC_Start_IT+0x102>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d104      	bne.n	80023be <HAL_TIM_OC_Start_IT+0xda>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023bc:	e013      	b.n	80023e6 <HAL_TIM_OC_Start_IT+0x102>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d104      	bne.n	80023ce <HAL_TIM_OC_Start_IT+0xea>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023cc:	e00b      	b.n	80023e6 <HAL_TIM_OC_Start_IT+0x102>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d104      	bne.n	80023de <HAL_TIM_OC_Start_IT+0xfa>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023dc:	e003      	b.n	80023e6 <HAL_TIM_OC_Start_IT+0x102>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d841      	bhi.n	8002470 <HAL_TIM_OC_Start_IT+0x18c>
 80023ec:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <HAL_TIM_OC_Start_IT+0x110>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002429 	.word	0x08002429
 80023f8:	08002471 	.word	0x08002471
 80023fc:	08002471 	.word	0x08002471
 8002400:	08002471 	.word	0x08002471
 8002404:	0800243b 	.word	0x0800243b
 8002408:	08002471 	.word	0x08002471
 800240c:	08002471 	.word	0x08002471
 8002410:	08002471 	.word	0x08002471
 8002414:	0800244d 	.word	0x0800244d
 8002418:	08002471 	.word	0x08002471
 800241c:	08002471 	.word	0x08002471
 8002420:	08002471 	.word	0x08002471
 8002424:	0800245f 	.word	0x0800245f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0202 	orr.w	r2, r2, #2
 8002436:	60da      	str	r2, [r3, #12]
      break;
 8002438:	e01d      	b.n	8002476 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0204 	orr.w	r2, r2, #4
 8002448:	60da      	str	r2, [r3, #12]
      break;
 800244a:	e014      	b.n	8002476 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0208 	orr.w	r2, r2, #8
 800245a:	60da      	str	r2, [r3, #12]
      break;
 800245c:	e00b      	b.n	8002476 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0210 	orr.w	r2, r2, #16
 800246c:	60da      	str	r2, [r3, #12]
      break;
 800246e:	e002      	b.n	8002476 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	bf00      	nop
  }

  if (status == HAL_OK)
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d174      	bne.n	8002566 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2201      	movs	r2, #1
 8002482:	6839      	ldr	r1, [r7, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fbe9 	bl	8002c5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_TIM_OC_Start_IT+0x28c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_TIM_OC_Start_IT+0x1d8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a36      	ldr	r2, [pc, #216]	; (8002574 <HAL_TIM_OC_Start_IT+0x290>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_TIM_OC_Start_IT+0x1d8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_TIM_OC_Start_IT+0x294>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_TIM_OC_Start_IT+0x1d8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_OC_Start_IT+0x298>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_TIM_OC_Start_IT+0x1d8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_TIM_OC_Start_IT+0x29c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_TIM_OC_Start_IT+0x1dc>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_TIM_OC_Start_IT+0x1de>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_TIM_OC_Start_IT+0x28c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e8:	d01d      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a25      	ldr	r2, [pc, #148]	; (8002584 <HAL_TIM_OC_Start_IT+0x2a0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_TIM_OC_Start_IT+0x2a4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_TIM_OC_Start_IT+0x2a8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_TIM_OC_Start_IT+0x290>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <HAL_TIM_OC_Start_IT+0x2ac>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_TIM_OC_Start_IT+0x242>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a15      	ldr	r2, [pc, #84]	; (8002578 <HAL_TIM_OC_Start_IT+0x294>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d115      	bne.n	8002552 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_TIM_OC_Start_IT+0x2b0>)
 800252e:	4013      	ands	r3, r2
 8002530:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d015      	beq.n	8002564 <HAL_TIM_OC_Start_IT+0x280>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d011      	beq.n	8002564 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002550:	e008      	b.n	8002564 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e000      	b.n	8002566 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40010000 	.word	0x40010000
 8002574:	40010400 	.word	0x40010400
 8002578:	40014000 	.word	0x40014000
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40001800 	.word	0x40001800
 8002594:	00010007 	.word	0x00010007

08002598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0202 	mvn.w	r2, #2
 80025cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9d8 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fd fec8 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9db 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0204 	mvn.w	r2, #4
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9b2 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fd fea2 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f9b5 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0208 	mvn.w	r2, #8
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f98c 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fd fe7c 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f98f 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d020      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0210 	mvn.w	r2, #16
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2208      	movs	r2, #8
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f966 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fd fe56 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f969 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0201 	mvn.w	r2, #1
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe f894 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800272a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fb53 	bl	8002dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00c      	beq.n	8002756 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800274e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb4b 	bl	8002dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00c      	beq.n	800277a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f923 	bl	80029c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00c      	beq.n	800279e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0220 	mvn.w	r2, #32
 8002796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fb13 	bl	8002dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0dc      	b.n	800297e <HAL_TIM_ConfigClockSource+0x1d6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_TIM_ConfigClockSource+0x1e0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a64      	ldr	r2, [pc, #400]	; (800298c <HAL_TIM_ConfigClockSource+0x1e4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	f000 80a9 	beq.w	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002800:	4a62      	ldr	r2, [pc, #392]	; (800298c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	f200 80ae 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002808:	4a61      	ldr	r2, [pc, #388]	; (8002990 <HAL_TIM_ConfigClockSource+0x1e8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	f000 80a1 	beq.w	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002810:	4a5f      	ldr	r2, [pc, #380]	; (8002990 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	f200 80a6 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002818:	4a5e      	ldr	r2, [pc, #376]	; (8002994 <HAL_TIM_ConfigClockSource+0x1ec>)
 800281a:	4293      	cmp	r3, r2
 800281c:	f000 8099 	beq.w	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002820:	4a5c      	ldr	r2, [pc, #368]	; (8002994 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002822:	4293      	cmp	r3, r2
 8002824:	f200 809e 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002828:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800282c:	f000 8091 	beq.w	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002830:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002834:	f200 8096 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283c:	f000 8089 	beq.w	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002844:	f200 808e 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284c:	d03e      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0x124>
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002852:	f200 8087 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	f000 8086 	beq.w	800296a <HAL_TIM_ConfigClockSource+0x1c2>
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002862:	d87f      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d01a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0xf6>
 8002868:	2b70      	cmp	r3, #112	; 0x70
 800286a:	d87b      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d050      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x16a>
 8002870:	2b60      	cmp	r3, #96	; 0x60
 8002872:	d877      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d03c      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x14a>
 8002878:	2b50      	cmp	r3, #80	; 0x50
 800287a:	d873      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d058      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x18a>
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d86f      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d064      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002888:	2b30      	cmp	r3, #48	; 0x30
 800288a:	d86b      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d060      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d867      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05c      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 8002898:	2b10      	cmp	r3, #16
 800289a:	d05a      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x1aa>
 800289c:	e062      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f000 f9b5 	bl	8002c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	609a      	str	r2, [r3, #8]
      break;
 80028ca:	e04f      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f000 f99e 	bl	8002c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ee:	609a      	str	r2, [r3, #8]
      break;
 80028f0:	e03c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	461a      	mov	r2, r3
 8002900:	f000 f90e 	bl	8002b20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2150      	movs	r1, #80	; 0x50
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f968 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 8002910:	e02c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	f000 f92d 	bl	8002b7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2160      	movs	r1, #96	; 0x60
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f958 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 8002930:	e01c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 f8ee 	bl	8002b20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f948 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 8002950:	e00c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f000 f93f 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 8002962:	e003      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e000      	b.n	800296c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800296a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	ffceff88 	.word	0xffceff88
 800298c:	00100040 	.word	0x00100040
 8002990:	00100030 	.word	0x00100030
 8002994:	00100020 	.word	0x00100020

08002998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <TIM_Base_SetConfig+0x12c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d00f      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a43      	ldr	r2, [pc, #268]	; (8002b04 <TIM_Base_SetConfig+0x130>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00b      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a42      	ldr	r2, [pc, #264]	; (8002b08 <TIM_Base_SetConfig+0x134>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <TIM_Base_SetConfig+0x138>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <TIM_Base_SetConfig+0x13c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <TIM_Base_SetConfig+0x12c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01f      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d01b      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <TIM_Base_SetConfig+0x130>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d017      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <TIM_Base_SetConfig+0x134>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <TIM_Base_SetConfig+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <TIM_Base_SetConfig+0x13c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <TIM_Base_SetConfig+0x140>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <TIM_Base_SetConfig+0x144>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <TIM_Base_SetConfig+0x148>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <TIM_Base_SetConfig+0x12c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00f      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <TIM_Base_SetConfig+0x13c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <TIM_Base_SetConfig+0x140>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <TIM_Base_SetConfig+0x144>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <TIM_Base_SetConfig+0x148>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d103      	bne.n	8002ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	611a      	str	r2, [r3, #16]
  }
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40010400 	.word	0x40010400
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800

08002b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f023 030a 	bic.w	r3, r3, #10
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	621a      	str	r2, [r3, #32]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0210 	bic.w	r2, r3, #16
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	031b      	lsls	r3, r3, #12
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <TIM_ITRx_SetConfig+0x38>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f043 0307 	orr.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	ffcfff8f 	.word	0xffcfff8f

08002c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2201      	movs	r2, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	621a      	str	r2, [r3, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e06d      	b.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d022      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d01d      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d018      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00e      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a15      	ldr	r2, [pc, #84]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10c      	bne.n	8002d8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	40014000 	.word	0x40014000

08002dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <__NVIC_SetPriority>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	; (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <SysTick_Handler+0x1c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e5c:	f002 f824 	bl	8004ea8 <xTaskGetSchedulerState>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e66:	f002 fe47 	bl	8005af8 <xPortSysTickHandler>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f06f 0004 	mvn.w	r0, #4
 8002e7e:	f7ff ffbf 	bl	8002e00 <__NVIC_SetPriority>
#endif
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e8e:	f3ef 8305 	mrs	r3, IPSR
 8002e92:	603b      	str	r3, [r7, #0]
  return(result);
 8002e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e9a:	f06f 0305 	mvn.w	r3, #5
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	e00c      	b.n	8002ebc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <osKernelInitialize+0x44>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <osKernelInitialize+0x44>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e002      	b.n	8002ebc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ebc:	687b      	ldr	r3, [r7, #4]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	240001e0 	.word	0x240001e0

08002ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ed6:	f3ef 8305 	mrs	r3, IPSR
 8002eda:	603b      	str	r3, [r7, #0]
  return(result);
 8002edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ee2:	f06f 0305 	mvn.w	r3, #5
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	e010      	b.n	8002f0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <osKernelStart+0x48>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d109      	bne.n	8002f06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ef2:	f7ff ffbf 	bl	8002e74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <osKernelStart+0x48>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002efc:	f001 faee 	bl	80044dc <vTaskStartScheduler>
      stat = osOK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e002      	b.n	8002f0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	240001e0 	.word	0x240001e0

08002f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f2c:	f3ef 8305 	mrs	r3, IPSR
 8002f30:	617b      	str	r3, [r7, #20]
  return(result);
 8002f32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17e      	bne.n	8003036 <osThreadNew+0x11a>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d07b      	beq.n	8003036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f42:	2318      	movs	r3, #24
 8002f44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d045      	beq.n	8002fe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <osThreadNew+0x48>
        name = attr->name;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <osThreadNew+0x6e>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b38      	cmp	r3, #56	; 0x38
 8002f7c:	d805      	bhi.n	8002f8a <osThreadNew+0x6e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <osThreadNew+0x72>
        return (NULL);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e054      	b.n	8003038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <osThreadNew+0xa8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b5b      	cmp	r3, #91	; 0x5b
 8002fac:	d90a      	bls.n	8002fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <osThreadNew+0xa8>
        mem = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e010      	b.n	8002fe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10c      	bne.n	8002fe6 <osThreadNew+0xca>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <osThreadNew+0xca>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <osThreadNew+0xca>
          mem = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e001      	b.n	8002fe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d110      	bne.n	800300e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ff4:	9202      	str	r2, [sp, #8]
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f001 f8c8 	bl	8004198 <xTaskCreateStatic>
 8003008:	4603      	mov	r3, r0
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	e013      	b.n	8003036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d110      	bne.n	8003036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	b29a      	uxth	r2, r3
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f001 f913 	bl	8004252 <xTaskCreate>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <osThreadNew+0x11a>
            hTask = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003036:	693b      	ldr	r3, [r7, #16]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3728      	adds	r7, #40	; 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800304c:	f3ef 8305 	mrs	r3, IPSR
 8003050:	60fb      	str	r3, [r7, #12]
  return(result);
 8003052:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003054:	2b00      	cmp	r3, #0
 8003056:	d12d      	bne.n	80030b4 <osEventFlagsNew+0x74>
    mem = -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <osEventFlagsNew+0x3a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b1f      	cmp	r3, #31
 8003072:	d902      	bls.n	800307a <osEventFlagsNew+0x3a>
        mem = 1;
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e00c      	b.n	8003094 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <osEventFlagsNew+0x54>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <osEventFlagsNew+0x54>
          mem = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e001      	b.n	8003094 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f8ec 	bl	800327c <xEventGroupCreateStatic>
 80030a4:	6178      	str	r0, [r7, #20]
 80030a6:	e005      	b.n	80030b4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80030ae:	f000 f91c 	bl	80032ea <xEventGroupCreate>
 80030b2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80030b4:	697b      	ldr	r3, [r7, #20]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <osEventFlagsSet+0x1e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80030de:	f06f 0303 	mvn.w	r3, #3
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e028      	b.n	8003138 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e6:	f3ef 8305 	mrs	r3, IPSR
 80030ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80030ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01d      	beq.n	800312e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	461a      	mov	r2, r3
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	6938      	ldr	r0, [r7, #16]
 8003100:	f000 fa96 	bl	8003630 <xEventGroupSetBitsFromISR>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800310a:	f06f 0302 	mvn.w	r3, #2
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e012      	b.n	8003138 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <osEventFlagsSet+0x78>
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <osEventFlagsSet+0x84>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	e004      	b.n	8003138 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800312e:	6839      	ldr	r1, [r7, #0]
 8003130:	6938      	ldr	r0, [r7, #16]
 8003132:	f000 f9c3 	bl	80034bc <xEventGroupSetBits>
 8003136:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003138:	697b      	ldr	r3, [r7, #20]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <osEventFlagsWait+0x22>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800316a:	f06f 0303 	mvn.w	r3, #3
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	e04b      	b.n	800320a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003172:	f3ef 8305 	mrs	r3, IPSR
 8003176:	617b      	str	r3, [r7, #20]
  return(result);
 8003178:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800317e:	f06f 0305 	mvn.w	r3, #5
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e041      	b.n	800320a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e001      	b.n	800319a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	e001      	b.n	80031ae <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	69b8      	ldr	r0, [r7, #24]
 80031ba:	f000 f8b1 	bl	8003320 <xEventGroupWaitBits>
 80031be:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4013      	ands	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d019      	beq.n	800320a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80031dc:	f06f 0301 	mvn.w	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e012      	b.n	800320a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80031e4:	f06f 0302 	mvn.w	r3, #2
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	e00e      	b.n	800320a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80031fc:	f06f 0301 	mvn.w	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e002      	b.n	800320a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003204:	f06f 0302 	mvn.w	r3, #2
 8003208:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800320a:	69fb      	ldr	r3, [r7, #28]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3728      	adds	r7, #40	; 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <vApplicationGetIdleTaskMemory+0x2c>)
 8003224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <vApplicationGetIdleTaskMemory+0x30>)
 800322a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	240001e4 	.word	0x240001e4
 8003244:	24000240 	.word	0x24000240

08003248 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <vApplicationGetTimerTaskMemory+0x2c>)
 8003258:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <vApplicationGetTimerTaskMemory+0x30>)
 800325e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	24000440 	.word	0x24000440
 8003278:	2400049c 	.word	0x2400049c

0800327c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80032a0:	2320      	movs	r3, #32
 80032a2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d00a      	beq.n	80032c0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	60fb      	str	r3, [r7, #12]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f9bf 	bl	8003658 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2201      	movs	r2, #1
 80032de:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80032e0:	697b      	ldr	r3, [r7, #20]
	}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80032f0:	2020      	movs	r0, #32
 80032f2:	f002 fc91 	bl	8005c18 <pvPortMalloc>
 80032f6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f9a5 	bl	8003658 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003314:	687b      	ldr	r3, [r7, #4]
	}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	; 0x40
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xEventGroupWaitBits+0x36>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	623b      	str	r3, [r7, #32]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <xEventGroupWaitBits+0x56>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	61fb      	str	r3, [r7, #28]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xEventGroupWaitBits+0x72>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61bb      	str	r3, [r7, #24]
}
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003392:	f001 fd89 	bl	8004ea8 <xTaskGetSchedulerState>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <xEventGroupWaitBits+0x82>
 800339c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <xEventGroupWaitBits+0x86>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xEventGroupWaitBits+0x88>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	617b      	str	r3, [r7, #20]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80033c2:	f001 f8f1 	bl	80045a8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033d2:	f000 f90b 	bl	80035ec <prvTestWaitCondition>
 80033d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d028      	beq.n	800343e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80033ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	401a      	ands	r2, r3
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e020      	b.n	800343e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80033fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003406:	2301      	movs	r3, #1
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
 800340a:	e018      	b.n	800343e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342a:	1d18      	adds	r0, r3, #4
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	4313      	orrs	r3, r2
 8003432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003434:	4619      	mov	r1, r3
 8003436:	f001 faaf 	bl	8004998 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800343e:	f001 f8c1 	bl	80045c4 <xTaskResumeAll>
 8003442:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003446:	2b00      	cmp	r3, #0
 8003448:	d031      	beq.n	80034ae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <xEventGroupWaitBits+0x198>)
 8003452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003460:	f001 fdae 	bl	8004fc0 <uxTaskResetEventItemValue>
 8003464:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11a      	bne.n	80034a6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003470:	f002 fab0 	bl	80059d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003480:	f000 f8b4 	bl	80035ec <prvTestWaitCondition>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	43db      	mvns	r3, r3
 8003498:	401a      	ands	r2, r3
 800349a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80034a2:	f002 fac7 	bl	8005a34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80034ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3740      	adds	r7, #64	; 0x40
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	; 0x38
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80034c6:	2300      	movs	r3, #0
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xEventGroupSetBits+0x32>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	613b      	str	r3, [r7, #16]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <xEventGroupSetBits+0x52>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	60fb      	str	r3, [r7, #12]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	3304      	adds	r3, #4
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	3308      	adds	r3, #8
 8003518:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800351a:	f001 f845 	bl	80045a8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	431a      	orrs	r2, r3
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003530:	e03c      	b.n	80035ac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800353e:	2300      	movs	r3, #0
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003548:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003550:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003568:	2301      	movs	r3, #1
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356c:	e008      	b.n	8003580 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	429a      	cmp	r2, r3
 800357a:	d101      	bne.n	8003580 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800357c:	2301      	movs	r3, #1
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a0:	4619      	mov	r1, r3
 80035a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035a4:	f001 fac4 	bl	8004b30 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80035ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1be      	bne.n	8003532 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	43db      	mvns	r3, r3
 80035bc:	401a      	ands	r2, r3
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80035c2:	f000 ffff 	bl	80045c4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	681b      	ldr	r3, [r3, #0]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3738      	adds	r7, #56	; 0x38
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ff6c 	bl	80034bc <xEventGroupSetBits>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e007      	b.n	8003622 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d101      	bne.n	8003622 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003622:	697b      	ldr	r3, [r7, #20]
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	68f9      	ldr	r1, [r7, #12]
 8003642:	4804      	ldr	r0, [pc, #16]	; (8003654 <xEventGroupSetBitsFromISR+0x24>)
 8003644:	f002 f876 	bl	8005734 <xTimerPendFunctionCallFromISR>
 8003648:	6178      	str	r0, [r7, #20]

		return xReturn;
 800364a:	697b      	ldr	r3, [r7, #20]
	}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	080035d3 	.word	0x080035d3

08003658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f103 0208 	add.w	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 0208 	add.w	r2, r3, #8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f103 0208 	add.w	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003710:	d103      	bne.n	800371a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e00c      	b.n	8003734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3308      	adds	r3, #8
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e002      	b.n	8003728 <vListInsert+0x2e>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d2f6      	bcs.n	8003722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6892      	ldr	r2, [r2, #8]
 8003782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6852      	ldr	r2, [r2, #4]
 800378c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d103      	bne.n	80037a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1e5a      	subs	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueGenericReset+0x2a>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	60bb      	str	r3, [r7, #8]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037ea:	f002 f8f3 	bl	80059d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	3b01      	subs	r3, #1
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	441a      	add	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	22ff      	movs	r2, #255	; 0xff
 800382e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	22ff      	movs	r2, #255	; 0xff
 8003836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d114      	bne.n	800386a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3310      	adds	r3, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f90b 	bl	8004a68 <xTaskRemoveFromEventList>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <xQueueGenericReset+0xcc>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	e009      	b.n	800387e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3310      	adds	r3, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fef2 	bl	8003658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff feed 	bl	8003658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800387e:	f002 f8d9 	bl	8005a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003882:	2301      	movs	r3, #1
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08e      	sub	sp, #56	; 0x38
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <xQueueGenericCreateStatic+0x52>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <xQueueGenericCreateStatic+0x56>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueGenericCreateStatic+0x58>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	623b      	str	r3, [r7, #32]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <xQueueGenericCreateStatic+0x7e>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <xQueueGenericCreateStatic+0x82>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericCreateStatic+0x84>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	61fb      	str	r3, [r7, #28]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800392e:	2350      	movs	r3, #80	; 0x50
 8003930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b50      	cmp	r3, #80	; 0x50
 8003936:	d00a      	beq.n	800394e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	61bb      	str	r3, [r7, #24]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800394e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003962:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f805 	bl	8003980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003978:	4618      	mov	r0, r3
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e002      	b.n	80039a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039ae:	2101      	movs	r1, #1
 80039b0:	69b8      	ldr	r0, [r7, #24]
 80039b2:	f7ff ff05 	bl	80037c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	; 0x38
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039d6:	2300      	movs	r3, #0
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueGenericSend+0x32>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <xQueueGenericSend+0x40>
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <xQueueGenericSend+0x44>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <xQueueGenericSend+0x46>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xQueueGenericSend+0x60>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSend+0x6e>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <xQueueGenericSend+0x72>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericSend+0x74>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a56:	f001 fa27 	bl	8004ea8 <xTaskGetSchedulerState>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <xQueueGenericSend+0x9e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <xQueueGenericSend+0xa2>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <xQueueGenericSend+0xa4>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61fb      	str	r3, [r7, #28]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a86:	f001 ffa5 	bl	80059d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <xQueueGenericSend+0xd4>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d129      	bne.n	8003af0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa2:	f000 fa0b 	bl	8003ebc <prvCopyDataToQueue>
 8003aa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	3324      	adds	r3, #36	; 0x24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 ffd7 	bl	8004a68 <xTaskRemoveFromEventList>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <xQueueGenericSend+0x1f8>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	e00a      	b.n	8003ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <xQueueGenericSend+0x1f8>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ae8:	f001 ffa4 	bl	8005a34 <vPortExitCritical>
				return pdPASS;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e063      	b.n	8003bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af6:	f001 ff9d 	bl	8005a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e05c      	b.n	8003bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 f873 	bl	8004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b12:	f001 ff8f 	bl	8005a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b16:	f000 fd47 	bl	80045a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b1a:	f001 ff5b 	bl	80059d4 <vPortEnterCritical>
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b24:	b25b      	sxtb	r3, r3
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2a:	d103      	bne.n	8003b34 <xQueueGenericSend+0x16c>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b40:	d103      	bne.n	8003b4a <xQueueGenericSend+0x182>
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4a:	f001 ff73 	bl	8005a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b4e:	1d3a      	adds	r2, r7, #4
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f862 	bl	8004c20 <xTaskCheckForTimeOut>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d124      	bne.n	8003bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b64:	f000 faa2 	bl	80040ac <prvIsQueueFull>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d018      	beq.n	8003ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	3310      	adds	r3, #16
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 feea 	bl	8004950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7e:	f000 fa2d 	bl	8003fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b82:	f000 fd1f 	bl	80045c4 <xTaskResumeAll>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f af7c 	bne.w	8003a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <xQueueGenericSend+0x1f8>)
 8003b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	e772      	b.n	8003a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba2:	f000 fa1b 	bl	8003fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ba6:	f000 fd0d 	bl	80045c4 <xTaskResumeAll>
 8003baa:	e76c      	b.n	8003a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bae:	f000 fa15 	bl	8003fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bb2:	f000 fd07 	bl	80045c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3738      	adds	r7, #56	; 0x38
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b090      	sub	sp, #64	; 0x40
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <xQueueGenericSendFromISR+0x3c>
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <xQueueGenericSendFromISR+0x40>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <xQueueGenericSendFromISR+0x42>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d103      	bne.n	8003c2e <xQueueGenericSendFromISR+0x6a>
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <xQueueGenericSendFromISR+0x6e>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <xQueueGenericSendFromISR+0x70>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	623b      	str	r3, [r7, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c4e:	f001 ffa3 	bl	8005b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c52:	f3ef 8211 	mrs	r2, BASEPRI
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	61fa      	str	r2, [r7, #28]
 8003c68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <xQueueGenericSendFromISR+0xbc>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d12f      	bne.n	8003ce0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c96:	f000 f911 	bl	8003ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d112      	bne.n	8003cca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	3324      	adds	r3, #36	; 0x24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fed9 	bl	8004a68 <xTaskRemoveFromEventList>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e007      	b.n	8003cda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cce:	3301      	adds	r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	b25a      	sxtb	r2, r3
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003cde:	e001      	b.n	8003ce4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3740      	adds	r7, #64	; 0x40
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <xQueueReceive+0x30>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	623b      	str	r3, [r7, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <xQueueReceive+0x3e>
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <xQueueReceive+0x42>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <xQueueReceive+0x44>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xQueueReceive+0x5e>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	61fb      	str	r3, [r7, #28]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d5a:	f001 f8a5 	bl	8004ea8 <xTaskGetSchedulerState>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <xQueueReceive+0x6e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <xQueueReceive+0x72>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <xQueueReceive+0x74>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueReceive+0x8e>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	61bb      	str	r3, [r7, #24]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d8a:	f001 fe23 	bl	80059d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01f      	beq.n	8003dda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9e:	f000 f8f7 	bl	8003f90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	1e5a      	subs	r2, r3, #1
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00f      	beq.n	8003dd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	3310      	adds	r3, #16
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fe56 	bl	8004a68 <xTaskRemoveFromEventList>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <xQueueReceive+0x1bc>)
 8003dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dd2:	f001 fe2f 	bl	8005a34 <vPortExitCritical>
				return pdPASS;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e069      	b.n	8003eae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003de0:	f001 fe28 	bl	8005a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e062      	b.n	8003eae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dee:	f107 0310 	add.w	r3, r7, #16
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fefe 	bl	8004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dfc:	f001 fe1a 	bl	8005a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e00:	f000 fbd2 	bl	80045a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e04:	f001 fde6 	bl	80059d4 <vPortEnterCritical>
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e0e:	b25b      	sxtb	r3, r3
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e14:	d103      	bne.n	8003e1e <xQueueReceive+0x122>
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e24:	b25b      	sxtb	r3, r3
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2a:	d103      	bne.n	8003e34 <xQueueReceive+0x138>
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e34:	f001 fdfe 	bl	8005a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e38:	1d3a      	adds	r2, r7, #4
 8003e3a:	f107 0310 	add.w	r3, r7, #16
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 feed 	bl	8004c20 <xTaskCheckForTimeOut>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d123      	bne.n	8003e94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4e:	f000 f917 	bl	8004080 <prvIsQueueEmpty>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d017      	beq.n	8003e88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fd75 	bl	8004950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e68:	f000 f8b8 	bl	8003fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e6c:	f000 fbaa 	bl	80045c4 <xTaskResumeAll>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d189      	bne.n	8003d8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <xQueueReceive+0x1bc>)
 8003e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	e780      	b.n	8003d8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e8a:	f000 f8a7 	bl	8003fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e8e:	f000 fb99 	bl	80045c4 <xTaskResumeAll>
 8003e92:	e77a      	b.n	8003d8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e96:	f000 f8a1 	bl	8003fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e9a:	f000 fb93 	bl	80045c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea0:	f000 f8ee 	bl	8004080 <prvIsQueueEmpty>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f43f af6f 	beq.w	8003d8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3730      	adds	r7, #48	; 0x30
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d14d      	bne.n	8003f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fffc 	bl	8004ee4 <xTaskPriorityDisinherit>
 8003eec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	e043      	b.n	8003f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d119      	bne.n	8003f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6858      	ldr	r0, [r3, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	461a      	mov	r2, r3
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	f002 f89a 	bl	8006040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d32b      	bcc.n	8003f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	e026      	b.n	8003f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68d8      	ldr	r0, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	f002 f880 	bl	8006040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	425b      	negs	r3, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d207      	bcs.n	8003f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	425b      	negs	r3, r3
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d105      	bne.n	8003f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f86:	697b      	ldr	r3, [r7, #20]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d018      	beq.n	8003fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	441a      	add	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d303      	bcc.n	8003fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68d9      	ldr	r1, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6838      	ldr	r0, [r7, #0]
 8003fd0:	f002 f836 	bl	8006040 <memcpy>
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fe4:	f001 fcf6 	bl	80059d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ff0:	e011      	b.n	8004016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3324      	adds	r3, #36	; 0x24
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fd32 	bl	8004a68 <xTaskRemoveFromEventList>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800400a:	f000 fe6b 	bl	8004ce4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	3b01      	subs	r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	dce9      	bgt.n	8003ff2 <prvUnlockQueue+0x16>
 800401e:	e000      	b.n	8004022 <prvUnlockQueue+0x46>
					break;
 8004020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	22ff      	movs	r2, #255	; 0xff
 8004026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800402a:	f001 fd03 	bl	8005a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800402e:	f001 fcd1 	bl	80059d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800403a:	e011      	b.n	8004060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d012      	beq.n	800406a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3310      	adds	r3, #16
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fd0d 	bl	8004a68 <xTaskRemoveFromEventList>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004054:	f000 fe46 	bl	8004ce4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004058:	7bbb      	ldrb	r3, [r7, #14]
 800405a:	3b01      	subs	r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dce9      	bgt.n	800403c <prvUnlockQueue+0x60>
 8004068:	e000      	b.n	800406c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800406a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	22ff      	movs	r2, #255	; 0xff
 8004070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004074:	f001 fcde 	bl	8005a34 <vPortExitCritical>
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004088:	f001 fca4 	bl	80059d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e001      	b.n	800409e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800409e:	f001 fcc9 	bl	8005a34 <vPortExitCritical>

	return xReturn;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040b4:	f001 fc8e 	bl	80059d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d102      	bne.n	80040ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e001      	b.n	80040ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ce:	f001 fcb1 	bl	8005a34 <vPortExitCritical>

	return xReturn;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e014      	b.n	8004116 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040ec:	4a0f      	ldr	r2, [pc, #60]	; (800412c <vQueueAddToRegistry+0x50>)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040f8:	490c      	ldr	r1, [pc, #48]	; (800412c <vQueueAddToRegistry+0x50>)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <vQueueAddToRegistry+0x50>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800410e:	e006      	b.n	800411e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b07      	cmp	r3, #7
 800411a:	d9e7      	bls.n	80040ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2400089c 	.word	0x2400089c

08004130 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004140:	f001 fc48 	bl	80059d4 <vPortEnterCritical>
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800414a:	b25b      	sxtb	r3, r3
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004150:	d103      	bne.n	800415a <vQueueWaitForMessageRestricted+0x2a>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004160:	b25b      	sxtb	r3, r3
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004166:	d103      	bne.n	8004170 <vQueueWaitForMessageRestricted+0x40>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004170:	f001 fc60 	bl	8005a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3324      	adds	r3, #36	; 0x24
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fc43 	bl	8004a10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff26 	bl	8003fdc <prvUnlockQueue>
	}
 8004190:	bf00      	nop
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af04      	add	r7, sp, #16
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	623b      	str	r3, [r7, #32]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xTaskCreateStatic+0x46>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61fb      	str	r3, [r7, #28]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041de:	235c      	movs	r3, #92	; 0x5c
 80041e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b5c      	cmp	r3, #92	; 0x5c
 80041e6:	d00a      	beq.n	80041fe <xTaskCreateStatic+0x66>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	61bb      	str	r3, [r7, #24]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01e      	beq.n	8004244 <xTaskCreateStatic+0xac>
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004214:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800421e:	2300      	movs	r3, #0
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	9302      	str	r3, [sp, #8]
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f850 	bl	80042dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800423c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800423e:	f000 f8dd 	bl	80043fc <prvAddNewTaskToReadyList>
 8004242:	e001      	b.n	8004248 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004248:	697b      	ldr	r3, [r7, #20]
	}
 800424a:	4618      	mov	r0, r3
 800424c:	3728      	adds	r7, #40	; 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004252:	b580      	push	{r7, lr}
 8004254:	b08c      	sub	sp, #48	; 0x30
 8004256:	af04      	add	r7, sp, #16
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f001 fcd6 	bl	8005c18 <pvPortMalloc>
 800426c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004274:	205c      	movs	r0, #92	; 0x5c
 8004276:	f001 fccf 	bl	8005c18 <pvPortMalloc>
 800427a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
 8004288:	e005      	b.n	8004296 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f001 fd90 	bl	8005db0 <vPortFree>
 8004290:	e001      	b.n	8004296 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d017      	beq.n	80042cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9303      	str	r3, [sp, #12]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f80e 	bl	80042dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042c0:	69f8      	ldr	r0, [r7, #28]
 80042c2:	f000 f89b 	bl	80043fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e002      	b.n	80042d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042d2:	69bb      	ldr	r3, [r7, #24]
	}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	461a      	mov	r2, r3
 80042f4:	21a5      	movs	r1, #165	; 0xa5
 80042f6:	f001 feb1 	bl	800605c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004304:	440b      	add	r3, r1
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <prvInitialiseNewTask+0x58>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	617b      	str	r3, [r7, #20]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01f      	beq.n	800437a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e012      	b.n	8004366 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	7819      	ldrb	r1, [r3, #0]
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	3334      	adds	r3, #52	; 0x34
 8004350:	460a      	mov	r2, r1
 8004352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d9e9      	bls.n	8004340 <prvInitialiseNewTask+0x64>
 800436c:	e000      	b.n	8004370 <prvInitialiseNewTask+0x94>
			{
				break;
 800436e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004378:	e003      	b.n	8004382 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	2b37      	cmp	r3, #55	; 0x37
 8004386:	d901      	bls.n	800438c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004388:	2337      	movs	r3, #55	; 0x37
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	2200      	movs	r2, #0
 800439c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f978 	bl	8003698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	3318      	adds	r3, #24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f973 	bl	8003698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	2200      	movs	r2, #0
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	69b8      	ldr	r0, [r7, #24]
 80043dc:	f001 f9ca 	bl	8005774 <pxPortInitialiseStack>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043f2:	bf00      	nop
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004404:	f001 fae6 	bl	80059d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004408:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <prvAddNewTaskToReadyList+0xc4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <prvAddNewTaskToReadyList+0xc4>)
 8004410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004420:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <prvAddNewTaskToReadyList+0xc4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d110      	bne.n	800444a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004428:	f000 fc80 	bl	8004d2c <prvInitialiseTaskLists>
 800442c:	e00d      	b.n	800444a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <prvAddNewTaskToReadyList+0xcc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	429a      	cmp	r2, r3
 8004442:	d802      	bhi.n	800444a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <prvAddNewTaskToReadyList+0xd0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <prvAddNewTaskToReadyList+0xd0>)
 8004452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <prvAddNewTaskToReadyList+0xd0>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <prvAddNewTaskToReadyList+0xd4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d903      	bls.n	8004470 <prvAddNewTaskToReadyList+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <prvAddNewTaskToReadyList+0xd4>)
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <prvAddNewTaskToReadyList+0xd8>)
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f7ff f913 	bl	80036b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800448c:	f001 fad2 	bl	8005a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <prvAddNewTaskToReadyList+0xcc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d207      	bcs.n	80044b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <prvAddNewTaskToReadyList+0xdc>)
 80044a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000db0 	.word	0x24000db0
 80044c4:	240008dc 	.word	0x240008dc
 80044c8:	24000dbc 	.word	0x24000dbc
 80044cc:	24000dcc 	.word	0x24000dcc
 80044d0:	24000db8 	.word	0x24000db8
 80044d4:	240008e0 	.word	0x240008e0
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ea:	463a      	mov	r2, r7
 80044ec:	1d39      	adds	r1, r7, #4
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fe8e 	bl	8003214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	9202      	str	r2, [sp, #8]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	460a      	mov	r2, r1
 800450a:	4921      	ldr	r1, [pc, #132]	; (8004590 <vTaskStartScheduler+0xb4>)
 800450c:	4821      	ldr	r0, [pc, #132]	; (8004594 <vTaskStartScheduler+0xb8>)
 800450e:	f7ff fe43 	bl	8004198 <xTaskCreateStatic>
 8004512:	4603      	mov	r3, r0
 8004514:	4a20      	ldr	r2, [pc, #128]	; (8004598 <vTaskStartScheduler+0xbc>)
 8004516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <vTaskStartScheduler+0xbc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e001      	b.n	800452a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004530:	f000 fdb2 	bl	8005098 <xTimerCreateTimerTask>
 8004534:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d116      	bne.n	800456a <vTaskStartScheduler+0x8e>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	613b      	str	r3, [r7, #16]
}
 800454e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <vTaskStartScheduler+0xc0>)
 8004552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004556:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <vTaskStartScheduler+0xc4>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <vTaskStartScheduler+0xc8>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004564:	f001 f994 	bl	8005890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004568:	e00e      	b.n	8004588 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d10a      	bne.n	8004588 <vTaskStartScheduler+0xac>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60fb      	str	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vTaskStartScheduler+0xaa>
}
 8004588:	bf00      	nop
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	08007108 	.word	0x08007108
 8004594:	08004cfd 	.word	0x08004cfd
 8004598:	24000dd4 	.word	0x24000dd4
 800459c:	24000dd0 	.word	0x24000dd0
 80045a0:	24000dbc 	.word	0x24000dbc
 80045a4:	24000db4 	.word	0x24000db4

080045a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <vTaskSuspendAll+0x18>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <vTaskSuspendAll+0x18>)
 80045b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	24000dd8 	.word	0x24000dd8

080045c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045d2:	4b42      	ldr	r3, [pc, #264]	; (80046dc <xTaskResumeAll+0x118>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	603b      	str	r3, [r7, #0]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045f0:	f001 f9f0 	bl	80059d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <xTaskResumeAll+0x118>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	4a38      	ldr	r2, [pc, #224]	; (80046dc <xTaskResumeAll+0x118>)
 80045fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <xTaskResumeAll+0x118>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d162      	bne.n	80046cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <xTaskResumeAll+0x11c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d05e      	beq.n	80046cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800460e:	e02f      	b.n	8004670 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <xTaskResumeAll+0x120>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3318      	adds	r3, #24
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff f8a5 	bl	800376c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f8a0 	bl	800376c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <xTaskResumeAll+0x124>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d903      	bls.n	8004640 <xTaskResumeAll+0x7c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <xTaskResumeAll+0x124>)
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4a27      	ldr	r2, [pc, #156]	; (80046ec <xTaskResumeAll+0x128>)
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f7ff f82b 	bl	80036b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <xTaskResumeAll+0x12c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800466a:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <xTaskResumeAll+0x130>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004670:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <xTaskResumeAll+0x120>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1cb      	bne.n	8004610 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800467e:	f000 fbf3 	bl	8004e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <xTaskResumeAll+0x134>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800468e:	f000 f847 	bl	8004720 <xTaskIncrementTick>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004698:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <xTaskResumeAll+0x130>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f1      	bne.n	800468e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <xTaskResumeAll+0x134>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <xTaskResumeAll+0x130>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <xTaskResumeAll+0x138>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046cc:	f001 f9b2 	bl	8005a34 <vPortExitCritical>

	return xAlreadyYielded;
 80046d0:	68bb      	ldr	r3, [r7, #8]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	24000dd8 	.word	0x24000dd8
 80046e0:	24000db0 	.word	0x24000db0
 80046e4:	24000d70 	.word	0x24000d70
 80046e8:	24000db8 	.word	0x24000db8
 80046ec:	240008e0 	.word	0x240008e0
 80046f0:	240008dc 	.word	0x240008dc
 80046f4:	24000dc4 	.word	0x24000dc4
 80046f8:	24000dc0 	.word	0x24000dc0
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <xTaskGetTickCount+0x1c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800470c:	687b      	ldr	r3, [r7, #4]
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	24000db4 	.word	0x24000db4

08004720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800472a:	4b4f      	ldr	r3, [pc, #316]	; (8004868 <xTaskIncrementTick+0x148>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 808f 	bne.w	8004852 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004734:	4b4d      	ldr	r3, [pc, #308]	; (800486c <xTaskIncrementTick+0x14c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800473c:	4a4b      	ldr	r2, [pc, #300]	; (800486c <xTaskIncrementTick+0x14c>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d120      	bne.n	800478a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004748:	4b49      	ldr	r3, [pc, #292]	; (8004870 <xTaskIncrementTick+0x150>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <xTaskIncrementTick+0x48>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	603b      	str	r3, [r7, #0]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xTaskIncrementTick+0x46>
 8004768:	4b41      	ldr	r3, [pc, #260]	; (8004870 <xTaskIncrementTick+0x150>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <xTaskIncrementTick+0x154>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3f      	ldr	r2, [pc, #252]	; (8004870 <xTaskIncrementTick+0x150>)
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <xTaskIncrementTick+0x154>)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <xTaskIncrementTick+0x158>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a3d      	ldr	r2, [pc, #244]	; (8004878 <xTaskIncrementTick+0x158>)
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	f000 fb6f 	bl	8004e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800478a:	4b3c      	ldr	r3, [pc, #240]	; (800487c <xTaskIncrementTick+0x15c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	429a      	cmp	r2, r3
 8004792:	d349      	bcc.n	8004828 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <xTaskIncrementTick+0x150>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <xTaskIncrementTick+0x15c>)
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047a4:	601a      	str	r2, [r3, #0]
					break;
 80047a6:	e03f      	b.n	8004828 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a8:	4b31      	ldr	r3, [pc, #196]	; (8004870 <xTaskIncrementTick+0x150>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d203      	bcs.n	80047c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047c0:	4a2e      	ldr	r2, [pc, #184]	; (800487c <xTaskIncrementTick+0x15c>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047c6:	e02f      	b.n	8004828 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe ffcd 	bl	800376c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d004      	beq.n	80047e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3318      	adds	r3, #24
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe ffc4 	bl	800376c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <xTaskIncrementTick+0x160>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d903      	bls.n	80047f8 <xTaskIncrementTick+0xd8>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <xTaskIncrementTick+0x160>)
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <xTaskIncrementTick+0x164>)
 8004806:	441a      	add	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7fe ff4f 	bl	80036b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <xTaskIncrementTick+0x168>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	429a      	cmp	r2, r3
 8004820:	d3b8      	bcc.n	8004794 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004826:	e7b5      	b.n	8004794 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004828:	4b17      	ldr	r3, [pc, #92]	; (8004888 <xTaskIncrementTick+0x168>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	4915      	ldr	r1, [pc, #84]	; (8004884 <xTaskIncrementTick+0x164>)
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d901      	bls.n	8004844 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <xTaskIncrementTick+0x16c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e004      	b.n	800485c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <xTaskIncrementTick+0x170>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <xTaskIncrementTick+0x170>)
 800485a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800485c:	697b      	ldr	r3, [r7, #20]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	24000dd8 	.word	0x24000dd8
 800486c:	24000db4 	.word	0x24000db4
 8004870:	24000d68 	.word	0x24000d68
 8004874:	24000d6c 	.word	0x24000d6c
 8004878:	24000dc8 	.word	0x24000dc8
 800487c:	24000dd0 	.word	0x24000dd0
 8004880:	24000db8 	.word	0x24000db8
 8004884:	240008e0 	.word	0x240008e0
 8004888:	240008dc 	.word	0x240008dc
 800488c:	24000dc4 	.word	0x24000dc4
 8004890:	24000dc0 	.word	0x24000dc0

08004894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800489a:	4b28      	ldr	r3, [pc, #160]	; (800493c <vTaskSwitchContext+0xa8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048a2:	4b27      	ldr	r3, [pc, #156]	; (8004940 <vTaskSwitchContext+0xac>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048a8:	e041      	b.n	800492e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80048aa:	4b25      	ldr	r3, [pc, #148]	; (8004940 <vTaskSwitchContext+0xac>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <vTaskSwitchContext+0xb0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e010      	b.n	80048da <vTaskSwitchContext+0x46>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <vTaskSwitchContext+0x3e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	491b      	ldr	r1, [pc, #108]	; (8004948 <vTaskSwitchContext+0xb4>)
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0e4      	beq.n	80048b8 <vTaskSwitchContext+0x24>
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <vTaskSwitchContext+0xb4>)
 80048fa:	4413      	add	r3, r2
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	3308      	adds	r3, #8
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <vTaskSwitchContext+0x8a>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <vTaskSwitchContext+0xb8>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	4a06      	ldr	r2, [pc, #24]	; (8004944 <vTaskSwitchContext+0xb0>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6013      	str	r3, [r2, #0]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	24000dd8 	.word	0x24000dd8
 8004940:	24000dc4 	.word	0x24000dc4
 8004944:	24000db8 	.word	0x24000db8
 8004948:	240008e0 	.word	0x240008e0
 800494c:	240008dc 	.word	0x240008dc

08004950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <vTaskPlaceOnEventList+0x44>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3318      	adds	r3, #24
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe febb 	bl	80036fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004984:	2101      	movs	r1, #1
 8004986:	6838      	ldr	r0, [r7, #0]
 8004988:	f000 fb32 	bl	8004ff0 <prvAddCurrentTaskToDelayedList>
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	240008dc 	.word	0x240008dc

08004998 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	617b      	str	r3, [r7, #20]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <vTaskPlaceOnUnorderedEventList+0x70>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	613b      	str	r3, [r7, #16]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80049de:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <vTaskPlaceOnUnorderedEventList+0x74>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80049e8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <vTaskPlaceOnUnorderedEventList+0x74>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3318      	adds	r3, #24
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7fe fe5d 	bl	80036b2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049f8:	2101      	movs	r1, #1
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 faf8 	bl	8004ff0 <prvAddCurrentTaskToDelayedList>
}
 8004a00:	bf00      	nop
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	24000dd8 	.word	0x24000dd8
 8004a0c:	240008dc 	.word	0x240008dc

08004a10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	617b      	str	r3, [r7, #20]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7fe fe36 	bl	80036b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	68b8      	ldr	r0, [r7, #8]
 8004a56:	f000 facb 	bl	8004ff0 <prvAddCurrentTaskToDelayedList>
	}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	240008dc 	.word	0x240008dc

08004a68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60fb      	str	r3, [r7, #12]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3318      	adds	r3, #24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe fe67 	bl	800376c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <xTaskRemoveFromEventList+0xb0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11d      	bne.n	8004ae2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fe5e 	bl	800376c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <xTaskRemoveFromEventList+0xb4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d903      	bls.n	8004ac4 <xTaskRemoveFromEventList+0x5c>
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <xTaskRemoveFromEventList+0xb4>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <xTaskRemoveFromEventList+0xb8>)
 8004ad2:	441a      	add	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7fe fde9 	bl	80036b2 <vListInsertEnd>
 8004ae0:	e005      	b.n	8004aee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3318      	adds	r3, #24
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	480e      	ldr	r0, [pc, #56]	; (8004b24 <xTaskRemoveFromEventList+0xbc>)
 8004aea:	f7fe fde2 	bl	80036b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <xTaskRemoveFromEventList+0xc0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d905      	bls.n	8004b08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <xTaskRemoveFromEventList+0xc4>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e001      	b.n	8004b0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b0c:	697b      	ldr	r3, [r7, #20]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	24000dd8 	.word	0x24000dd8
 8004b1c:	24000db8 	.word	0x24000db8
 8004b20:	240008e0 	.word	0x240008e0
 8004b24:	24000d70 	.word	0x24000d70
 8004b28:	240008dc 	.word	0x240008dc
 8004b2c:	24000dc4 	.word	0x24000dc4

08004b30 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004b3a:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	613b      	str	r3, [r7, #16]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60fb      	str	r3, [r7, #12]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fe fdf1 	bl	800376c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fdec 	bl	800376c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d903      	bls.n	8004ba8 <vTaskRemoveFromUnorderedEventList+0x78>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004bb6:	441a      	add	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fe fd77 	bl	80036b2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d902      	bls.n	8004bd8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
	}
}
 8004bd8:	bf00      	nop
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	24000dd8 	.word	0x24000dd8
 8004be4:	24000db8 	.word	0x24000db8
 8004be8:	240008e0 	.word	0x240008e0
 8004bec:	240008dc 	.word	0x240008dc
 8004bf0:	24000dc4 	.word	0x24000dc4

08004bf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <vTaskInternalSetTimeOutState+0x24>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <vTaskInternalSetTimeOutState+0x28>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	24000dc8 	.word	0x24000dc8
 8004c1c:	24000db4 	.word	0x24000db4

08004c20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c62:	f000 feb7 	bl	80059d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <xTaskCheckForTimeOut+0xbc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7e:	d102      	bne.n	8004c86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e023      	b.n	8004cce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <xTaskCheckForTimeOut+0xc0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d007      	beq.n	8004ca2 <xTaskCheckForTimeOut+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e015      	b.n	8004cce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d20b      	bcs.n	8004cc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff9b 	bl	8004bf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e004      	b.n	8004cce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cce:	f000 feb1 	bl	8005a34 <vPortExitCritical>

	return xReturn;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	24000db4 	.word	0x24000db4
 8004ce0:	24000dc8 	.word	0x24000dc8

08004ce4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <vTaskMissedYield+0x14>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	24000dc4 	.word	0x24000dc4

08004cfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d04:	f000 f852 	bl	8004dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <prvIdleTask+0x28>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d9f9      	bls.n	8004d04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <prvIdleTask+0x2c>)
 8004d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d20:	e7f0      	b.n	8004d04 <prvIdleTask+0x8>
 8004d22:	bf00      	nop
 8004d24:	240008e0 	.word	0x240008e0
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	e00c      	b.n	8004d52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <prvInitialiseTaskLists+0x60>)
 8004d44:	4413      	add	r3, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fc86 	bl	8003658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b37      	cmp	r3, #55	; 0x37
 8004d56:	d9ef      	bls.n	8004d38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d58:	480d      	ldr	r0, [pc, #52]	; (8004d90 <prvInitialiseTaskLists+0x64>)
 8004d5a:	f7fe fc7d 	bl	8003658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d5e:	480d      	ldr	r0, [pc, #52]	; (8004d94 <prvInitialiseTaskLists+0x68>)
 8004d60:	f7fe fc7a 	bl	8003658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d64:	480c      	ldr	r0, [pc, #48]	; (8004d98 <prvInitialiseTaskLists+0x6c>)
 8004d66:	f7fe fc77 	bl	8003658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d6a:	480c      	ldr	r0, [pc, #48]	; (8004d9c <prvInitialiseTaskLists+0x70>)
 8004d6c:	f7fe fc74 	bl	8003658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d70:	480b      	ldr	r0, [pc, #44]	; (8004da0 <prvInitialiseTaskLists+0x74>)
 8004d72:	f7fe fc71 	bl	8003658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <prvInitialiseTaskLists+0x78>)
 8004d78:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <prvInitialiseTaskLists+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <prvInitialiseTaskLists+0x7c>)
 8004d7e:	4a05      	ldr	r2, [pc, #20]	; (8004d94 <prvInitialiseTaskLists+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	240008e0 	.word	0x240008e0
 8004d90:	24000d40 	.word	0x24000d40
 8004d94:	24000d54 	.word	0x24000d54
 8004d98:	24000d70 	.word	0x24000d70
 8004d9c:	24000d84 	.word	0x24000d84
 8004da0:	24000d9c 	.word	0x24000d9c
 8004da4:	24000d68 	.word	0x24000d68
 8004da8:	24000d6c 	.word	0x24000d6c

08004dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db2:	e019      	b.n	8004de8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004db4:	f000 fe0e 	bl	80059d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <prvCheckTasksWaitingTermination+0x50>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe fcd1 	bl	800376c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <prvCheckTasksWaitingTermination+0x54>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	4a0b      	ldr	r2, [pc, #44]	; (8004e00 <prvCheckTasksWaitingTermination+0x54>)
 8004dd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <prvCheckTasksWaitingTermination+0x58>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <prvCheckTasksWaitingTermination+0x58>)
 8004ddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dde:	f000 fe29 	bl	8005a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f810 	bl	8004e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <prvCheckTasksWaitingTermination+0x58>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e1      	bne.n	8004db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	24000d84 	.word	0x24000d84
 8004e00:	24000db0 	.word	0x24000db0
 8004e04:	24000d98 	.word	0x24000d98

08004e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d108      	bne.n	8004e2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 ffc6 	bl	8005db0 <vPortFree>
				vPortFree( pxTCB );
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 ffc3 	bl	8005db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e2a:	e018      	b.n	8004e5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d103      	bne.n	8004e3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 ffba 	bl	8005db0 <vPortFree>
	}
 8004e3c:	e00f      	b.n	8004e5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d00a      	beq.n	8004e5e <prvDeleteTCB+0x56>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	60fb      	str	r3, [r7, #12]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <prvDeleteTCB+0x54>
	}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <prvResetNextTaskUnblockTime+0x38>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e80:	e008      	b.n	8004e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <prvResetNextTaskUnblockTime+0x38>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	24000d68 	.word	0x24000d68
 8004ea4:	24000dd0 	.word	0x24000dd0

08004ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eae:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <xTaskGetSchedulerState+0x34>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	e008      	b.n	8004ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <xTaskGetSchedulerState+0x38>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	e001      	b.n	8004ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ece:	687b      	ldr	r3, [r7, #4]
	}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	24000dbc 	.word	0x24000dbc
 8004ee0:	24000dd8 	.word	0x24000dd8

08004ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d056      	beq.n	8004fa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <xTaskPriorityDisinherit+0xd0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d00a      	beq.n	8004f1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60bb      	str	r3, [r7, #8]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d02c      	beq.n	8004fa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d128      	bne.n	8004fa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe fc06 	bl	800376c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <xTaskPriorityDisinherit+0xd4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d903      	bls.n	8004f88 <xTaskPriorityDisinherit+0xa4>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <xTaskPriorityDisinherit+0xd4>)
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <xTaskPriorityDisinherit+0xd8>)
 8004f96:	441a      	add	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fe fb87 	bl	80036b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fa8:	697b      	ldr	r3, [r7, #20]
	}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	240008dc 	.word	0x240008dc
 8004fb8:	24000db8 	.word	0x24000db8
 8004fbc:	240008e0 	.word	0x240008e0

08004fc0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <uxTaskResetEventItemValue+0x2c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <uxTaskResetEventItemValue+0x2c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <uxTaskResetEventItemValue+0x2c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004fdc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004fde:	687b      	ldr	r3, [r7, #4]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	240008dc 	.word	0x240008dc

08004ff0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <prvAddCurrentTaskToDelayedList+0x94>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3304      	adds	r3, #4
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fbb0 	bl	800376c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005012:	d10a      	bne.n	800502a <prvAddCurrentTaskToDelayedList+0x3a>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501a:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <prvAddCurrentTaskToDelayedList+0x94>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4819      	ldr	r0, [pc, #100]	; (8005088 <prvAddCurrentTaskToDelayedList+0x98>)
 8005024:	f7fe fb45 	bl	80036b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005028:	e026      	b.n	8005078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <prvAddCurrentTaskToDelayedList+0x94>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	429a      	cmp	r2, r3
 8005040:	d209      	bcs.n	8005056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <prvAddCurrentTaskToDelayedList+0x94>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3304      	adds	r3, #4
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f7fe fb53 	bl	80036fa <vListInsert>
}
 8005054:	e010      	b.n	8005078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <prvAddCurrentTaskToDelayedList+0x94>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fe fb49 	bl	80036fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	d202      	bcs.n	8005078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6013      	str	r3, [r2, #0]
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	24000db4 	.word	0x24000db4
 8005084:	240008dc 	.word	0x240008dc
 8005088:	24000d9c 	.word	0x24000d9c
 800508c:	24000d6c 	.word	0x24000d6c
 8005090:	24000d68 	.word	0x24000d68
 8005094:	24000dd0 	.word	0x24000dd0

08005098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050a2:	f000 fb07 	bl	80056b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050a6:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <xTimerCreateTimerTask+0x80>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d021      	beq.n	80050f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050b6:	1d3a      	adds	r2, r7, #4
 80050b8:	f107 0108 	add.w	r1, r7, #8
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe f8c1 	bl	8003248 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	9202      	str	r2, [sp, #8]
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	2302      	movs	r3, #2
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	460a      	mov	r2, r1
 80050d8:	4910      	ldr	r1, [pc, #64]	; (800511c <xTimerCreateTimerTask+0x84>)
 80050da:	4811      	ldr	r0, [pc, #68]	; (8005120 <xTimerCreateTimerTask+0x88>)
 80050dc:	f7ff f85c 	bl	8004198 <xTaskCreateStatic>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4a10      	ldr	r2, [pc, #64]	; (8005124 <xTimerCreateTimerTask+0x8c>)
 80050e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <xTimerCreateTimerTask+0x8c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050ee:	2301      	movs	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	613b      	str	r3, [r7, #16]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800510e:	697b      	ldr	r3, [r7, #20]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	24000e0c 	.word	0x24000e0c
 800511c:	08007110 	.word	0x08007110
 8005120:	0800525d 	.word	0x0800525d
 8005124:	24000e10 	.word	0x24000e10

08005128 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	623b      	str	r3, [r7, #32]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <xTimerGenericCommand+0x98>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02a      	beq.n	80051b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b05      	cmp	r3, #5
 800516e:	dc18      	bgt.n	80051a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005170:	f7ff fe9a 	bl	8004ea8 <xTaskGetSchedulerState>
 8005174:	4603      	mov	r3, r0
 8005176:	2b02      	cmp	r3, #2
 8005178:	d109      	bne.n	800518e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <xTimerGenericCommand+0x98>)
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	f107 0110 	add.w	r1, r7, #16
 8005182:	2300      	movs	r3, #0
 8005184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005186:	f7fe fc1f 	bl	80039c8 <xQueueGenericSend>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24
 800518c:	e012      	b.n	80051b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <xTimerGenericCommand+0x98>)
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	f107 0110 	add.w	r1, r7, #16
 8005196:	2300      	movs	r3, #0
 8005198:	2200      	movs	r2, #0
 800519a:	f7fe fc15 	bl	80039c8 <xQueueGenericSend>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24
 80051a0:	e008      	b.n	80051b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051a2:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <xTimerGenericCommand+0x98>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	f107 0110 	add.w	r1, r7, #16
 80051aa:	2300      	movs	r3, #0
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	f7fe fd09 	bl	8003bc4 <xQueueGenericSendFromISR>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3728      	adds	r7, #40	; 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	24000e0c 	.word	0x24000e0c

080051c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ce:	4b22      	ldr	r3, [pc, #136]	; (8005258 <prvProcessExpiredTimer+0x94>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3304      	adds	r3, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fac5 	bl	800376c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d022      	beq.n	8005236 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	699a      	ldr	r2, [r3, #24]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	18d1      	adds	r1, r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	6978      	ldr	r0, [r7, #20]
 80051fe:	f000 f8d1 	bl	80053a4 <prvInsertTimerInActiveList>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01f      	beq.n	8005248 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005208:	2300      	movs	r3, #0
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	2300      	movs	r3, #0
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	2100      	movs	r1, #0
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f7ff ff88 	bl	8005128 <xTimerGenericCommand>
 8005218:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d113      	bne.n	8005248 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	b2da      	uxtb	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	4798      	blx	r3
}
 8005250:	bf00      	nop
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	24000e04 	.word	0x24000e04

0800525c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f857 	bl	800531c <prvGetNextExpireTime>
 800526e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4619      	mov	r1, r3
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f803 	bl	8005280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800527a:	f000 f8d5 	bl	8005428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800527e:	e7f1      	b.n	8005264 <prvTimerTask+0x8>

08005280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800528a:	f7ff f98d 	bl	80045a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f866 	bl	8005364 <prvSampleTimeNow>
 8005298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d130      	bne.n	8005302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <prvProcessTimerOrBlockTask+0x3c>
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d806      	bhi.n	80052bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052ae:	f7ff f989 	bl	80045c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff85 	bl	80051c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052ba:	e024      	b.n	8005306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052c2:	4b13      	ldr	r3, [pc, #76]	; (8005310 <prvProcessTimerOrBlockTask+0x90>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <prvProcessTimerOrBlockTask+0x50>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <prvProcessTimerOrBlockTask+0x52>
 80052d0:	2300      	movs	r3, #0
 80052d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052d4:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <prvProcessTimerOrBlockTask+0x94>)
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	f7fe ff25 	bl	8004130 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052e6:	f7ff f96d 	bl	80045c4 <xTaskResumeAll>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <prvProcessTimerOrBlockTask+0x98>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
}
 8005300:	e001      	b.n	8005306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005302:	f7ff f95f 	bl	80045c4 <xTaskResumeAll>
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	24000e08 	.word	0x24000e08
 8005314:	24000e0c 	.word	0x24000e0c
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <prvGetNextExpireTime+0x44>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <prvGetNextExpireTime+0x16>
 800532e:	2201      	movs	r2, #1
 8005330:	e000      	b.n	8005334 <prvGetNextExpireTime+0x18>
 8005332:	2200      	movs	r2, #0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <prvGetNextExpireTime+0x44>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e001      	b.n	8005350 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	24000e04 	.word	0x24000e04

08005364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800536c:	f7ff f9c8 	bl	8004700 <xTaskGetTickCount>
 8005370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <prvSampleTimeNow+0x3c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	429a      	cmp	r2, r3
 800537a:	d205      	bcs.n	8005388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800537c:	f000 f936 	bl	80055ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e002      	b.n	800538e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <prvSampleTimeNow+0x3c>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005394:	68fb      	ldr	r3, [r7, #12]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	24000e14 	.word	0x24000e14

080053a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d812      	bhi.n	80053f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e01b      	b.n	8005416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <prvInsertTimerInActiveList+0x7c>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f7fe f986 	bl	80036fa <vListInsert>
 80053ee:	e012      	b.n	8005416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d206      	bcs.n	8005406 <prvInsertTimerInActiveList+0x62>
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e007      	b.n	8005416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <prvInsertTimerInActiveList+0x80>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7fe f972 	bl	80036fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005416:	697b      	ldr	r3, [r7, #20]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	24000e08 	.word	0x24000e08
 8005424:	24000e04 	.word	0x24000e04

08005428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08e      	sub	sp, #56	; 0x38
 800542c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800542e:	e0ca      	b.n	80055c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	da18      	bge.n	8005468 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	3304      	adds	r3, #4
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	61fb      	str	r3, [r7, #28]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	6850      	ldr	r0, [r2, #4]
 8005460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005462:	6892      	ldr	r2, [r2, #8]
 8005464:	4611      	mov	r1, r2
 8005466:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f2c0 80aa 	blt.w	80055c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe f973 	bl	800376c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005486:	463b      	mov	r3, r7
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff ff6b 	bl	8005364 <prvSampleTimeNow>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b09      	cmp	r3, #9
 8005494:	f200 8097 	bhi.w	80055c6 <prvProcessReceivedCommands+0x19e>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <prvProcessReceivedCommands+0x78>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054c9 	.word	0x080054c9
 80054ac:	0800553d 	.word	0x0800553d
 80054b0:	08005551 	.word	0x08005551
 80054b4:	0800559b 	.word	0x0800559b
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054c9 	.word	0x080054c9
 80054c0:	0800553d 	.word	0x0800553d
 80054c4:	08005551 	.word	0x08005551
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	18d1      	adds	r1, r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e8:	f7ff ff5c 	bl	80053a4 <prvInsertTimerInActiveList>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d069      	beq.n	80055c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05e      	beq.n	80055c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	441a      	add	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	2100      	movs	r1, #0
 8005518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551a:	f7ff fe05 	bl	8005128 <xTimerGenericCommand>
 800551e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d14f      	bne.n	80055c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	61bb      	str	r3, [r7, #24]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800554e:	e03a      	b.n	80055c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	617b      	str	r3, [r7, #20]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	18d1      	adds	r1, r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005594:	f7ff ff06 	bl	80053a4 <prvInsertTimerInActiveList>
					break;
 8005598:	e015      	b.n	80055c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80055a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055aa:	f000 fc01 	bl	8005db0 <vPortFree>
 80055ae:	e00a      	b.n	80055c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055c2:	e000      	b.n	80055c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <prvProcessReceivedCommands+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	1d39      	adds	r1, r7, #4
 80055cc:	2200      	movs	r2, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fb94 	bl	8003cfc <xQueueReceive>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f47f af2a 	bne.w	8005430 <prvProcessReceivedCommands+0x8>
	}
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	3730      	adds	r7, #48	; 0x30
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	24000e0c 	.word	0x24000e0c

080055ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055f2:	e048      	b.n	8005686 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055f4:	4b2d      	ldr	r3, [pc, #180]	; (80056ac <prvSwitchTimerLists+0xc0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fe:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <prvSwitchTimerLists+0xc0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe f8ad 	bl	800376c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d02e      	beq.n	8005686 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	429a      	cmp	r2, r3
 8005638:	d90e      	bls.n	8005658 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <prvSwitchTimerLists+0xc0>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7fe f852 	bl	80036fa <vListInsert>
 8005656:	e016      	b.n	8005686 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005658:	2300      	movs	r3, #0
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	2300      	movs	r3, #0
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	2100      	movs	r1, #0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fd60 	bl	8005128 <xTimerGenericCommand>
 8005668:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	603b      	str	r3, [r7, #0]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <prvSwitchTimerLists+0xc0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1b1      	bne.n	80055f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <prvSwitchTimerLists+0xc0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <prvSwitchTimerLists+0xc4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a04      	ldr	r2, [pc, #16]	; (80056ac <prvSwitchTimerLists+0xc0>)
 800569c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800569e:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <prvSwitchTimerLists+0xc4>)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	6013      	str	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	24000e04 	.word	0x24000e04
 80056b0:	24000e08 	.word	0x24000e08

080056b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ba:	f000 f98b 	bl	80059d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056be:	4b15      	ldr	r3, [pc, #84]	; (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d120      	bne.n	8005708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056c6:	4814      	ldr	r0, [pc, #80]	; (8005718 <prvCheckForValidListAndQueue+0x64>)
 80056c8:	f7fd ffc6 	bl	8003658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056cc:	4813      	ldr	r0, [pc, #76]	; (800571c <prvCheckForValidListAndQueue+0x68>)
 80056ce:	f7fd ffc3 	bl	8003658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <prvCheckForValidListAndQueue+0x6c>)
 80056d4:	4a10      	ldr	r2, [pc, #64]	; (8005718 <prvCheckForValidListAndQueue+0x64>)
 80056d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <prvCheckForValidListAndQueue+0x70>)
 80056da:	4a10      	ldr	r2, [pc, #64]	; (800571c <prvCheckForValidListAndQueue+0x68>)
 80056dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056de:	2300      	movs	r3, #0
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <prvCheckForValidListAndQueue+0x74>)
 80056e4:	4a11      	ldr	r2, [pc, #68]	; (800572c <prvCheckForValidListAndQueue+0x78>)
 80056e6:	2110      	movs	r1, #16
 80056e8:	200a      	movs	r0, #10
 80056ea:	f7fe f8d1 	bl	8003890 <xQueueGenericCreateStatic>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	490b      	ldr	r1, [pc, #44]	; (8005730 <prvCheckForValidListAndQueue+0x7c>)
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fcea 	bl	80040dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005708:	f000 f994 	bl	8005a34 <vPortExitCritical>
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	24000e0c 	.word	0x24000e0c
 8005718:	24000ddc 	.word	0x24000ddc
 800571c:	24000df0 	.word	0x24000df0
 8005720:	24000e04 	.word	0x24000e04
 8005724:	24000e08 	.word	0x24000e08
 8005728:	24000eb8 	.word	0x24000eb8
 800572c:	24000e18 	.word	0x24000e18
 8005730:	08007118 	.word	0x08007118

08005734 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005742:	f06f 0301 	mvn.w	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <xTimerPendFunctionCallFromISR+0x3c>)
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	f107 0114 	add.w	r1, r7, #20
 800575c:	2300      	movs	r3, #0
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	f7fe fa30 	bl	8003bc4 <xQueueGenericSendFromISR>
 8005764:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005768:	4618      	mov	r0, r3
 800576a:	3728      	adds	r7, #40	; 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	24000e0c 	.word	0x24000e0c

08005774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b04      	subs	r3, #4
 8005784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800578c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b04      	subs	r3, #4
 8005792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057a4:	4a0c      	ldr	r2, [pc, #48]	; (80057d8 <pxPortInitialiseStack+0x64>)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b14      	subs	r3, #20
 80057ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b04      	subs	r3, #4
 80057ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f06f 0202 	mvn.w	r2, #2
 80057c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3b20      	subs	r3, #32
 80057c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057ca:	68fb      	ldr	r3, [r7, #12]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	080057dd 	.word	0x080057dd

080057dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <prvTaskExitError+0x54>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ee:	d00a      	beq.n	8005806 <prvTaskExitError+0x2a>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60fb      	str	r3, [r7, #12]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <prvTaskExitError+0x28>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800581a:	bf00      	nop
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0fc      	beq.n	800581c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	24000010 	.word	0x24000010
	...

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	4770      	bx	lr
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst2>:
 8005860:	240008dc 	.word	0x240008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005868:	4808      	ldr	r0, [pc, #32]	; (800588c <prvPortStartFirstTask+0x24>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8814 	msr	CONTROL, r0
 800587a:	b662      	cpsie	i
 800587c:	b661      	cpsie	f
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	df00      	svc	0
 8005888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800588a:	bf00      	nop
 800588c:	e000ed08 	.word	0xe000ed08

08005890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005896:	4b46      	ldr	r3, [pc, #280]	; (80059b0 <xPortStartScheduler+0x120>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a46      	ldr	r2, [pc, #280]	; (80059b4 <xPortStartScheduler+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10a      	bne.n	80058b6 <xPortStartScheduler+0x26>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3f      	ldr	r2, [pc, #252]	; (80059b8 <xPortStartScheduler+0x128>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x46>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	60fb      	str	r3, [r7, #12]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <xPortStartScheduler+0x12c>)
 80058d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <xPortStartScheduler+0x130>)
 80058fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <xPortStartScheduler+0x134>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005904:	e009      	b.n	800591a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005906:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <xPortStartScheduler+0x134>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <xPortStartScheduler+0x134>)
 800590e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d0ef      	beq.n	8005906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1c3 0307 	rsb	r3, r3, #7
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00a      	beq.n	8005948 <xPortStartScheduler+0xb8>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60bb      	str	r3, [r7, #8]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005948:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <xPortStartScheduler+0x134>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <xPortStartScheduler+0x134>)
 8005950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005952:	4b1c      	ldr	r3, [pc, #112]	; (80059c4 <xPortStartScheduler+0x134>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800595a:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <xPortStartScheduler+0x134>)
 800595c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005966:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <xPortStartScheduler+0x138>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <xPortStartScheduler+0x138>)
 800596c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <xPortStartScheduler+0x138>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a14      	ldr	r2, [pc, #80]	; (80059c8 <xPortStartScheduler+0x138>)
 8005978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800597c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800597e:	f000 f8dd 	bl	8005b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <xPortStartScheduler+0x13c>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005988:	f000 f8fc 	bl	8005b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <xPortStartScheduler+0x140>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0f      	ldr	r2, [pc, #60]	; (80059d0 <xPortStartScheduler+0x140>)
 8005992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005998:	f7ff ff66 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800599c:	f7fe ff7a 	bl	8004894 <vTaskSwitchContext>
	prvTaskExitError();
 80059a0:	f7ff ff1c 	bl	80057dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	e000ed00 	.word	0xe000ed00
 80059b4:	410fc271 	.word	0x410fc271
 80059b8:	410fc270 	.word	0x410fc270
 80059bc:	e000e400 	.word	0xe000e400
 80059c0:	24000f08 	.word	0x24000f08
 80059c4:	24000f0c 	.word	0x24000f0c
 80059c8:	e000ed20 	.word	0xe000ed20
 80059cc:	24000010 	.word	0x24000010
 80059d0:	e000ef34 	.word	0xe000ef34

080059d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	607b      	str	r3, [r7, #4]
}
 80059ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <vPortEnterCritical+0x58>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <vPortEnterCritical+0x58>)
 80059f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <vPortEnterCritical+0x58>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10f      	bne.n	8005a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <vPortEnterCritical+0x5c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	603b      	str	r3, [r7, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <vPortEnterCritical+0x4a>
	}
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	24000010 	.word	0x24000010
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <vPortExitCritical+0x50>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <vPortExitCritical+0x24>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	607b      	str	r3, [r7, #4]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <vPortExitCritical+0x50>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <vPortExitCritical+0x50>)
 8005a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <vPortExitCritical+0x50>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <vPortExitCritical+0x42>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f383 8811 	msr	BASEPRI, r3
}
 8005a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	24000010 	.word	0x24000010
	...

08005a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a90:	f3ef 8009 	mrs	r0, PSP
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <pxCurrentTCBConst>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f01e 0f10 	tst.w	lr, #16
 8005aa0:	bf08      	it	eq
 8005aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ab4:	f380 8811 	msr	BASEPRI, r0
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f7fe fee8 	bl	8004894 <vTaskSwitchContext>
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f380 8811 	msr	BASEPRI, r0
 8005acc:	bc09      	pop	{r0, r3}
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	6808      	ldr	r0, [r1, #0]
 8005ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad6:	f01e 0f10 	tst.w	lr, #16
 8005ada:	bf08      	it	eq
 8005adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ae0:	f380 8809 	msr	PSP, r0
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst>:
 8005af0:	240008dc 	.word	0x240008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b12:	f7fe fe05 	bl	8004720 <xTaskIncrementTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <xPortSysTickHandler+0x40>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <vPortSetupTimerInterrupt+0x38>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <vPortSetupTimerInterrupt+0x3c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <vPortSetupTimerInterrupt+0x40>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <vPortSetupTimerInterrupt+0x44>)
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b5e:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	e000e010 	.word	0xe000e010
 8005b74:	e000e018 	.word	0xe000e018
 8005b78:	24000000 	.word	0x24000000
 8005b7c:	10624dd3 	.word	0x10624dd3
 8005b80:	e000e014 	.word	0xe000e014

08005b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b94 <vPortEnableVFP+0x10>
 8005b88:	6801      	ldr	r1, [r0, #0]
 8005b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b8e:	6001      	str	r1, [r0, #0]
 8005b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b92:	bf00      	nop
 8005b94:	e000ed88 	.word	0xe000ed88

08005b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
 8005ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b0f      	cmp	r3, #15
 8005ba8:	d914      	bls.n	8005bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <vPortValidateInterruptPriority+0x70>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bb4:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <vPortValidateInterruptPriority+0x74>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	7afa      	ldrb	r2, [r7, #11]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d20a      	bcs.n	8005bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <vPortValidateInterruptPriority+0x78>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <vPortValidateInterruptPriority+0x7c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d90a      	bls.n	8005bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	603b      	str	r3, [r7, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <vPortValidateInterruptPriority+0x60>
	}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e3f0 	.word	0xe000e3f0
 8005c0c:	24000f08 	.word	0x24000f08
 8005c10:	e000ed0c 	.word	0xe000ed0c
 8005c14:	24000f0c 	.word	0x24000f0c

08005c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c24:	f7fe fcc0 	bl	80045a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c28:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <pvPortMalloc+0x180>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c30:	f000 f920 	bl	8005e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c34:	4b59      	ldr	r3, [pc, #356]	; (8005d9c <pvPortMalloc+0x184>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f040 8093 	bne.w	8005d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01d      	beq.n	8005c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c48:	2208      	movs	r2, #8
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f023 0307 	bic.w	r3, r3, #7
 8005c60:	3308      	adds	r3, #8
 8005c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <pvPortMalloc+0x6c>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	617b      	str	r3, [r7, #20]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d06e      	beq.n	8005d68 <pvPortMalloc+0x150>
 8005c8a:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <pvPortMalloc+0x188>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d869      	bhi.n	8005d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c94:	4b43      	ldr	r3, [pc, #268]	; (8005da4 <pvPortMalloc+0x18c>)
 8005c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c98:	4b42      	ldr	r3, [pc, #264]	; (8005da4 <pvPortMalloc+0x18c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9e:	e004      	b.n	8005caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <pvPortMalloc+0xa4>
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f1      	bne.n	8005ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cbc:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <pvPortMalloc+0x180>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d050      	beq.n	8005d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	4413      	add	r3, r2
 8005cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d91f      	bls.n	8005d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <pvPortMalloc+0xf8>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	613b      	str	r3, [r7, #16]
}
 8005d0c:	bf00      	nop
 8005d0e:	e7fe      	b.n	8005d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d22:	69b8      	ldr	r0, [r7, #24]
 8005d24:	f000 f908 	bl	8005f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d28:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <pvPortMalloc+0x188>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <pvPortMalloc+0x188>)
 8005d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <pvPortMalloc+0x188>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <pvPortMalloc+0x190>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d203      	bcs.n	8005d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <pvPortMalloc+0x188>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <pvPortMalloc+0x190>)
 8005d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <pvPortMalloc+0x184>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <pvPortMalloc+0x194>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a11      	ldr	r2, [pc, #68]	; (8005dac <pvPortMalloc+0x194>)
 8005d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d68:	f7fe fc2c 	bl	80045c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <pvPortMalloc+0x174>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60fb      	str	r3, [r7, #12]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <pvPortMalloc+0x172>
	return pvReturn;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3728      	adds	r7, #40	; 0x28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	24004b18 	.word	0x24004b18
 8005d9c:	24004b2c 	.word	0x24004b2c
 8005da0:	24004b1c 	.word	0x24004b1c
 8005da4:	24004b10 	.word	0x24004b10
 8005da8:	24004b20 	.word	0x24004b20
 8005dac:	24004b24 	.word	0x24004b24

08005db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d04d      	beq.n	8005e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	425b      	negs	r3, r3
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <vPortFree+0xb8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <vPortFree+0x44>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	60fb      	str	r3, [r7, #12]
}
 8005df0:	bf00      	nop
 8005df2:	e7fe      	b.n	8005df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <vPortFree+0x62>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	60bb      	str	r3, [r7, #8]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <vPortFree+0xb8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01e      	beq.n	8005e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11a      	bne.n	8005e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <vPortFree+0xb8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e38:	f7fe fbb6 	bl	80045a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <vPortFree+0xbc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	4a09      	ldr	r2, [pc, #36]	; (8005e6c <vPortFree+0xbc>)
 8005e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f000 f874 	bl	8005f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <vPortFree+0xc0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a06      	ldr	r2, [pc, #24]	; (8005e70 <vPortFree+0xc0>)
 8005e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e5a:	f7fe fbb3 	bl	80045c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e5e:	bf00      	nop
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	24004b2c 	.word	0x24004b2c
 8005e6c:	24004b1c 	.word	0x24004b1c
 8005e70:	24004b28 	.word	0x24004b28

08005e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e80:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <prvHeapInit+0xac>)
 8005e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00c      	beq.n	8005ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3307      	adds	r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <prvHeapInit+0xac>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005eac:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <prvHeapInit+0xb0>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <prvHeapInit+0xb0>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <prvHeapInit+0xb4>)
 8005ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <prvHeapInit+0xb4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2200      	movs	r2, #0
 8005edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <prvHeapInit+0xb4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <prvHeapInit+0xb4>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <prvHeapInit+0xb8>)
 8005f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <prvHeapInit+0xbc>)
 8005f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <prvHeapInit+0xc0>)
 8005f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	24000f10 	.word	0x24000f10
 8005f24:	24004b10 	.word	0x24004b10
 8005f28:	24004b18 	.word	0x24004b18
 8005f2c:	24004b20 	.word	0x24004b20
 8005f30:	24004b1c 	.word	0x24004b1c
 8005f34:	24004b2c 	.word	0x24004b2c

08005f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f40:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <prvInsertBlockIntoFreeList+0xac>)
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e002      	b.n	8005f4c <prvInsertBlockIntoFreeList+0x14>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d8f7      	bhi.n	8005f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d108      	bne.n	8005f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	441a      	add	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	441a      	add	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d118      	bne.n	8005fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d00d      	beq.n	8005fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e008      	b.n	8005fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e003      	b.n	8005fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d002      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	24004b10 	.word	0x24004b10
 8005fe8:	24004b18 	.word	0x24004b18

08005fec <__errno>:
 8005fec:	4b01      	ldr	r3, [pc, #4]	; (8005ff4 <__errno+0x8>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	24000014 	.word	0x24000014

08005ff8 <__libc_init_array>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4d0d      	ldr	r5, [pc, #52]	; (8006030 <__libc_init_array+0x38>)
 8005ffc:	4c0d      	ldr	r4, [pc, #52]	; (8006034 <__libc_init_array+0x3c>)
 8005ffe:	1b64      	subs	r4, r4, r5
 8006000:	10a4      	asrs	r4, r4, #2
 8006002:	2600      	movs	r6, #0
 8006004:	42a6      	cmp	r6, r4
 8006006:	d109      	bne.n	800601c <__libc_init_array+0x24>
 8006008:	4d0b      	ldr	r5, [pc, #44]	; (8006038 <__libc_init_array+0x40>)
 800600a:	4c0c      	ldr	r4, [pc, #48]	; (800603c <__libc_init_array+0x44>)
 800600c:	f001 f832 	bl	8007074 <_init>
 8006010:	1b64      	subs	r4, r4, r5
 8006012:	10a4      	asrs	r4, r4, #2
 8006014:	2600      	movs	r6, #0
 8006016:	42a6      	cmp	r6, r4
 8006018:	d105      	bne.n	8006026 <__libc_init_array+0x2e>
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006020:	4798      	blx	r3
 8006022:	3601      	adds	r6, #1
 8006024:	e7ee      	b.n	8006004 <__libc_init_array+0xc>
 8006026:	f855 3b04 	ldr.w	r3, [r5], #4
 800602a:	4798      	blx	r3
 800602c:	3601      	adds	r6, #1
 800602e:	e7f2      	b.n	8006016 <__libc_init_array+0x1e>
 8006030:	08007234 	.word	0x08007234
 8006034:	08007234 	.word	0x08007234
 8006038:	08007234 	.word	0x08007234
 800603c:	08007238 	.word	0x08007238

08006040 <memcpy>:
 8006040:	440a      	add	r2, r1
 8006042:	4291      	cmp	r1, r2
 8006044:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006048:	d100      	bne.n	800604c <memcpy+0xc>
 800604a:	4770      	bx	lr
 800604c:	b510      	push	{r4, lr}
 800604e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006056:	4291      	cmp	r1, r2
 8006058:	d1f9      	bne.n	800604e <memcpy+0xe>
 800605a:	bd10      	pop	{r4, pc}

0800605c <memset>:
 800605c:	4402      	add	r2, r0
 800605e:	4603      	mov	r3, r0
 8006060:	4293      	cmp	r3, r2
 8006062:	d100      	bne.n	8006066 <memset+0xa>
 8006064:	4770      	bx	lr
 8006066:	f803 1b01 	strb.w	r1, [r3], #1
 800606a:	e7f9      	b.n	8006060 <memset+0x4>

0800606c <iprintf>:
 800606c:	b40f      	push	{r0, r1, r2, r3}
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <iprintf+0x2c>)
 8006070:	b513      	push	{r0, r1, r4, lr}
 8006072:	681c      	ldr	r4, [r3, #0]
 8006074:	b124      	cbz	r4, 8006080 <iprintf+0x14>
 8006076:	69a3      	ldr	r3, [r4, #24]
 8006078:	b913      	cbnz	r3, 8006080 <iprintf+0x14>
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fa5e 	bl	800653c <__sinit>
 8006080:	ab05      	add	r3, sp, #20
 8006082:	9a04      	ldr	r2, [sp, #16]
 8006084:	68a1      	ldr	r1, [r4, #8]
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fc67 	bl	800695c <_vfiprintf_r>
 800608e:	b002      	add	sp, #8
 8006090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006094:	b004      	add	sp, #16
 8006096:	4770      	bx	lr
 8006098:	24000014 	.word	0x24000014

0800609c <_puts_r>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	460e      	mov	r6, r1
 80060a0:	4605      	mov	r5, r0
 80060a2:	b118      	cbz	r0, 80060ac <_puts_r+0x10>
 80060a4:	6983      	ldr	r3, [r0, #24]
 80060a6:	b90b      	cbnz	r3, 80060ac <_puts_r+0x10>
 80060a8:	f000 fa48 	bl	800653c <__sinit>
 80060ac:	69ab      	ldr	r3, [r5, #24]
 80060ae:	68ac      	ldr	r4, [r5, #8]
 80060b0:	b913      	cbnz	r3, 80060b8 <_puts_r+0x1c>
 80060b2:	4628      	mov	r0, r5
 80060b4:	f000 fa42 	bl	800653c <__sinit>
 80060b8:	4b2c      	ldr	r3, [pc, #176]	; (800616c <_puts_r+0xd0>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d120      	bne.n	8006100 <_puts_r+0x64>
 80060be:	686c      	ldr	r4, [r5, #4]
 80060c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060c2:	07db      	lsls	r3, r3, #31
 80060c4:	d405      	bmi.n	80060d2 <_puts_r+0x36>
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	0598      	lsls	r0, r3, #22
 80060ca:	d402      	bmi.n	80060d2 <_puts_r+0x36>
 80060cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ce:	f000 fad3 	bl	8006678 <__retarget_lock_acquire_recursive>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	0719      	lsls	r1, r3, #28
 80060d6:	d51d      	bpl.n	8006114 <_puts_r+0x78>
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	b1db      	cbz	r3, 8006114 <_puts_r+0x78>
 80060dc:	3e01      	subs	r6, #1
 80060de:	68a3      	ldr	r3, [r4, #8]
 80060e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060e4:	3b01      	subs	r3, #1
 80060e6:	60a3      	str	r3, [r4, #8]
 80060e8:	bb39      	cbnz	r1, 800613a <_puts_r+0x9e>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da38      	bge.n	8006160 <_puts_r+0xc4>
 80060ee:	4622      	mov	r2, r4
 80060f0:	210a      	movs	r1, #10
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 f848 	bl	8006188 <__swbuf_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d011      	beq.n	8006120 <_puts_r+0x84>
 80060fc:	250a      	movs	r5, #10
 80060fe:	e011      	b.n	8006124 <_puts_r+0x88>
 8006100:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <_puts_r+0xd4>)
 8006102:	429c      	cmp	r4, r3
 8006104:	d101      	bne.n	800610a <_puts_r+0x6e>
 8006106:	68ac      	ldr	r4, [r5, #8]
 8006108:	e7da      	b.n	80060c0 <_puts_r+0x24>
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <_puts_r+0xd8>)
 800610c:	429c      	cmp	r4, r3
 800610e:	bf08      	it	eq
 8006110:	68ec      	ldreq	r4, [r5, #12]
 8006112:	e7d5      	b.n	80060c0 <_puts_r+0x24>
 8006114:	4621      	mov	r1, r4
 8006116:	4628      	mov	r0, r5
 8006118:	f000 f888 	bl	800622c <__swsetup_r>
 800611c:	2800      	cmp	r0, #0
 800611e:	d0dd      	beq.n	80060dc <_puts_r+0x40>
 8006120:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006126:	07da      	lsls	r2, r3, #31
 8006128:	d405      	bmi.n	8006136 <_puts_r+0x9a>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	059b      	lsls	r3, r3, #22
 800612e:	d402      	bmi.n	8006136 <_puts_r+0x9a>
 8006130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006132:	f000 faa2 	bl	800667a <__retarget_lock_release_recursive>
 8006136:	4628      	mov	r0, r5
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	2b00      	cmp	r3, #0
 800613c:	da04      	bge.n	8006148 <_puts_r+0xac>
 800613e:	69a2      	ldr	r2, [r4, #24]
 8006140:	429a      	cmp	r2, r3
 8006142:	dc06      	bgt.n	8006152 <_puts_r+0xb6>
 8006144:	290a      	cmp	r1, #10
 8006146:	d004      	beq.n	8006152 <_puts_r+0xb6>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	6022      	str	r2, [r4, #0]
 800614e:	7019      	strb	r1, [r3, #0]
 8006150:	e7c5      	b.n	80060de <_puts_r+0x42>
 8006152:	4622      	mov	r2, r4
 8006154:	4628      	mov	r0, r5
 8006156:	f000 f817 	bl	8006188 <__swbuf_r>
 800615a:	3001      	adds	r0, #1
 800615c:	d1bf      	bne.n	80060de <_puts_r+0x42>
 800615e:	e7df      	b.n	8006120 <_puts_r+0x84>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	250a      	movs	r5, #10
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	6022      	str	r2, [r4, #0]
 8006168:	701d      	strb	r5, [r3, #0]
 800616a:	e7db      	b.n	8006124 <_puts_r+0x88>
 800616c:	080071c0 	.word	0x080071c0
 8006170:	080071e0 	.word	0x080071e0
 8006174:	080071a0 	.word	0x080071a0

08006178 <puts>:
 8006178:	4b02      	ldr	r3, [pc, #8]	; (8006184 <puts+0xc>)
 800617a:	4601      	mov	r1, r0
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f7ff bf8d 	b.w	800609c <_puts_r>
 8006182:	bf00      	nop
 8006184:	24000014 	.word	0x24000014

08006188 <__swbuf_r>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	460e      	mov	r6, r1
 800618c:	4614      	mov	r4, r2
 800618e:	4605      	mov	r5, r0
 8006190:	b118      	cbz	r0, 800619a <__swbuf_r+0x12>
 8006192:	6983      	ldr	r3, [r0, #24]
 8006194:	b90b      	cbnz	r3, 800619a <__swbuf_r+0x12>
 8006196:	f000 f9d1 	bl	800653c <__sinit>
 800619a:	4b21      	ldr	r3, [pc, #132]	; (8006220 <__swbuf_r+0x98>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d12b      	bne.n	80061f8 <__swbuf_r+0x70>
 80061a0:	686c      	ldr	r4, [r5, #4]
 80061a2:	69a3      	ldr	r3, [r4, #24]
 80061a4:	60a3      	str	r3, [r4, #8]
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	071a      	lsls	r2, r3, #28
 80061aa:	d52f      	bpl.n	800620c <__swbuf_r+0x84>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	b36b      	cbz	r3, 800620c <__swbuf_r+0x84>
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	1ac0      	subs	r0, r0, r3
 80061b6:	6963      	ldr	r3, [r4, #20]
 80061b8:	b2f6      	uxtb	r6, r6
 80061ba:	4283      	cmp	r3, r0
 80061bc:	4637      	mov	r7, r6
 80061be:	dc04      	bgt.n	80061ca <__swbuf_r+0x42>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 f926 	bl	8006414 <_fflush_r>
 80061c8:	bb30      	cbnz	r0, 8006218 <__swbuf_r+0x90>
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	701e      	strb	r6, [r3, #0]
 80061d8:	6963      	ldr	r3, [r4, #20]
 80061da:	3001      	adds	r0, #1
 80061dc:	4283      	cmp	r3, r0
 80061de:	d004      	beq.n	80061ea <__swbuf_r+0x62>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d506      	bpl.n	80061f4 <__swbuf_r+0x6c>
 80061e6:	2e0a      	cmp	r6, #10
 80061e8:	d104      	bne.n	80061f4 <__swbuf_r+0x6c>
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 f911 	bl	8006414 <_fflush_r>
 80061f2:	b988      	cbnz	r0, 8006218 <__swbuf_r+0x90>
 80061f4:	4638      	mov	r0, r7
 80061f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <__swbuf_r+0x9c>)
 80061fa:	429c      	cmp	r4, r3
 80061fc:	d101      	bne.n	8006202 <__swbuf_r+0x7a>
 80061fe:	68ac      	ldr	r4, [r5, #8]
 8006200:	e7cf      	b.n	80061a2 <__swbuf_r+0x1a>
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <__swbuf_r+0xa0>)
 8006204:	429c      	cmp	r4, r3
 8006206:	bf08      	it	eq
 8006208:	68ec      	ldreq	r4, [r5, #12]
 800620a:	e7ca      	b.n	80061a2 <__swbuf_r+0x1a>
 800620c:	4621      	mov	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f000 f80c 	bl	800622c <__swsetup_r>
 8006214:	2800      	cmp	r0, #0
 8006216:	d0cb      	beq.n	80061b0 <__swbuf_r+0x28>
 8006218:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800621c:	e7ea      	b.n	80061f4 <__swbuf_r+0x6c>
 800621e:	bf00      	nop
 8006220:	080071c0 	.word	0x080071c0
 8006224:	080071e0 	.word	0x080071e0
 8006228:	080071a0 	.word	0x080071a0

0800622c <__swsetup_r>:
 800622c:	4b32      	ldr	r3, [pc, #200]	; (80062f8 <__swsetup_r+0xcc>)
 800622e:	b570      	push	{r4, r5, r6, lr}
 8006230:	681d      	ldr	r5, [r3, #0]
 8006232:	4606      	mov	r6, r0
 8006234:	460c      	mov	r4, r1
 8006236:	b125      	cbz	r5, 8006242 <__swsetup_r+0x16>
 8006238:	69ab      	ldr	r3, [r5, #24]
 800623a:	b913      	cbnz	r3, 8006242 <__swsetup_r+0x16>
 800623c:	4628      	mov	r0, r5
 800623e:	f000 f97d 	bl	800653c <__sinit>
 8006242:	4b2e      	ldr	r3, [pc, #184]	; (80062fc <__swsetup_r+0xd0>)
 8006244:	429c      	cmp	r4, r3
 8006246:	d10f      	bne.n	8006268 <__swsetup_r+0x3c>
 8006248:	686c      	ldr	r4, [r5, #4]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006250:	0719      	lsls	r1, r3, #28
 8006252:	d42c      	bmi.n	80062ae <__swsetup_r+0x82>
 8006254:	06dd      	lsls	r5, r3, #27
 8006256:	d411      	bmi.n	800627c <__swsetup_r+0x50>
 8006258:	2309      	movs	r3, #9
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006266:	e03e      	b.n	80062e6 <__swsetup_r+0xba>
 8006268:	4b25      	ldr	r3, [pc, #148]	; (8006300 <__swsetup_r+0xd4>)
 800626a:	429c      	cmp	r4, r3
 800626c:	d101      	bne.n	8006272 <__swsetup_r+0x46>
 800626e:	68ac      	ldr	r4, [r5, #8]
 8006270:	e7eb      	b.n	800624a <__swsetup_r+0x1e>
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <__swsetup_r+0xd8>)
 8006274:	429c      	cmp	r4, r3
 8006276:	bf08      	it	eq
 8006278:	68ec      	ldreq	r4, [r5, #12]
 800627a:	e7e6      	b.n	800624a <__swsetup_r+0x1e>
 800627c:	0758      	lsls	r0, r3, #29
 800627e:	d512      	bpl.n	80062a6 <__swsetup_r+0x7a>
 8006280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006282:	b141      	cbz	r1, 8006296 <__swsetup_r+0x6a>
 8006284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006288:	4299      	cmp	r1, r3
 800628a:	d002      	beq.n	8006292 <__swsetup_r+0x66>
 800628c:	4630      	mov	r0, r6
 800628e:	f000 fa5b 	bl	8006748 <_free_r>
 8006292:	2300      	movs	r3, #0
 8006294:	6363      	str	r3, [r4, #52]	; 0x34
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	2300      	movs	r3, #0
 80062a0:	6063      	str	r3, [r4, #4]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f043 0308 	orr.w	r3, r3, #8
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	b94b      	cbnz	r3, 80062c6 <__swsetup_r+0x9a>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062bc:	d003      	beq.n	80062c6 <__swsetup_r+0x9a>
 80062be:	4621      	mov	r1, r4
 80062c0:	4630      	mov	r0, r6
 80062c2:	f000 fa01 	bl	80066c8 <__smakebuf_r>
 80062c6:	89a0      	ldrh	r0, [r4, #12]
 80062c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062cc:	f010 0301 	ands.w	r3, r0, #1
 80062d0:	d00a      	beq.n	80062e8 <__swsetup_r+0xbc>
 80062d2:	2300      	movs	r3, #0
 80062d4:	60a3      	str	r3, [r4, #8]
 80062d6:	6963      	ldr	r3, [r4, #20]
 80062d8:	425b      	negs	r3, r3
 80062da:	61a3      	str	r3, [r4, #24]
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	b943      	cbnz	r3, 80062f2 <__swsetup_r+0xc6>
 80062e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062e4:	d1ba      	bne.n	800625c <__swsetup_r+0x30>
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	0781      	lsls	r1, r0, #30
 80062ea:	bf58      	it	pl
 80062ec:	6963      	ldrpl	r3, [r4, #20]
 80062ee:	60a3      	str	r3, [r4, #8]
 80062f0:	e7f4      	b.n	80062dc <__swsetup_r+0xb0>
 80062f2:	2000      	movs	r0, #0
 80062f4:	e7f7      	b.n	80062e6 <__swsetup_r+0xba>
 80062f6:	bf00      	nop
 80062f8:	24000014 	.word	0x24000014
 80062fc:	080071c0 	.word	0x080071c0
 8006300:	080071e0 	.word	0x080071e0
 8006304:	080071a0 	.word	0x080071a0

08006308 <__sflush_r>:
 8006308:	898a      	ldrh	r2, [r1, #12]
 800630a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630e:	4605      	mov	r5, r0
 8006310:	0710      	lsls	r0, r2, #28
 8006312:	460c      	mov	r4, r1
 8006314:	d458      	bmi.n	80063c8 <__sflush_r+0xc0>
 8006316:	684b      	ldr	r3, [r1, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	dc05      	bgt.n	8006328 <__sflush_r+0x20>
 800631c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	dc02      	bgt.n	8006328 <__sflush_r+0x20>
 8006322:	2000      	movs	r0, #0
 8006324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800632a:	2e00      	cmp	r6, #0
 800632c:	d0f9      	beq.n	8006322 <__sflush_r+0x1a>
 800632e:	2300      	movs	r3, #0
 8006330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006334:	682f      	ldr	r7, [r5, #0]
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	d032      	beq.n	80063a0 <__sflush_r+0x98>
 800633a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	075a      	lsls	r2, r3, #29
 8006340:	d505      	bpl.n	800634e <__sflush_r+0x46>
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	1ac0      	subs	r0, r0, r3
 8006346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006348:	b10b      	cbz	r3, 800634e <__sflush_r+0x46>
 800634a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800634c:	1ac0      	subs	r0, r0, r3
 800634e:	2300      	movs	r3, #0
 8006350:	4602      	mov	r2, r0
 8006352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006354:	6a21      	ldr	r1, [r4, #32]
 8006356:	4628      	mov	r0, r5
 8006358:	47b0      	blx	r6
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	d106      	bne.n	800636e <__sflush_r+0x66>
 8006360:	6829      	ldr	r1, [r5, #0]
 8006362:	291d      	cmp	r1, #29
 8006364:	d82c      	bhi.n	80063c0 <__sflush_r+0xb8>
 8006366:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <__sflush_r+0x108>)
 8006368:	40ca      	lsrs	r2, r1
 800636a:	07d6      	lsls	r6, r2, #31
 800636c:	d528      	bpl.n	80063c0 <__sflush_r+0xb8>
 800636e:	2200      	movs	r2, #0
 8006370:	6062      	str	r2, [r4, #4]
 8006372:	04d9      	lsls	r1, r3, #19
 8006374:	6922      	ldr	r2, [r4, #16]
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	d504      	bpl.n	8006384 <__sflush_r+0x7c>
 800637a:	1c42      	adds	r2, r0, #1
 800637c:	d101      	bne.n	8006382 <__sflush_r+0x7a>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	b903      	cbnz	r3, 8006384 <__sflush_r+0x7c>
 8006382:	6560      	str	r0, [r4, #84]	; 0x54
 8006384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006386:	602f      	str	r7, [r5, #0]
 8006388:	2900      	cmp	r1, #0
 800638a:	d0ca      	beq.n	8006322 <__sflush_r+0x1a>
 800638c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006390:	4299      	cmp	r1, r3
 8006392:	d002      	beq.n	800639a <__sflush_r+0x92>
 8006394:	4628      	mov	r0, r5
 8006396:	f000 f9d7 	bl	8006748 <_free_r>
 800639a:	2000      	movs	r0, #0
 800639c:	6360      	str	r0, [r4, #52]	; 0x34
 800639e:	e7c1      	b.n	8006324 <__sflush_r+0x1c>
 80063a0:	6a21      	ldr	r1, [r4, #32]
 80063a2:	2301      	movs	r3, #1
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b0      	blx	r6
 80063a8:	1c41      	adds	r1, r0, #1
 80063aa:	d1c7      	bne.n	800633c <__sflush_r+0x34>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0c4      	beq.n	800633c <__sflush_r+0x34>
 80063b2:	2b1d      	cmp	r3, #29
 80063b4:	d001      	beq.n	80063ba <__sflush_r+0xb2>
 80063b6:	2b16      	cmp	r3, #22
 80063b8:	d101      	bne.n	80063be <__sflush_r+0xb6>
 80063ba:	602f      	str	r7, [r5, #0]
 80063bc:	e7b1      	b.n	8006322 <__sflush_r+0x1a>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	e7ad      	b.n	8006324 <__sflush_r+0x1c>
 80063c8:	690f      	ldr	r7, [r1, #16]
 80063ca:	2f00      	cmp	r7, #0
 80063cc:	d0a9      	beq.n	8006322 <__sflush_r+0x1a>
 80063ce:	0793      	lsls	r3, r2, #30
 80063d0:	680e      	ldr	r6, [r1, #0]
 80063d2:	bf08      	it	eq
 80063d4:	694b      	ldreq	r3, [r1, #20]
 80063d6:	600f      	str	r7, [r1, #0]
 80063d8:	bf18      	it	ne
 80063da:	2300      	movne	r3, #0
 80063dc:	eba6 0807 	sub.w	r8, r6, r7
 80063e0:	608b      	str	r3, [r1, #8]
 80063e2:	f1b8 0f00 	cmp.w	r8, #0
 80063e6:	dd9c      	ble.n	8006322 <__sflush_r+0x1a>
 80063e8:	6a21      	ldr	r1, [r4, #32]
 80063ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063ec:	4643      	mov	r3, r8
 80063ee:	463a      	mov	r2, r7
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b0      	blx	r6
 80063f4:	2800      	cmp	r0, #0
 80063f6:	dc06      	bgt.n	8006406 <__sflush_r+0xfe>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	e78e      	b.n	8006324 <__sflush_r+0x1c>
 8006406:	4407      	add	r7, r0
 8006408:	eba8 0800 	sub.w	r8, r8, r0
 800640c:	e7e9      	b.n	80063e2 <__sflush_r+0xda>
 800640e:	bf00      	nop
 8006410:	20400001 	.word	0x20400001

08006414 <_fflush_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	690b      	ldr	r3, [r1, #16]
 8006418:	4605      	mov	r5, r0
 800641a:	460c      	mov	r4, r1
 800641c:	b913      	cbnz	r3, 8006424 <_fflush_r+0x10>
 800641e:	2500      	movs	r5, #0
 8006420:	4628      	mov	r0, r5
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	b118      	cbz	r0, 800642e <_fflush_r+0x1a>
 8006426:	6983      	ldr	r3, [r0, #24]
 8006428:	b90b      	cbnz	r3, 800642e <_fflush_r+0x1a>
 800642a:	f000 f887 	bl	800653c <__sinit>
 800642e:	4b14      	ldr	r3, [pc, #80]	; (8006480 <_fflush_r+0x6c>)
 8006430:	429c      	cmp	r4, r3
 8006432:	d11b      	bne.n	800646c <_fflush_r+0x58>
 8006434:	686c      	ldr	r4, [r5, #4]
 8006436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ef      	beq.n	800641e <_fflush_r+0xa>
 800643e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006440:	07d0      	lsls	r0, r2, #31
 8006442:	d404      	bmi.n	800644e <_fflush_r+0x3a>
 8006444:	0599      	lsls	r1, r3, #22
 8006446:	d402      	bmi.n	800644e <_fflush_r+0x3a>
 8006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644a:	f000 f915 	bl	8006678 <__retarget_lock_acquire_recursive>
 800644e:	4628      	mov	r0, r5
 8006450:	4621      	mov	r1, r4
 8006452:	f7ff ff59 	bl	8006308 <__sflush_r>
 8006456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006458:	07da      	lsls	r2, r3, #31
 800645a:	4605      	mov	r5, r0
 800645c:	d4e0      	bmi.n	8006420 <_fflush_r+0xc>
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	059b      	lsls	r3, r3, #22
 8006462:	d4dd      	bmi.n	8006420 <_fflush_r+0xc>
 8006464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006466:	f000 f908 	bl	800667a <__retarget_lock_release_recursive>
 800646a:	e7d9      	b.n	8006420 <_fflush_r+0xc>
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <_fflush_r+0x70>)
 800646e:	429c      	cmp	r4, r3
 8006470:	d101      	bne.n	8006476 <_fflush_r+0x62>
 8006472:	68ac      	ldr	r4, [r5, #8]
 8006474:	e7df      	b.n	8006436 <_fflush_r+0x22>
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <_fflush_r+0x74>)
 8006478:	429c      	cmp	r4, r3
 800647a:	bf08      	it	eq
 800647c:	68ec      	ldreq	r4, [r5, #12]
 800647e:	e7da      	b.n	8006436 <_fflush_r+0x22>
 8006480:	080071c0 	.word	0x080071c0
 8006484:	080071e0 	.word	0x080071e0
 8006488:	080071a0 	.word	0x080071a0

0800648c <std>:
 800648c:	2300      	movs	r3, #0
 800648e:	b510      	push	{r4, lr}
 8006490:	4604      	mov	r4, r0
 8006492:	e9c0 3300 	strd	r3, r3, [r0]
 8006496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800649a:	6083      	str	r3, [r0, #8]
 800649c:	8181      	strh	r1, [r0, #12]
 800649e:	6643      	str	r3, [r0, #100]	; 0x64
 80064a0:	81c2      	strh	r2, [r0, #14]
 80064a2:	6183      	str	r3, [r0, #24]
 80064a4:	4619      	mov	r1, r3
 80064a6:	2208      	movs	r2, #8
 80064a8:	305c      	adds	r0, #92	; 0x5c
 80064aa:	f7ff fdd7 	bl	800605c <memset>
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <std+0x38>)
 80064b0:	6263      	str	r3, [r4, #36]	; 0x24
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <std+0x3c>)
 80064b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <std+0x40>)
 80064b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <std+0x44>)
 80064bc:	6224      	str	r4, [r4, #32]
 80064be:	6323      	str	r3, [r4, #48]	; 0x30
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	bf00      	nop
 80064c4:	08006f05 	.word	0x08006f05
 80064c8:	08006f27 	.word	0x08006f27
 80064cc:	08006f5f 	.word	0x08006f5f
 80064d0:	08006f83 	.word	0x08006f83

080064d4 <_cleanup_r>:
 80064d4:	4901      	ldr	r1, [pc, #4]	; (80064dc <_cleanup_r+0x8>)
 80064d6:	f000 b8af 	b.w	8006638 <_fwalk_reent>
 80064da:	bf00      	nop
 80064dc:	08006415 	.word	0x08006415

080064e0 <__sfmoreglue>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	2268      	movs	r2, #104	; 0x68
 80064e4:	1e4d      	subs	r5, r1, #1
 80064e6:	4355      	muls	r5, r2
 80064e8:	460e      	mov	r6, r1
 80064ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064ee:	f000 f997 	bl	8006820 <_malloc_r>
 80064f2:	4604      	mov	r4, r0
 80064f4:	b140      	cbz	r0, 8006508 <__sfmoreglue+0x28>
 80064f6:	2100      	movs	r1, #0
 80064f8:	e9c0 1600 	strd	r1, r6, [r0]
 80064fc:	300c      	adds	r0, #12
 80064fe:	60a0      	str	r0, [r4, #8]
 8006500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006504:	f7ff fdaa 	bl	800605c <memset>
 8006508:	4620      	mov	r0, r4
 800650a:	bd70      	pop	{r4, r5, r6, pc}

0800650c <__sfp_lock_acquire>:
 800650c:	4801      	ldr	r0, [pc, #4]	; (8006514 <__sfp_lock_acquire+0x8>)
 800650e:	f000 b8b3 	b.w	8006678 <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	24004b31 	.word	0x24004b31

08006518 <__sfp_lock_release>:
 8006518:	4801      	ldr	r0, [pc, #4]	; (8006520 <__sfp_lock_release+0x8>)
 800651a:	f000 b8ae 	b.w	800667a <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	24004b31 	.word	0x24004b31

08006524 <__sinit_lock_acquire>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__sinit_lock_acquire+0x8>)
 8006526:	f000 b8a7 	b.w	8006678 <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	24004b32 	.word	0x24004b32

08006530 <__sinit_lock_release>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__sinit_lock_release+0x8>)
 8006532:	f000 b8a2 	b.w	800667a <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	24004b32 	.word	0x24004b32

0800653c <__sinit>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4604      	mov	r4, r0
 8006540:	f7ff fff0 	bl	8006524 <__sinit_lock_acquire>
 8006544:	69a3      	ldr	r3, [r4, #24]
 8006546:	b11b      	cbz	r3, 8006550 <__sinit+0x14>
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f7ff bff0 	b.w	8006530 <__sinit_lock_release>
 8006550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006554:	6523      	str	r3, [r4, #80]	; 0x50
 8006556:	4b13      	ldr	r3, [pc, #76]	; (80065a4 <__sinit+0x68>)
 8006558:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <__sinit+0x6c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	62a2      	str	r2, [r4, #40]	; 0x28
 800655e:	42a3      	cmp	r3, r4
 8006560:	bf04      	itt	eq
 8006562:	2301      	moveq	r3, #1
 8006564:	61a3      	streq	r3, [r4, #24]
 8006566:	4620      	mov	r0, r4
 8006568:	f000 f820 	bl	80065ac <__sfp>
 800656c:	6060      	str	r0, [r4, #4]
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f81c 	bl	80065ac <__sfp>
 8006574:	60a0      	str	r0, [r4, #8]
 8006576:	4620      	mov	r0, r4
 8006578:	f000 f818 	bl	80065ac <__sfp>
 800657c:	2200      	movs	r2, #0
 800657e:	60e0      	str	r0, [r4, #12]
 8006580:	2104      	movs	r1, #4
 8006582:	6860      	ldr	r0, [r4, #4]
 8006584:	f7ff ff82 	bl	800648c <std>
 8006588:	68a0      	ldr	r0, [r4, #8]
 800658a:	2201      	movs	r2, #1
 800658c:	2109      	movs	r1, #9
 800658e:	f7ff ff7d 	bl	800648c <std>
 8006592:	68e0      	ldr	r0, [r4, #12]
 8006594:	2202      	movs	r2, #2
 8006596:	2112      	movs	r1, #18
 8006598:	f7ff ff78 	bl	800648c <std>
 800659c:	2301      	movs	r3, #1
 800659e:	61a3      	str	r3, [r4, #24]
 80065a0:	e7d2      	b.n	8006548 <__sinit+0xc>
 80065a2:	bf00      	nop
 80065a4:	0800719c 	.word	0x0800719c
 80065a8:	080064d5 	.word	0x080064d5

080065ac <__sfp>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	4607      	mov	r7, r0
 80065b0:	f7ff ffac 	bl	800650c <__sfp_lock_acquire>
 80065b4:	4b1e      	ldr	r3, [pc, #120]	; (8006630 <__sfp+0x84>)
 80065b6:	681e      	ldr	r6, [r3, #0]
 80065b8:	69b3      	ldr	r3, [r6, #24]
 80065ba:	b913      	cbnz	r3, 80065c2 <__sfp+0x16>
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff ffbd 	bl	800653c <__sinit>
 80065c2:	3648      	adds	r6, #72	; 0x48
 80065c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	d503      	bpl.n	80065d4 <__sfp+0x28>
 80065cc:	6833      	ldr	r3, [r6, #0]
 80065ce:	b30b      	cbz	r3, 8006614 <__sfp+0x68>
 80065d0:	6836      	ldr	r6, [r6, #0]
 80065d2:	e7f7      	b.n	80065c4 <__sfp+0x18>
 80065d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065d8:	b9d5      	cbnz	r5, 8006610 <__sfp+0x64>
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <__sfp+0x88>)
 80065dc:	60e3      	str	r3, [r4, #12]
 80065de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065e2:	6665      	str	r5, [r4, #100]	; 0x64
 80065e4:	f000 f847 	bl	8006676 <__retarget_lock_init_recursive>
 80065e8:	f7ff ff96 	bl	8006518 <__sfp_lock_release>
 80065ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065f4:	6025      	str	r5, [r4, #0]
 80065f6:	61a5      	str	r5, [r4, #24]
 80065f8:	2208      	movs	r2, #8
 80065fa:	4629      	mov	r1, r5
 80065fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006600:	f7ff fd2c 	bl	800605c <memset>
 8006604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800660c:	4620      	mov	r0, r4
 800660e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006610:	3468      	adds	r4, #104	; 0x68
 8006612:	e7d9      	b.n	80065c8 <__sfp+0x1c>
 8006614:	2104      	movs	r1, #4
 8006616:	4638      	mov	r0, r7
 8006618:	f7ff ff62 	bl	80064e0 <__sfmoreglue>
 800661c:	4604      	mov	r4, r0
 800661e:	6030      	str	r0, [r6, #0]
 8006620:	2800      	cmp	r0, #0
 8006622:	d1d5      	bne.n	80065d0 <__sfp+0x24>
 8006624:	f7ff ff78 	bl	8006518 <__sfp_lock_release>
 8006628:	230c      	movs	r3, #12
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	e7ee      	b.n	800660c <__sfp+0x60>
 800662e:	bf00      	nop
 8006630:	0800719c 	.word	0x0800719c
 8006634:	ffff0001 	.word	0xffff0001

08006638 <_fwalk_reent>:
 8006638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663c:	4606      	mov	r6, r0
 800663e:	4688      	mov	r8, r1
 8006640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006644:	2700      	movs	r7, #0
 8006646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800664a:	f1b9 0901 	subs.w	r9, r9, #1
 800664e:	d505      	bpl.n	800665c <_fwalk_reent+0x24>
 8006650:	6824      	ldr	r4, [r4, #0]
 8006652:	2c00      	cmp	r4, #0
 8006654:	d1f7      	bne.n	8006646 <_fwalk_reent+0xe>
 8006656:	4638      	mov	r0, r7
 8006658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665c:	89ab      	ldrh	r3, [r5, #12]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d907      	bls.n	8006672 <_fwalk_reent+0x3a>
 8006662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006666:	3301      	adds	r3, #1
 8006668:	d003      	beq.n	8006672 <_fwalk_reent+0x3a>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	47c0      	blx	r8
 8006670:	4307      	orrs	r7, r0
 8006672:	3568      	adds	r5, #104	; 0x68
 8006674:	e7e9      	b.n	800664a <_fwalk_reent+0x12>

08006676 <__retarget_lock_init_recursive>:
 8006676:	4770      	bx	lr

08006678 <__retarget_lock_acquire_recursive>:
 8006678:	4770      	bx	lr

0800667a <__retarget_lock_release_recursive>:
 800667a:	4770      	bx	lr

0800667c <__swhatbuf_r>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	460e      	mov	r6, r1
 8006680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006684:	2900      	cmp	r1, #0
 8006686:	b096      	sub	sp, #88	; 0x58
 8006688:	4614      	mov	r4, r2
 800668a:	461d      	mov	r5, r3
 800668c:	da08      	bge.n	80066a0 <__swhatbuf_r+0x24>
 800668e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	061a      	lsls	r2, r3, #24
 8006698:	d410      	bmi.n	80066bc <__swhatbuf_r+0x40>
 800669a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800669e:	e00e      	b.n	80066be <__swhatbuf_r+0x42>
 80066a0:	466a      	mov	r2, sp
 80066a2:	f000 fc95 	bl	8006fd0 <_fstat_r>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	dbf1      	blt.n	800668e <__swhatbuf_r+0x12>
 80066aa:	9a01      	ldr	r2, [sp, #4]
 80066ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066b4:	425a      	negs	r2, r3
 80066b6:	415a      	adcs	r2, r3
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	e7ee      	b.n	800669a <__swhatbuf_r+0x1e>
 80066bc:	2340      	movs	r3, #64	; 0x40
 80066be:	2000      	movs	r0, #0
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	b016      	add	sp, #88	; 0x58
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080066c8 <__smakebuf_r>:
 80066c8:	898b      	ldrh	r3, [r1, #12]
 80066ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066cc:	079d      	lsls	r5, r3, #30
 80066ce:	4606      	mov	r6, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	d507      	bpl.n	80066e4 <__smakebuf_r+0x1c>
 80066d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	6123      	str	r3, [r4, #16]
 80066dc:	2301      	movs	r3, #1
 80066de:	6163      	str	r3, [r4, #20]
 80066e0:	b002      	add	sp, #8
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	ab01      	add	r3, sp, #4
 80066e6:	466a      	mov	r2, sp
 80066e8:	f7ff ffc8 	bl	800667c <__swhatbuf_r>
 80066ec:	9900      	ldr	r1, [sp, #0]
 80066ee:	4605      	mov	r5, r0
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f895 	bl	8006820 <_malloc_r>
 80066f6:	b948      	cbnz	r0, 800670c <__smakebuf_r+0x44>
 80066f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066fc:	059a      	lsls	r2, r3, #22
 80066fe:	d4ef      	bmi.n	80066e0 <__smakebuf_r+0x18>
 8006700:	f023 0303 	bic.w	r3, r3, #3
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	e7e3      	b.n	80066d4 <__smakebuf_r+0xc>
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <__smakebuf_r+0x7c>)
 800670e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	6020      	str	r0, [r4, #0]
 8006714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	9b00      	ldr	r3, [sp, #0]
 800671c:	6163      	str	r3, [r4, #20]
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	6120      	str	r0, [r4, #16]
 8006722:	b15b      	cbz	r3, 800673c <__smakebuf_r+0x74>
 8006724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006728:	4630      	mov	r0, r6
 800672a:	f000 fc63 	bl	8006ff4 <_isatty_r>
 800672e:	b128      	cbz	r0, 800673c <__smakebuf_r+0x74>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	89a0      	ldrh	r0, [r4, #12]
 800673e:	4305      	orrs	r5, r0
 8006740:	81a5      	strh	r5, [r4, #12]
 8006742:	e7cd      	b.n	80066e0 <__smakebuf_r+0x18>
 8006744:	080064d5 	.word	0x080064d5

08006748 <_free_r>:
 8006748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800674a:	2900      	cmp	r1, #0
 800674c:	d044      	beq.n	80067d8 <_free_r+0x90>
 800674e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006752:	9001      	str	r0, [sp, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f1a1 0404 	sub.w	r4, r1, #4
 800675a:	bfb8      	it	lt
 800675c:	18e4      	addlt	r4, r4, r3
 800675e:	f000 fc6b 	bl	8007038 <__malloc_lock>
 8006762:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <_free_r+0x94>)
 8006764:	9801      	ldr	r0, [sp, #4]
 8006766:	6813      	ldr	r3, [r2, #0]
 8006768:	b933      	cbnz	r3, 8006778 <_free_r+0x30>
 800676a:	6063      	str	r3, [r4, #4]
 800676c:	6014      	str	r4, [r2, #0]
 800676e:	b003      	add	sp, #12
 8006770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006774:	f000 bc66 	b.w	8007044 <__malloc_unlock>
 8006778:	42a3      	cmp	r3, r4
 800677a:	d908      	bls.n	800678e <_free_r+0x46>
 800677c:	6825      	ldr	r5, [r4, #0]
 800677e:	1961      	adds	r1, r4, r5
 8006780:	428b      	cmp	r3, r1
 8006782:	bf01      	itttt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	1949      	addeq	r1, r1, r5
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	e7ed      	b.n	800676a <_free_r+0x22>
 800678e:	461a      	mov	r2, r3
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b10b      	cbz	r3, 8006798 <_free_r+0x50>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d9fa      	bls.n	800678e <_free_r+0x46>
 8006798:	6811      	ldr	r1, [r2, #0]
 800679a:	1855      	adds	r5, r2, r1
 800679c:	42a5      	cmp	r5, r4
 800679e:	d10b      	bne.n	80067b8 <_free_r+0x70>
 80067a0:	6824      	ldr	r4, [r4, #0]
 80067a2:	4421      	add	r1, r4
 80067a4:	1854      	adds	r4, r2, r1
 80067a6:	42a3      	cmp	r3, r4
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	d1e0      	bne.n	800676e <_free_r+0x26>
 80067ac:	681c      	ldr	r4, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	6053      	str	r3, [r2, #4]
 80067b2:	4421      	add	r1, r4
 80067b4:	6011      	str	r1, [r2, #0]
 80067b6:	e7da      	b.n	800676e <_free_r+0x26>
 80067b8:	d902      	bls.n	80067c0 <_free_r+0x78>
 80067ba:	230c      	movs	r3, #12
 80067bc:	6003      	str	r3, [r0, #0]
 80067be:	e7d6      	b.n	800676e <_free_r+0x26>
 80067c0:	6825      	ldr	r5, [r4, #0]
 80067c2:	1961      	adds	r1, r4, r5
 80067c4:	428b      	cmp	r3, r1
 80067c6:	bf04      	itt	eq
 80067c8:	6819      	ldreq	r1, [r3, #0]
 80067ca:	685b      	ldreq	r3, [r3, #4]
 80067cc:	6063      	str	r3, [r4, #4]
 80067ce:	bf04      	itt	eq
 80067d0:	1949      	addeq	r1, r1, r5
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6054      	str	r4, [r2, #4]
 80067d6:	e7ca      	b.n	800676e <_free_r+0x26>
 80067d8:	b003      	add	sp, #12
 80067da:	bd30      	pop	{r4, r5, pc}
 80067dc:	24004b34 	.word	0x24004b34

080067e0 <sbrk_aligned>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4e0e      	ldr	r6, [pc, #56]	; (800681c <sbrk_aligned+0x3c>)
 80067e4:	460c      	mov	r4, r1
 80067e6:	6831      	ldr	r1, [r6, #0]
 80067e8:	4605      	mov	r5, r0
 80067ea:	b911      	cbnz	r1, 80067f2 <sbrk_aligned+0x12>
 80067ec:	f000 fb7a 	bl	8006ee4 <_sbrk_r>
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f000 fb75 	bl	8006ee4 <_sbrk_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d00a      	beq.n	8006814 <sbrk_aligned+0x34>
 80067fe:	1cc4      	adds	r4, r0, #3
 8006800:	f024 0403 	bic.w	r4, r4, #3
 8006804:	42a0      	cmp	r0, r4
 8006806:	d007      	beq.n	8006818 <sbrk_aligned+0x38>
 8006808:	1a21      	subs	r1, r4, r0
 800680a:	4628      	mov	r0, r5
 800680c:	f000 fb6a 	bl	8006ee4 <_sbrk_r>
 8006810:	3001      	adds	r0, #1
 8006812:	d101      	bne.n	8006818 <sbrk_aligned+0x38>
 8006814:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006818:	4620      	mov	r0, r4
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	24004b38 	.word	0x24004b38

08006820 <_malloc_r>:
 8006820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	1ccd      	adds	r5, r1, #3
 8006826:	f025 0503 	bic.w	r5, r5, #3
 800682a:	3508      	adds	r5, #8
 800682c:	2d0c      	cmp	r5, #12
 800682e:	bf38      	it	cc
 8006830:	250c      	movcc	r5, #12
 8006832:	2d00      	cmp	r5, #0
 8006834:	4607      	mov	r7, r0
 8006836:	db01      	blt.n	800683c <_malloc_r+0x1c>
 8006838:	42a9      	cmp	r1, r5
 800683a:	d905      	bls.n	8006848 <_malloc_r+0x28>
 800683c:	230c      	movs	r3, #12
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	2600      	movs	r6, #0
 8006842:	4630      	mov	r0, r6
 8006844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006848:	4e2e      	ldr	r6, [pc, #184]	; (8006904 <_malloc_r+0xe4>)
 800684a:	f000 fbf5 	bl	8007038 <__malloc_lock>
 800684e:	6833      	ldr	r3, [r6, #0]
 8006850:	461c      	mov	r4, r3
 8006852:	bb34      	cbnz	r4, 80068a2 <_malloc_r+0x82>
 8006854:	4629      	mov	r1, r5
 8006856:	4638      	mov	r0, r7
 8006858:	f7ff ffc2 	bl	80067e0 <sbrk_aligned>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	4604      	mov	r4, r0
 8006860:	d14d      	bne.n	80068fe <_malloc_r+0xde>
 8006862:	6834      	ldr	r4, [r6, #0]
 8006864:	4626      	mov	r6, r4
 8006866:	2e00      	cmp	r6, #0
 8006868:	d140      	bne.n	80068ec <_malloc_r+0xcc>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	4631      	mov	r1, r6
 800686e:	4638      	mov	r0, r7
 8006870:	eb04 0803 	add.w	r8, r4, r3
 8006874:	f000 fb36 	bl	8006ee4 <_sbrk_r>
 8006878:	4580      	cmp	r8, r0
 800687a:	d13a      	bne.n	80068f2 <_malloc_r+0xd2>
 800687c:	6821      	ldr	r1, [r4, #0]
 800687e:	3503      	adds	r5, #3
 8006880:	1a6d      	subs	r5, r5, r1
 8006882:	f025 0503 	bic.w	r5, r5, #3
 8006886:	3508      	adds	r5, #8
 8006888:	2d0c      	cmp	r5, #12
 800688a:	bf38      	it	cc
 800688c:	250c      	movcc	r5, #12
 800688e:	4629      	mov	r1, r5
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff ffa5 	bl	80067e0 <sbrk_aligned>
 8006896:	3001      	adds	r0, #1
 8006898:	d02b      	beq.n	80068f2 <_malloc_r+0xd2>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	442b      	add	r3, r5
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	e00e      	b.n	80068c0 <_malloc_r+0xa0>
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	1b52      	subs	r2, r2, r5
 80068a6:	d41e      	bmi.n	80068e6 <_malloc_r+0xc6>
 80068a8:	2a0b      	cmp	r2, #11
 80068aa:	d916      	bls.n	80068da <_malloc_r+0xba>
 80068ac:	1961      	adds	r1, r4, r5
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	6025      	str	r5, [r4, #0]
 80068b2:	bf18      	it	ne
 80068b4:	6059      	strne	r1, [r3, #4]
 80068b6:	6863      	ldr	r3, [r4, #4]
 80068b8:	bf08      	it	eq
 80068ba:	6031      	streq	r1, [r6, #0]
 80068bc:	5162      	str	r2, [r4, r5]
 80068be:	604b      	str	r3, [r1, #4]
 80068c0:	4638      	mov	r0, r7
 80068c2:	f104 060b 	add.w	r6, r4, #11
 80068c6:	f000 fbbd 	bl	8007044 <__malloc_unlock>
 80068ca:	f026 0607 	bic.w	r6, r6, #7
 80068ce:	1d23      	adds	r3, r4, #4
 80068d0:	1af2      	subs	r2, r6, r3
 80068d2:	d0b6      	beq.n	8006842 <_malloc_r+0x22>
 80068d4:	1b9b      	subs	r3, r3, r6
 80068d6:	50a3      	str	r3, [r4, r2]
 80068d8:	e7b3      	b.n	8006842 <_malloc_r+0x22>
 80068da:	6862      	ldr	r2, [r4, #4]
 80068dc:	42a3      	cmp	r3, r4
 80068de:	bf0c      	ite	eq
 80068e0:	6032      	streq	r2, [r6, #0]
 80068e2:	605a      	strne	r2, [r3, #4]
 80068e4:	e7ec      	b.n	80068c0 <_malloc_r+0xa0>
 80068e6:	4623      	mov	r3, r4
 80068e8:	6864      	ldr	r4, [r4, #4]
 80068ea:	e7b2      	b.n	8006852 <_malloc_r+0x32>
 80068ec:	4634      	mov	r4, r6
 80068ee:	6876      	ldr	r6, [r6, #4]
 80068f0:	e7b9      	b.n	8006866 <_malloc_r+0x46>
 80068f2:	230c      	movs	r3, #12
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4638      	mov	r0, r7
 80068f8:	f000 fba4 	bl	8007044 <__malloc_unlock>
 80068fc:	e7a1      	b.n	8006842 <_malloc_r+0x22>
 80068fe:	6025      	str	r5, [r4, #0]
 8006900:	e7de      	b.n	80068c0 <_malloc_r+0xa0>
 8006902:	bf00      	nop
 8006904:	24004b34 	.word	0x24004b34

08006908 <__sfputc_r>:
 8006908:	6893      	ldr	r3, [r2, #8]
 800690a:	3b01      	subs	r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	b410      	push	{r4}
 8006910:	6093      	str	r3, [r2, #8]
 8006912:	da08      	bge.n	8006926 <__sfputc_r+0x1e>
 8006914:	6994      	ldr	r4, [r2, #24]
 8006916:	42a3      	cmp	r3, r4
 8006918:	db01      	blt.n	800691e <__sfputc_r+0x16>
 800691a:	290a      	cmp	r1, #10
 800691c:	d103      	bne.n	8006926 <__sfputc_r+0x1e>
 800691e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006922:	f7ff bc31 	b.w	8006188 <__swbuf_r>
 8006926:	6813      	ldr	r3, [r2, #0]
 8006928:	1c58      	adds	r0, r3, #1
 800692a:	6010      	str	r0, [r2, #0]
 800692c:	7019      	strb	r1, [r3, #0]
 800692e:	4608      	mov	r0, r1
 8006930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006934:	4770      	bx	lr

08006936 <__sfputs_r>:
 8006936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006938:	4606      	mov	r6, r0
 800693a:	460f      	mov	r7, r1
 800693c:	4614      	mov	r4, r2
 800693e:	18d5      	adds	r5, r2, r3
 8006940:	42ac      	cmp	r4, r5
 8006942:	d101      	bne.n	8006948 <__sfputs_r+0x12>
 8006944:	2000      	movs	r0, #0
 8006946:	e007      	b.n	8006958 <__sfputs_r+0x22>
 8006948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800694c:	463a      	mov	r2, r7
 800694e:	4630      	mov	r0, r6
 8006950:	f7ff ffda 	bl	8006908 <__sfputc_r>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d1f3      	bne.n	8006940 <__sfputs_r+0xa>
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800695c <_vfiprintf_r>:
 800695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	460d      	mov	r5, r1
 8006962:	b09d      	sub	sp, #116	; 0x74
 8006964:	4614      	mov	r4, r2
 8006966:	4698      	mov	r8, r3
 8006968:	4606      	mov	r6, r0
 800696a:	b118      	cbz	r0, 8006974 <_vfiprintf_r+0x18>
 800696c:	6983      	ldr	r3, [r0, #24]
 800696e:	b90b      	cbnz	r3, 8006974 <_vfiprintf_r+0x18>
 8006970:	f7ff fde4 	bl	800653c <__sinit>
 8006974:	4b89      	ldr	r3, [pc, #548]	; (8006b9c <_vfiprintf_r+0x240>)
 8006976:	429d      	cmp	r5, r3
 8006978:	d11b      	bne.n	80069b2 <_vfiprintf_r+0x56>
 800697a:	6875      	ldr	r5, [r6, #4]
 800697c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800697e:	07d9      	lsls	r1, r3, #31
 8006980:	d405      	bmi.n	800698e <_vfiprintf_r+0x32>
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	059a      	lsls	r2, r3, #22
 8006986:	d402      	bmi.n	800698e <_vfiprintf_r+0x32>
 8006988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800698a:	f7ff fe75 	bl	8006678 <__retarget_lock_acquire_recursive>
 800698e:	89ab      	ldrh	r3, [r5, #12]
 8006990:	071b      	lsls	r3, r3, #28
 8006992:	d501      	bpl.n	8006998 <_vfiprintf_r+0x3c>
 8006994:	692b      	ldr	r3, [r5, #16]
 8006996:	b9eb      	cbnz	r3, 80069d4 <_vfiprintf_r+0x78>
 8006998:	4629      	mov	r1, r5
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff fc46 	bl	800622c <__swsetup_r>
 80069a0:	b1c0      	cbz	r0, 80069d4 <_vfiprintf_r+0x78>
 80069a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a4:	07dc      	lsls	r4, r3, #31
 80069a6:	d50e      	bpl.n	80069c6 <_vfiprintf_r+0x6a>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ac:	b01d      	add	sp, #116	; 0x74
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b2:	4b7b      	ldr	r3, [pc, #492]	; (8006ba0 <_vfiprintf_r+0x244>)
 80069b4:	429d      	cmp	r5, r3
 80069b6:	d101      	bne.n	80069bc <_vfiprintf_r+0x60>
 80069b8:	68b5      	ldr	r5, [r6, #8]
 80069ba:	e7df      	b.n	800697c <_vfiprintf_r+0x20>
 80069bc:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <_vfiprintf_r+0x248>)
 80069be:	429d      	cmp	r5, r3
 80069c0:	bf08      	it	eq
 80069c2:	68f5      	ldreq	r5, [r6, #12]
 80069c4:	e7da      	b.n	800697c <_vfiprintf_r+0x20>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	0598      	lsls	r0, r3, #22
 80069ca:	d4ed      	bmi.n	80069a8 <_vfiprintf_r+0x4c>
 80069cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ce:	f7ff fe54 	bl	800667a <__retarget_lock_release_recursive>
 80069d2:	e7e9      	b.n	80069a8 <_vfiprintf_r+0x4c>
 80069d4:	2300      	movs	r3, #0
 80069d6:	9309      	str	r3, [sp, #36]	; 0x24
 80069d8:	2320      	movs	r3, #32
 80069da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069de:	f8cd 800c 	str.w	r8, [sp, #12]
 80069e2:	2330      	movs	r3, #48	; 0x30
 80069e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ba8 <_vfiprintf_r+0x24c>
 80069e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069ec:	f04f 0901 	mov.w	r9, #1
 80069f0:	4623      	mov	r3, r4
 80069f2:	469a      	mov	sl, r3
 80069f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069f8:	b10a      	cbz	r2, 80069fe <_vfiprintf_r+0xa2>
 80069fa:	2a25      	cmp	r2, #37	; 0x25
 80069fc:	d1f9      	bne.n	80069f2 <_vfiprintf_r+0x96>
 80069fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006a02:	d00b      	beq.n	8006a1c <_vfiprintf_r+0xc0>
 8006a04:	465b      	mov	r3, fp
 8006a06:	4622      	mov	r2, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7ff ff93 	bl	8006936 <__sfputs_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	f000 80aa 	beq.w	8006b6a <_vfiprintf_r+0x20e>
 8006a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a18:	445a      	add	r2, fp
 8006a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80a2 	beq.w	8006b6a <_vfiprintf_r+0x20e>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a30:	f10a 0a01 	add.w	sl, sl, #1
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a3e:	4654      	mov	r4, sl
 8006a40:	2205      	movs	r2, #5
 8006a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a46:	4858      	ldr	r0, [pc, #352]	; (8006ba8 <_vfiprintf_r+0x24c>)
 8006a48:	f7f9 fc4a 	bl	80002e0 <memchr>
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	b9d8      	cbnz	r0, 8006a88 <_vfiprintf_r+0x12c>
 8006a50:	06d1      	lsls	r1, r2, #27
 8006a52:	bf44      	itt	mi
 8006a54:	2320      	movmi	r3, #32
 8006a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5a:	0713      	lsls	r3, r2, #28
 8006a5c:	bf44      	itt	mi
 8006a5e:	232b      	movmi	r3, #43	; 0x2b
 8006a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a64:	f89a 3000 	ldrb.w	r3, [sl]
 8006a68:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6a:	d015      	beq.n	8006a98 <_vfiprintf_r+0x13c>
 8006a6c:	9a07      	ldr	r2, [sp, #28]
 8006a6e:	4654      	mov	r4, sl
 8006a70:	2000      	movs	r0, #0
 8006a72:	f04f 0c0a 	mov.w	ip, #10
 8006a76:	4621      	mov	r1, r4
 8006a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a7c:	3b30      	subs	r3, #48	; 0x30
 8006a7e:	2b09      	cmp	r3, #9
 8006a80:	d94e      	bls.n	8006b20 <_vfiprintf_r+0x1c4>
 8006a82:	b1b0      	cbz	r0, 8006ab2 <_vfiprintf_r+0x156>
 8006a84:	9207      	str	r2, [sp, #28]
 8006a86:	e014      	b.n	8006ab2 <_vfiprintf_r+0x156>
 8006a88:	eba0 0308 	sub.w	r3, r0, r8
 8006a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a90:	4313      	orrs	r3, r2
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	46a2      	mov	sl, r4
 8006a96:	e7d2      	b.n	8006a3e <_vfiprintf_r+0xe2>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	1d19      	adds	r1, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	9103      	str	r1, [sp, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfbb      	ittet	lt
 8006aa4:	425b      	neglt	r3, r3
 8006aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8006aaa:	9307      	strge	r3, [sp, #28]
 8006aac:	9307      	strlt	r3, [sp, #28]
 8006aae:	bfb8      	it	lt
 8006ab0:	9204      	strlt	r2, [sp, #16]
 8006ab2:	7823      	ldrb	r3, [r4, #0]
 8006ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab6:	d10c      	bne.n	8006ad2 <_vfiprintf_r+0x176>
 8006ab8:	7863      	ldrb	r3, [r4, #1]
 8006aba:	2b2a      	cmp	r3, #42	; 0x2a
 8006abc:	d135      	bne.n	8006b2a <_vfiprintf_r+0x1ce>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	1d1a      	adds	r2, r3, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	9203      	str	r2, [sp, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ace:	3402      	adds	r4, #2
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bb8 <_vfiprintf_r+0x25c>
 8006ad6:	7821      	ldrb	r1, [r4, #0]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	4650      	mov	r0, sl
 8006adc:	f7f9 fc00 	bl	80002e0 <memchr>
 8006ae0:	b140      	cbz	r0, 8006af4 <_vfiprintf_r+0x198>
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	eba0 000a 	sub.w	r0, r0, sl
 8006ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8006aec:	9b04      	ldr	r3, [sp, #16]
 8006aee:	4303      	orrs	r3, r0
 8006af0:	3401      	adds	r4, #1
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af8:	482c      	ldr	r0, [pc, #176]	; (8006bac <_vfiprintf_r+0x250>)
 8006afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006afe:	2206      	movs	r2, #6
 8006b00:	f7f9 fbee 	bl	80002e0 <memchr>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d03f      	beq.n	8006b88 <_vfiprintf_r+0x22c>
 8006b08:	4b29      	ldr	r3, [pc, #164]	; (8006bb0 <_vfiprintf_r+0x254>)
 8006b0a:	bb1b      	cbnz	r3, 8006b54 <_vfiprintf_r+0x1f8>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	3307      	adds	r3, #7
 8006b10:	f023 0307 	bic.w	r3, r3, #7
 8006b14:	3308      	adds	r3, #8
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1a:	443b      	add	r3, r7
 8006b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1e:	e767      	b.n	80069f0 <_vfiprintf_r+0x94>
 8006b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b24:	460c      	mov	r4, r1
 8006b26:	2001      	movs	r0, #1
 8006b28:	e7a5      	b.n	8006a76 <_vfiprintf_r+0x11a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	3401      	adds	r4, #1
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	4619      	mov	r1, r3
 8006b32:	f04f 0c0a 	mov.w	ip, #10
 8006b36:	4620      	mov	r0, r4
 8006b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b3c:	3a30      	subs	r2, #48	; 0x30
 8006b3e:	2a09      	cmp	r2, #9
 8006b40:	d903      	bls.n	8006b4a <_vfiprintf_r+0x1ee>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0c5      	beq.n	8006ad2 <_vfiprintf_r+0x176>
 8006b46:	9105      	str	r1, [sp, #20]
 8006b48:	e7c3      	b.n	8006ad2 <_vfiprintf_r+0x176>
 8006b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b4e:	4604      	mov	r4, r0
 8006b50:	2301      	movs	r3, #1
 8006b52:	e7f0      	b.n	8006b36 <_vfiprintf_r+0x1da>
 8006b54:	ab03      	add	r3, sp, #12
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	462a      	mov	r2, r5
 8006b5a:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <_vfiprintf_r+0x258>)
 8006b5c:	a904      	add	r1, sp, #16
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f3af 8000 	nop.w
 8006b64:	4607      	mov	r7, r0
 8006b66:	1c78      	adds	r0, r7, #1
 8006b68:	d1d6      	bne.n	8006b18 <_vfiprintf_r+0x1bc>
 8006b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b6c:	07d9      	lsls	r1, r3, #31
 8006b6e:	d405      	bmi.n	8006b7c <_vfiprintf_r+0x220>
 8006b70:	89ab      	ldrh	r3, [r5, #12]
 8006b72:	059a      	lsls	r2, r3, #22
 8006b74:	d402      	bmi.n	8006b7c <_vfiprintf_r+0x220>
 8006b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b78:	f7ff fd7f 	bl	800667a <__retarget_lock_release_recursive>
 8006b7c:	89ab      	ldrh	r3, [r5, #12]
 8006b7e:	065b      	lsls	r3, r3, #25
 8006b80:	f53f af12 	bmi.w	80069a8 <_vfiprintf_r+0x4c>
 8006b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b86:	e711      	b.n	80069ac <_vfiprintf_r+0x50>
 8006b88:	ab03      	add	r3, sp, #12
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <_vfiprintf_r+0x258>)
 8006b90:	a904      	add	r1, sp, #16
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f880 	bl	8006c98 <_printf_i>
 8006b98:	e7e4      	b.n	8006b64 <_vfiprintf_r+0x208>
 8006b9a:	bf00      	nop
 8006b9c:	080071c0 	.word	0x080071c0
 8006ba0:	080071e0 	.word	0x080071e0
 8006ba4:	080071a0 	.word	0x080071a0
 8006ba8:	08007200 	.word	0x08007200
 8006bac:	0800720a 	.word	0x0800720a
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	08006937 	.word	0x08006937
 8006bb8:	08007206 	.word	0x08007206

08006bbc <_printf_common>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	4699      	mov	r9, r3
 8006bc4:	688a      	ldr	r2, [r1, #8]
 8006bc6:	690b      	ldr	r3, [r1, #16]
 8006bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	bfb8      	it	lt
 8006bd0:	4613      	movlt	r3, r2
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bd8:	4607      	mov	r7, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b10a      	cbz	r2, 8006be2 <_printf_common+0x26>
 8006bde:	3301      	adds	r3, #1
 8006be0:	6033      	str	r3, [r6, #0]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	0699      	lsls	r1, r3, #26
 8006be6:	bf42      	ittt	mi
 8006be8:	6833      	ldrmi	r3, [r6, #0]
 8006bea:	3302      	addmi	r3, #2
 8006bec:	6033      	strmi	r3, [r6, #0]
 8006bee:	6825      	ldr	r5, [r4, #0]
 8006bf0:	f015 0506 	ands.w	r5, r5, #6
 8006bf4:	d106      	bne.n	8006c04 <_printf_common+0x48>
 8006bf6:	f104 0a19 	add.w	sl, r4, #25
 8006bfa:	68e3      	ldr	r3, [r4, #12]
 8006bfc:	6832      	ldr	r2, [r6, #0]
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	42ab      	cmp	r3, r5
 8006c02:	dc26      	bgt.n	8006c52 <_printf_common+0x96>
 8006c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c08:	1e13      	subs	r3, r2, #0
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	0692      	lsls	r2, r2, #26
 8006c12:	d42b      	bmi.n	8006c6c <_printf_common+0xb0>
 8006c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c18:	4649      	mov	r1, r9
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	47c0      	blx	r8
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d01e      	beq.n	8006c60 <_printf_common+0xa4>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	68e5      	ldr	r5, [r4, #12]
 8006c26:	6832      	ldr	r2, [r6, #0]
 8006c28:	f003 0306 	and.w	r3, r3, #6
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	bf08      	it	eq
 8006c30:	1aad      	subeq	r5, r5, r2
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	6922      	ldr	r2, [r4, #16]
 8006c36:	bf0c      	ite	eq
 8006c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c3c:	2500      	movne	r5, #0
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	bfc4      	itt	gt
 8006c42:	1a9b      	subgt	r3, r3, r2
 8006c44:	18ed      	addgt	r5, r5, r3
 8006c46:	2600      	movs	r6, #0
 8006c48:	341a      	adds	r4, #26
 8006c4a:	42b5      	cmp	r5, r6
 8006c4c:	d11a      	bne.n	8006c84 <_printf_common+0xc8>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e008      	b.n	8006c64 <_printf_common+0xa8>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4652      	mov	r2, sl
 8006c56:	4649      	mov	r1, r9
 8006c58:	4638      	mov	r0, r7
 8006c5a:	47c0      	blx	r8
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d103      	bne.n	8006c68 <_printf_common+0xac>
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c68:	3501      	adds	r5, #1
 8006c6a:	e7c6      	b.n	8006bfa <_printf_common+0x3e>
 8006c6c:	18e1      	adds	r1, r4, r3
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	2030      	movs	r0, #48	; 0x30
 8006c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c76:	4422      	add	r2, r4
 8006c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c80:	3302      	adds	r3, #2
 8006c82:	e7c7      	b.n	8006c14 <_printf_common+0x58>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4622      	mov	r2, r4
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c0      	blx	r8
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0e6      	beq.n	8006c60 <_printf_common+0xa4>
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7d9      	b.n	8006c4a <_printf_common+0x8e>
	...

08006c98 <_printf_i>:
 8006c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	7e0f      	ldrb	r7, [r1, #24]
 8006c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca0:	2f78      	cmp	r7, #120	; 0x78
 8006ca2:	4691      	mov	r9, r2
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	469a      	mov	sl, r3
 8006caa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cae:	d807      	bhi.n	8006cc0 <_printf_i+0x28>
 8006cb0:	2f62      	cmp	r7, #98	; 0x62
 8006cb2:	d80a      	bhi.n	8006cca <_printf_i+0x32>
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	f000 80d8 	beq.w	8006e6a <_printf_i+0x1d2>
 8006cba:	2f58      	cmp	r7, #88	; 0x58
 8006cbc:	f000 80a3 	beq.w	8006e06 <_printf_i+0x16e>
 8006cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cc8:	e03a      	b.n	8006d40 <_printf_i+0xa8>
 8006cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cce:	2b15      	cmp	r3, #21
 8006cd0:	d8f6      	bhi.n	8006cc0 <_printf_i+0x28>
 8006cd2:	a101      	add	r1, pc, #4	; (adr r1, 8006cd8 <_printf_i+0x40>)
 8006cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd8:	08006d31 	.word	0x08006d31
 8006cdc:	08006d45 	.word	0x08006d45
 8006ce0:	08006cc1 	.word	0x08006cc1
 8006ce4:	08006cc1 	.word	0x08006cc1
 8006ce8:	08006cc1 	.word	0x08006cc1
 8006cec:	08006cc1 	.word	0x08006cc1
 8006cf0:	08006d45 	.word	0x08006d45
 8006cf4:	08006cc1 	.word	0x08006cc1
 8006cf8:	08006cc1 	.word	0x08006cc1
 8006cfc:	08006cc1 	.word	0x08006cc1
 8006d00:	08006cc1 	.word	0x08006cc1
 8006d04:	08006e51 	.word	0x08006e51
 8006d08:	08006d75 	.word	0x08006d75
 8006d0c:	08006e33 	.word	0x08006e33
 8006d10:	08006cc1 	.word	0x08006cc1
 8006d14:	08006cc1 	.word	0x08006cc1
 8006d18:	08006e73 	.word	0x08006e73
 8006d1c:	08006cc1 	.word	0x08006cc1
 8006d20:	08006d75 	.word	0x08006d75
 8006d24:	08006cc1 	.word	0x08006cc1
 8006d28:	08006cc1 	.word	0x08006cc1
 8006d2c:	08006e3b 	.word	0x08006e3b
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	1d1a      	adds	r2, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	602a      	str	r2, [r5, #0]
 8006d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0a3      	b.n	8006e8c <_printf_i+0x1f4>
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	6829      	ldr	r1, [r5, #0]
 8006d48:	0606      	lsls	r6, r0, #24
 8006d4a:	f101 0304 	add.w	r3, r1, #4
 8006d4e:	d50a      	bpl.n	8006d66 <_printf_i+0xce>
 8006d50:	680e      	ldr	r6, [r1, #0]
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	da03      	bge.n	8006d60 <_printf_i+0xc8>
 8006d58:	232d      	movs	r3, #45	; 0x2d
 8006d5a:	4276      	negs	r6, r6
 8006d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d60:	485e      	ldr	r0, [pc, #376]	; (8006edc <_printf_i+0x244>)
 8006d62:	230a      	movs	r3, #10
 8006d64:	e019      	b.n	8006d9a <_printf_i+0x102>
 8006d66:	680e      	ldr	r6, [r1, #0]
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d6e:	bf18      	it	ne
 8006d70:	b236      	sxthne	r6, r6
 8006d72:	e7ef      	b.n	8006d54 <_printf_i+0xbc>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1d19      	adds	r1, r3, #4
 8006d7a:	6029      	str	r1, [r5, #0]
 8006d7c:	0601      	lsls	r1, r0, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0xec>
 8006d80:	681e      	ldr	r6, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0xf2>
 8006d84:	0646      	lsls	r6, r0, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0xe8>
 8006d88:	881e      	ldrh	r6, [r3, #0]
 8006d8a:	4854      	ldr	r0, [pc, #336]	; (8006edc <_printf_i+0x244>)
 8006d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d8e:	bf0c      	ite	eq
 8006d90:	2308      	moveq	r3, #8
 8006d92:	230a      	movne	r3, #10
 8006d94:	2100      	movs	r1, #0
 8006d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9a:	6865      	ldr	r5, [r4, #4]
 8006d9c:	60a5      	str	r5, [r4, #8]
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	bfa2      	ittt	ge
 8006da2:	6821      	ldrge	r1, [r4, #0]
 8006da4:	f021 0104 	bicge.w	r1, r1, #4
 8006da8:	6021      	strge	r1, [r4, #0]
 8006daa:	b90e      	cbnz	r6, 8006db0 <_printf_i+0x118>
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d04d      	beq.n	8006e4c <_printf_i+0x1b4>
 8006db0:	4615      	mov	r5, r2
 8006db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006db6:	fb03 6711 	mls	r7, r3, r1, r6
 8006dba:	5dc7      	ldrb	r7, [r0, r7]
 8006dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc0:	4637      	mov	r7, r6
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	460e      	mov	r6, r1
 8006dc6:	d9f4      	bls.n	8006db2 <_printf_i+0x11a>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d10b      	bne.n	8006de4 <_printf_i+0x14c>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07de      	lsls	r6, r3, #31
 8006dd0:	d508      	bpl.n	8006de4 <_printf_i+0x14c>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6861      	ldr	r1, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	bfde      	ittt	le
 8006dda:	2330      	movle	r3, #48	; 0x30
 8006ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006de4:	1b52      	subs	r2, r2, r5
 8006de6:	6122      	str	r2, [r4, #16]
 8006de8:	f8cd a000 	str.w	sl, [sp]
 8006dec:	464b      	mov	r3, r9
 8006dee:	aa03      	add	r2, sp, #12
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fee2 	bl	8006bbc <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d14c      	bne.n	8006e96 <_printf_i+0x1fe>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	4835      	ldr	r0, [pc, #212]	; (8006edc <_printf_i+0x244>)
 8006e08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e0c:	6829      	ldr	r1, [r5, #0]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e14:	6029      	str	r1, [r5, #0]
 8006e16:	061d      	lsls	r5, r3, #24
 8006e18:	d514      	bpl.n	8006e44 <_printf_i+0x1ac>
 8006e1a:	07df      	lsls	r7, r3, #31
 8006e1c:	bf44      	itt	mi
 8006e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e22:	6023      	strmi	r3, [r4, #0]
 8006e24:	b91e      	cbnz	r6, 8006e2e <_printf_i+0x196>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f023 0320 	bic.w	r3, r3, #32
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	2310      	movs	r3, #16
 8006e30:	e7b0      	b.n	8006d94 <_printf_i+0xfc>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f043 0320 	orr.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	2378      	movs	r3, #120	; 0x78
 8006e3c:	4828      	ldr	r0, [pc, #160]	; (8006ee0 <_printf_i+0x248>)
 8006e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e42:	e7e3      	b.n	8006e0c <_printf_i+0x174>
 8006e44:	0659      	lsls	r1, r3, #25
 8006e46:	bf48      	it	mi
 8006e48:	b2b6      	uxthmi	r6, r6
 8006e4a:	e7e6      	b.n	8006e1a <_printf_i+0x182>
 8006e4c:	4615      	mov	r5, r2
 8006e4e:	e7bb      	b.n	8006dc8 <_printf_i+0x130>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	6826      	ldr	r6, [r4, #0]
 8006e54:	6961      	ldr	r1, [r4, #20]
 8006e56:	1d18      	adds	r0, r3, #4
 8006e58:	6028      	str	r0, [r5, #0]
 8006e5a:	0635      	lsls	r5, r6, #24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	d501      	bpl.n	8006e64 <_printf_i+0x1cc>
 8006e60:	6019      	str	r1, [r3, #0]
 8006e62:	e002      	b.n	8006e6a <_printf_i+0x1d2>
 8006e64:	0670      	lsls	r0, r6, #25
 8006e66:	d5fb      	bpl.n	8006e60 <_printf_i+0x1c8>
 8006e68:	8019      	strh	r1, [r3, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	4615      	mov	r5, r2
 8006e70:	e7ba      	b.n	8006de8 <_printf_i+0x150>
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	1d1a      	adds	r2, r3, #4
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	6862      	ldr	r2, [r4, #4]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7f9 fa2e 	bl	80002e0 <memchr>
 8006e84:	b108      	cbz	r0, 8006e8a <_printf_i+0x1f2>
 8006e86:	1b40      	subs	r0, r0, r5
 8006e88:	6060      	str	r0, [r4, #4]
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e94:	e7a8      	b.n	8006de8 <_printf_i+0x150>
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	47d0      	blx	sl
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d0ab      	beq.n	8006dfc <_printf_i+0x164>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	079b      	lsls	r3, r3, #30
 8006ea8:	d413      	bmi.n	8006ed2 <_printf_i+0x23a>
 8006eaa:	68e0      	ldr	r0, [r4, #12]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	4298      	cmp	r0, r3
 8006eb0:	bfb8      	it	lt
 8006eb2:	4618      	movlt	r0, r3
 8006eb4:	e7a4      	b.n	8006e00 <_printf_i+0x168>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4632      	mov	r2, r6
 8006eba:	4649      	mov	r1, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	47d0      	blx	sl
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d09b      	beq.n	8006dfc <_printf_i+0x164>
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	9903      	ldr	r1, [sp, #12]
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	42ab      	cmp	r3, r5
 8006ece:	dcf2      	bgt.n	8006eb6 <_printf_i+0x21e>
 8006ed0:	e7eb      	b.n	8006eaa <_printf_i+0x212>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	f104 0619 	add.w	r6, r4, #25
 8006ed8:	e7f5      	b.n	8006ec6 <_printf_i+0x22e>
 8006eda:	bf00      	nop
 8006edc:	08007211 	.word	0x08007211
 8006ee0:	08007222 	.word	0x08007222

08006ee4 <_sbrk_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d06      	ldr	r5, [pc, #24]	; (8006f00 <_sbrk_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	602b      	str	r3, [r5, #0]
 8006ef0:	f7f9 feac 	bl	8000c4c <_sbrk>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_sbrk_r+0x1a>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_sbrk_r+0x1a>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	24004b3c 	.word	0x24004b3c

08006f04 <__sread>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	460c      	mov	r4, r1
 8006f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0c:	f000 f8a0 	bl	8007050 <_read_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	bfab      	itete	ge
 8006f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f16:	89a3      	ldrhlt	r3, [r4, #12]
 8006f18:	181b      	addge	r3, r3, r0
 8006f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f1e:	bfac      	ite	ge
 8006f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f22:	81a3      	strhlt	r3, [r4, #12]
 8006f24:	bd10      	pop	{r4, pc}

08006f26 <__swrite>:
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	461f      	mov	r7, r3
 8006f2c:	898b      	ldrh	r3, [r1, #12]
 8006f2e:	05db      	lsls	r3, r3, #23
 8006f30:	4605      	mov	r5, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	4616      	mov	r6, r2
 8006f36:	d505      	bpl.n	8006f44 <__swrite+0x1e>
 8006f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f000 f868 	bl	8007014 <_lseek_r>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	4632      	mov	r2, r6
 8006f52:	463b      	mov	r3, r7
 8006f54:	4628      	mov	r0, r5
 8006f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5a:	f000 b817 	b.w	8006f8c <_write_r>

08006f5e <__sseek>:
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	460c      	mov	r4, r1
 8006f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f66:	f000 f855 	bl	8007014 <_lseek_r>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	bf15      	itete	ne
 8006f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f7a:	81a3      	strheq	r3, [r4, #12]
 8006f7c:	bf18      	it	ne
 8006f7e:	81a3      	strhne	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__sclose>:
 8006f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f86:	f000 b813 	b.w	8006fb0 <_close_r>
	...

08006f8c <_write_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d07      	ldr	r5, [pc, #28]	; (8006fac <_write_r+0x20>)
 8006f90:	4604      	mov	r4, r0
 8006f92:	4608      	mov	r0, r1
 8006f94:	4611      	mov	r1, r2
 8006f96:	2200      	movs	r2, #0
 8006f98:	602a      	str	r2, [r5, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f7f9 fe05 	bl	8000baa <_write>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_write_r+0x1e>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_write_r+0x1e>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	24004b3c 	.word	0x24004b3c

08006fb0 <_close_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	; (8006fcc <_close_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7f9 fe11 	bl	8000be2 <_close>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_close_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_close_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	24004b3c 	.word	0x24004b3c

08006fd0 <_fstat_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	; (8006ff0 <_fstat_r+0x20>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f7f9 fe0c 	bl	8000bfa <_fstat>
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	d102      	bne.n	8006fec <_fstat_r+0x1c>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	b103      	cbz	r3, 8006fec <_fstat_r+0x1c>
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	24004b3c 	.word	0x24004b3c

08006ff4 <_isatty_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_isatty_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7f9 fe0b 	bl	8000c1a <_isatty>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_isatty_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_isatty_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	24004b3c 	.word	0x24004b3c

08007014 <_lseek_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_lseek_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7f9 fe04 	bl	8000c30 <_lseek>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_lseek_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_lseek_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	24004b3c 	.word	0x24004b3c

08007038 <__malloc_lock>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__malloc_lock+0x8>)
 800703a:	f7ff bb1d 	b.w	8006678 <__retarget_lock_acquire_recursive>
 800703e:	bf00      	nop
 8007040:	24004b30 	.word	0x24004b30

08007044 <__malloc_unlock>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__malloc_unlock+0x8>)
 8007046:	f7ff bb18 	b.w	800667a <__retarget_lock_release_recursive>
 800704a:	bf00      	nop
 800704c:	24004b30 	.word	0x24004b30

08007050 <_read_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d07      	ldr	r5, [pc, #28]	; (8007070 <_read_r+0x20>)
 8007054:	4604      	mov	r4, r0
 8007056:	4608      	mov	r0, r1
 8007058:	4611      	mov	r1, r2
 800705a:	2200      	movs	r2, #0
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7f9 fd86 	bl	8000b70 <_read>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_read_r+0x1e>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_read_r+0x1e>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	24004b3c 	.word	0x24004b3c

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr
