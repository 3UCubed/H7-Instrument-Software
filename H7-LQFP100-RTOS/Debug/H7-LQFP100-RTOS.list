
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d6c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0801400c  0801400c  0002400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143bc  080143bc  000243bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080143c4  080143c4  000243c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080143c8  080143c8  000243c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080143cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000080  08014444  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004f9c  08014444  00034f9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000309dc  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000527a  00000000  00000000  00060a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002530  00000000  00000000  00065d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002348  00000000  00000000  00068230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000748b  00000000  00000000  0006a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002edb7  00000000  00000000  00071a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d515  00000000  00000000  000a07ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022dccf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a948  00000000  00000000  0022dd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013ff4 	.word	0x08013ff4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08013ff4 	.word	0x08013ff4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f fa44 	bl	800fb28 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f fa39 	bl	800fb28 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fa2e 	bl	800fb28 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f012 fdf2 	bl	80132b8 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240003bc 	.word	0x240003bc
 80006e0:	24000550 	.word	0x24000550
 80006e4:	24000408 	.word	0x24000408
 80006e8:	24000454 	.word	0x24000454
 80006ec:	0801404c 	.word	0x0801404c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	496b      	ldr	r1, [pc, #428]	; (80008a8 <HAL_UART_RxCpltCallback+0x1b8>)
 80006fc:	486b      	ldr	r0, [pc, #428]	; (80008ac <HAL_UART_RxCpltCallback+0x1bc>)
 80006fe:	f00c fd29 	bl	800d154 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 80c8 	bhi.w	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080007e9 	.word	0x080007e9
 800071c:	080007f9 	.word	0x080007f9
 8000720:	08000809 	.word	0x08000809
 8000724:	08000819 	.word	0x08000819
 8000728:	08000829 	.word	0x08000829
 800072c:	08000839 	.word	0x08000839
 8000730:	08000849 	.word	0x08000849
 8000734:	08000859 	.word	0x08000859
 8000738:	080008a1 	.word	0x080008a1
 800073c:	080008a1 	.word	0x080008a1
 8000740:	080007b9 	.word	0x080007b9
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000869 	.word	0x08000869
 800074c:	08000871 	.word	0x08000871
 8000750:	08000881 	.word	0x08000881
 8000754:	08000891 	.word	0x08000891
 8000758:	08000879 	.word	0x08000879
 800075c:	08000889 	.word	0x08000889
 8000760:	08000899 	.word	0x08000899
 8000764:	080007f1 	.word	0x080007f1
 8000768:	08000801 	.word	0x08000801
 800076c:	08000811 	.word	0x08000811
 8000770:	08000821 	.word	0x08000821
 8000774:	08000831 	.word	0x08000831
 8000778:	08000841 	.word	0x08000841
 800077c:	08000851 	.word	0x08000851
 8000780:	08000861 	.word	0x08000861
 8000784:	080007c1 	.word	0x080007c1
 8000788:	080007c9 	.word	0x080007c9
 800078c:	080007d1 	.word	0x080007d1
 8000790:	080008a1 	.word	0x080008a1
 8000794:	080008a1 	.word	0x080008a1
 8000798:	080008a1 	.word	0x080008a1
 800079c:	080008a1 	.word	0x080008a1
 80007a0:	080008a1 	.word	0x080008a1
 80007a4:	080008a1 	.word	0x080008a1
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	080007e1 	.word	0x080007e1
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	483f      	ldr	r0, [pc, #252]	; (80008b0 <HAL_UART_RxCpltCallback+0x1c0>)
 80007b2:	f012 fd81 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 80007b6:	e073      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007b8:	483e      	ldr	r0, [pc, #248]	; (80008b4 <HAL_UART_RxCpltCallback+0x1c4>)
 80007ba:	f012 fd7d 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 80007be:	e06f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007c0:	483d      	ldr	r0, [pc, #244]	; (80008b8 <HAL_UART_RxCpltCallback+0x1c8>)
 80007c2:	f012 fd79 	bl	80132b8 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 80007c6:	e06b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 80007c8:	483c      	ldr	r0, [pc, #240]	; (80008bc <HAL_UART_RxCpltCallback+0x1cc>)
 80007ca:	f012 fd75 	bl	80132b8 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 80007ce:	e067      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 80007d0:	483b      	ldr	r0, [pc, #236]	; (80008c0 <HAL_UART_RxCpltCallback+0x1d0>)
 80007d2:	f012 fd71 	bl	80132b8 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 80007d6:	e063      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 80007d8:	483a      	ldr	r0, [pc, #232]	; (80008c4 <HAL_UART_RxCpltCallback+0x1d4>)
 80007da:	f012 fd6d 	bl	80132b8 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007de:	e05f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 80007e0:	4839      	ldr	r0, [pc, #228]	; (80008c8 <HAL_UART_RxCpltCallback+0x1d8>)
 80007e2:	f012 fd69 	bl	80132b8 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007e6:	e05b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80007e8:	4838      	ldr	r0, [pc, #224]	; (80008cc <HAL_UART_RxCpltCallback+0x1dc>)
 80007ea:	f012 fd65 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 80007ee:	e057      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80007f0:	4837      	ldr	r0, [pc, #220]	; (80008d0 <HAL_UART_RxCpltCallback+0x1e0>)
 80007f2:	f012 fd61 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 80007f6:	e053      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 80007f8:	4836      	ldr	r0, [pc, #216]	; (80008d4 <HAL_UART_RxCpltCallback+0x1e4>)
 80007fa:	f012 fd5d 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 80007fe:	e04f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000800:	4835      	ldr	r0, [pc, #212]	; (80008d8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000802:	f012 fd59 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000806:	e04b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000808:	4834      	ldr	r0, [pc, #208]	; (80008dc <HAL_UART_RxCpltCallback+0x1ec>)
 800080a:	f012 fd55 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800080e:	e047      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000810:	4833      	ldr	r0, [pc, #204]	; (80008e0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000812:	f012 fd51 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000816:	e043      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <HAL_UART_RxCpltCallback+0x1f4>)
 800081a:	f012 fd4d 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800081e:	e03f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000820:	4831      	ldr	r0, [pc, #196]	; (80008e8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000822:	f012 fd49 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000826:	e03b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <HAL_UART_RxCpltCallback+0x1fc>)
 800082a:	f012 fd45 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800082e:	e037      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000830:	482f      	ldr	r0, [pc, #188]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 8000832:	f012 fd41 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000836:	e033      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000838:	482e      	ldr	r0, [pc, #184]	; (80008f4 <HAL_UART_RxCpltCallback+0x204>)
 800083a:	f012 fd3d 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800083e:	e02f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 8000840:	482d      	ldr	r0, [pc, #180]	; (80008f8 <HAL_UART_RxCpltCallback+0x208>)
 8000842:	f012 fd39 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 8000846:	e02b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 8000848:	482c      	ldr	r0, [pc, #176]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 800084a:	f012 fd35 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 800084e:	e027      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000850:	482b      	ldr	r0, [pc, #172]	; (8000900 <HAL_UART_RxCpltCallback+0x210>)
 8000852:	f012 fd31 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 8000856:	e023      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000858:	482a      	ldr	r0, [pc, #168]	; (8000904 <HAL_UART_RxCpltCallback+0x214>)
 800085a:	f012 fd2d 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 800085e:	e01f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000860:	4829      	ldr	r0, [pc, #164]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 8000862:	f012 fd29 	bl	80132b8 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 8000866:	e01b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000868:	4828      	ldr	r0, [pc, #160]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 800086a:	f012 fd25 	bl	80132b8 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 800086e:	e017      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000870:	4827      	ldr	r0, [pc, #156]	; (8000910 <HAL_UART_RxCpltCallback+0x220>)
 8000872:	f012 fd21 	bl	80132b8 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 8000876:	e013      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000878:	4826      	ldr	r0, [pc, #152]	; (8000914 <HAL_UART_RxCpltCallback+0x224>)
 800087a:	f012 fd1d 	bl	80132b8 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 800087e:	e00f      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000880:	4825      	ldr	r0, [pc, #148]	; (8000918 <HAL_UART_RxCpltCallback+0x228>)
 8000882:	f012 fd19 	bl	80132b8 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 8000886:	e00b      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <HAL_UART_RxCpltCallback+0x22c>)
 800088a:	f012 fd15 	bl	80132b8 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 800088e:	e007      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000890:	4823      	ldr	r0, [pc, #140]	; (8000920 <HAL_UART_RxCpltCallback+0x230>)
 8000892:	f012 fd11 	bl	80132b8 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 8000896:	e003      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000898:	4822      	ldr	r0, [pc, #136]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 800089a:	f012 fd0d 	bl	80132b8 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 800089e:	bf00      	nop
	}
	}
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000554 	.word	0x24000554
 80008ac:	240004a0 	.word	0x240004a0
 80008b0:	08014064 	.word	0x08014064
 80008b4:	0801406c 	.word	0x0801406c
 80008b8:	08014078 	.word	0x08014078
 80008bc:	08014080 	.word	0x08014080
 80008c0:	0801408c 	.word	0x0801408c
 80008c4:	080140a0 	.word	0x080140a0
 80008c8:	080140ac 	.word	0x080140ac
 80008cc:	080140b8 	.word	0x080140b8
 80008d0:	080140c4 	.word	0x080140c4
 80008d4:	080140d0 	.word	0x080140d0
 80008d8:	080140dc 	.word	0x080140dc
 80008dc:	080140ec 	.word	0x080140ec
 80008e0:	080140f8 	.word	0x080140f8
 80008e4:	08014104 	.word	0x08014104
 80008e8:	08014114 	.word	0x08014114
 80008ec:	08014124 	.word	0x08014124
 80008f0:	08014130 	.word	0x08014130
 80008f4:	0801413c 	.word	0x0801413c
 80008f8:	08014148 	.word	0x08014148
 80008fc:	08014154 	.word	0x08014154
 8000900:	08014160 	.word	0x08014160
 8000904:	0801416c 	.word	0x0801416c
 8000908:	08014178 	.word	0x08014178
 800090c:	08014188 	.word	0x08014188
 8000910:	08014198 	.word	0x08014198
 8000914:	080141a0 	.word	0x080141a0
 8000918:	080141a8 	.word	0x080141a8
 800091c:	080141b0 	.word	0x080141b0
 8000920:	080141bc 	.word	0x080141bc
 8000924:	080141c4 	.word	0x080141c4

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f001 ffe6 	bl	80028fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f88e 	bl	8000a50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000934:	f000 f90a 	bl	8000b4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 fda8 	bl	800148c <MX_GPIO_Init>
  MX_DMA_Init();
 800093c:	f000 fd76 	bl	800142c <MX_DMA_Init>
  MX_TIM3_Init();
 8000940:	f000 fcda 	bl	80012f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000944:	f000 fd26 	bl	8001394 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000948:	f000 fb1a 	bl	8000f80 <MX_I2C1_Init>
  MX_SPI2_Init();
 800094c:	f000 fb58 	bl	8001000 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000950:	f000 fc5c 	bl	800120c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000954:	f000 fbac 	bl	80010b0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000958:	f000 fa4e 	bl	8000df8 <MX_ADC3_Init>
  MX_ADC1_Init();
 800095c:	f000 f926 	bl	8000bac <MX_ADC1_Init>
  MX_DAC1_Init();
 8000960:	f000 fadc 	bl	8000f1c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000964:	2100      	movs	r1, #0
 8000966:	4825      	ldr	r0, [pc, #148]	; (80009fc <main+0xd4>)
 8000968:	f00a ffb0 	bl	800b8cc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800096c:	2100      	movs	r1, #0
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <main+0xd8>)
 8000970:	f00a ffac 	bl	800b8cc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <main+0xdc>)
 8000978:	f00a ffa8 	bl	800b8cc <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800097c:	f00e ff7e 	bl	800f87c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000980:	2200      	movs	r2, #0
 8000982:	2108      	movs	r1, #8
 8000984:	2010      	movs	r0, #16
 8000986:	f00f f979 	bl	800fc7c <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <main+0xe0>)
 800098e:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <main+0xe4>)
 8000992:	2100      	movs	r1, #0
 8000994:	481e      	ldr	r0, [pc, #120]	; (8000a10 <main+0xe8>)
 8000996:	f00e ffbb 	bl	800f910 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <main+0xec>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <main+0xf0>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <main+0xf4>)
 80009a6:	f00e ffb3 	bl	800f910 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <main+0xf8>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80009b0:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <main+0xfc>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <main+0x100>)
 80009b6:	f00e ffab 	bl	800f910 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <main+0x104>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <main+0x108>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	481b      	ldr	r0, [pc, #108]	; (8000a34 <main+0x10c>)
 80009c6:	f00e ffa3 	bl	800f910 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <main+0x110>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 80009d0:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <main+0x114>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <main+0x118>)
 80009d6:	f00e ff9b 	bl	800f910 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <main+0x11c>)
 80009de:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f00f f862 	bl	800faaa <osEventFlagsNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <main+0x120>)
 80009ea:	6013      	str	r3, [r2, #0]
  system_setup();
 80009ec:	f000 fdb8 	bl	8001560 <system_setup>
  printf("Starting kernal...\n");
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <main+0x124>)
 80009f2:	f012 fc61 	bl	80132b8 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009f6:	f00e ff65 	bl	800f8c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009fa:	e7fe      	b.n	80009fa <main+0xd2>
 80009fc:	240003bc 	.word	0x240003bc
 8000a00:	24000408 	.word	0x24000408
 8000a04:	24000454 	.word	0x24000454
 8000a08:	24000548 	.word	0x24000548
 8000a0c:	08014230 	.word	0x08014230
 8000a10:	08001afd 	.word	0x08001afd
 8000a14:	24000534 	.word	0x24000534
 8000a18:	08014254 	.word	0x08014254
 8000a1c:	08001b35 	.word	0x08001b35
 8000a20:	24000538 	.word	0x24000538
 8000a24:	08014278 	.word	0x08014278
 8000a28:	08001b6d 	.word	0x08001b6d
 8000a2c:	2400053c 	.word	0x2400053c
 8000a30:	0801429c 	.word	0x0801429c
 8000a34:	08001ba5 	.word	0x08001ba5
 8000a38:	24000540 	.word	0x24000540
 8000a3c:	080142c0 	.word	0x080142c0
 8000a40:	08001bc9 	.word	0x08001bc9
 8000a44:	24000544 	.word	0x24000544
 8000a48:	24000550 	.word	0x24000550
 8000a4c:	080141cc 	.word	0x080141cc

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	224c      	movs	r2, #76	; 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f012 fabc 	bl	8012fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f012 fab6 	bl	8012fdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f006 ffbd 	bl	80079f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <SystemClock_Config+0xf4>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <SystemClock_Config+0xf4>)
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <SystemClock_Config+0xf4>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <SystemClock_Config+0xf8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a98:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <SystemClock_Config+0xf8>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <SystemClock_Config+0xf8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aac:	bf00      	nop
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <SystemClock_Config+0xf8>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aba:	d1f8      	bne.n	8000aae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000aec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000af0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 ffb4 	bl	8007a64 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b02:	f001 f89f 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f007 fbf3 	bl	8008318 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000b38:	f001 f884 	bl	8001c44 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3770      	adds	r7, #112	; 0x70
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58000400 	.word	0x58000400
 8000b48:	58024800 	.word	0x58024800

08000b4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b0      	sub	sp, #192	; 0xc0
 8000b50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	22c0      	movs	r2, #192	; 0xc0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f012 fa3f 	bl	8012fdc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000b6e:	2309      	movs	r3, #9
 8000b70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b7e:	23c0      	movs	r3, #192	; 0xc0
 8000b80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b82:	2320      	movs	r3, #32
 8000b84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 ff8d 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ba0:	f001 f850 	bl	8001c44 <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	37c0      	adds	r7, #192	; 0xc0
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd0:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bd2:	4a7d      	ldr	r2, [pc, #500]	; (8000dc8 <MX_ADC1_Init+0x21c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bd6:	4b7b      	ldr	r3, [pc, #492]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bde:	4b79      	ldr	r3, [pc, #484]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be4:	4b77      	ldr	r3, [pc, #476]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b76      	ldr	r3, [pc, #472]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf0:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf6:	4b73      	ldr	r3, [pc, #460]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000bfc:	4b71      	ldr	r3, [pc, #452]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000bfe:	220b      	movs	r2, #11
 8000c00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	4b70      	ldr	r3, [pc, #448]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b6e      	ldr	r3, [pc, #440]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b6d      	ldr	r3, [pc, #436]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c14:	4b6b      	ldr	r3, [pc, #428]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c28:	4b66      	ldr	r3, [pc, #408]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c30:	4864      	ldr	r0, [pc, #400]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c32:	f002 f8ef 	bl	8002e14 <HAL_ADC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c3c:	f001 f802 	bl	8001c44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	485e      	ldr	r0, [pc, #376]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c4c:	f003 fa0a 	bl	8004064 <HAL_ADCEx_MultiModeConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c56:	f000 fff5 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c5a:	4b5c      	ldr	r3, [pc, #368]	; (8000dcc <MX_ADC1_Init+0x220>)
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000c62:	2307      	movs	r3, #7
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c7e:	f002 fb4d 	bl	800331c <HAL_ADC_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c88:	f000 ffdc 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c8c:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <MX_ADC1_Init+0x224>)
 8000c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c90:	230c      	movs	r3, #12
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000c9a:	f002 fb3f 	bl	800331c <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ca4:	f000 ffce 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <MX_ADC1_Init+0x228>)
 8000caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cac:	2312      	movs	r3, #18
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4843      	ldr	r0, [pc, #268]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000cb6:	f002 fb31 	bl	800331c <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cc0:	f000 ffc0 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <MX_ADC1_Init+0x22c>)
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc8:	2318      	movs	r3, #24
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483c      	ldr	r0, [pc, #240]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000cd2:	f002 fb23 	bl	800331c <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000cdc:	f000 ffb2 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <MX_ADC1_Init+0x230>)
 8000ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4835      	ldr	r0, [pc, #212]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000cf0:	f002 fb14 	bl	800331c <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000cfa:	f000 ffa3 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cfe:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <MX_ADC1_Init+0x234>)
 8000d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d02:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d0e:	f002 fb05 	bl	800331c <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000d18:	f000 ff94 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <MX_ADC1_Init+0x238>)
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d20:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000d24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d2c:	f002 faf6 	bl	800331c <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000d36:	f000 ff85 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_ADC1_Init+0x23c>)
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d3e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d4a:	f002 fae7 	bl	800331c <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000d54:	f000 ff76 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_ADC1_Init+0x240>)
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d5c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d68:	f002 fad8 	bl	800331c <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000d72:	f000 ff67 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_ADC1_Init+0x244>)
 8000d78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000d8a:	f002 fac7 	bl	800331c <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000d94:	f000 ff56 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_ADC1_Init+0x248>)
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000d9c:	f240 2306 	movw	r3, #518	; 0x206
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000da2:	2307      	movs	r3, #7
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_ADC1_Init+0x218>)
 8000dac:	f002 fab6 	bl	800331c <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000db6:	f000 ff45 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2400009c 	.word	0x2400009c
 8000dc8:	40022000 	.word	0x40022000
 8000dcc:	0c900008 	.word	0x0c900008
 8000dd0:	10c00010 	.word	0x10c00010
 8000dd4:	14f00020 	.word	0x14f00020
 8000dd8:	1d500080 	.word	0x1d500080
 8000ddc:	21800100 	.word	0x21800100
 8000de0:	25b00200 	.word	0x25b00200
 8000de4:	2a000400 	.word	0x2a000400
 8000de8:	2e300800 	.word	0x2e300800
 8000dec:	3ac04000 	.word	0x3ac04000
 8000df0:	3ef08000 	.word	0x3ef08000
 8000df4:	47520000 	.word	0x47520000

08000df8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e10:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e12:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <MX_ADC3_Init+0x114>)
 8000e14:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e16:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e18:	2208      	movs	r2, #8
 8000e1a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000e34:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e68:	4827      	ldr	r0, [pc, #156]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e6a:	f001 ffd3 	bl	8002e14 <HAL_ADC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000e74:	f000 fee6 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <MX_ADC3_Init+0x118>)
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e80:	2307      	movs	r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000e9c:	f002 fa3e 	bl	800331c <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000ea6:	f000 fecd 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_ADC3_Init+0x11c>)
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000eb8:	f002 fa30 	bl	800331c <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000ec2:	f000 febf 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000ed4:	f002 fa22 	bl	800331c <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000ede:	f000 feb1 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_ADC3_Init+0x120>)
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ee6:	2318      	movs	r3, #24
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_ADC3_Init+0x110>)
 8000ef0:	f002 fa14 	bl	800331c <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8000efa:	f000 fea3 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	24000100 	.word	0x24000100
 8000f0c:	58026000 	.word	0x58026000
 8000f10:	cb840000 	.word	0xcb840000
 8000f14:	cfb80000 	.word	0xcfb80000
 8000f18:	04300002 	.word	0x04300002

08000f1c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2224      	movs	r2, #36	; 0x24
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f012 f857 	bl	8012fdc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_DAC1_Init+0x5c>)
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_DAC1_Init+0x60>)
 8000f32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <MX_DAC1_Init+0x5c>)
 8000f36:	f003 fa53 	bl	80043e0 <HAL_DAC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f40:	f000 fe80 	bl	8001c44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_DAC1_Init+0x5c>)
 8000f60:	f003 fac0 	bl	80044e4 <HAL_DAC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 fe6b 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24000254 	.word	0x24000254
 8000f7c:	40007400 	.word	0x40007400

08000f80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_I2C1_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <MX_I2C1_Init+0x7c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fbc:	f006 fbe4 	bl	8007788 <HAL_I2C_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 fe3d 	bl	8001c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fce:	f006 fc77 	bl	80078c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 fe34 	bl	8001c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fe0:	f006 fcb9 	bl	8007956 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fe2b 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	240002e0 	.word	0x240002e0
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	00707cbb 	.word	0x00707cbb

08001000 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <MX_SPI2_Init+0xac>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800100c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001010:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001014:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001018:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800101c:	220f      	movs	r2, #15
 800101e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800102e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001032:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001036:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800103a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001076:	2200      	movs	r2, #0
 8001078:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_SPI2_Init+0xa8>)
 8001094:	f00a fa0c 	bl	800b4b0 <HAL_SPI_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800109e:	f000 fdd1 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	24000334 	.word	0x24000334
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09a      	sub	sp, #104	; 0x68
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	222c      	movs	r2, #44	; 0x2c
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f011 ff76 	bl	8012fdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <MX_TIM1_Init+0x154>)
 80010f2:	4a45      	ldr	r2, [pc, #276]	; (8001208 <MX_TIM1_Init+0x158>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <MX_TIM1_Init+0x154>)
 80010f8:	227f      	movs	r2, #127	; 0x7f
 80010fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_TIM1_Init+0x154>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <MX_TIM1_Init+0x154>)
 8001104:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001108:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_TIM1_Init+0x154>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001110:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <MX_TIM1_Init+0x154>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <MX_TIM1_Init+0x154>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111c:	4839      	ldr	r0, [pc, #228]	; (8001204 <MX_TIM1_Init+0x154>)
 800111e:	f00a fb06 	bl	800b72e <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001128:	f000 fd8c 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001136:	4619      	mov	r1, r3
 8001138:	4832      	ldr	r0, [pc, #200]	; (8001204 <MX_TIM1_Init+0x154>)
 800113a:	f00b f8ad 	bl	800c298 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001144:	f000 fd7e 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001148:	482e      	ldr	r0, [pc, #184]	; (8001204 <MX_TIM1_Init+0x154>)
 800114a:	f00a fd19 	bl	800bb80 <HAL_TIM_PWM_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001154:	f000 fd76 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001168:	4619      	mov	r1, r3
 800116a:	4826      	ldr	r0, [pc, #152]	; (8001204 <MX_TIM1_Init+0x154>)
 800116c:	f00b fdea 	bl	800cd44 <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001176:	f000 fd65 	bl	8001c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800117e:	f240 13df 	movw	r3, #479	; 0x1df
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_TIM1_Init+0x154>)
 80011a2:	f00a ff65 	bl	800c070 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80011ac:	f000 fd4a 	bl	8001c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM1_Init+0x154>)
 80011e6:	f00b fe3b 	bl	800ce60 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80011f0:	f000 fd28 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <MX_TIM1_Init+0x154>)
 80011f6:	f001 f833 	bl	8002260 <HAL_TIM_MspPostInit>

}
 80011fa:	bf00      	nop
 80011fc:	3768      	adds	r7, #104	; 0x68
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240003bc 	.word	0x240003bc
 8001208:	40010000 	.word	0x40010000

0800120c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001244:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001248:	223f      	movs	r2, #63	; 0x3f
 800124a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_TIM2_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001254:	f640 4234 	movw	r2, #3124	; 0xc34
 8001258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_TIM2_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001266:	4823      	ldr	r0, [pc, #140]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001268:	f00a fa61 	bl	800b72e <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 fce7 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001284:	f00b f808 	bl	800c298 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800128e:	f000 fcd9 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001292:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_TIM2_Init+0xe8>)
 8001294:	f00a fc74 	bl	800bb80 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800129e:	f000 fcd1 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a2:	2320      	movs	r3, #32
 80012a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_TIM2_Init+0xe8>)
 80012b2:	f00b fd47 	bl	800cd44 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012bc:	f000 fcc2 	bl	8001c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	220c      	movs	r2, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM2_Init+0xe8>)
 80012d8:	f00a feca 	bl	800c070 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012e2:	f000 fcaf 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM2_Init+0xe8>)
 80012e8:	f000 ffba 	bl	8002260 <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3738      	adds	r7, #56	; 0x38
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	24000408 	.word	0x24000408

080012f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_TIM3_Init+0x94>)
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <MX_TIM3_Init+0x98>)
 800131a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_TIM3_Init+0x94>)
 800131e:	223f      	movs	r2, #63	; 0x3f
 8001320:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_TIM3_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_TIM3_Init+0x94>)
 800132a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_TIM3_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM3_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <MX_TIM3_Init+0x94>)
 800133e:	f00a f9f6 	bl	800b72e <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001348:	f000 fc7c 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM3_Init+0x94>)
 800135a:	f00a ff9d 	bl	800c298 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001364:	f000 fc6e 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM3_Init+0x94>)
 8001376:	f00b fce5 	bl	800cd44 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 fc60 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	24000454 	.word	0x24000454
 8001390:	40000400 	.word	0x40000400

08001394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_USART1_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	; (8001428 <MX_USART1_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013a0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013de:	f00b fddb 	bl	800cf98 <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 fc2c 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_USART1_UART_Init+0x90>)
 80013f0:	f00e f935 	bl	800f65e <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f000 fc23 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <MX_USART1_UART_Init+0x90>)
 8001402:	f00e f96a 	bl	800f6da <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fc1a 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_USART1_UART_Init+0x90>)
 8001412:	f00e f8eb 	bl	800f5ec <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 fc12 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	240004a0 	.word	0x240004a0
 8001428:	40011000 	.word	0x40011000

0800142c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_DMA_Init+0x5c>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_DMA_Init+0x5c>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_DMA_Init+0x5c>)
 8001444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2105      	movs	r1, #5
 8001454:	200b      	movs	r0, #11
 8001456:	f002 ff9b 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800145a:	200b      	movs	r0, #11
 800145c:	f002 ffb2 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	200c      	movs	r0, #12
 8001466:	f002 ff93 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800146a:	200c      	movs	r0, #12
 800146c:	f002 ffaa 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2010      	movs	r0, #16
 8001476:	f002 ff8b 	bl	8004390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800147a:	2010      	movs	r0, #16
 800147c:	f002 ffa2 	bl	80043c4 <HAL_NVIC_EnableIRQ>

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_GPIO_Init+0xc8>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001502:	4815      	ldr	r0, [pc, #84]	; (8001558 <MX_GPIO_Init+0xcc>)
 8001504:	f006 f926 	bl	8007754 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2164      	movs	r1, #100	; 0x64
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_GPIO_Init+0xd0>)
 800150e:	f006 f921 	bl	8007754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001512:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001516:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <MX_GPIO_Init+0xcc>)
 800152c:	f005 ff62 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_GPIO_Init+0xd0>)
 8001548:	f005 ff54 	bl	80073f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	58024400 	.word	0x58024400
 8001558:	58020800 	.word	0x58020800
 800155c:	58020400 	.word	0x58020400

08001560 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001568:	f44f 729c 	mov.w	r2, #312	; 0x138
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800156e:	210c      	movs	r1, #12
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <system_setup+0x74>)
 8001572:	f00a fb67 	bl	800bc44 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001576:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800157a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800157e:	4816      	ldr	r0, [pc, #88]	; (80015d8 <system_setup+0x78>)
 8001580:	f002 fd0c 	bl	8003f9c <HAL_ADCEx_Calibration_Start>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800158a:	f000 fb5b 	bl	8001c44 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800158e:	220b      	movs	r2, #11
 8001590:	4912      	ldr	r1, [pc, #72]	; (80015dc <system_setup+0x7c>)
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <system_setup+0x78>)
 8001594:	f001 fde0 	bl	8003158 <HAL_ADC_Start_DMA>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 800159e:	f000 fb51 	bl	8001c44 <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80015a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <system_setup+0x80>)
 80015ac:	f002 fcf6 	bl	8003f9c <HAL_ADCEx_Calibration_Start>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80015b6:	f000 fb45 	bl	8001c44 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80015ba:	2204      	movs	r2, #4
 80015bc:	4909      	ldr	r1, [pc, #36]	; (80015e4 <system_setup+0x84>)
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <system_setup+0x80>)
 80015c0:	f001 fdca 	bl	8003158 <HAL_ADC_Start_DMA>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80015ca:	f000 fb3b 	bl	8001c44 <Error_Handler>
	  	}
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000408 	.word	0x24000408
 80015d8:	2400009c 	.word	0x2400009c
 80015dc:	240005c0 	.word	0x240005c0
 80015e0:	24000100 	.word	0x24000100
 80015e4:	240005e0 	.word	0x240005e0

080015e8 <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f011 fcd1 	bl	8012fa0 <malloc>
 80015fe:	4603      	mov	r3, r0
 8001600:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f011 fcd9 	bl	8012fc0 <memcpy>
    packet.size = size;
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	461a      	mov	r2, r3
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800161e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001632:	2006      	movs	r0, #6
 8001634:	f011 fcb4 	bl	8012fa0 <malloc>
 8001638:	4603      	mov	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800163c:	2002      	movs	r0, #2
 800163e:	f011 fcaf 	bl	8012fa0 <malloc>
 8001642:	4603      	mov	r3, r0
 8001644:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	220e      	movs	r2, #14
 800164a:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3301      	adds	r3, #1
 8001650:	220d      	movs	r2, #13
 8001652:	701a      	strb	r2, [r3, #0]
#else
	receive_spi(hspi1, pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	22bb      	movs	r2, #187	; 0xbb
 8001658:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	22bb      	movs	r2, #187	; 0xbb
 8001660:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3302      	adds	r3, #2
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3303      	adds	r3, #3
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <sample_pmt+0x8c>)
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3304      	adds	r3, #4
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3305      	adds	r3, #5
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	7852      	ldrb	r2, [r2, #1]
 8001686:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001688:	463b      	mov	r3, r7
 800168a:	2206      	movs	r2, #6
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ffaa 	bl	80015e8 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <sample_pmt+0x90>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4639      	mov	r1, r7
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	f00e fb61 	bl	800fd64 <osMessageQueuePut>
	free(buffer);
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f011 fc84 	bl	8012fb0 <free>
	free(pmt_spi);
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f011 fc81 	bl	8012fb0 <free>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2400054c 	.word	0x2400054c
 80016bc:	24000548 	.word	0x24000548

080016c0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80016c6:	200e      	movs	r0, #14
 80016c8:	f011 fc6a 	bl	8012fa0 <malloc>
 80016cc:	4603      	mov	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80016d0:	2002      	movs	r0, #2
 80016d2:	f011 fc65 	bl	8012fa0 <malloc>
 80016d6:	4603      	mov	r3, r0
 80016d8:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80016da:	2004      	movs	r0, #4
 80016dc:	f011 fc60 	bl	8012fa0 <malloc>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	220e      	movs	r2, #14
 80016e8:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	3301      	adds	r3, #1
 80016ee:	220d      	movs	r2, #13
 80016f0:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	22ee      	movs	r2, #238	; 0xee
 80016f6:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3302      	adds	r3, #2
 80016fc:	22dd      	movs	r2, #221	; 0xdd
 80016fe:	801a      	strh	r2, [r3, #0]
#else
	receive_spi(hspi2);
	reveice_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	22aa      	movs	r2, #170	; 0xaa
 8001704:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	22aa      	movs	r2, #170	; 0xaa
 800170c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3302      	adds	r3, #2
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3303      	adds	r3, #3
 800171a:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <sample_erpa+0x104>)
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3304      	adds	r3, #4
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3305      	adds	r3, #5
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29a      	uxth	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3306      	adds	r3, #6
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3307      	adds	r3, #7
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3302      	adds	r3, #2
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29a      	uxth	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3308      	adds	r3, #8
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3302      	adds	r3, #2
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3309      	adds	r3, #9
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	330a      	adds	r3, #10
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	330b      	adds	r3, #11
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	330c      	adds	r3, #12
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	330d      	adds	r3, #13
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	7852      	ldrb	r2, [r2, #1]
 800178e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	220e      	movs	r2, #14
 8001794:	6979      	ldr	r1, [r7, #20]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff26 	bl	80015e8 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <sample_erpa+0x108>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	1d39      	adds	r1, r7, #4
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	f00e fadd 	bl	800fd64 <osMessageQueuePut>
	free(buffer);
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f011 fc00 	bl	8012fb0 <free>
	free(erpa_spi);
 80017b0:	6938      	ldr	r0, [r7, #16]
 80017b2:	f011 fbfd 	bl	8012fb0 <free>
	free(erpa_adc);
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f011 fbfa 	bl	8012fb0 <free>
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2400054d 	.word	0x2400054d
 80017c8:	24000548 	.word	0x24000548

080017cc <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f011 fbe4 	bl	8012fa0 <malloc>
 80017d8:	4603      	mov	r3, r0
 80017da:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80017dc:	2008      	movs	r0, #8
 80017de:	f011 fbdf 	bl	8012fa0 <malloc>
 80017e2:	4603      	mov	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 80017e6:	2012      	movs	r0, #18
 80017e8:	f011 fbda 	bl	8012fa0 <malloc>
 80017ec:	4603      	mov	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80017f0:	2008      	movs	r0, #8
 80017f2:	f011 fbd5 	bl	8012fa0 <malloc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2211      	movs	r2, #17
 80017fe:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	3302      	adds	r3, #2
 8001804:	2212      	movs	r2, #18
 8001806:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	3304      	adds	r3, #4
 800180c:	2213      	movs	r2, #19
 800180e:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3306      	adds	r3, #6
 8001814:	2214      	movs	r2, #20
 8001816:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	22a0      	movs	r2, #160	; 0xa0
 800181c:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3302      	adds	r3, #2
 8001822:	22a1      	movs	r2, #161	; 0xa1
 8001824:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3304      	adds	r3, #4
 800182a:	22a2      	movs	r2, #162	; 0xa2
 800182c:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3306      	adds	r3, #6
 8001832:	22a3      	movs	r2, #163	; 0xa3
 8001834:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3308      	adds	r3, #8
 800183a:	22a4      	movs	r2, #164	; 0xa4
 800183c:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	330a      	adds	r3, #10
 8001842:	22a5      	movs	r2, #165	; 0xa5
 8001844:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	330c      	adds	r3, #12
 800184a:	22a6      	movs	r2, #166	; 0xa6
 800184c:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	330e      	adds	r3, #14
 8001852:	22a7      	movs	r2, #167	; 0xa7
 8001854:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3310      	adds	r3, #16
 800185a:	22a8      	movs	r2, #168	; 0xa8
 800185c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	22b0      	movs	r2, #176	; 0xb0
 8001862:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3302      	adds	r3, #2
 8001868:	22b1      	movs	r2, #177	; 0xb1
 800186a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3304      	adds	r3, #4
 8001870:	22b2      	movs	r2, #178	; 0xb2
 8001872:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3306      	adds	r3, #6
 8001878:	22b3      	movs	r2, #179	; 0xb3
 800187a:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	22cc      	movs	r2, #204	; 0xcc
 8001880:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	22cc      	movs	r2, #204	; 0xcc
 8001888:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3302      	adds	r3, #2
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3303      	adds	r3, #3
 8001896:	4a97      	ldr	r2, [pc, #604]	; (8001af4 <sample_hk+0x328>)
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3302      	adds	r3, #2
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3304      	adds	r3, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3302      	adds	r3, #2
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3305      	adds	r3, #5
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3306      	adds	r3, #6
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3307      	adds	r3, #7
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	121a      	asrs	r2, r3, #8
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3308      	adds	r3, #8
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3309      	adds	r3, #9
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3302      	adds	r3, #2
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	121a      	asrs	r2, r3, #8
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	330a      	adds	r3, #10
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3302      	adds	r3, #2
 800190c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	330b      	adds	r3, #11
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	3304      	adds	r3, #4
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	121a      	asrs	r2, r3, #8
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	330c      	adds	r3, #12
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3304      	adds	r3, #4
 800192e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	330d      	adds	r3, #13
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	3306      	adds	r3, #6
 800193e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001942:	121a      	asrs	r2, r3, #8
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	330e      	adds	r3, #14
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	3306      	adds	r3, #6
 8001950:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	330f      	adds	r3, #15
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29a      	uxth	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3310      	adds	r3, #16
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3311      	adds	r3, #17
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3302      	adds	r3, #2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29a      	uxth	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3312      	adds	r3, #18
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3302      	adds	r3, #2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3313      	adds	r3, #19
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3304      	adds	r3, #4
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3314      	adds	r3, #20
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3315      	adds	r3, #21
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3306      	adds	r3, #6
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3316      	adds	r3, #22
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3306      	adds	r3, #6
 80019ce:	881a      	ldrh	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3317      	adds	r3, #23
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	330c      	adds	r3, #12
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3318      	adds	r3, #24
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	330c      	adds	r3, #12
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3319      	adds	r3, #25
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3306      	adds	r3, #6
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	331a      	adds	r3, #26
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	331b      	adds	r3, #27
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	331c      	adds	r3, #28
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	331d      	adds	r3, #29
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	330e      	adds	r3, #14
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	331e      	adds	r3, #30
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	330e      	adds	r3, #14
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	331f      	adds	r3, #31
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3310      	adds	r3, #16
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3320      	adds	r3, #32
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3310      	adds	r3, #16
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3321      	adds	r3, #33	; 0x21
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3322      	adds	r3, #34	; 0x22
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3323      	adds	r3, #35	; 0x23
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	330a      	adds	r3, #10
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3324      	adds	r3, #36	; 0x24
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	330a      	adds	r3, #10
 8001aae:	881a      	ldrh	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3325      	adds	r3, #37	; 0x25
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2226      	movs	r2, #38	; 0x26
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd92 	bl	80015e8 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <sample_hk+0x32c>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4639      	mov	r1, r7
 8001aca:	2300      	movs	r3, #0
 8001acc:	2200      	movs	r2, #0
 8001ace:	f00e f949 	bl	800fd64 <osMessageQueuePut>
	free(buffer);
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f011 fa6c 	bl	8012fb0 <free>
	free(hk_i2c);
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f011 fa69 	bl	8012fb0 <free>
	free(hk_adc1);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f011 fa66 	bl	8012fb0 <free>
	free(hk_adc3);
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f011 fa63 	bl	8012fb0 <free>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2400054e 	.word	0x2400054e
 8001af8:	24000548 	.word	0x24000548

08001afc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <PMT_init+0x30>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2101      	movs	r1, #1
 8001b10:	f00e f84e 	bl	800fbb0 <osEventFlagsWait>
	    sample_pmt();
 8001b14:	f7ff fd8a 	bl	800162c <sample_pmt>
		pmt_seq++;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <PMT_init+0x34>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <PMT_init+0x34>)
 8001b22:	701a      	strb	r2, [r3, #0]
		osThreadYield();
 8001b24:	f00d ff86 	bl	800fa34 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b28:	e7ec      	b.n	8001b04 <PMT_init+0x8>
 8001b2a:	bf00      	nop
 8001b2c:	24000550 	.word	0x24000550
 8001b30:	2400054c 	.word	0x2400054c

08001b34 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <ERPA_init+0x30>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b44:	2200      	movs	r2, #0
 8001b46:	2102      	movs	r1, #2
 8001b48:	f00e f832 	bl	800fbb0 <osEventFlagsWait>
	    sample_erpa();
 8001b4c:	f7ff fdb8 	bl	80016c0 <sample_erpa>
		erpa_seq++;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <ERPA_init+0x34>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <ERPA_init+0x34>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		osThreadYield();
 8001b5c:	f00d ff6a 	bl	800fa34 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b60:	e7ec      	b.n	8001b3c <ERPA_init+0x8>
 8001b62:	bf00      	nop
 8001b64:	24000550 	.word	0x24000550
 8001b68:	2400054d 	.word	0x2400054d

08001b6c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HK_init+0x30>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2104      	movs	r1, #4
 8001b80:	f00e f816 	bl	800fbb0 <osEventFlagsWait>
	    sample_hk();
 8001b84:	f7ff fe22 	bl	80017cc <sample_hk>
		hk_seq++;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HK_init+0x34>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HK_init+0x34>)
 8001b92:	701a      	strb	r2, [r3, #0]
		osThreadYield();
 8001b94:	f00d ff4e 	bl	800fa34 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b98:	e7ec      	b.n	8001b74 <HK_init+0x8>
 8001b9a:	bf00      	nop
 8001b9c:	24000550 	.word	0x24000550
 8001ba0:	2400054e 	.word	0x2400054e

08001ba4 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <UART_RX_init+0x1c>)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <UART_RX_init+0x20>)
 8001bb2:	f00b facf 	bl	800d154 <HAL_UART_Receive_IT>
		osDelay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f00d ff5c 	bl	800fa74 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001bbc:	e7f6      	b.n	8001bac <UART_RX_init+0x8>
 8001bbe:	bf00      	nop
 8001bc0:	24000554 	.word	0x24000554
 8001bc4:	240004a0 	.word	0x240004a0

08001bc8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <UART_TX_init+0x4c>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f107 010c 	add.w	r1, r7, #12
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f00e f921 	bl	800fe24 <osMessageQueueGet>
 8001be2:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f2      	bne.n	8001bd0 <UART_TX_init+0x8>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <UART_TX_init+0x4c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00e f976 	bl	800fee0 <osMessageQueueGetCount>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	; (8001c18 <UART_TX_init+0x50>)
 8001bfa:	f011 fad7 	bl	80131ac <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	8a3a      	ldrh	r2, [r7, #16]
 8001c02:	2364      	movs	r3, #100	; 0x64
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <UART_TX_init+0x54>)
 8001c06:	f00b fa17 	bl	800d038 <HAL_UART_Transmit>
	       free(msg.array);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f011 f9cf 	bl	8012fb0 <free>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001c12:	e7dd      	b.n	8001bd0 <UART_TX_init+0x8>
 8001c14:	24000548 	.word	0x24000548
 8001c18:	08014200 	.word	0x08014200
 8001c1c:	240004a0 	.word	0x240004a0

08001c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c32:	f000 fe9f 	bl	8002974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40001000 	.word	0x40001000

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_MspInit+0x38>)
 8001c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_MspInit+0x38>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_MspInit+0x38>)
 8001c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	210f      	movs	r1, #15
 8001c78:	f06f 0001 	mvn.w	r0, #1
 8001c7c:	f002 fb88 	bl	8004390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	58024400 	.word	0x58024400

08001c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	; 0x38
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a7b      	ldr	r2, [pc, #492]	; (8001e98 <HAL_ADC_MspInit+0x20c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	f040 8091 	bne.w	8001dd2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cb0:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cb6:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cc0:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd4:	4a71      	ldr	r2, [pc, #452]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cde:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf2:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfc:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	4a62      	ldr	r2, [pc, #392]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d28:	2333      	movs	r3, #51	; 0x33
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4859      	ldr	r0, [pc, #356]	; (8001ea0 <HAL_ADC_MspInit+0x214>)
 8001d3c:	f005 fb5a 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001d40:	23ce      	movs	r3, #206	; 0xce
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4854      	ldr	r0, [pc, #336]	; (8001ea4 <HAL_ADC_MspInit+0x218>)
 8001d54:	f005 fb4e 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	484f      	ldr	r0, [pc, #316]	; (8001ea8 <HAL_ADC_MspInit+0x21c>)
 8001d6c:	f005 fb42 	bl	80073f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d72:	4a4f      	ldr	r2, [pc, #316]	; (8001eb0 <HAL_ADC_MspInit+0x224>)
 8001d74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d76:	4b4d      	ldr	r3, [pc, #308]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d78:	2209      	movs	r2, #9
 8001d7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d88:	4b48      	ldr	r3, [pc, #288]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d98:	4b44      	ldr	r3, [pc, #272]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dae:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001db4:	483d      	ldr	r0, [pc, #244]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001db6:	f002 fce1 	bl	800477c <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001dc0:	f7ff ff40 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a39      	ldr	r2, [pc, #228]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001dc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dca:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_ADC_MspInit+0x220>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001dd0:	e05e      	b.n	8001e90 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <HAL_ADC_MspInit+0x228>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d159      	bne.n	8001e90 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_ADC_MspInit+0x210>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001e18:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001e1c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e20:	f000 fdd4 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001e24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001e28:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e2c:	f000 fdce 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_ADC_MspInit+0x230>)
 8001e34:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e38:	2273      	movs	r2, #115	; 0x73
 8001e3a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e56:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e74:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e76:	f002 fc81 	bl	800477c <HAL_DMA_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e80:	f7ff fee0 	bl	8001c44 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e88:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <HAL_ADC_MspInit+0x22c>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e90:	bf00      	nop
 8001e92:	3738      	adds	r7, #56	; 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58020800 	.word	0x58020800
 8001ea4:	58020000 	.word	0x58020000
 8001ea8:	58020400 	.word	0x58020400
 8001eac:	24000164 	.word	0x24000164
 8001eb0:	40020010 	.word	0x40020010
 8001eb4:	58026000 	.word	0x58026000
 8001eb8:	240001dc 	.word	0x240001dc
 8001ebc:	40020028 	.word	0x40020028

08001ec0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <HAL_DAC_MspInit+0xf0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d161      	bne.n	8001fa6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_DAC_MspInit+0xf4>)
 8001ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee8:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <HAL_DAC_MspInit+0xf4>)
 8001eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_DAC_MspInit+0xf4>)
 8001ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <HAL_DAC_MspInit+0xf4>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <HAL_DAC_MspInit+0xf4>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_DAC_MspInit+0xf4>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f1e:	2310      	movs	r3, #16
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f22:	2303      	movs	r3, #3
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <HAL_DAC_MspInit+0xf8>)
 8001f32:	f005 fa5f 	bl	80073f4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <HAL_DAC_MspInit+0x100>)
 8001f3a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f3e:	2243      	movs	r2, #67	; 0x43
 8001f40:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f54:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f5c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f64:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f7a:	4810      	ldr	r0, [pc, #64]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f7c:	f002 fbfe 	bl	800477c <HAL_DMA_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f86:	f7ff fe5d 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_DAC_MspInit+0xfc>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	2036      	movs	r0, #54	; 0x36
 8001f9c:	f002 f9f8 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa0:	2036      	movs	r0, #54	; 0x36
 8001fa2:	f002 fa0f 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40007400 	.word	0x40007400
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020000 	.word	0x58020000
 8001fbc:	24000268 	.word	0x24000268
 8001fc0:	40020088 	.word	0x40020088

08001fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0ba      	sub	sp, #232	; 0xe8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	22c0      	movs	r2, #192	; 0xc0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f010 fff9 	bl	8012fdc <memset>
  if(hi2c->Instance==I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a27      	ldr	r2, [pc, #156]	; (800208c <HAL_I2C_MspInit+0xc8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d146      	bne.n	8002082 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ff4:	f04f 0208 	mov.w	r2, #8
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	4618      	mov	r0, r3
 800200c:	f006 fd52 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002016:	f7ff fe15 	bl	8001c44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_I2C_MspInit+0xcc>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_I2C_MspInit+0xcc>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_I2C_MspInit+0xcc>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002038:	f44f 7340 	mov.w	r3, #768	; 0x300
 800203c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002040:	2312      	movs	r3, #18
 8002042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002052:	2304      	movs	r3, #4
 8002054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800205c:	4619      	mov	r1, r3
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <HAL_I2C_MspInit+0xd0>)
 8002060:	f005 f9c8 	bl	80073f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_I2C_MspInit+0xcc>)
 8002066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_I2C_MspInit+0xcc>)
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_I2C_MspInit+0xcc>)
 8002076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	37e8      	adds	r7, #232	; 0xe8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40005400 	.word	0x40005400
 8002090:	58024400 	.word	0x58024400
 8002094:	58020400 	.word	0x58020400

08002098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0ba      	sub	sp, #232	; 0xe8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	22c0      	movs	r2, #192	; 0xc0
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f010 ff8f 	bl	8012fdc <memset>
  if(hspi->Instance==SPI2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d145      	bne.n	8002154 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f006 fce9 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020e8:	f7ff fdac 	bl	8001c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 80020ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f2:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 80020fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002128:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800212c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002142:	2305      	movs	r3, #5
 8002144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_SPI_MspInit+0xcc>)
 8002150:	f005 f950 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	37e8      	adds	r7, #232	; 0xe8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40003800 	.word	0x40003800
 8002160:	58024400 	.word	0x58024400
 8002164:	58020400 	.word	0x58020400

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a37      	ldr	r2, [pc, #220]	; (8002254 <HAL_TIM_Base_MspInit+0xec>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12f      	bne.n	80021da <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 800217c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002180:	4a35      	ldr	r2, [pc, #212]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800218a:	4b33      	ldr	r3, [pc, #204]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 800218c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2105      	movs	r1, #5
 800219c:	2018      	movs	r0, #24
 800219e:	f002 f8f7 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021a2:	2018      	movs	r0, #24
 80021a4:	f002 f90e 	bl	80043c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2105      	movs	r1, #5
 80021ac:	2019      	movs	r0, #25
 80021ae:	f002 f8ef 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021b2:	2019      	movs	r0, #25
 80021b4:	f002 f906 	bl	80043c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2105      	movs	r1, #5
 80021bc:	201a      	movs	r0, #26
 80021be:	f002 f8e7 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021c2:	201a      	movs	r0, #26
 80021c4:	f002 f8fe 	bl	80043c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2105      	movs	r1, #5
 80021cc:	201b      	movs	r0, #27
 80021ce:	f002 f8df 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021d2:	201b      	movs	r0, #27
 80021d4:	f002 f8f6 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021d8:	e038      	b.n	800224c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e2:	d117      	bne.n	8002214 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 80021e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ea:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 80021f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2105      	movs	r1, #5
 8002206:	201c      	movs	r0, #28
 8002208:	f002 f8c2 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800220c:	201c      	movs	r0, #28
 800220e:	f002 f8d9 	bl	80043c4 <HAL_NVIC_EnableIRQ>
}
 8002212:	e01b      	b.n	800224c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_TIM_Base_MspInit+0xf4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d116      	bne.n	800224c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 8002220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_TIM_Base_MspInit+0xf0>)
 8002230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2105      	movs	r1, #5
 8002240:	201d      	movs	r0, #29
 8002242:	f002 f8a5 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002246:	201d      	movs	r0, #29
 8002248:	f002 f8bc 	bl	80043c4 <HAL_NVIC_EnableIRQ>
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40010000 	.word	0x40010000
 8002258:	58024400 	.word	0x58024400
 800225c:	40000400 	.word	0x40000400

08002260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_TIM_MspPostInit+0xb8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d120      	bne.n	80022c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <HAL_TIM_MspPostInit+0xc0>)
 80022be:	f005 f899 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022c2:	e024      	b.n	800230e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d11f      	bne.n	800230e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fe:	2301      	movs	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <HAL_TIM_MspPostInit+0xc4>)
 800230a:	f005 f873 	bl	80073f4 <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	58024400 	.word	0x58024400
 8002320:	58020000 	.word	0x58020000
 8002324:	58020400 	.word	0x58020400

08002328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ba      	sub	sp, #232	; 0xe8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	22c0      	movs	r2, #192	; 0xc0
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f010 fe47 	bl	8012fdc <memset>
  if(huart->Instance==USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_UART_MspInit+0xd8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d14e      	bne.n	80023f6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002358:	f04f 0201 	mov.w	r2, #1
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	4618      	mov	r0, r3
 8002370:	f006 fba0 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800237a:	f7ff fc63 	bl	8001c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_UART_MspInit+0xdc>)
 8002380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002384:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_UART_MspInit+0xdc>)
 8002386:	f043 0310 	orr.w	r3, r3, #16
 800238a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_UART_MspInit+0xdc>)
 8002390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_UART_MspInit+0xdc>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_UART_MspInit+0xdc>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_UART_MspInit+0xdc>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d4:	2307      	movs	r3, #7
 80023d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023de:	4619      	mov	r1, r3
 80023e0:	4809      	ldr	r0, [pc, #36]	; (8002408 <HAL_UART_MspInit+0xe0>)
 80023e2:	f005 f807 	bl	80073f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2105      	movs	r1, #5
 80023ea:	2025      	movs	r0, #37	; 0x25
 80023ec:	f001 ffd0 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f0:	2025      	movs	r0, #37	; 0x25
 80023f2:	f001 ffe7 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023f6:	bf00      	nop
 80023f8:	37e8      	adds	r7, #232	; 0xe8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40011000 	.word	0x40011000
 8002404:	58024400 	.word	0x58024400
 8002408:	58020000 	.word	0x58020000

0800240c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b090      	sub	sp, #64	; 0x40
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d827      	bhi.n	800246a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800241a:	2200      	movs	r2, #0
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	2036      	movs	r0, #54	; 0x36
 8002420:	f001 ffb6 	bl	8004390 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002424:	2036      	movs	r0, #54	; 0x36
 8002426:	f001 ffcd 	bl	80043c4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800242a:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <HAL_InitTick+0xc4>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_InitTick+0xc8>)
 8002432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002436:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_InitTick+0xc8>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_InitTick+0xc8>)
 8002442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800244e:	f107 0210 	add.w	r2, r7, #16
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f006 fae9 	bl	8008a30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_InitTick+0x6a>
 8002468:	e001      	b.n	800246e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02b      	b.n	80024c6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800246e:	f006 fab3 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 8002472:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002474:	e004      	b.n	8002480 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002476:	f006 faaf 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800247a:	4603      	mov	r3, r0
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_InitTick+0xcc>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	3b01      	subs	r3, #1
 800248c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_InitTick+0xd0>)
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_InitTick+0xd4>)
 8002492:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_InitTick+0xd0>)
 8002496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800249a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800249c:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_InitTick+0xd0>)
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_InitTick+0xd0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_InitTick+0xd0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024ae:	480b      	ldr	r0, [pc, #44]	; (80024dc <HAL_InitTick+0xd0>)
 80024b0:	f009 f93d 	bl	800b72e <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024ba:	4808      	ldr	r0, [pc, #32]	; (80024dc <HAL_InitTick+0xd0>)
 80024bc:	f009 f98e 	bl	800b7dc <HAL_TIM_Base_Start_IT>
 80024c0:	4603      	mov	r3, r0
 80024c2:	e000      	b.n	80024c6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3740      	adds	r7, #64	; 0x40
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	24000008 	.word	0x24000008
 80024d4:	58024400 	.word	0x58024400
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	240005e8 	.word	0x240005e8
 80024e0:	40001000 	.word	0x40001000

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80024e8:	e7fe      	b.n	80024e8 <NMI_Handler+0x4>

080024ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <MemManage_Handler+0x4>

080024f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <BusFault_Handler+0x4>

080024fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <UsageFault_Handler+0x4>

08002502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <DMA1_Stream0_IRQHandler+0x10>)
 8002516:	f003 fc5b 	bl	8005dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	24000164 	.word	0x24000164

08002524 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <DMA1_Stream1_IRQHandler+0x10>)
 800252a:	f003 fc51 	bl	8005dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	240001dc 	.word	0x240001dc

08002538 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <DMA1_Stream5_IRQHandler+0x10>)
 800253e:	f003 fc47 	bl	8005dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24000268 	.word	0x24000268

0800254c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM1_BRK_IRQHandler+0x10>)
 8002552:	f009 fc85 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	240003bc 	.word	0x240003bc

08002560 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <TIM1_UP_IRQHandler+0x10>)
 8002566:	f009 fc7b 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	240003bc 	.word	0x240003bc

08002574 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TIM1_TRG_COM_IRQHandler+0x10>)
 800257a:	f009 fc71 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	240003bc 	.word	0x240003bc

08002588 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <TIM1_CC_IRQHandler+0x10>)
 800258e:	f009 fc67 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	240003bc 	.word	0x240003bc

0800259c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <TIM2_IRQHandler+0x10>)
 80025a2:	f009 fc5d 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	24000408 	.word	0x24000408

080025b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM3_IRQHandler+0x10>)
 80025b6:	f009 fc53 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000454 	.word	0x24000454

080025c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <USART1_IRQHandler+0x10>)
 80025ca:	f00a fe0f 	bl	800d1ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	240004a0 	.word	0x240004a0

080025d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <TIM6_DAC_IRQHandler+0x20>)
 80025de:	791b      	ldrb	r3, [r3, #4]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80025e6:	4804      	ldr	r0, [pc, #16]	; (80025f8 <TIM6_DAC_IRQHandler+0x20>)
 80025e8:	f001 ff1c 	bl	8004424 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <TIM6_DAC_IRQHandler+0x24>)
 80025ee:	f009 fc37 	bl	800be60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000254 	.word	0x24000254
 80025fc:	240005e8 	.word	0x240005e8

08002600 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <ITM_SendChar+0x48>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <ITM_SendChar+0x48>)
 8002610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002614:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <ITM_SendChar+0x4c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <ITM_SendChar+0x4c>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002622:	bf00      	nop
 8002624:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f8      	beq.n	8002624 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002632:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	6013      	str	r3, [r2, #0]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000edfc 	.word	0xe000edfc
 800264c:	e0000e00 	.word	0xe0000e00

08002650 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e00a      	b.n	8002678 <_read+0x28>
		*ptr++ = __io_getchar();
 8002662:	f3af 8000 	nop.w
 8002666:	4601      	mov	r1, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	60ba      	str	r2, [r7, #8]
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf0      	blt.n	8002662 <_read+0x12>
	}

	return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e009      	b.n	80026b0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	60ba      	str	r2, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ffab 	bl	8002600 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbf1      	blt.n	800269c <_write+0x12>
	}
	return len;
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_close>:

int _close(int file) {
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_fstat>:

int _fstat(int file, struct stat *st) {
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ea:	605a      	str	r2, [r3, #4]
	return 0;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_isatty>:

int _isatty(int file) {
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
		errno = ENOMEM;
 800275c:	f010 fbf6 	bl	8012f4c <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	24080000 	.word	0x24080000
 800278c:	00000400 	.word	0x00000400
 8002790:	24000634 	.word	0x24000634
 8002794:	24004fa0 	.word	0x24004fa0

08002798 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800279c:	4b37      	ldr	r3, [pc, #220]	; (800287c <SystemInit+0xe4>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a36      	ldr	r2, [pc, #216]	; (800287c <SystemInit+0xe4>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <SystemInit+0xe8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d807      	bhi.n	80027c8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <SystemInit+0xe8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 030f 	bic.w	r3, r3, #15
 80027c0:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <SystemInit+0xe8>)
 80027c2:	f043 0307 	orr.w	r3, r3, #7
 80027c6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80027c8:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <SystemInit+0xec>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <SystemInit+0xec>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <SystemInit+0xec>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <SystemInit+0xec>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4929      	ldr	r1, [pc, #164]	; (8002884 <SystemInit+0xec>)
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <SystemInit+0xf0>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <SystemInit+0xe8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <SystemInit+0xe8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 030f 	bic.w	r3, r3, #15
 80027fa:	4a21      	ldr	r2, [pc, #132]	; (8002880 <SystemInit+0xe8>)
 80027fc:	f043 0307 	orr.w	r3, r3, #7
 8002800:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <SystemInit+0xec>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <SystemInit+0xec>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <SystemInit+0xec>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <SystemInit+0xec>)
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <SystemInit+0xf4>)
 8002818:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <SystemInit+0xec>)
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <SystemInit+0xf8>)
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <SystemInit+0xec>)
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <SystemInit+0xfc>)
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <SystemInit+0xec>)
 8002828:	2200      	movs	r2, #0
 800282a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <SystemInit+0xec>)
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <SystemInit+0xfc>)
 8002830:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <SystemInit+0xec>)
 8002834:	2200      	movs	r2, #0
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <SystemInit+0xec>)
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <SystemInit+0xfc>)
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <SystemInit+0xec>)
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <SystemInit+0xec>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <SystemInit+0xec>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <SystemInit+0xec>)
 8002852:	2200      	movs	r2, #0
 8002854:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <SystemInit+0x100>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <SystemInit+0x104>)
 800285c:	4013      	ands	r3, r2
 800285e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002862:	d202      	bcs.n	800286a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <SystemInit+0x108>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <SystemInit+0x10c>)
 800286c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002870:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00
 8002880:	52002000 	.word	0x52002000
 8002884:	58024400 	.word	0x58024400
 8002888:	eaf6ed7f 	.word	0xeaf6ed7f
 800288c:	02020200 	.word	0x02020200
 8002890:	01ff0000 	.word	0x01ff0000
 8002894:	01010280 	.word	0x01010280
 8002898:	5c001000 	.word	0x5c001000
 800289c:	ffff0000 	.word	0xffff0000
 80028a0:	51008108 	.word	0x51008108
 80028a4:	52004000 	.word	0x52004000

080028a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028ac:	f7ff ff74 	bl	8002798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028b2:	490d      	ldr	r1, [pc, #52]	; (80028e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028b4:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d6:	f010 fb3f 	bl	8012f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028da:	f7fe f825 	bl	8000928 <main>
  bx  lr
 80028de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028e8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80028ec:	080143cc 	.word	0x080143cc
  ldr r2, =_sbss
 80028f0:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80028f4:	24004f9c 	.word	0x24004f9c

080028f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC3_IRQHandler>
	...

080028fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002902:	2003      	movs	r0, #3
 8002904:	f001 fd39 	bl	800437a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002908:	f005 febc 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_Init+0x68>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	4913      	ldr	r1, [pc, #76]	; (8002968 <HAL_Init+0x6c>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_Init+0x68>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_Init+0x6c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_Init+0x70>)
 800293e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002940:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_Init+0x74>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002946:	2005      	movs	r0, #5
 8002948:	f7ff fd60 	bl	800240c <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e002      	b.n	800295c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002956:	f7ff f97b 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	58024400 	.word	0x58024400
 8002968:	080142e4 	.word	0x080142e4
 800296c:	24000004 	.word	0x24000004
 8002970:	24000000 	.word	0x24000000

08002974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x20>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x24>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_IncTick+0x24>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2400000c 	.word	0x2400000c
 8002998:	24000638 	.word	0x24000638

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	24000638 	.word	0x24000638

080029b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_GetREVID+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0c1b      	lsrs	r3, r3, #16
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	5c001000 	.word	0x5c001000

080029cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58000400 	.word	0x58000400

080029f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3360      	adds	r3, #96	; 0x60
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]
  }
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b087      	sub	sp, #28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3330      	adds	r3, #48	; 0x30
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	211f      	movs	r1, #31
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	401a      	ands	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	f003 011f 	and.w	r1, r3, #31
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f023 0203 	bic.w	r2, r3, #3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0e5b      	lsrs	r3, r3, #25
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0d1b      	lsrs	r3, r3, #20
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2107      	movs	r1, #7
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	401a      	ands	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0d1b      	lsrs	r3, r3, #20
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	401a      	ands	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0318 	and.w	r3, r3, #24
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c28:	40d9      	lsrs	r1, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	000fffff 	.word	0x000fffff

08002c4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 031f 	and.w	r3, r3, #31
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6093      	str	r3, [r2, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	5fffffc0 	.word	0x5fffffc0

08002c8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	6fffffc0 	.word	0x6fffffc0

08002cdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf0:	d101      	bne.n	8002cf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <LL_ADC_Enable+0x24>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	7fffffc0 	.word	0x7fffffc0

08002d2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <LL_ADC_Disable+0x24>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	7fffffc0 	.word	0x7fffffc0

08002d54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_IsEnabled+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_IsEnabled+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsDisableOngoing+0x18>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsDisableOngoing+0x1a>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <LL_ADC_REG_StartConversion+0x24>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	7fffffc0 	.word	0x7fffffc0

08002dc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d101      	bne.n	8002e06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e18f      	b.n	800314e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe ff25 	bl	8001c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff19 	bl	8002c8c <LL_ADC_IsDeepPowerDownEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff feff 	bl	8002c68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff34 	bl	8002cdc <LL_ADC_IsInternalRegulatorEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff18 	bl	8002cb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e84:	4b87      	ldr	r3, [pc, #540]	; (80030a4 <HAL_ADC_Init+0x290>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <HAL_ADC_Init+0x294>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e96:	e002      	b.n	8002e9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f9      	bne.n	8002e98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff17 	bl	8002cdc <LL_ADC_IsInternalRegulatorEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff77 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8002eda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 8129 	bne.w	800313c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 8125 	bne.w	800313c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff24 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d136      	bne.n	8002f80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_ADC_Init+0x298>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_ADC_Init+0x112>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_ADC_Init+0x29c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10e      	bne.n	8002f44 <HAL_ADC_Init+0x130>
 8002f26:	4861      	ldr	r0, [pc, #388]	; (80030ac <HAL_ADC_Init+0x298>)
 8002f28:	f7ff ff14 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	4860      	ldr	r0, [pc, #384]	; (80030b0 <HAL_ADC_Init+0x29c>)
 8002f30:	f7ff ff10 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4323      	orrs	r3, r4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e008      	b.n	8002f56 <HAL_ADC_Init+0x142>
 8002f44:	485b      	ldr	r0, [pc, #364]	; (80030b4 <HAL_ADC_Init+0x2a0>)
 8002f46:	f7ff ff05 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a53      	ldr	r2, [pc, #332]	; (80030ac <HAL_ADC_Init+0x298>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_Init+0x15a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a51      	ldr	r2, [pc, #324]	; (80030b0 <HAL_ADC_Init+0x29c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Init+0x15e>
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_ADC_Init+0x2a4>)
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_Init+0x160>
 8002f72:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_ADC_Init+0x2a8>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f7ff fd3c 	bl	80029f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f80:	f7ff fd18 	bl	80029b4 <HAL_GetREVID>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d914      	bls.n	8002fb8 <HAL_ADC_Init+0x1a4>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d110      	bne.n	8002fb8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7d5b      	ldrb	r3, [r3, #21]
 8002f9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fa0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fa6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7f1b      	ldrb	r3, [r3, #28]
 8002fac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb0:	f043 030c 	orr.w	r3, r3, #12
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e00d      	b.n	8002fd4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7d5b      	ldrb	r3, [r3, #21]
 8002fbc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fc2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fc8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7f1b      	ldrb	r3, [r3, #28]
 8002fce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7f1b      	ldrb	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d106      	bne.n	8002fea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	045b      	lsls	r3, r3, #17
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_ADC_Init+0x2ac>)
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	430b      	orrs	r3, r1
 8003018:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fed2 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003024:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fedf 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003030:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d15f      	bne.n	80030f8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d15c      	bne.n	80030f8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7d1b      	ldrb	r3, [r3, #20]
 8003042:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_ADC_Init+0x2b0>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	430b      	orrs	r3, r1
 800305e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003066:	2b01      	cmp	r3, #1
 8003068:	d130      	bne.n	80030cc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_ADC_Init+0x2b4>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800307e:	3a01      	subs	r2, #1
 8003080:	0411      	lsls	r1, r2, #16
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003092:	430a      	orrs	r2, r1
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	611a      	str	r2, [r3, #16]
 80030a0:	e01c      	b.n	80030dc <HAL_ADC_Init+0x2c8>
 80030a2:	bf00      	nop
 80030a4:	24000000 	.word	0x24000000
 80030a8:	053e2d63 	.word	0x053e2d63
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022100 	.word	0x40022100
 80030b4:	58026000 	.word	0x58026000
 80030b8:	40022300 	.word	0x40022300
 80030bc:	58026300 	.word	0x58026300
 80030c0:	fff0c003 	.word	0xfff0c003
 80030c4:	ffffbffc 	.word	0xffffbffc
 80030c8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fdec 	bl	8003cd0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f023 010f 	bic.w	r1, r3, #15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
 8003118:	e007      	b.n	800312a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 020f 	bic.w	r2, r2, #15
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
 800313a:	e007      	b.n	800314c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800314c:	7ffb      	ldrb	r3, [r7, #31]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop

08003158 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a55      	ldr	r2, [pc, #340]	; (80032c0 <HAL_ADC_Start_DMA+0x168>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_ADC_Start_DMA+0x20>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_ADC_Start_DMA+0x16c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_ADC_Start_DMA+0x24>
 8003178:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_ADC_Start_DMA+0x170>)
 800317a:	e000      	b.n	800317e <HAL_ADC_Start_DMA+0x26>
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_ADC_Start_DMA+0x174>)
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fd64 	bl	8002c4c <LL_ADC_GetMultimode>
 8003184:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fe1c 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 808c 	bne.w	80032b0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_Start_DMA+0x4e>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e087      	b.n	80032b6 <HAL_ADC_Start_DMA+0x15e>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d002      	beq.n	80031c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d170      	bne.n	80032a2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fc07 	bl	80039d4 <ADC_Enable>
 80031c6:	4603      	mov	r3, r0
 80031c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d163      	bne.n	8003298 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031d4:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_ADC_Start_DMA+0x178>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <HAL_ADC_Start_DMA+0x16c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d002      	beq.n	80031f0 <HAL_ADC_Start_DMA+0x98>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_Start_DMA+0x9a>
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_ADC_Start_DMA+0x168>)
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d002      	beq.n	8003200 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	f023 0206 	bic.w	r2, r3, #6
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	659a      	str	r2, [r3, #88]	; 0x58
 8003224:	e002      	b.n	800322c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_ADC_Start_DMA+0x17c>)
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	4a27      	ldr	r2, [pc, #156]	; (80032d8 <HAL_ADC_Start_DMA+0x180>)
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <HAL_ADC_Start_DMA+0x184>)
 8003242:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	221c      	movs	r2, #28
 800324a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0210 	orr.w	r2, r2, #16
 8003262:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7ff fc89 	bl	8002b86 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3340      	adds	r3, #64	; 0x40
 800327e:	4619      	mov	r1, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f001 fdd6 	bl	8004e34 <HAL_DMA_Start_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fd85 	bl	8002da0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003296:	e00d      	b.n	80032b4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80032a0:	e008      	b.n	80032b4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032ae:	e001      	b.n	80032b4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40022100 	.word	0x40022100
 80032c8:	40022300 	.word	0x40022300
 80032cc:	58026300 	.word	0x58026300
 80032d0:	fffff0fe 	.word	0xfffff0fe
 80032d4:	08003ba7 	.word	0x08003ba7
 80032d8:	08003c7f 	.word	0x08003c7f
 80032dc:	08003c9b 	.word	0x08003c9b

080032e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b0a1      	sub	sp, #132	; 0x84
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a65      	ldr	r2, [pc, #404]	; (80034cc <HAL_ADC_ConfigChannel+0x1b0>)
 8003336:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x2a>
 8003342:	2302      	movs	r3, #2
 8003344:	e32e      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x688>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fd38 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8313 	bne.w	8003986 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db2c      	blt.n	80033c2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003370:	2b00      	cmp	r3, #0
 8003372:	d108      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x6a>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2201      	movs	r2, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	e016      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x98>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003396:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80033a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2201      	movs	r2, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	69d1      	ldr	r1, [r2, #28]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	430b      	orrs	r3, r1
 80033c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f7ff fbad 	bl	8002b2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fcf5 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 80033de:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fd02 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 80033ea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80b8 	bne.w	8003564 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 80b4 	bne.w	8003564 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	461a      	mov	r2, r3
 800340a:	f7ff fbcf 	bl	8002bac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800340e:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341a:	d10b      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x118>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	e01d      	b.n	8003470 <HAL_ADC_ConfigChannel+0x154>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10b      	bne.n	800345a <HAL_ADC_ConfigChannel+0x13e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	e00a      	b.n	8003470 <HAL_ADC_ConfigChannel+0x154>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d02c      	beq.n	80034d4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6919      	ldr	r1, [r3, #16]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003488:	f7ff faea 	bl	8002a60 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	7e5b      	ldrb	r3, [r3, #25]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x186>
 800349c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x188>
 80034a2:	2300      	movs	r3, #0
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fb14 	bl	8002ad2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6919      	ldr	r1, [r3, #16]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	7e1b      	ldrb	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1a4>
 80034ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034be:	e000      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x1a6>
 80034c0:	2300      	movs	r3, #0
 80034c2:	461a      	mov	r2, r3
 80034c4:	f7ff faec 	bl	8002aa0 <LL_ADC_SetDataRightShift>
 80034c8:	e04c      	b.n	8003564 <HAL_ADC_ConfigChannel+0x248>
 80034ca:	bf00      	nop
 80034cc:	47ff0000 	.word	0x47ff0000
 80034d0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d107      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	069b      	lsls	r3, r3, #26
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800351a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	069b      	lsls	r3, r3, #26
 800352c:	429a      	cmp	r2, r3
 800352e:	d107      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800353e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	069b      	lsls	r3, r3, #26
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003562:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fbf3 	bl	8002d54 <LL_ADC_IsEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	f040 8211 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	461a      	mov	r2, r3
 8003584:	f7ff fb3e 	bl	8002c04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4aa1      	ldr	r2, [pc, #644]	; (8003814 <HAL_ADC_ConfigChannel+0x4f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f040 812e 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x2a0>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	3301      	adds	r3, #1
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	bf94      	ite	ls
 80035b4:	2301      	movls	r3, #1
 80035b6:	2300      	movhi	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e019      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x2d4>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80035d4:	2320      	movs	r3, #32
 80035d6:	e003      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80035d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2b09      	cmp	r3, #9
 80035e8:	bf94      	ite	ls
 80035ea:	2301      	movls	r3, #1
 80035ec:	2300      	movhi	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d079      	beq.n	80036e8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x2f4>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	3301      	adds	r3, #1
 8003608:	069b      	lsls	r3, r3, #26
 800360a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360e:	e015      	b.n	800363c <HAL_ADC_ConfigChannel+0x320>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800361e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003620:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800362c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	069b      	lsls	r3, r3, #26
 8003638:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_ADC_ConfigChannel+0x340>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	0e9b      	lsrs	r3, r3, #26
 800364e:	3301      	adds	r3, #1
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	2101      	movs	r1, #1
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	e017      	b.n	800368c <HAL_ADC_ConfigChannel+0x370>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e003      	b.n	8003680 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	ea42 0103 	orr.w	r1, r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x396>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	3301      	adds	r3, #1
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	051b      	lsls	r3, r3, #20
 80036b0:	e018      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x3c8>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80036ca:	2320      	movs	r3, #32
 80036cc:	e003      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e4:	430b      	orrs	r3, r1
 80036e6:	e07e      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x3e8>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	3301      	adds	r3, #1
 80036fc:	069b      	lsls	r3, r3, #26
 80036fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003702:	e015      	b.n	8003730 <HAL_ADC_ConfigChannel+0x414>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800371c:	2320      	movs	r3, #32
 800371e:	e003      	b.n	8003728 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3301      	adds	r3, #1
 800372a:	069b      	lsls	r3, r3, #26
 800372c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x434>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0e9b      	lsrs	r3, r3, #26
 8003742:	3301      	adds	r3, #1
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	e017      	b.n	8003780 <HAL_ADC_ConfigChannel+0x464>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	61bb      	str	r3, [r7, #24]
  return result;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	ea42 0103 	orr.w	r1, r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x490>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	3b1e      	subs	r3, #30
 80037a4:	051b      	lsls	r3, r3, #20
 80037a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037aa:	e01b      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x4c8>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	60fb      	str	r3, [r7, #12]
  return result;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80037c4:	2320      	movs	r3, #32
 80037c6:	e003      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	3b1e      	subs	r3, #30
 80037de:	051b      	lsls	r3, r3, #20
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e4:	430b      	orrs	r3, r1
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7ff f9de 	bl	8002bac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f280 80cf 	bge.w	8003998 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a06      	ldr	r2, [pc, #24]	; (8003818 <HAL_ADC_ConfigChannel+0x4fc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_ADC_ConfigChannel+0x4f2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <HAL_ADC_ConfigChannel+0x500>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10a      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x508>
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <HAL_ADC_ConfigChannel+0x504>)
 8003810:	e009      	b.n	8003826 <HAL_ADC_ConfigChannel+0x50a>
 8003812:	bf00      	nop
 8003814:	47ff0000 	.word	0x47ff0000
 8003818:	40022000 	.word	0x40022000
 800381c:	40022100 	.word	0x40022100
 8003820:	40022300 	.word	0x40022300
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <HAL_ADC_ConfigChannel+0x690>)
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f90c 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 800382c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5f      	ldr	r2, [pc, #380]	; (80039b0 <HAL_ADC_ConfigChannel+0x694>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x526>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5d      	ldr	r2, [pc, #372]	; (80039b4 <HAL_ADC_ConfigChannel+0x698>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10e      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x544>
 8003842:	485b      	ldr	r0, [pc, #364]	; (80039b0 <HAL_ADC_ConfigChannel+0x694>)
 8003844:	f7ff fa86 	bl	8002d54 <LL_ADC_IsEnabled>
 8003848:	4604      	mov	r4, r0
 800384a:	485a      	ldr	r0, [pc, #360]	; (80039b4 <HAL_ADC_ConfigChannel+0x698>)
 800384c:	f7ff fa82 	bl	8002d54 <LL_ADC_IsEnabled>
 8003850:	4603      	mov	r3, r0
 8003852:	4323      	orrs	r3, r4
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e008      	b.n	8003872 <HAL_ADC_ConfigChannel+0x556>
 8003860:	4855      	ldr	r0, [pc, #340]	; (80039b8 <HAL_ADC_ConfigChannel+0x69c>)
 8003862:	f7ff fa77 	bl	8002d54 <LL_ADC_IsEnabled>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d07d      	beq.n	8003972 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_ADC_ConfigChannel+0x6a0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d130      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x5c6>
 8003880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d12b      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <HAL_ADC_ConfigChannel+0x69c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	f040 8081 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <HAL_ADC_ConfigChannel+0x694>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x58e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a43      	ldr	r2, [pc, #268]	; (80039b4 <HAL_ADC_ConfigChannel+0x698>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x592>
 80038aa:	4a45      	ldr	r2, [pc, #276]	; (80039c0 <HAL_ADC_ConfigChannel+0x6a4>)
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x594>
 80038ae:	4a3f      	ldr	r2, [pc, #252]	; (80039ac <HAL_ADC_ConfigChannel+0x690>)
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff f8b0 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_ADC_ConfigChannel+0x6a8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <HAL_ADC_ConfigChannel+0x6ac>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	3301      	adds	r3, #1
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038d2:	e002      	b.n	80038da <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f9      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	e05a      	b.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a39      	ldr	r2, [pc, #228]	; (80039cc <HAL_ADC_ConfigChannel+0x6b0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d11e      	bne.n	800392a <HAL_ADC_ConfigChannel+0x60e>
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d119      	bne.n	800392a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <HAL_ADC_ConfigChannel+0x69c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d14b      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <HAL_ADC_ConfigChannel+0x694>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x5f8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <HAL_ADC_ConfigChannel+0x698>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x5fc>
 8003914:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <HAL_ADC_ConfigChannel+0x6a4>)
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x5fe>
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_ADC_ConfigChannel+0x690>)
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7ff f87b 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003928:	e036      	b.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <HAL_ADC_ConfigChannel+0x6b4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d131      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
 8003934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d12c      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <HAL_ADC_ConfigChannel+0x69c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d127      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <HAL_ADC_ConfigChannel+0x694>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_ADC_ConfigChannel+0x640>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_ADC_ConfigChannel+0x698>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x644>
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_ADC_ConfigChannel+0x6a4>)
 800395e:	e000      	b.n	8003962 <HAL_ADC_ConfigChannel+0x646>
 8003960:	4a12      	ldr	r2, [pc, #72]	; (80039ac <HAL_ADC_ConfigChannel+0x690>)
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f7ff f857 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
 8003970:	e012      	b.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003984:	e008      	b.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3784      	adds	r7, #132	; 0x84
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	58026300 	.word	0x58026300
 80039b0:	40022000 	.word	0x40022000
 80039b4:	40022100 	.word	0x40022100
 80039b8:	58026000 	.word	0x58026000
 80039bc:	cb840000 	.word	0xcb840000
 80039c0:	40022300 	.word	0x40022300
 80039c4:	24000000 	.word	0x24000000
 80039c8:	053e2d63 	.word	0x053e2d63
 80039cc:	c7520000 	.word	0xc7520000
 80039d0:	cfb80000 	.word	0xcfb80000

080039d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff f9b7 	bl	8002d54 <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d16e      	bne.n	8003aca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	4b38      	ldr	r3, [pc, #224]	; (8003ad4 <ADC_Enable+0x100>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e05a      	b.n	8003acc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f972 	bl	8002d04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a20:	f7fe ffbc 	bl	800299c <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <ADC_Enable+0x104>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <ADC_Enable+0x66>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a29      	ldr	r2, [pc, #164]	; (8003adc <ADC_Enable+0x108>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <ADC_Enable+0x6a>
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <ADC_Enable+0x10c>)
 8003a3c:	e000      	b.n	8003a40 <ADC_Enable+0x6c>
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <ADC_Enable+0x110>)
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff f903 	bl	8002c4c <LL_ADC_GetMultimode>
 8003a46:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	; (8003adc <ADC_Enable+0x108>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d002      	beq.n	8003a58 <ADC_Enable+0x84>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	e000      	b.n	8003a5a <ADC_Enable+0x86>
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <ADC_Enable+0x104>)
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02c      	beq.n	8003abc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d130      	bne.n	8003aca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a68:	e028      	b.n	8003abc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f970 	bl	8002d54 <LL_ADC_IsEnabled>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f940 	bl	8002d04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a84:	f7fe ff8a 	bl	800299c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d914      	bls.n	8003abc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d00d      	beq.n	8003abc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f043 0210 	orr.w	r2, r3, #16
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d1cf      	bne.n	8003a6a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	8000003f 	.word	0x8000003f
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	40022100 	.word	0x40022100
 8003ae0:	40022300 	.word	0x40022300
 8003ae4:	58026300 	.word	0x58026300

08003ae8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f940 	bl	8002d7a <LL_ADC_IsDisableOngoing>
 8003afa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f927 	bl	8002d54 <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d047      	beq.n	8003b9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d144      	bne.n	8003b9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030d 	and.w	r3, r3, #13
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10c      	bne.n	8003b3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff f901 	bl	8002d2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b32:	f7fe ff33 	bl	800299c <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b38:	e029      	b.n	8003b8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e023      	b.n	8003b9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b56:	f7fe ff21 	bl	800299c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d914      	bls.n	8003b8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e007      	b.n	8003b9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1dc      	bne.n	8003b56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d14b      	bne.n	8003c58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d021      	beq.n	8003c1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe ff92 	bl	8002b08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d032      	beq.n	8003c50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d12b      	bne.n	8003c50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11f      	bne.n	8003c50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8003c1c:	e018      	b.n	8003c50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d111      	bne.n	8003c50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fb45 	bl	80032e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c56:	e00e      	b.n	8003c76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fb4f 	bl	8003308 <HAL_ADC_ErrorCallback>
}
 8003c6a:	e004      	b.n	8003c76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fb31 	bl	80032f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff fb21 	bl	8003308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a7a      	ldr	r2, [pc, #488]	; (8003ec8 <ADC_ConfigureBoostMode+0x1f8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <ADC_ConfigureBoostMode+0x1c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a79      	ldr	r2, [pc, #484]	; (8003ecc <ADC_ConfigureBoostMode+0x1fc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d109      	bne.n	8003d00 <ADC_ConfigureBoostMode+0x30>
 8003cec:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <ADC_ConfigureBoostMode+0x200>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e008      	b.n	8003d12 <ADC_ConfigureBoostMode+0x42>
 8003d00:	4b74      	ldr	r3, [pc, #464]	; (8003ed4 <ADC_ConfigureBoostMode+0x204>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01c      	beq.n	8003d50 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d16:	f004 fe2f 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8003d1a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d24:	d010      	beq.n	8003d48 <ADC_ConfigureBoostMode+0x78>
 8003d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d2a:	d873      	bhi.n	8003e14 <ADC_ConfigureBoostMode+0x144>
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	d002      	beq.n	8003d38 <ADC_ConfigureBoostMode+0x68>
 8003d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d36:	d16d      	bne.n	8003e14 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	60fb      	str	r3, [r7, #12]
        break;
 8003d46:	e068      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	60fb      	str	r3, [r7, #12]
        break;
 8003d4e:	e064      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f006 f8b6 	bl	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d66:	d051      	beq.n	8003e0c <ADC_ConfigureBoostMode+0x13c>
 8003d68:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d6c:	d854      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003d6e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d72:	d047      	beq.n	8003e04 <ADC_ConfigureBoostMode+0x134>
 8003d74:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d78:	d84e      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003d7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d7e:	d03d      	beq.n	8003dfc <ADC_ConfigureBoostMode+0x12c>
 8003d80:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d84:	d848      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8a:	d033      	beq.n	8003df4 <ADC_ConfigureBoostMode+0x124>
 8003d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d90:	d842      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003d92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d96:	d029      	beq.n	8003dec <ADC_ConfigureBoostMode+0x11c>
 8003d98:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d9c:	d83c      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003d9e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003da2:	d01a      	beq.n	8003dda <ADC_ConfigureBoostMode+0x10a>
 8003da4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003da8:	d836      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003daa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dae:	d014      	beq.n	8003dda <ADC_ConfigureBoostMode+0x10a>
 8003db0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003db4:	d830      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dba:	d00e      	beq.n	8003dda <ADC_ConfigureBoostMode+0x10a>
 8003dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc0:	d82a      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003dc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dc6:	d008      	beq.n	8003dda <ADC_ConfigureBoostMode+0x10a>
 8003dc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dcc:	d824      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x148>
 8003dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd2:	d002      	beq.n	8003dda <ADC_ConfigureBoostMode+0x10a>
 8003dd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dd8:	d11e      	bne.n	8003e18 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	0c9b      	lsrs	r3, r3, #18
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e016      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
        break;
 8003df2:	e012      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	60fb      	str	r3, [r7, #12]
        break;
 8003dfa:	e00e      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	60fb      	str	r3, [r7, #12]
        break;
 8003e02:	e00a      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	09db      	lsrs	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
        break;
 8003e0a:	e006      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	60fb      	str	r3, [r7, #12]
        break;
 8003e12:	e002      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e18:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e1a:	f7fe fdcb 	bl	80029b4 <HAL_GetREVID>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d815      	bhi.n	8003e54 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ed8 <ADC_ConfigureBoostMode+0x208>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d908      	bls.n	8003e42 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e40:	e03e      	b.n	8003ec0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e50:	609a      	str	r2, [r3, #8]
}
 8003e52:	e035      	b.n	8003ec0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <ADC_ConfigureBoostMode+0x20c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d808      	bhi.n	8003e74 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e70:	609a      	str	r2, [r3, #8]
}
 8003e72:	e025      	b.n	8003ec0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <ADC_ConfigureBoostMode+0x210>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d80a      	bhi.n	8003e92 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	e016      	b.n	8003ec0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <ADC_ConfigureBoostMode+0x214>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d80a      	bhi.n	8003eb0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eac:	609a      	str	r2, [r3, #8]
}
 8003eae:	e007      	b.n	8003ec0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40022100 	.word	0x40022100
 8003ed0:	40022300 	.word	0x40022300
 8003ed4:	58026300 	.word	0x58026300
 8003ed8:	01312d00 	.word	0x01312d00
 8003edc:	005f5e10 	.word	0x005f5e10
 8003ee0:	00bebc20 	.word	0x00bebc20
 8003ee4:	017d7840 	.word	0x017d7840

08003ee8 <LL_ADC_IsEnabled>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <LL_ADC_IsEnabled+0x18>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_ADC_IsEnabled+0x1a>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <LL_ADC_StartCalibration>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <LL_ADC_StartCalibration+0x38>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f30:	430a      	orrs	r2, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	3ffeffc0 	.word	0x3ffeffc0

08003f4c <LL_ADC_IsCalibrationOnGoing>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f60:	d101      	bne.n	8003f66 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d101      	bne.n	8003f8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_ADCEx_Calibration_Start+0x1e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e04c      	b.n	8004054 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fd90 	bl	8003ae8 <ADC_Disable>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d135      	bne.n	800403e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff90 	bl	8003f10 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ff0:	e014      	b.n	800401c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d30d      	bcc.n	800401c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f023 0312 	bic.w	r3, r3, #18
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e01b      	b.n	8004054 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff93 	bl	8003f4c <LL_ADC_IsCalibrationOnGoing>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e2      	bne.n	8003ff2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	f023 0303 	bic.w	r3, r3, #3
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
 800403c:	e005      	b.n	800404a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	f043 0210 	orr.w	r2, r3, #16
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	ffffeefd 	.word	0xffffeefd
 8004060:	25c3f800 	.word	0x25c3f800

08004064 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b09f      	sub	sp, #124	; 0x7c
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800407e:	2302      	movs	r3, #2
 8004080:	e0be      	b.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800408e:	2300      	movs	r3, #0
 8004090:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5c      	ldr	r2, [pc, #368]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d102      	bne.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800409c:	4b5b      	ldr	r3, [pc, #364]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	e001      	b.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e09d      	b.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff54 	bl	8003f74 <LL_ADC_REG_IsConversionOngoing>
 80040cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff4e 	bl	8003f74 <LL_ADC_REG_IsConversionOngoing>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d17f      	bne.n	80041de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d17c      	bne.n	80041de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a47      	ldr	r2, [pc, #284]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a46      	ldr	r2, [pc, #280]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040f8:	4b45      	ldr	r3, [pc, #276]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040fa:	e000      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d039      	beq.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a3a      	ldr	r2, [pc, #232]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10e      	bne.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800412e:	4836      	ldr	r0, [pc, #216]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004130:	f7ff feda 	bl	8003ee8 <LL_ADC_IsEnabled>
 8004134:	4604      	mov	r4, r0
 8004136:	4835      	ldr	r0, [pc, #212]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004138:	f7ff fed6 	bl	8003ee8 <LL_ADC_IsEnabled>
 800413c:	4603      	mov	r3, r0
 800413e:	4323      	orrs	r3, r4
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e008      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800414c:	4832      	ldr	r0, [pc, #200]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800414e:	f7ff fecb 	bl	8003ee8 <LL_ADC_IsEnabled>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d047      	beq.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004168:	4013      	ands	r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	430a      	orrs	r2, r1
 8004174:	431a      	orrs	r2, r3
 8004176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004178:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800417a:	e03a      	b.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1d      	ldr	r2, [pc, #116]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10e      	bne.n	80041ba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800419c:	481a      	ldr	r0, [pc, #104]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800419e:	f7ff fea3 	bl	8003ee8 <LL_ADC_IsEnabled>
 80041a2:	4604      	mov	r4, r0
 80041a4:	4819      	ldr	r0, [pc, #100]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041a6:	f7ff fe9f 	bl	8003ee8 <LL_ADC_IsEnabled>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4323      	orrs	r3, r4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e008      	b.n	80041cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041ba:	4817      	ldr	r0, [pc, #92]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041bc:	f7ff fe94 	bl	8003ee8 <LL_ADC_IsEnabled>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041dc:	e009      	b.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041f0:	e000      	b.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004200:	4618      	mov	r0, r3
 8004202:	377c      	adds	r7, #124	; 0x7c
 8004204:	46bd      	mov	sp, r7
 8004206:	bd90      	pop	{r4, r7, pc}
 8004208:	40022000 	.word	0x40022000
 800420c:	40022100 	.word	0x40022100
 8004210:	40022300 	.word	0x40022300
 8004214:	58026300 	.word	0x58026300
 8004218:	58026000 	.word	0x58026000
 800421c:	fffff0e0 	.word	0xfffff0e0

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <__NVIC_SetPriorityGrouping+0x40>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424e:	4a04      	ldr	r2, [pc, #16]	; (8004260 <__NVIC_SetPriorityGrouping+0x40>)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	60d3      	str	r3, [r2, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00
 8004264:	05fa0000 	.word	0x05fa0000

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	; (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	; (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf28      	it	cs
 8004332:	2304      	movcs	r3, #4
 8004334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3304      	adds	r3, #4
 800433a:	2b06      	cmp	r3, #6
 800433c:	d902      	bls.n	8004344 <NVIC_EncodePriority+0x30>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3b03      	subs	r3, #3
 8004342:	e000      	b.n	8004346 <NVIC_EncodePriority+0x32>
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	401a      	ands	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43d9      	mvns	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	4313      	orrs	r3, r2
         );
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff4c 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800439e:	f7ff ff63 	bl	8004268 <__NVIC_GetPriorityGrouping>
 80043a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7ff ffb3 	bl	8004314 <NVIC_EncodePriority>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff82 	bl	80042c0 <__NVIC_SetPriority>
}
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff56 	bl	8004284 <__NVIC_EnableIRQ>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e014      	b.n	800441c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	791b      	ldrb	r3, [r3, #4]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd fd5c 	bl	8001ec0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01d      	beq.n	8004482 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d018      	beq.n	8004482 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2204      	movs	r2, #4
 8004454:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800446a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800447a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f827 	bl	80044d0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01d      	beq.n	80044c8 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2204      	movs	r2, #4
 800449a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f043 0202 	orr.w	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f950 	bl	8004768 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_DAC_ConfigChannel+0x1e>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e12a      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	795b      	ldrb	r3, [r3, #5]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_DAC_ConfigChannel+0x2e>
 800450e:	2302      	movs	r3, #2
 8004510:	e124      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2202      	movs	r2, #2
 800451c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d17a      	bne.n	800461c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004526:	f7fe fa39 	bl	800299c <HAL_GetTick>
 800452a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d13d      	bne.n	80045ae <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004532:	e018      	b.n	8004566 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004534:	f7fe fa32 	bl	800299c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d911      	bls.n	8004566 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004548:	4b86      	ldr	r3, [pc, #536]	; (8004764 <HAL_DAC_ConfigChannel+0x280>)
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f043 0208 	orr.w	r2, r3, #8
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2203      	movs	r2, #3
 8004560:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0fa      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456c:	4b7d      	ldr	r3, [pc, #500]	; (8004764 <HAL_DAC_ConfigChannel+0x280>)
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1df      	bne.n	8004534 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	6992      	ldr	r2, [r2, #24]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
 800457e:	e020      	b.n	80045c2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004580:	f7fe fa0c 	bl	800299c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d90f      	bls.n	80045ae <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	2b00      	cmp	r3, #0
 8004596:	da0a      	bge.n	80045ae <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f043 0208 	orr.w	r2, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2203      	movs	r2, #3
 80045a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0d6      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	dbe3      	blt.n	8004580 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	6992      	ldr	r2, [r2, #24]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	ea02 0103 	and.w	r1, r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	21ff      	movs	r1, #255	; 0xff
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	ea02 0103 	and.w	r1, r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d11d      	bne.n	8004660 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	221f      	movs	r2, #31
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2207      	movs	r2, #7
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	e00f      	b.n	80046aa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d102      	bne.n	8004698 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004692:	2301      	movs	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	e008      	b.n	80046aa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80046a0:	2301      	movs	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
 80046a4:	e001      	b.n	80046aa <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43da      	mvns	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	400a      	ands	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	22c0      	movs	r2, #192	; 0xc0
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	400a      	ands	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	; 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20008000 	.word	0x20008000

08004768 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004784:	f7fe f90a 	bl	800299c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e316      	b.n	8004dc2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a66      	ldr	r2, [pc, #408]	; (8004934 <HAL_DMA_Init+0x1b8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d04a      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a65      	ldr	r2, [pc, #404]	; (8004938 <HAL_DMA_Init+0x1bc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d045      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a63      	ldr	r2, [pc, #396]	; (800493c <HAL_DMA_Init+0x1c0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d040      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a62      	ldr	r2, [pc, #392]	; (8004940 <HAL_DMA_Init+0x1c4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d03b      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a60      	ldr	r2, [pc, #384]	; (8004944 <HAL_DMA_Init+0x1c8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d036      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5f      	ldr	r2, [pc, #380]	; (8004948 <HAL_DMA_Init+0x1cc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d031      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5d      	ldr	r2, [pc, #372]	; (800494c <HAL_DMA_Init+0x1d0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d02c      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a5c      	ldr	r2, [pc, #368]	; (8004950 <HAL_DMA_Init+0x1d4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d027      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a5a      	ldr	r2, [pc, #360]	; (8004954 <HAL_DMA_Init+0x1d8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a59      	ldr	r2, [pc, #356]	; (8004958 <HAL_DMA_Init+0x1dc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d01d      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a57      	ldr	r2, [pc, #348]	; (800495c <HAL_DMA_Init+0x1e0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a56      	ldr	r2, [pc, #344]	; (8004960 <HAL_DMA_Init+0x1e4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a54      	ldr	r2, [pc, #336]	; (8004964 <HAL_DMA_Init+0x1e8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a53      	ldr	r2, [pc, #332]	; (8004968 <HAL_DMA_Init+0x1ec>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a51      	ldr	r2, [pc, #324]	; (800496c <HAL_DMA_Init+0x1f0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_DMA_Init+0xb8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a50      	ldr	r2, [pc, #320]	; (8004970 <HAL_DMA_Init+0x1f4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_DMA_Init+0xbc>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_DMA_Init+0xbe>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 813b 	beq.w	8004ab6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a37      	ldr	r2, [pc, #220]	; (8004934 <HAL_DMA_Init+0x1b8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a36      	ldr	r2, [pc, #216]	; (8004938 <HAL_DMA_Init+0x1bc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a34      	ldr	r2, [pc, #208]	; (800493c <HAL_DMA_Init+0x1c0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a33      	ldr	r2, [pc, #204]	; (8004940 <HAL_DMA_Init+0x1c4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a31      	ldr	r2, [pc, #196]	; (8004944 <HAL_DMA_Init+0x1c8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a30      	ldr	r2, [pc, #192]	; (8004948 <HAL_DMA_Init+0x1cc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2e      	ldr	r2, [pc, #184]	; (800494c <HAL_DMA_Init+0x1d0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <HAL_DMA_Init+0x1d4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <HAL_DMA_Init+0x1d8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_DMA_Init+0x1dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a28      	ldr	r2, [pc, #160]	; (800495c <HAL_DMA_Init+0x1e0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a27      	ldr	r2, [pc, #156]	; (8004960 <HAL_DMA_Init+0x1e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a25      	ldr	r2, [pc, #148]	; (8004964 <HAL_DMA_Init+0x1e8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_DMA_Init+0x1ec>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_DMA_Init+0x1f0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_Init+0x174>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a21      	ldr	r2, [pc, #132]	; (8004970 <HAL_DMA_Init+0x1f4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <HAL_DMA_Init+0x186>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e007      	b.n	8004912 <HAL_DMA_Init+0x196>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004912:	e02f      	b.n	8004974 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004914:	f7fe f842 	bl	800299c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b05      	cmp	r3, #5
 8004920:	d928      	bls.n	8004974 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2203      	movs	r2, #3
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e246      	b.n	8004dc2 <HAL_DMA_Init+0x646>
 8004934:	40020010 	.word	0x40020010
 8004938:	40020028 	.word	0x40020028
 800493c:	40020040 	.word	0x40020040
 8004940:	40020058 	.word	0x40020058
 8004944:	40020070 	.word	0x40020070
 8004948:	40020088 	.word	0x40020088
 800494c:	400200a0 	.word	0x400200a0
 8004950:	400200b8 	.word	0x400200b8
 8004954:	40020410 	.word	0x40020410
 8004958:	40020428 	.word	0x40020428
 800495c:	40020440 	.word	0x40020440
 8004960:	40020458 	.word	0x40020458
 8004964:	40020470 	.word	0x40020470
 8004968:	40020488 	.word	0x40020488
 800496c:	400204a0 	.word	0x400204a0
 8004970:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1c8      	bne.n	8004914 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4b83      	ldr	r3, [pc, #524]	; (8004b9c <HAL_DMA_Init+0x420>)
 800498e:	4013      	ands	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800499a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d107      	bne.n	80049d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	4313      	orrs	r3, r2
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049d8:	4b71      	ldr	r3, [pc, #452]	; (8004ba0 <HAL_DMA_Init+0x424>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b71      	ldr	r3, [pc, #452]	; (8004ba4 <HAL_DMA_Init+0x428>)
 80049de:	4013      	ands	r3, r2
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e4:	d328      	bcc.n	8004a38 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b28      	cmp	r3, #40	; 0x28
 80049ec:	d903      	bls.n	80049f6 <HAL_DMA_Init+0x27a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b2e      	cmp	r3, #46	; 0x2e
 80049f4:	d917      	bls.n	8004a26 <HAL_DMA_Init+0x2aa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b3e      	cmp	r3, #62	; 0x3e
 80049fc:	d903      	bls.n	8004a06 <HAL_DMA_Init+0x28a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b42      	cmp	r3, #66	; 0x42
 8004a04:	d90f      	bls.n	8004a26 <HAL_DMA_Init+0x2aa>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b46      	cmp	r3, #70	; 0x46
 8004a0c:	d903      	bls.n	8004a16 <HAL_DMA_Init+0x29a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b48      	cmp	r3, #72	; 0x48
 8004a14:	d907      	bls.n	8004a26 <HAL_DMA_Init+0x2aa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b4e      	cmp	r3, #78	; 0x4e
 8004a1c:	d905      	bls.n	8004a2a <HAL_DMA_Init+0x2ae>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b52      	cmp	r3, #82	; 0x52
 8004a24:	d801      	bhi.n	8004a2a <HAL_DMA_Init+0x2ae>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_Init+0x2b0>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a36:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d117      	bne.n	8004a92 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00e      	beq.n	8004a92 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f002 fb33 	bl	80070e0 <DMA_CheckFifoParam>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e197      	b.n	8004dc2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f002 fa6e 	bl	8006f7c <DMA_CalcBaseAndBitshift>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	223f      	movs	r2, #63	; 0x3f
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e0cd      	b.n	8004c52 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <HAL_DMA_Init+0x42c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a39      	ldr	r2, [pc, #228]	; (8004bac <HAL_DMA_Init+0x430>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01d      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a38      	ldr	r2, [pc, #224]	; (8004bb0 <HAL_DMA_Init+0x434>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a36      	ldr	r2, [pc, #216]	; (8004bb4 <HAL_DMA_Init+0x438>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a35      	ldr	r2, [pc, #212]	; (8004bb8 <HAL_DMA_Init+0x43c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a33      	ldr	r2, [pc, #204]	; (8004bbc <HAL_DMA_Init+0x440>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a32      	ldr	r2, [pc, #200]	; (8004bc0 <HAL_DMA_Init+0x444>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_DMA_Init+0x38a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a30      	ldr	r2, [pc, #192]	; (8004bc4 <HAL_DMA_Init+0x448>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_DMA_Init+0x38e>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_DMA_Init+0x390>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8097 	beq.w	8004c40 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a24      	ldr	r2, [pc, #144]	; (8004ba8 <HAL_DMA_Init+0x42c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d021      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <HAL_DMA_Init+0x430>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01c      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <HAL_DMA_Init+0x434>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d017      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <HAL_DMA_Init+0x438>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d012      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <HAL_DMA_Init+0x43c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00d      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_DMA_Init+0x440>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d008      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <HAL_DMA_Init+0x444>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <HAL_DMA_Init+0x3e4>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_DMA_Init+0x448>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_DMA_Init+0x44c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d020      	beq.n	8004bcc <HAL_DMA_Init+0x450>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d102      	bne.n	8004b98 <HAL_DMA_Init+0x41c>
 8004b92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b96:	e01a      	b.n	8004bce <HAL_DMA_Init+0x452>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e018      	b.n	8004bce <HAL_DMA_Init+0x452>
 8004b9c:	fe10803f 	.word	0xfe10803f
 8004ba0:	5c001000 	.word	0x5c001000
 8004ba4:	ffff0000 	.word	0xffff0000
 8004ba8:	58025408 	.word	0x58025408
 8004bac:	5802541c 	.word	0x5802541c
 8004bb0:	58025430 	.word	0x58025430
 8004bb4:	58025444 	.word	0x58025444
 8004bb8:	58025458 	.word	0x58025458
 8004bbc:	5802546c 	.word	0x5802546c
 8004bc0:	58025480 	.word	0x58025480
 8004bc4:	58025494 	.word	0x58025494
 8004bc8:	fffe000f 	.word	0xfffe000f
 8004bcc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68d2      	ldr	r2, [r2, #12]
 8004bd2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bfc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b6e      	ldr	r3, [pc, #440]	; (8004dcc <HAL_DMA_Init+0x650>)
 8004c14:	4413      	add	r3, r2
 8004c16:	4a6e      	ldr	r2, [pc, #440]	; (8004dd0 <HAL_DMA_Init+0x654>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	009a      	lsls	r2, r3, #2
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f002 f9a9 	bl	8006f7c <DMA_CalcBaseAndBitshift>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2201      	movs	r2, #1
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	e008      	b.n	8004c52 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0b7      	b.n	8004dc2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a5f      	ldr	r2, [pc, #380]	; (8004dd4 <HAL_DMA_Init+0x658>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d072      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5d      	ldr	r2, [pc, #372]	; (8004dd8 <HAL_DMA_Init+0x65c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d06d      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5c      	ldr	r2, [pc, #368]	; (8004ddc <HAL_DMA_Init+0x660>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d068      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a5a      	ldr	r2, [pc, #360]	; (8004de0 <HAL_DMA_Init+0x664>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d063      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a59      	ldr	r2, [pc, #356]	; (8004de4 <HAL_DMA_Init+0x668>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d05e      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a57      	ldr	r2, [pc, #348]	; (8004de8 <HAL_DMA_Init+0x66c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d059      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a56      	ldr	r2, [pc, #344]	; (8004dec <HAL_DMA_Init+0x670>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d054      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a54      	ldr	r2, [pc, #336]	; (8004df0 <HAL_DMA_Init+0x674>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d04f      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a53      	ldr	r2, [pc, #332]	; (8004df4 <HAL_DMA_Init+0x678>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d04a      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a51      	ldr	r2, [pc, #324]	; (8004df8 <HAL_DMA_Init+0x67c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d045      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a50      	ldr	r2, [pc, #320]	; (8004dfc <HAL_DMA_Init+0x680>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d040      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a4e      	ldr	r2, [pc, #312]	; (8004e00 <HAL_DMA_Init+0x684>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d03b      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4d      	ldr	r2, [pc, #308]	; (8004e04 <HAL_DMA_Init+0x688>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d036      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a4b      	ldr	r2, [pc, #300]	; (8004e08 <HAL_DMA_Init+0x68c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d031      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_DMA_Init+0x690>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d02c      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a48      	ldr	r2, [pc, #288]	; (8004e10 <HAL_DMA_Init+0x694>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d027      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a47      	ldr	r2, [pc, #284]	; (8004e14 <HAL_DMA_Init+0x698>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a45      	ldr	r2, [pc, #276]	; (8004e18 <HAL_DMA_Init+0x69c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01d      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a44      	ldr	r2, [pc, #272]	; (8004e1c <HAL_DMA_Init+0x6a0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d018      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a42      	ldr	r2, [pc, #264]	; (8004e20 <HAL_DMA_Init+0x6a4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a41      	ldr	r2, [pc, #260]	; (8004e24 <HAL_DMA_Init+0x6a8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00e      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3f      	ldr	r2, [pc, #252]	; (8004e28 <HAL_DMA_Init+0x6ac>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3e      	ldr	r2, [pc, #248]	; (8004e2c <HAL_DMA_Init+0x6b0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_DMA_Init+0x5c6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <HAL_DMA_Init+0x6b4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d101      	bne.n	8004d46 <HAL_DMA_Init+0x5ca>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_DMA_Init+0x5cc>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d032      	beq.n	8004db2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f002 fa43 	bl	80071d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d102      	bne.n	8004d60 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_DMA_Init+0x624>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d80c      	bhi.n	8004da0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f002 fac0 	bl	800730c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	e008      	b.n	8004db2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	a7fdabf8 	.word	0xa7fdabf8
 8004dd0:	cccccccd 	.word	0xcccccccd
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	58025408 	.word	0x58025408
 8004e18:	5802541c 	.word	0x5802541c
 8004e1c:	58025430 	.word	0x58025430
 8004e20:	58025444 	.word	0x58025444
 8004e24:	58025458 	.word	0x58025458
 8004e28:	5802546c 	.word	0x5802546c
 8004e2c:	58025480 	.word	0x58025480
 8004e30:	58025494 	.word	0x58025494

08004e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e226      	b.n	800529e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_DMA_Start_IT+0x2a>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e21f      	b.n	800529e <HAL_DMA_Start_IT+0x46a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	f040 820a 	bne.w	8005288 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a68      	ldr	r2, [pc, #416]	; (8005028 <HAL_DMA_Start_IT+0x1f4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d04a      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a66      	ldr	r2, [pc, #408]	; (800502c <HAL_DMA_Start_IT+0x1f8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d045      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a65      	ldr	r2, [pc, #404]	; (8005030 <HAL_DMA_Start_IT+0x1fc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d040      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a63      	ldr	r2, [pc, #396]	; (8005034 <HAL_DMA_Start_IT+0x200>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d03b      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a62      	ldr	r2, [pc, #392]	; (8005038 <HAL_DMA_Start_IT+0x204>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d036      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a60      	ldr	r2, [pc, #384]	; (800503c <HAL_DMA_Start_IT+0x208>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d031      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5f      	ldr	r2, [pc, #380]	; (8005040 <HAL_DMA_Start_IT+0x20c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d02c      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5d      	ldr	r2, [pc, #372]	; (8005044 <HAL_DMA_Start_IT+0x210>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d027      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a5c      	ldr	r2, [pc, #368]	; (8005048 <HAL_DMA_Start_IT+0x214>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d022      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a5a      	ldr	r2, [pc, #360]	; (800504c <HAL_DMA_Start_IT+0x218>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01d      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a59      	ldr	r2, [pc, #356]	; (8005050 <HAL_DMA_Start_IT+0x21c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d018      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a57      	ldr	r2, [pc, #348]	; (8005054 <HAL_DMA_Start_IT+0x220>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a56      	ldr	r2, [pc, #344]	; (8005058 <HAL_DMA_Start_IT+0x224>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a54      	ldr	r2, [pc, #336]	; (800505c <HAL_DMA_Start_IT+0x228>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a53      	ldr	r2, [pc, #332]	; (8005060 <HAL_DMA_Start_IT+0x22c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_DMA_Start_IT+0xee>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a51      	ldr	r2, [pc, #324]	; (8005064 <HAL_DMA_Start_IT+0x230>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d108      	bne.n	8004f34 <HAL_DMA_Start_IT+0x100>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e007      	b.n	8004f44 <HAL_DMA_Start_IT+0x110>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f001 fe6a 	bl	8006c24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a34      	ldr	r2, [pc, #208]	; (8005028 <HAL_DMA_Start_IT+0x1f4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d04a      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a33      	ldr	r2, [pc, #204]	; (800502c <HAL_DMA_Start_IT+0x1f8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d045      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a31      	ldr	r2, [pc, #196]	; (8005030 <HAL_DMA_Start_IT+0x1fc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d040      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a30      	ldr	r2, [pc, #192]	; (8005034 <HAL_DMA_Start_IT+0x200>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03b      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	; (8005038 <HAL_DMA_Start_IT+0x204>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d036      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2d      	ldr	r2, [pc, #180]	; (800503c <HAL_DMA_Start_IT+0x208>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d031      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <HAL_DMA_Start_IT+0x20c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02c      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <HAL_DMA_Start_IT+0x210>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d027      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a28      	ldr	r2, [pc, #160]	; (8005048 <HAL_DMA_Start_IT+0x214>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a27      	ldr	r2, [pc, #156]	; (800504c <HAL_DMA_Start_IT+0x218>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a25      	ldr	r2, [pc, #148]	; (8005050 <HAL_DMA_Start_IT+0x21c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <HAL_DMA_Start_IT+0x220>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a22      	ldr	r2, [pc, #136]	; (8005058 <HAL_DMA_Start_IT+0x224>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a21      	ldr	r2, [pc, #132]	; (800505c <HAL_DMA_Start_IT+0x228>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <HAL_DMA_Start_IT+0x22c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x1bc>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <HAL_DMA_Start_IT+0x230>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_DMA_Start_IT+0x1c0>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <HAL_DMA_Start_IT+0x1c2>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d036      	beq.n	8005068 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 021e 	bic.w	r2, r3, #30
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0216 	orr.w	r2, r2, #22
 800500c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03e      	beq.n	8005094 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0208 	orr.w	r2, r2, #8
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e035      	b.n	8005094 <HAL_DMA_Start_IT+0x260>
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	40020058 	.word	0x40020058
 8005038:	40020070 	.word	0x40020070
 800503c:	40020088 	.word	0x40020088
 8005040:	400200a0 	.word	0x400200a0
 8005044:	400200b8 	.word	0x400200b8
 8005048:	40020410 	.word	0x40020410
 800504c:	40020428 	.word	0x40020428
 8005050:	40020440 	.word	0x40020440
 8005054:	40020458 	.word	0x40020458
 8005058:	40020470 	.word	0x40020470
 800505c:	40020488 	.word	0x40020488
 8005060:	400204a0 	.word	0x400204a0
 8005064:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 020e 	bic.w	r2, r3, #14
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 020a 	orr.w	r2, r2, #10
 800507a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0204 	orr.w	r2, r2, #4
 8005092:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a83      	ldr	r2, [pc, #524]	; (80052a8 <HAL_DMA_Start_IT+0x474>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d072      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a82      	ldr	r2, [pc, #520]	; (80052ac <HAL_DMA_Start_IT+0x478>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d06d      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a80      	ldr	r2, [pc, #512]	; (80052b0 <HAL_DMA_Start_IT+0x47c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d068      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7f      	ldr	r2, [pc, #508]	; (80052b4 <HAL_DMA_Start_IT+0x480>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d063      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7d      	ldr	r2, [pc, #500]	; (80052b8 <HAL_DMA_Start_IT+0x484>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d05e      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <HAL_DMA_Start_IT+0x488>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d059      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a7a      	ldr	r2, [pc, #488]	; (80052c0 <HAL_DMA_Start_IT+0x48c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d054      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a79      	ldr	r2, [pc, #484]	; (80052c4 <HAL_DMA_Start_IT+0x490>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d04f      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a77      	ldr	r2, [pc, #476]	; (80052c8 <HAL_DMA_Start_IT+0x494>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04a      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a76      	ldr	r2, [pc, #472]	; (80052cc <HAL_DMA_Start_IT+0x498>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d045      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a74      	ldr	r2, [pc, #464]	; (80052d0 <HAL_DMA_Start_IT+0x49c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d040      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a73      	ldr	r2, [pc, #460]	; (80052d4 <HAL_DMA_Start_IT+0x4a0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d03b      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a71      	ldr	r2, [pc, #452]	; (80052d8 <HAL_DMA_Start_IT+0x4a4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d036      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a70      	ldr	r2, [pc, #448]	; (80052dc <HAL_DMA_Start_IT+0x4a8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d031      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a6e      	ldr	r2, [pc, #440]	; (80052e0 <HAL_DMA_Start_IT+0x4ac>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02c      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6d      	ldr	r2, [pc, #436]	; (80052e4 <HAL_DMA_Start_IT+0x4b0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d027      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a6b      	ldr	r2, [pc, #428]	; (80052e8 <HAL_DMA_Start_IT+0x4b4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a6a      	ldr	r2, [pc, #424]	; (80052ec <HAL_DMA_Start_IT+0x4b8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d01d      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a68      	ldr	r2, [pc, #416]	; (80052f0 <HAL_DMA_Start_IT+0x4bc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a67      	ldr	r2, [pc, #412]	; (80052f4 <HAL_DMA_Start_IT+0x4c0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a65      	ldr	r2, [pc, #404]	; (80052f8 <HAL_DMA_Start_IT+0x4c4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a64      	ldr	r2, [pc, #400]	; (80052fc <HAL_DMA_Start_IT+0x4c8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a62      	ldr	r2, [pc, #392]	; (8005300 <HAL_DMA_Start_IT+0x4cc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_DMA_Start_IT+0x350>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a61      	ldr	r2, [pc, #388]	; (8005304 <HAL_DMA_Start_IT+0x4d0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d101      	bne.n	8005188 <HAL_DMA_Start_IT+0x354>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <HAL_DMA_Start_IT+0x356>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01a      	beq.n	80051c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <HAL_DMA_Start_IT+0x474>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d04a      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a36      	ldr	r2, [pc, #216]	; (80052ac <HAL_DMA_Start_IT+0x478>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d045      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <HAL_DMA_Start_IT+0x47c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d040      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a33      	ldr	r2, [pc, #204]	; (80052b4 <HAL_DMA_Start_IT+0x480>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d03b      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a31      	ldr	r2, [pc, #196]	; (80052b8 <HAL_DMA_Start_IT+0x484>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d036      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a30      	ldr	r2, [pc, #192]	; (80052bc <HAL_DMA_Start_IT+0x488>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d031      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2e      	ldr	r2, [pc, #184]	; (80052c0 <HAL_DMA_Start_IT+0x48c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02c      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <HAL_DMA_Start_IT+0x490>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d027      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <HAL_DMA_Start_IT+0x494>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d022      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <HAL_DMA_Start_IT+0x498>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d01d      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a28      	ldr	r2, [pc, #160]	; (80052d0 <HAL_DMA_Start_IT+0x49c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <HAL_DMA_Start_IT+0x4a0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <HAL_DMA_Start_IT+0x4a4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a24      	ldr	r2, [pc, #144]	; (80052dc <HAL_DMA_Start_IT+0x4a8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <HAL_DMA_Start_IT+0x4ac>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_DMA_Start_IT+0x430>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_DMA_Start_IT+0x4b0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d108      	bne.n	8005276 <HAL_DMA_Start_IT+0x442>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e012      	b.n	800529c <HAL_DMA_Start_IT+0x468>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e009      	b.n	800529c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40020010 	.word	0x40020010
 80052ac:	40020028 	.word	0x40020028
 80052b0:	40020040 	.word	0x40020040
 80052b4:	40020058 	.word	0x40020058
 80052b8:	40020070 	.word	0x40020070
 80052bc:	40020088 	.word	0x40020088
 80052c0:	400200a0 	.word	0x400200a0
 80052c4:	400200b8 	.word	0x400200b8
 80052c8:	40020410 	.word	0x40020410
 80052cc:	40020428 	.word	0x40020428
 80052d0:	40020440 	.word	0x40020440
 80052d4:	40020458 	.word	0x40020458
 80052d8:	40020470 	.word	0x40020470
 80052dc:	40020488 	.word	0x40020488
 80052e0:	400204a0 	.word	0x400204a0
 80052e4:	400204b8 	.word	0x400204b8
 80052e8:	58025408 	.word	0x58025408
 80052ec:	5802541c 	.word	0x5802541c
 80052f0:	58025430 	.word	0x58025430
 80052f4:	58025444 	.word	0x58025444
 80052f8:	58025458 	.word	0x58025458
 80052fc:	5802546c 	.word	0x5802546c
 8005300:	58025480 	.word	0x58025480
 8005304:	58025494 	.word	0x58025494

08005308 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005310:	f7fd fb44 	bl	800299c <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e2dc      	b.n	80058da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d008      	beq.n	800533e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2280      	movs	r2, #128	; 0x80
 8005330:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e2cd      	b.n	80058da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a76      	ldr	r2, [pc, #472]	; (800551c <HAL_DMA_Abort+0x214>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d04a      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a74      	ldr	r2, [pc, #464]	; (8005520 <HAL_DMA_Abort+0x218>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d045      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a73      	ldr	r2, [pc, #460]	; (8005524 <HAL_DMA_Abort+0x21c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d040      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a71      	ldr	r2, [pc, #452]	; (8005528 <HAL_DMA_Abort+0x220>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d03b      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a70      	ldr	r2, [pc, #448]	; (800552c <HAL_DMA_Abort+0x224>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d036      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_DMA_Abort+0x228>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d031      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a6d      	ldr	r2, [pc, #436]	; (8005534 <HAL_DMA_Abort+0x22c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d02c      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a6b      	ldr	r2, [pc, #428]	; (8005538 <HAL_DMA_Abort+0x230>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d027      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6a      	ldr	r2, [pc, #424]	; (800553c <HAL_DMA_Abort+0x234>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d022      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a68      	ldr	r2, [pc, #416]	; (8005540 <HAL_DMA_Abort+0x238>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01d      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a67      	ldr	r2, [pc, #412]	; (8005544 <HAL_DMA_Abort+0x23c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d018      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a65      	ldr	r2, [pc, #404]	; (8005548 <HAL_DMA_Abort+0x240>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a64      	ldr	r2, [pc, #400]	; (800554c <HAL_DMA_Abort+0x244>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00e      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a62      	ldr	r2, [pc, #392]	; (8005550 <HAL_DMA_Abort+0x248>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_DMA_Abort+0x24c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_DMA_Abort+0xd6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a5f      	ldr	r2, [pc, #380]	; (8005558 <HAL_DMA_Abort+0x250>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d101      	bne.n	80053e2 <HAL_DMA_Abort+0xda>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <HAL_DMA_Abort+0xdc>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d013      	beq.n	8005410 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 021e 	bic.w	r2, r2, #30
 80053f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005406:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e00a      	b.n	8005426 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 020e 	bic.w	r2, r2, #14
 800541e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3c      	ldr	r2, [pc, #240]	; (800551c <HAL_DMA_Abort+0x214>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d072      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <HAL_DMA_Abort+0x218>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d06d      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a39      	ldr	r2, [pc, #228]	; (8005524 <HAL_DMA_Abort+0x21c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d068      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a37      	ldr	r2, [pc, #220]	; (8005528 <HAL_DMA_Abort+0x220>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d063      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a36      	ldr	r2, [pc, #216]	; (800552c <HAL_DMA_Abort+0x224>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d05e      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a34      	ldr	r2, [pc, #208]	; (8005530 <HAL_DMA_Abort+0x228>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d059      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a33      	ldr	r2, [pc, #204]	; (8005534 <HAL_DMA_Abort+0x22c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d054      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a31      	ldr	r2, [pc, #196]	; (8005538 <HAL_DMA_Abort+0x230>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04f      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a30      	ldr	r2, [pc, #192]	; (800553c <HAL_DMA_Abort+0x234>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04a      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2e      	ldr	r2, [pc, #184]	; (8005540 <HAL_DMA_Abort+0x238>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d045      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <HAL_DMA_Abort+0x23c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d040      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_DMA_Abort+0x240>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d03b      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_DMA_Abort+0x244>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d036      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a28      	ldr	r2, [pc, #160]	; (8005550 <HAL_DMA_Abort+0x248>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a27      	ldr	r2, [pc, #156]	; (8005554 <HAL_DMA_Abort+0x24c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02c      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <HAL_DMA_Abort+0x250>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a24      	ldr	r2, [pc, #144]	; (800555c <HAL_DMA_Abort+0x254>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a22      	ldr	r2, [pc, #136]	; (8005560 <HAL_DMA_Abort+0x258>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a21      	ldr	r2, [pc, #132]	; (8005564 <HAL_DMA_Abort+0x25c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <HAL_DMA_Abort+0x260>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_DMA_Abort+0x264>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <HAL_DMA_Abort+0x268>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <HAL_DMA_Abort+0x26c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_DMA_Abort+0x20e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <HAL_DMA_Abort+0x270>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d132      	bne.n	800557c <HAL_DMA_Abort+0x274>
 8005516:	2301      	movs	r3, #1
 8005518:	e031      	b.n	800557e <HAL_DMA_Abort+0x276>
 800551a:	bf00      	nop
 800551c:	40020010 	.word	0x40020010
 8005520:	40020028 	.word	0x40020028
 8005524:	40020040 	.word	0x40020040
 8005528:	40020058 	.word	0x40020058
 800552c:	40020070 	.word	0x40020070
 8005530:	40020088 	.word	0x40020088
 8005534:	400200a0 	.word	0x400200a0
 8005538:	400200b8 	.word	0x400200b8
 800553c:	40020410 	.word	0x40020410
 8005540:	40020428 	.word	0x40020428
 8005544:	40020440 	.word	0x40020440
 8005548:	40020458 	.word	0x40020458
 800554c:	40020470 	.word	0x40020470
 8005550:	40020488 	.word	0x40020488
 8005554:	400204a0 	.word	0x400204a0
 8005558:	400204b8 	.word	0x400204b8
 800555c:	58025408 	.word	0x58025408
 8005560:	5802541c 	.word	0x5802541c
 8005564:	58025430 	.word	0x58025430
 8005568:	58025444 	.word	0x58025444
 800556c:	58025458 	.word	0x58025458
 8005570:	5802546c 	.word	0x5802546c
 8005574:	58025480 	.word	0x58025480
 8005578:	58025494 	.word	0x58025494
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005590:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a6d      	ldr	r2, [pc, #436]	; (800574c <HAL_DMA_Abort+0x444>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d04a      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6b      	ldr	r2, [pc, #428]	; (8005750 <HAL_DMA_Abort+0x448>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d045      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a6a      	ldr	r2, [pc, #424]	; (8005754 <HAL_DMA_Abort+0x44c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d040      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a68      	ldr	r2, [pc, #416]	; (8005758 <HAL_DMA_Abort+0x450>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d03b      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a67      	ldr	r2, [pc, #412]	; (800575c <HAL_DMA_Abort+0x454>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d036      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a65      	ldr	r2, [pc, #404]	; (8005760 <HAL_DMA_Abort+0x458>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d031      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a64      	ldr	r2, [pc, #400]	; (8005764 <HAL_DMA_Abort+0x45c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d02c      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a62      	ldr	r2, [pc, #392]	; (8005768 <HAL_DMA_Abort+0x460>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d027      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a61      	ldr	r2, [pc, #388]	; (800576c <HAL_DMA_Abort+0x464>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d022      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a5f      	ldr	r2, [pc, #380]	; (8005770 <HAL_DMA_Abort+0x468>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01d      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a5e      	ldr	r2, [pc, #376]	; (8005774 <HAL_DMA_Abort+0x46c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d018      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5c      	ldr	r2, [pc, #368]	; (8005778 <HAL_DMA_Abort+0x470>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5b      	ldr	r2, [pc, #364]	; (800577c <HAL_DMA_Abort+0x474>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a59      	ldr	r2, [pc, #356]	; (8005780 <HAL_DMA_Abort+0x478>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a58      	ldr	r2, [pc, #352]	; (8005784 <HAL_DMA_Abort+0x47c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_DMA_Abort+0x32a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a56      	ldr	r2, [pc, #344]	; (8005788 <HAL_DMA_Abort+0x480>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d108      	bne.n	8005644 <HAL_DMA_Abort+0x33c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e007      	b.n	8005654 <HAL_DMA_Abort+0x34c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005654:	e013      	b.n	800567e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005656:	f7fd f9a1 	bl	800299c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b05      	cmp	r3, #5
 8005662:	d90c      	bls.n	800567e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e12d      	b.n	80058da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2f      	ldr	r2, [pc, #188]	; (800574c <HAL_DMA_Abort+0x444>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d04a      	beq.n	800572a <HAL_DMA_Abort+0x422>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2d      	ldr	r2, [pc, #180]	; (8005750 <HAL_DMA_Abort+0x448>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d045      	beq.n	800572a <HAL_DMA_Abort+0x422>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <HAL_DMA_Abort+0x44c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d040      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <HAL_DMA_Abort+0x450>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a29      	ldr	r2, [pc, #164]	; (800575c <HAL_DMA_Abort+0x454>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d036      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <HAL_DMA_Abort+0x458>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d031      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <HAL_DMA_Abort+0x45c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d02c      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a24      	ldr	r2, [pc, #144]	; (8005768 <HAL_DMA_Abort+0x460>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d027      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a23      	ldr	r2, [pc, #140]	; (800576c <HAL_DMA_Abort+0x464>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <HAL_DMA_Abort+0x468>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a20      	ldr	r2, [pc, #128]	; (8005774 <HAL_DMA_Abort+0x46c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_DMA_Abort+0x422>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <HAL_DMA_Abort+0x470>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_DMA_Abort+0x422>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <HAL_DMA_Abort+0x474>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_DMA_Abort+0x422>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_DMA_Abort+0x478>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_DMA_Abort+0x422>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_DMA_Abort+0x47c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_DMA_Abort+0x422>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_DMA_Abort+0x480>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <HAL_DMA_Abort+0x426>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <HAL_DMA_Abort+0x428>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02b      	beq.n	800578c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	223f      	movs	r2, #63	; 0x3f
 8005744:	409a      	lsls	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	e02a      	b.n	80057a2 <HAL_DMA_Abort+0x49a>
 800574c:	40020010 	.word	0x40020010
 8005750:	40020028 	.word	0x40020028
 8005754:	40020040 	.word	0x40020040
 8005758:	40020058 	.word	0x40020058
 800575c:	40020070 	.word	0x40020070
 8005760:	40020088 	.word	0x40020088
 8005764:	400200a0 	.word	0x400200a0
 8005768:	400200b8 	.word	0x400200b8
 800576c:	40020410 	.word	0x40020410
 8005770:	40020428 	.word	0x40020428
 8005774:	40020440 	.word	0x40020440
 8005778:	40020458 	.word	0x40020458
 800577c:	40020470 	.word	0x40020470
 8005780:	40020488 	.word	0x40020488
 8005784:	400204a0 	.word	0x400204a0
 8005788:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2201      	movs	r2, #1
 800579c:	409a      	lsls	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a4f      	ldr	r2, [pc, #316]	; (80058e4 <HAL_DMA_Abort+0x5dc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d072      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a4d      	ldr	r2, [pc, #308]	; (80058e8 <HAL_DMA_Abort+0x5e0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d06d      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a4c      	ldr	r2, [pc, #304]	; (80058ec <HAL_DMA_Abort+0x5e4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d068      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <HAL_DMA_Abort+0x5e8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d063      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a49      	ldr	r2, [pc, #292]	; (80058f4 <HAL_DMA_Abort+0x5ec>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d05e      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a47      	ldr	r2, [pc, #284]	; (80058f8 <HAL_DMA_Abort+0x5f0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d059      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a46      	ldr	r2, [pc, #280]	; (80058fc <HAL_DMA_Abort+0x5f4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d054      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a44      	ldr	r2, [pc, #272]	; (8005900 <HAL_DMA_Abort+0x5f8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d04f      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a43      	ldr	r2, [pc, #268]	; (8005904 <HAL_DMA_Abort+0x5fc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d04a      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a41      	ldr	r2, [pc, #260]	; (8005908 <HAL_DMA_Abort+0x600>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d045      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <HAL_DMA_Abort+0x604>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d040      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <HAL_DMA_Abort+0x608>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d03b      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <HAL_DMA_Abort+0x60c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d036      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3b      	ldr	r2, [pc, #236]	; (8005918 <HAL_DMA_Abort+0x610>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d031      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a3a      	ldr	r2, [pc, #232]	; (800591c <HAL_DMA_Abort+0x614>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d02c      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a38      	ldr	r2, [pc, #224]	; (8005920 <HAL_DMA_Abort+0x618>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d027      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a37      	ldr	r2, [pc, #220]	; (8005924 <HAL_DMA_Abort+0x61c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a35      	ldr	r2, [pc, #212]	; (8005928 <HAL_DMA_Abort+0x620>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01d      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a34      	ldr	r2, [pc, #208]	; (800592c <HAL_DMA_Abort+0x624>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a32      	ldr	r2, [pc, #200]	; (8005930 <HAL_DMA_Abort+0x628>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a31      	ldr	r2, [pc, #196]	; (8005934 <HAL_DMA_Abort+0x62c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2f      	ldr	r2, [pc, #188]	; (8005938 <HAL_DMA_Abort+0x630>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2e      	ldr	r2, [pc, #184]	; (800593c <HAL_DMA_Abort+0x634>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_DMA_Abort+0x58a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <HAL_DMA_Abort+0x638>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_DMA_Abort+0x58e>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <HAL_DMA_Abort+0x590>
 8005896:	2300      	movs	r3, #0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40020010 	.word	0x40020010
 80058e8:	40020028 	.word	0x40020028
 80058ec:	40020040 	.word	0x40020040
 80058f0:	40020058 	.word	0x40020058
 80058f4:	40020070 	.word	0x40020070
 80058f8:	40020088 	.word	0x40020088
 80058fc:	400200a0 	.word	0x400200a0
 8005900:	400200b8 	.word	0x400200b8
 8005904:	40020410 	.word	0x40020410
 8005908:	40020428 	.word	0x40020428
 800590c:	40020440 	.word	0x40020440
 8005910:	40020458 	.word	0x40020458
 8005914:	40020470 	.word	0x40020470
 8005918:	40020488 	.word	0x40020488
 800591c:	400204a0 	.word	0x400204a0
 8005920:	400204b8 	.word	0x400204b8
 8005924:	58025408 	.word	0x58025408
 8005928:	5802541c 	.word	0x5802541c
 800592c:	58025430 	.word	0x58025430
 8005930:	58025444 	.word	0x58025444
 8005934:	58025458 	.word	0x58025458
 8005938:	5802546c 	.word	0x5802546c
 800593c:	58025480 	.word	0x58025480
 8005940:	58025494 	.word	0x58025494

08005944 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e237      	b.n	8005dc6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d004      	beq.n	800596c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e22c      	b.n	8005dc6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5c      	ldr	r2, [pc, #368]	; (8005ae4 <HAL_DMA_Abort_IT+0x1a0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d04a      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5b      	ldr	r2, [pc, #364]	; (8005ae8 <HAL_DMA_Abort_IT+0x1a4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d045      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a59      	ldr	r2, [pc, #356]	; (8005aec <HAL_DMA_Abort_IT+0x1a8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d040      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <HAL_DMA_Abort_IT+0x1ac>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d03b      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a56      	ldr	r2, [pc, #344]	; (8005af4 <HAL_DMA_Abort_IT+0x1b0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d036      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a55      	ldr	r2, [pc, #340]	; (8005af8 <HAL_DMA_Abort_IT+0x1b4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d031      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a53      	ldr	r2, [pc, #332]	; (8005afc <HAL_DMA_Abort_IT+0x1b8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02c      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a52      	ldr	r2, [pc, #328]	; (8005b00 <HAL_DMA_Abort_IT+0x1bc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d027      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a50      	ldr	r2, [pc, #320]	; (8005b04 <HAL_DMA_Abort_IT+0x1c0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d022      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4f      	ldr	r2, [pc, #316]	; (8005b08 <HAL_DMA_Abort_IT+0x1c4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d01d      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <HAL_DMA_Abort_IT+0x1c8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a4c      	ldr	r2, [pc, #304]	; (8005b10 <HAL_DMA_Abort_IT+0x1cc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a4a      	ldr	r2, [pc, #296]	; (8005b14 <HAL_DMA_Abort_IT+0x1d0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a49      	ldr	r2, [pc, #292]	; (8005b18 <HAL_DMA_Abort_IT+0x1d4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a47      	ldr	r2, [pc, #284]	; (8005b1c <HAL_DMA_Abort_IT+0x1d8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_DMA_Abort_IT+0xc8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a46      	ldr	r2, [pc, #280]	; (8005b20 <HAL_DMA_Abort_IT+0x1dc>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <HAL_DMA_Abort_IT+0xcc>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_DMA_Abort_IT+0xce>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8086 	beq.w	8005b24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2f      	ldr	r2, [pc, #188]	; (8005ae4 <HAL_DMA_Abort_IT+0x1a0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d04a      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2e      	ldr	r2, [pc, #184]	; (8005ae8 <HAL_DMA_Abort_IT+0x1a4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d045      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <HAL_DMA_Abort_IT+0x1a8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d040      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <HAL_DMA_Abort_IT+0x1ac>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d03b      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <HAL_DMA_Abort_IT+0x1b0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d036      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a28      	ldr	r2, [pc, #160]	; (8005af8 <HAL_DMA_Abort_IT+0x1b4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d031      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <HAL_DMA_Abort_IT+0x1b8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02c      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <HAL_DMA_Abort_IT+0x1bc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d027      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a23      	ldr	r2, [pc, #140]	; (8005b04 <HAL_DMA_Abort_IT+0x1c0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d022      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <HAL_DMA_Abort_IT+0x1c4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d01d      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <HAL_DMA_Abort_IT+0x1c8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d018      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <HAL_DMA_Abort_IT+0x1cc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_DMA_Abort_IT+0x1d0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00e      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_DMA_Abort_IT+0x1d4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_DMA_Abort_IT+0x1d8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x17c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <HAL_DMA_Abort_IT+0x1dc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d108      	bne.n	8005ad2 <HAL_DMA_Abort_IT+0x18e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	e178      	b.n	8005dc4 <HAL_DMA_Abort_IT+0x480>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e16f      	b.n	8005dc4 <HAL_DMA_Abort_IT+0x480>
 8005ae4:	40020010 	.word	0x40020010
 8005ae8:	40020028 	.word	0x40020028
 8005aec:	40020040 	.word	0x40020040
 8005af0:	40020058 	.word	0x40020058
 8005af4:	40020070 	.word	0x40020070
 8005af8:	40020088 	.word	0x40020088
 8005afc:	400200a0 	.word	0x400200a0
 8005b00:	400200b8 	.word	0x400200b8
 8005b04:	40020410 	.word	0x40020410
 8005b08:	40020428 	.word	0x40020428
 8005b0c:	40020440 	.word	0x40020440
 8005b10:	40020458 	.word	0x40020458
 8005b14:	40020470 	.word	0x40020470
 8005b18:	40020488 	.word	0x40020488
 8005b1c:	400204a0 	.word	0x400204a0
 8005b20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 020e 	bic.w	r2, r2, #14
 8005b32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a6c      	ldr	r2, [pc, #432]	; (8005cec <HAL_DMA_Abort_IT+0x3a8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d04a      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a6b      	ldr	r2, [pc, #428]	; (8005cf0 <HAL_DMA_Abort_IT+0x3ac>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d045      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a69      	ldr	r2, [pc, #420]	; (8005cf4 <HAL_DMA_Abort_IT+0x3b0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d040      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a68      	ldr	r2, [pc, #416]	; (8005cf8 <HAL_DMA_Abort_IT+0x3b4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d03b      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a66      	ldr	r2, [pc, #408]	; (8005cfc <HAL_DMA_Abort_IT+0x3b8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d036      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a65      	ldr	r2, [pc, #404]	; (8005d00 <HAL_DMA_Abort_IT+0x3bc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d031      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a63      	ldr	r2, [pc, #396]	; (8005d04 <HAL_DMA_Abort_IT+0x3c0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d02c      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a62      	ldr	r2, [pc, #392]	; (8005d08 <HAL_DMA_Abort_IT+0x3c4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d027      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a60      	ldr	r2, [pc, #384]	; (8005d0c <HAL_DMA_Abort_IT+0x3c8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d022      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a5f      	ldr	r2, [pc, #380]	; (8005d10 <HAL_DMA_Abort_IT+0x3cc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d01d      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5d      	ldr	r2, [pc, #372]	; (8005d14 <HAL_DMA_Abort_IT+0x3d0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d018      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5c      	ldr	r2, [pc, #368]	; (8005d18 <HAL_DMA_Abort_IT+0x3d4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a5a      	ldr	r2, [pc, #360]	; (8005d1c <HAL_DMA_Abort_IT+0x3d8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a59      	ldr	r2, [pc, #356]	; (8005d20 <HAL_DMA_Abort_IT+0x3dc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a57      	ldr	r2, [pc, #348]	; (8005d24 <HAL_DMA_Abort_IT+0x3e0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_DMA_Abort_IT+0x290>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_DMA_Abort_IT+0x3e4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <HAL_DMA_Abort_IT+0x2a2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e007      	b.n	8005bf6 <HAL_DMA_Abort_IT+0x2b2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a3c      	ldr	r2, [pc, #240]	; (8005cec <HAL_DMA_Abort_IT+0x3a8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d072      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a3a      	ldr	r2, [pc, #232]	; (8005cf0 <HAL_DMA_Abort_IT+0x3ac>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d06d      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a39      	ldr	r2, [pc, #228]	; (8005cf4 <HAL_DMA_Abort_IT+0x3b0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d068      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a37      	ldr	r2, [pc, #220]	; (8005cf8 <HAL_DMA_Abort_IT+0x3b4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d063      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a36      	ldr	r2, [pc, #216]	; (8005cfc <HAL_DMA_Abort_IT+0x3b8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d05e      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a34      	ldr	r2, [pc, #208]	; (8005d00 <HAL_DMA_Abort_IT+0x3bc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d059      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <HAL_DMA_Abort_IT+0x3c0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d054      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a31      	ldr	r2, [pc, #196]	; (8005d08 <HAL_DMA_Abort_IT+0x3c4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04f      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <HAL_DMA_Abort_IT+0x3c8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04a      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <HAL_DMA_Abort_IT+0x3cc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d045      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <HAL_DMA_Abort_IT+0x3d0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d040      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <HAL_DMA_Abort_IT+0x3d4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d03b      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <HAL_DMA_Abort_IT+0x3d8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d036      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <HAL_DMA_Abort_IT+0x3dc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d031      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a27      	ldr	r2, [pc, #156]	; (8005d24 <HAL_DMA_Abort_IT+0x3e0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <HAL_DMA_Abort_IT+0x3e4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d027      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <HAL_DMA_Abort_IT+0x3e8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d022      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_DMA_Abort_IT+0x3ec>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_DMA_Abort_IT+0x3f0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d018      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_DMA_Abort_IT+0x3f4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_DMA_Abort_IT+0x3f8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_DMA_Abort_IT+0x3fc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <HAL_DMA_Abort_IT+0x400>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_DMA_Abort_IT+0x3a2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <HAL_DMA_Abort_IT+0x404>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d132      	bne.n	8005d4c <HAL_DMA_Abort_IT+0x408>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e031      	b.n	8005d4e <HAL_DMA_Abort_IT+0x40a>
 8005cea:	bf00      	nop
 8005cec:	40020010 	.word	0x40020010
 8005cf0:	40020028 	.word	0x40020028
 8005cf4:	40020040 	.word	0x40020040
 8005cf8:	40020058 	.word	0x40020058
 8005cfc:	40020070 	.word	0x40020070
 8005d00:	40020088 	.word	0x40020088
 8005d04:	400200a0 	.word	0x400200a0
 8005d08:	400200b8 	.word	0x400200b8
 8005d0c:	40020410 	.word	0x40020410
 8005d10:	40020428 	.word	0x40020428
 8005d14:	40020440 	.word	0x40020440
 8005d18:	40020458 	.word	0x40020458
 8005d1c:	40020470 	.word	0x40020470
 8005d20:	40020488 	.word	0x40020488
 8005d24:	400204a0 	.word	0x400204a0
 8005d28:	400204b8 	.word	0x400204b8
 8005d2c:	58025408 	.word	0x58025408
 8005d30:	5802541c 	.word	0x5802541c
 8005d34:	58025430 	.word	0x58025430
 8005d38:	58025444 	.word	0x58025444
 8005d3c:	58025458 	.word	0x58025458
 8005d40:	5802546c 	.word	0x5802546c
 8005d44:	58025480 	.word	0x58025480
 8005d48:	58025494 	.word	0x58025494
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d028      	beq.n	8005da4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2201      	movs	r2, #1
 8005d72:	409a      	lsls	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005da2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop

08005dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ddc:	4b67      	ldr	r3, [pc, #412]	; (8005f7c <HAL_DMA_IRQHandler+0x1ac>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a67      	ldr	r2, [pc, #412]	; (8005f80 <HAL_DMA_IRQHandler+0x1b0>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0a9b      	lsrs	r3, r3, #10
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5f      	ldr	r2, [pc, #380]	; (8005f84 <HAL_DMA_IRQHandler+0x1b4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d04a      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a5d      	ldr	r2, [pc, #372]	; (8005f88 <HAL_DMA_IRQHandler+0x1b8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d045      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a5c      	ldr	r2, [pc, #368]	; (8005f8c <HAL_DMA_IRQHandler+0x1bc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d040      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5a      	ldr	r2, [pc, #360]	; (8005f90 <HAL_DMA_IRQHandler+0x1c0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d03b      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a59      	ldr	r2, [pc, #356]	; (8005f94 <HAL_DMA_IRQHandler+0x1c4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d036      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a57      	ldr	r2, [pc, #348]	; (8005f98 <HAL_DMA_IRQHandler+0x1c8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d031      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a56      	ldr	r2, [pc, #344]	; (8005f9c <HAL_DMA_IRQHandler+0x1cc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d02c      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a54      	ldr	r2, [pc, #336]	; (8005fa0 <HAL_DMA_IRQHandler+0x1d0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d027      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a53      	ldr	r2, [pc, #332]	; (8005fa4 <HAL_DMA_IRQHandler+0x1d4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a51      	ldr	r2, [pc, #324]	; (8005fa8 <HAL_DMA_IRQHandler+0x1d8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01d      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a50      	ldr	r2, [pc, #320]	; (8005fac <HAL_DMA_IRQHandler+0x1dc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4e      	ldr	r2, [pc, #312]	; (8005fb0 <HAL_DMA_IRQHandler+0x1e0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4d      	ldr	r2, [pc, #308]	; (8005fb4 <HAL_DMA_IRQHandler+0x1e4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4b      	ldr	r2, [pc, #300]	; (8005fb8 <HAL_DMA_IRQHandler+0x1e8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4a      	ldr	r2, [pc, #296]	; (8005fbc <HAL_DMA_IRQHandler+0x1ec>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xd2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a48      	ldr	r2, [pc, #288]	; (8005fc0 <HAL_DMA_IRQHandler+0x1f0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d101      	bne.n	8005ea6 <HAL_DMA_IRQHandler+0xd6>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_DMA_IRQHandler+0xd8>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 842b 	beq.w	8006704 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80a2 	beq.w	8006008 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2e      	ldr	r2, [pc, #184]	; (8005f84 <HAL_DMA_IRQHandler+0x1b4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d04a      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2d      	ldr	r2, [pc, #180]	; (8005f88 <HAL_DMA_IRQHandler+0x1b8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d045      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2b      	ldr	r2, [pc, #172]	; (8005f8c <HAL_DMA_IRQHandler+0x1bc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d040      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	; (8005f90 <HAL_DMA_IRQHandler+0x1c0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d03b      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a28      	ldr	r2, [pc, #160]	; (8005f94 <HAL_DMA_IRQHandler+0x1c4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d036      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a27      	ldr	r2, [pc, #156]	; (8005f98 <HAL_DMA_IRQHandler+0x1c8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d031      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a25      	ldr	r2, [pc, #148]	; (8005f9c <HAL_DMA_IRQHandler+0x1cc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d02c      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <HAL_DMA_IRQHandler+0x1d0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d027      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <HAL_DMA_IRQHandler+0x1d4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d022      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <HAL_DMA_IRQHandler+0x1d8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d01d      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1f      	ldr	r2, [pc, #124]	; (8005fac <HAL_DMA_IRQHandler+0x1dc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d018      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <HAL_DMA_IRQHandler+0x1e0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <HAL_DMA_IRQHandler+0x1e4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <HAL_DMA_IRQHandler+0x1e8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d009      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <HAL_DMA_IRQHandler+0x1ec>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x194>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <HAL_DMA_IRQHandler+0x1f0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d12f      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x1f4>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bf14      	ite	ne
 8005f72:	2301      	movne	r3, #1
 8005f74:	2300      	moveq	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	e02e      	b.n	8005fd8 <HAL_DMA_IRQHandler+0x208>
 8005f7a:	bf00      	nop
 8005f7c:	24000000 	.word	0x24000000
 8005f80:	1b4e81b5 	.word	0x1b4e81b5
 8005f84:	40020010 	.word	0x40020010
 8005f88:	40020028 	.word	0x40020028
 8005f8c:	40020040 	.word	0x40020040
 8005f90:	40020058 	.word	0x40020058
 8005f94:	40020070 	.word	0x40020070
 8005f98:	40020088 	.word	0x40020088
 8005f9c:	400200a0 	.word	0x400200a0
 8005fa0:	400200b8 	.word	0x400200b8
 8005fa4:	40020410 	.word	0x40020410
 8005fa8:	40020428 	.word	0x40020428
 8005fac:	40020440 	.word	0x40020440
 8005fb0:	40020458 	.word	0x40020458
 8005fb4:	40020470 	.word	0x40020470
 8005fb8:	40020488 	.word	0x40020488
 8005fbc:	400204a0 	.word	0x400204a0
 8005fc0:	400204b8 	.word	0x400204b8
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d015      	beq.n	8006008 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0204 	bic.w	r2, r2, #4
 8005fea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d06e      	beq.n	80060fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a69      	ldr	r2, [pc, #420]	; (80061c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a67      	ldr	r2, [pc, #412]	; (80061cc <HAL_DMA_IRQHandler+0x3fc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a66      	ldr	r2, [pc, #408]	; (80061d0 <HAL_DMA_IRQHandler+0x400>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a64      	ldr	r2, [pc, #400]	; (80061d4 <HAL_DMA_IRQHandler+0x404>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a63      	ldr	r2, [pc, #396]	; (80061d8 <HAL_DMA_IRQHandler+0x408>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a61      	ldr	r2, [pc, #388]	; (80061dc <HAL_DMA_IRQHandler+0x40c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a60      	ldr	r2, [pc, #384]	; (80061e0 <HAL_DMA_IRQHandler+0x410>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5e      	ldr	r2, [pc, #376]	; (80061e4 <HAL_DMA_IRQHandler+0x414>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5d      	ldr	r2, [pc, #372]	; (80061e8 <HAL_DMA_IRQHandler+0x418>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5b      	ldr	r2, [pc, #364]	; (80061ec <HAL_DMA_IRQHandler+0x41c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a5a      	ldr	r2, [pc, #360]	; (80061f0 <HAL_DMA_IRQHandler+0x420>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a58      	ldr	r2, [pc, #352]	; (80061f4 <HAL_DMA_IRQHandler+0x424>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a57      	ldr	r2, [pc, #348]	; (80061f8 <HAL_DMA_IRQHandler+0x428>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a55      	ldr	r2, [pc, #340]	; (80061fc <HAL_DMA_IRQHandler+0x42c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a54      	ldr	r2, [pc, #336]	; (8006200 <HAL_DMA_IRQHandler+0x430>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_DMA_IRQHandler+0x2ee>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_DMA_IRQHandler+0x434>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d10a      	bne.n	80060d4 <HAL_DMA_IRQHandler+0x304>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e003      	b.n	80060dc <HAL_DMA_IRQHandler+0x30c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	f043 0202 	orr.w	r2, r3, #2
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2204      	movs	r2, #4
 8006106:	409a      	lsls	r2, r3
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 808f 	beq.w	8006230 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2c      	ldr	r2, [pc, #176]	; (80061c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d04a      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2a      	ldr	r2, [pc, #168]	; (80061cc <HAL_DMA_IRQHandler+0x3fc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d045      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a29      	ldr	r2, [pc, #164]	; (80061d0 <HAL_DMA_IRQHandler+0x400>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d040      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <HAL_DMA_IRQHandler+0x404>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d03b      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_DMA_IRQHandler+0x408>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d036      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a24      	ldr	r2, [pc, #144]	; (80061dc <HAL_DMA_IRQHandler+0x40c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d031      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a23      	ldr	r2, [pc, #140]	; (80061e0 <HAL_DMA_IRQHandler+0x410>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d02c      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <HAL_DMA_IRQHandler+0x414>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d027      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <HAL_DMA_IRQHandler+0x418>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d022      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_DMA_IRQHandler+0x41c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d01d      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_DMA_IRQHandler+0x420>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d018      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_DMA_IRQHandler+0x424>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <HAL_DMA_IRQHandler+0x428>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_DMA_IRQHandler+0x42c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d009      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a17      	ldr	r2, [pc, #92]	; (8006200 <HAL_DMA_IRQHandler+0x430>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x3e2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a15      	ldr	r2, [pc, #84]	; (8006204 <HAL_DMA_IRQHandler+0x434>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d12a      	bne.n	8006208 <HAL_DMA_IRQHandler+0x438>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e023      	b.n	8006210 <HAL_DMA_IRQHandler+0x440>
 80061c8:	40020010 	.word	0x40020010
 80061cc:	40020028 	.word	0x40020028
 80061d0:	40020040 	.word	0x40020040
 80061d4:	40020058 	.word	0x40020058
 80061d8:	40020070 	.word	0x40020070
 80061dc:	40020088 	.word	0x40020088
 80061e0:	400200a0 	.word	0x400200a0
 80061e4:	400200b8 	.word	0x400200b8
 80061e8:	40020410 	.word	0x40020410
 80061ec:	40020428 	.word	0x40020428
 80061f0:	40020440 	.word	0x40020440
 80061f4:	40020458 	.word	0x40020458
 80061f8:	40020470 	.word	0x40020470
 80061fc:	40020488 	.word	0x40020488
 8006200:	400204a0 	.word	0x400204a0
 8006204:	400204b8 	.word	0x400204b8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2204      	movs	r2, #4
 800621e:	409a      	lsls	r2, r3
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	2210      	movs	r2, #16
 800623a:	409a      	lsls	r2, r3
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80a6 	beq.w	8006392 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a85      	ldr	r2, [pc, #532]	; (8006460 <HAL_DMA_IRQHandler+0x690>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d04a      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a83      	ldr	r2, [pc, #524]	; (8006464 <HAL_DMA_IRQHandler+0x694>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d045      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a82      	ldr	r2, [pc, #520]	; (8006468 <HAL_DMA_IRQHandler+0x698>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d040      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a80      	ldr	r2, [pc, #512]	; (800646c <HAL_DMA_IRQHandler+0x69c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d03b      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a7f      	ldr	r2, [pc, #508]	; (8006470 <HAL_DMA_IRQHandler+0x6a0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d036      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a7d      	ldr	r2, [pc, #500]	; (8006474 <HAL_DMA_IRQHandler+0x6a4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d031      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a7c      	ldr	r2, [pc, #496]	; (8006478 <HAL_DMA_IRQHandler+0x6a8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d02c      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a7a      	ldr	r2, [pc, #488]	; (800647c <HAL_DMA_IRQHandler+0x6ac>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d027      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a79      	ldr	r2, [pc, #484]	; (8006480 <HAL_DMA_IRQHandler+0x6b0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a77      	ldr	r2, [pc, #476]	; (8006484 <HAL_DMA_IRQHandler+0x6b4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a76      	ldr	r2, [pc, #472]	; (8006488 <HAL_DMA_IRQHandler+0x6b8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a74      	ldr	r2, [pc, #464]	; (800648c <HAL_DMA_IRQHandler+0x6bc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a73      	ldr	r2, [pc, #460]	; (8006490 <HAL_DMA_IRQHandler+0x6c0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a71      	ldr	r2, [pc, #452]	; (8006494 <HAL_DMA_IRQHandler+0x6c4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a70      	ldr	r2, [pc, #448]	; (8006498 <HAL_DMA_IRQHandler+0x6c8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x516>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6e      	ldr	r2, [pc, #440]	; (800649c <HAL_DMA_IRQHandler+0x6cc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10a      	bne.n	80062fc <HAL_DMA_IRQHandler+0x52c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e009      	b.n	8006310 <HAL_DMA_IRQHandler+0x540>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf14      	ite	ne
 800630a:	2301      	movne	r3, #1
 800630c:	2300      	moveq	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d03e      	beq.n	8006392 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2210      	movs	r2, #16
 800631e:	409a      	lsls	r2, r3
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d018      	beq.n	8006364 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d108      	bne.n	8006352 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d024      	beq.n	8006392 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
 8006350:	e01f      	b.n	8006392 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
 8006362:	e016      	b.n	8006392 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d107      	bne.n	8006382 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0208 	bic.w	r2, r2, #8
 8006380:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2220      	movs	r2, #32
 800639c:	409a      	lsls	r2, r3
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8110 	beq.w	80065c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <HAL_DMA_IRQHandler+0x690>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d04a      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2b      	ldr	r2, [pc, #172]	; (8006464 <HAL_DMA_IRQHandler+0x694>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d045      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a29      	ldr	r2, [pc, #164]	; (8006468 <HAL_DMA_IRQHandler+0x698>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d040      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a28      	ldr	r2, [pc, #160]	; (800646c <HAL_DMA_IRQHandler+0x69c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d03b      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a26      	ldr	r2, [pc, #152]	; (8006470 <HAL_DMA_IRQHandler+0x6a0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d036      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a25      	ldr	r2, [pc, #148]	; (8006474 <HAL_DMA_IRQHandler+0x6a4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d031      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a23      	ldr	r2, [pc, #140]	; (8006478 <HAL_DMA_IRQHandler+0x6a8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02c      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a22      	ldr	r2, [pc, #136]	; (800647c <HAL_DMA_IRQHandler+0x6ac>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d027      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a20      	ldr	r2, [pc, #128]	; (8006480 <HAL_DMA_IRQHandler+0x6b0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <HAL_DMA_IRQHandler+0x6b4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d01d      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <HAL_DMA_IRQHandler+0x6b8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1c      	ldr	r2, [pc, #112]	; (800648c <HAL_DMA_IRQHandler+0x6bc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <HAL_DMA_IRQHandler+0x6c0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a19      	ldr	r2, [pc, #100]	; (8006494 <HAL_DMA_IRQHandler+0x6c4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <HAL_DMA_IRQHandler+0x6c8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_DMA_IRQHandler+0x678>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_DMA_IRQHandler+0x6cc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d12b      	bne.n	80064a0 <HAL_DMA_IRQHandler+0x6d0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e02a      	b.n	80064b4 <HAL_DMA_IRQHandler+0x6e4>
 800645e:	bf00      	nop
 8006460:	40020010 	.word	0x40020010
 8006464:	40020028 	.word	0x40020028
 8006468:	40020040 	.word	0x40020040
 800646c:	40020058 	.word	0x40020058
 8006470:	40020070 	.word	0x40020070
 8006474:	40020088 	.word	0x40020088
 8006478:	400200a0 	.word	0x400200a0
 800647c:	400200b8 	.word	0x400200b8
 8006480:	40020410 	.word	0x40020410
 8006484:	40020428 	.word	0x40020428
 8006488:	40020440 	.word	0x40020440
 800648c:	40020458 	.word	0x40020458
 8006490:	40020470 	.word	0x40020470
 8006494:	40020488 	.word	0x40020488
 8006498:	400204a0 	.word	0x400204a0
 800649c:	400204b8 	.word	0x400204b8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8087 	beq.w	80065c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2220      	movs	r2, #32
 80064c4:	409a      	lsls	r2, r3
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d139      	bne.n	800654a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0216 	bic.w	r2, r2, #22
 80064e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <HAL_DMA_IRQHandler+0x736>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0208 	bic.w	r2, r2, #8
 8006514:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	223f      	movs	r2, #63	; 0x3f
 8006520:	409a      	lsls	r2, r3
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 834a 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
          }
          return;
 8006548:	e344      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d018      	beq.n	800658a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d108      	bne.n	8006578 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	2b00      	cmp	r3, #0
 800656c:	d02c      	beq.n	80065c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
 8006576:	e027      	b.n	80065c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d023      	beq.n	80065c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
 8006588:	e01e      	b.n	80065c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10f      	bne.n	80065b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0210 	bic.w	r2, r2, #16
 80065a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8306 	beq.w	8006bde <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8088 	beq.w	80066f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2204      	movs	r2, #4
 80065e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a7a      	ldr	r2, [pc, #488]	; (80067d8 <HAL_DMA_IRQHandler+0xa08>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d04a      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a79      	ldr	r2, [pc, #484]	; (80067dc <HAL_DMA_IRQHandler+0xa0c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d045      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a77      	ldr	r2, [pc, #476]	; (80067e0 <HAL_DMA_IRQHandler+0xa10>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d040      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a76      	ldr	r2, [pc, #472]	; (80067e4 <HAL_DMA_IRQHandler+0xa14>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d03b      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a74      	ldr	r2, [pc, #464]	; (80067e8 <HAL_DMA_IRQHandler+0xa18>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d036      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a73      	ldr	r2, [pc, #460]	; (80067ec <HAL_DMA_IRQHandler+0xa1c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d031      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a71      	ldr	r2, [pc, #452]	; (80067f0 <HAL_DMA_IRQHandler+0xa20>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d02c      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a70      	ldr	r2, [pc, #448]	; (80067f4 <HAL_DMA_IRQHandler+0xa24>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d027      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6e      	ldr	r2, [pc, #440]	; (80067f8 <HAL_DMA_IRQHandler+0xa28>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a6d      	ldr	r2, [pc, #436]	; (80067fc <HAL_DMA_IRQHandler+0xa2c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d01d      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a6b      	ldr	r2, [pc, #428]	; (8006800 <HAL_DMA_IRQHandler+0xa30>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a6a      	ldr	r2, [pc, #424]	; (8006804 <HAL_DMA_IRQHandler+0xa34>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a68      	ldr	r2, [pc, #416]	; (8006808 <HAL_DMA_IRQHandler+0xa38>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a67      	ldr	r2, [pc, #412]	; (800680c <HAL_DMA_IRQHandler+0xa3c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a65      	ldr	r2, [pc, #404]	; (8006810 <HAL_DMA_IRQHandler+0xa40>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_DMA_IRQHandler+0x8b8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a64      	ldr	r2, [pc, #400]	; (8006814 <HAL_DMA_IRQHandler+0xa44>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <HAL_DMA_IRQHandler+0x8ca>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e007      	b.n	80066aa <HAL_DMA_IRQHandler+0x8da>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d307      	bcc.n	80066c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f2      	bne.n	80066aa <HAL_DMA_IRQHandler+0x8da>
 80066c4:	e000      	b.n	80066c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2203      	movs	r2, #3
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066de:	e003      	b.n	80066e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8272 	beq.w	8006bde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
 8006702:	e26c      	b.n	8006bde <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a43      	ldr	r2, [pc, #268]	; (8006818 <HAL_DMA_IRQHandler+0xa48>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a42      	ldr	r2, [pc, #264]	; (800681c <HAL_DMA_IRQHandler+0xa4c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d01d      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a40      	ldr	r2, [pc, #256]	; (8006820 <HAL_DMA_IRQHandler+0xa50>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a3f      	ldr	r2, [pc, #252]	; (8006824 <HAL_DMA_IRQHandler+0xa54>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a3d      	ldr	r2, [pc, #244]	; (8006828 <HAL_DMA_IRQHandler+0xa58>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3c      	ldr	r2, [pc, #240]	; (800682c <HAL_DMA_IRQHandler+0xa5c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <HAL_DMA_IRQHandler+0xa60>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_DMA_IRQHandler+0x984>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a39      	ldr	r2, [pc, #228]	; (8006834 <HAL_DMA_IRQHandler+0xa64>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d101      	bne.n	8006758 <HAL_DMA_IRQHandler+0x988>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <HAL_DMA_IRQHandler+0x98a>
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 823f 	beq.w	8006bde <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2204      	movs	r2, #4
 8006772:	409a      	lsls	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 80cd 	beq.w	8006918 <HAL_DMA_IRQHandler+0xb48>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80c7 	beq.w	8006918 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2204      	movs	r2, #4
 8006794:	409a      	lsls	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d049      	beq.n	8006838 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8210 	beq.w	8006bd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067c0:	e20a      	b.n	8006bd8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8206 	beq.w	8006bd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d4:	e200      	b.n	8006bd8 <HAL_DMA_IRQHandler+0xe08>
 80067d6:	bf00      	nop
 80067d8:	40020010 	.word	0x40020010
 80067dc:	40020028 	.word	0x40020028
 80067e0:	40020040 	.word	0x40020040
 80067e4:	40020058 	.word	0x40020058
 80067e8:	40020070 	.word	0x40020070
 80067ec:	40020088 	.word	0x40020088
 80067f0:	400200a0 	.word	0x400200a0
 80067f4:	400200b8 	.word	0x400200b8
 80067f8:	40020410 	.word	0x40020410
 80067fc:	40020428 	.word	0x40020428
 8006800:	40020440 	.word	0x40020440
 8006804:	40020458 	.word	0x40020458
 8006808:	40020470 	.word	0x40020470
 800680c:	40020488 	.word	0x40020488
 8006810:	400204a0 	.word	0x400204a0
 8006814:	400204b8 	.word	0x400204b8
 8006818:	58025408 	.word	0x58025408
 800681c:	5802541c 	.word	0x5802541c
 8006820:	58025430 	.word	0x58025430
 8006824:	58025444 	.word	0x58025444
 8006828:	58025458 	.word	0x58025458
 800682c:	5802546c 	.word	0x5802546c
 8006830:	58025480 	.word	0x58025480
 8006834:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d160      	bne.n	8006904 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a7f      	ldr	r2, [pc, #508]	; (8006a44 <HAL_DMA_IRQHandler+0xc74>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d04a      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a7d      	ldr	r2, [pc, #500]	; (8006a48 <HAL_DMA_IRQHandler+0xc78>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d045      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7c      	ldr	r2, [pc, #496]	; (8006a4c <HAL_DMA_IRQHandler+0xc7c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d040      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7a      	ldr	r2, [pc, #488]	; (8006a50 <HAL_DMA_IRQHandler+0xc80>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d03b      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a79      	ldr	r2, [pc, #484]	; (8006a54 <HAL_DMA_IRQHandler+0xc84>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d036      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a77      	ldr	r2, [pc, #476]	; (8006a58 <HAL_DMA_IRQHandler+0xc88>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d031      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a76      	ldr	r2, [pc, #472]	; (8006a5c <HAL_DMA_IRQHandler+0xc8c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d02c      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a74      	ldr	r2, [pc, #464]	; (8006a60 <HAL_DMA_IRQHandler+0xc90>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d027      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a73      	ldr	r2, [pc, #460]	; (8006a64 <HAL_DMA_IRQHandler+0xc94>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d022      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a71      	ldr	r2, [pc, #452]	; (8006a68 <HAL_DMA_IRQHandler+0xc98>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01d      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a70      	ldr	r2, [pc, #448]	; (8006a6c <HAL_DMA_IRQHandler+0xc9c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d018      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6e      	ldr	r2, [pc, #440]	; (8006a70 <HAL_DMA_IRQHandler+0xca0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a6d      	ldr	r2, [pc, #436]	; (8006a74 <HAL_DMA_IRQHandler+0xca4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a6b      	ldr	r2, [pc, #428]	; (8006a78 <HAL_DMA_IRQHandler+0xca8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6a      	ldr	r2, [pc, #424]	; (8006a7c <HAL_DMA_IRQHandler+0xcac>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_DMA_IRQHandler+0xb12>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a68      	ldr	r2, [pc, #416]	; (8006a80 <HAL_DMA_IRQHandler+0xcb0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d108      	bne.n	80068f4 <HAL_DMA_IRQHandler+0xb24>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0208 	bic.w	r2, r2, #8
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e007      	b.n	8006904 <HAL_DMA_IRQHandler+0xb34>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0204 	bic.w	r2, r2, #4
 8006902:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8165 	beq.w	8006bd8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006916:	e15f      	b.n	8006bd8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2202      	movs	r2, #2
 8006922:	409a      	lsls	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80c5 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0xce8>
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80bf 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	2202      	movs	r2, #2
 8006944:	409a      	lsls	r2, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d018      	beq.n	8006986 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 813a 	beq.w	8006bdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006970:	e134      	b.n	8006bdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8130 	beq.w	8006bdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006984:	e12a      	b.n	8006bdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 8089 	bne.w	8006aa4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2b      	ldr	r2, [pc, #172]	; (8006a44 <HAL_DMA_IRQHandler+0xc74>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d04a      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a29      	ldr	r2, [pc, #164]	; (8006a48 <HAL_DMA_IRQHandler+0xc78>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d045      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a28      	ldr	r2, [pc, #160]	; (8006a4c <HAL_DMA_IRQHandler+0xc7c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d040      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <HAL_DMA_IRQHandler+0xc80>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d03b      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <HAL_DMA_IRQHandler+0xc84>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d036      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a23      	ldr	r2, [pc, #140]	; (8006a58 <HAL_DMA_IRQHandler+0xc88>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d031      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <HAL_DMA_IRQHandler+0xc8c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d02c      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <HAL_DMA_IRQHandler+0xc90>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d027      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_DMA_IRQHandler+0xc94>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d022      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <HAL_DMA_IRQHandler+0xc98>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d01d      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <HAL_DMA_IRQHandler+0xc9c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d018      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1a      	ldr	r2, [pc, #104]	; (8006a70 <HAL_DMA_IRQHandler+0xca0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a19      	ldr	r2, [pc, #100]	; (8006a74 <HAL_DMA_IRQHandler+0xca4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00e      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a17      	ldr	r2, [pc, #92]	; (8006a78 <HAL_DMA_IRQHandler+0xca8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d009      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <HAL_DMA_IRQHandler+0xcac>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d004      	beq.n	8006a32 <HAL_DMA_IRQHandler+0xc62>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <HAL_DMA_IRQHandler+0xcb0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d128      	bne.n	8006a84 <HAL_DMA_IRQHandler+0xcb4>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0214 	bic.w	r2, r2, #20
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e027      	b.n	8006a94 <HAL_DMA_IRQHandler+0xcc4>
 8006a44:	40020010 	.word	0x40020010
 8006a48:	40020028 	.word	0x40020028
 8006a4c:	40020040 	.word	0x40020040
 8006a50:	40020058 	.word	0x40020058
 8006a54:	40020070 	.word	0x40020070
 8006a58:	40020088 	.word	0x40020088
 8006a5c:	400200a0 	.word	0x400200a0
 8006a60:	400200b8 	.word	0x400200b8
 8006a64:	40020410 	.word	0x40020410
 8006a68:	40020428 	.word	0x40020428
 8006a6c:	40020440 	.word	0x40020440
 8006a70:	40020458 	.word	0x40020458
 8006a74:	40020470 	.word	0x40020470
 8006a78:	40020488 	.word	0x40020488
 8006a7c:	400204a0 	.word	0x400204a0
 8006a80:	400204b8 	.word	0x400204b8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 020a 	bic.w	r2, r2, #10
 8006a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8097 	beq.w	8006bdc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab6:	e091      	b.n	8006bdc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8088 	beq.w	8006bde <HAL_DMA_IRQHandler+0xe0e>
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8082 	beq.w	8006bde <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a41      	ldr	r2, [pc, #260]	; (8006be4 <HAL_DMA_IRQHandler+0xe14>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a3f      	ldr	r2, [pc, #252]	; (8006be8 <HAL_DMA_IRQHandler+0xe18>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a3e      	ldr	r2, [pc, #248]	; (8006bec <HAL_DMA_IRQHandler+0xe1c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <HAL_DMA_IRQHandler+0xe20>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3b      	ldr	r2, [pc, #236]	; (8006bf4 <HAL_DMA_IRQHandler+0xe24>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <HAL_DMA_IRQHandler+0xe28>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a38      	ldr	r2, [pc, #224]	; (8006bfc <HAL_DMA_IRQHandler+0xe2c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a36      	ldr	r2, [pc, #216]	; (8006c00 <HAL_DMA_IRQHandler+0xe30>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a35      	ldr	r2, [pc, #212]	; (8006c04 <HAL_DMA_IRQHandler+0xe34>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a33      	ldr	r2, [pc, #204]	; (8006c08 <HAL_DMA_IRQHandler+0xe38>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a32      	ldr	r2, [pc, #200]	; (8006c0c <HAL_DMA_IRQHandler+0xe3c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a30      	ldr	r2, [pc, #192]	; (8006c10 <HAL_DMA_IRQHandler+0xe40>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2f      	ldr	r2, [pc, #188]	; (8006c14 <HAL_DMA_IRQHandler+0xe44>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_DMA_IRQHandler+0xe48>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <HAL_DMA_IRQHandler+0xe4c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xdaa>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_DMA_IRQHandler+0xe50>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d108      	bne.n	8006b8c <HAL_DMA_IRQHandler+0xdbc>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 021c 	bic.w	r2, r2, #28
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e007      	b.n	8006b9c <HAL_DMA_IRQHandler+0xdcc>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 020e 	bic.w	r2, r2, #14
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
 8006bd2:	e004      	b.n	8006bde <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bd4:	bf00      	nop
 8006bd6:	e002      	b.n	8006bde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd8:	bf00      	nop
 8006bda:	e000      	b.n	8006bde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bdc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bde:	3728      	adds	r7, #40	; 0x28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40020010 	.word	0x40020010
 8006be8:	40020028 	.word	0x40020028
 8006bec:	40020040 	.word	0x40020040
 8006bf0:	40020058 	.word	0x40020058
 8006bf4:	40020070 	.word	0x40020070
 8006bf8:	40020088 	.word	0x40020088
 8006bfc:	400200a0 	.word	0x400200a0
 8006c00:	400200b8 	.word	0x400200b8
 8006c04:	40020410 	.word	0x40020410
 8006c08:	40020428 	.word	0x40020428
 8006c0c:	40020440 	.word	0x40020440
 8006c10:	40020458 	.word	0x40020458
 8006c14:	40020470 	.word	0x40020470
 8006c18:	40020488 	.word	0x40020488
 8006c1c:	400204a0 	.word	0x400204a0
 8006c20:	400204b8 	.word	0x400204b8

08006c24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a7f      	ldr	r2, [pc, #508]	; (8006e40 <DMA_SetConfig+0x21c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d072      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a7d      	ldr	r2, [pc, #500]	; (8006e44 <DMA_SetConfig+0x220>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d06d      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a7c      	ldr	r2, [pc, #496]	; (8006e48 <DMA_SetConfig+0x224>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d068      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a7a      	ldr	r2, [pc, #488]	; (8006e4c <DMA_SetConfig+0x228>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d063      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a79      	ldr	r2, [pc, #484]	; (8006e50 <DMA_SetConfig+0x22c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d05e      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a77      	ldr	r2, [pc, #476]	; (8006e54 <DMA_SetConfig+0x230>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d059      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a76      	ldr	r2, [pc, #472]	; (8006e58 <DMA_SetConfig+0x234>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d054      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a74      	ldr	r2, [pc, #464]	; (8006e5c <DMA_SetConfig+0x238>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d04f      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a73      	ldr	r2, [pc, #460]	; (8006e60 <DMA_SetConfig+0x23c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a71      	ldr	r2, [pc, #452]	; (8006e64 <DMA_SetConfig+0x240>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a70      	ldr	r2, [pc, #448]	; (8006e68 <DMA_SetConfig+0x244>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a6e      	ldr	r2, [pc, #440]	; (8006e6c <DMA_SetConfig+0x248>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6d      	ldr	r2, [pc, #436]	; (8006e70 <DMA_SetConfig+0x24c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a6b      	ldr	r2, [pc, #428]	; (8006e74 <DMA_SetConfig+0x250>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a6a      	ldr	r2, [pc, #424]	; (8006e78 <DMA_SetConfig+0x254>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a68      	ldr	r2, [pc, #416]	; (8006e7c <DMA_SetConfig+0x258>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a67      	ldr	r2, [pc, #412]	; (8006e80 <DMA_SetConfig+0x25c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a65      	ldr	r2, [pc, #404]	; (8006e84 <DMA_SetConfig+0x260>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a64      	ldr	r2, [pc, #400]	; (8006e88 <DMA_SetConfig+0x264>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a62      	ldr	r2, [pc, #392]	; (8006e8c <DMA_SetConfig+0x268>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a61      	ldr	r2, [pc, #388]	; (8006e90 <DMA_SetConfig+0x26c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a5f      	ldr	r2, [pc, #380]	; (8006e94 <DMA_SetConfig+0x270>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a5e      	ldr	r2, [pc, #376]	; (8006e98 <DMA_SetConfig+0x274>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <DMA_SetConfig+0x10a>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a5c      	ldr	r2, [pc, #368]	; (8006e9c <DMA_SetConfig+0x278>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <DMA_SetConfig+0x10e>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <DMA_SetConfig+0x110>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a39      	ldr	r2, [pc, #228]	; (8006e40 <DMA_SetConfig+0x21c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d04a      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a38      	ldr	r2, [pc, #224]	; (8006e44 <DMA_SetConfig+0x220>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d045      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a36      	ldr	r2, [pc, #216]	; (8006e48 <DMA_SetConfig+0x224>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d040      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a35      	ldr	r2, [pc, #212]	; (8006e4c <DMA_SetConfig+0x228>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d03b      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a33      	ldr	r2, [pc, #204]	; (8006e50 <DMA_SetConfig+0x22c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d036      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a32      	ldr	r2, [pc, #200]	; (8006e54 <DMA_SetConfig+0x230>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d031      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a30      	ldr	r2, [pc, #192]	; (8006e58 <DMA_SetConfig+0x234>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d02c      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a2f      	ldr	r2, [pc, #188]	; (8006e5c <DMA_SetConfig+0x238>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d027      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a2d      	ldr	r2, [pc, #180]	; (8006e60 <DMA_SetConfig+0x23c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d022      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <DMA_SetConfig+0x240>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d01d      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <DMA_SetConfig+0x244>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d018      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a29      	ldr	r2, [pc, #164]	; (8006e6c <DMA_SetConfig+0x248>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d013      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <DMA_SetConfig+0x24c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00e      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <DMA_SetConfig+0x250>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d009      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a24      	ldr	r2, [pc, #144]	; (8006e78 <DMA_SetConfig+0x254>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d004      	beq.n	8006df4 <DMA_SetConfig+0x1d0>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a23      	ldr	r2, [pc, #140]	; (8006e7c <DMA_SetConfig+0x258>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d101      	bne.n	8006df8 <DMA_SetConfig+0x1d4>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <DMA_SetConfig+0x1d6>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d059      	beq.n	8006eb2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	223f      	movs	r2, #63	; 0x3f
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d138      	bne.n	8006ea0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e3e:	e086      	b.n	8006f4e <DMA_SetConfig+0x32a>
 8006e40:	40020010 	.word	0x40020010
 8006e44:	40020028 	.word	0x40020028
 8006e48:	40020040 	.word	0x40020040
 8006e4c:	40020058 	.word	0x40020058
 8006e50:	40020070 	.word	0x40020070
 8006e54:	40020088 	.word	0x40020088
 8006e58:	400200a0 	.word	0x400200a0
 8006e5c:	400200b8 	.word	0x400200b8
 8006e60:	40020410 	.word	0x40020410
 8006e64:	40020428 	.word	0x40020428
 8006e68:	40020440 	.word	0x40020440
 8006e6c:	40020458 	.word	0x40020458
 8006e70:	40020470 	.word	0x40020470
 8006e74:	40020488 	.word	0x40020488
 8006e78:	400204a0 	.word	0x400204a0
 8006e7c:	400204b8 	.word	0x400204b8
 8006e80:	58025408 	.word	0x58025408
 8006e84:	5802541c 	.word	0x5802541c
 8006e88:	58025430 	.word	0x58025430
 8006e8c:	58025444 	.word	0x58025444
 8006e90:	58025458 	.word	0x58025458
 8006e94:	5802546c 	.word	0x5802546c
 8006e98:	58025480 	.word	0x58025480
 8006e9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]
}
 8006eb0:	e04d      	b.n	8006f4e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a29      	ldr	r2, [pc, #164]	; (8006f5c <DMA_SetConfig+0x338>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d022      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <DMA_SetConfig+0x33c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d01d      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a26      	ldr	r2, [pc, #152]	; (8006f64 <DMA_SetConfig+0x340>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d018      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <DMA_SetConfig+0x344>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a23      	ldr	r2, [pc, #140]	; (8006f6c <DMA_SetConfig+0x348>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <DMA_SetConfig+0x34c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <DMA_SetConfig+0x350>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <DMA_SetConfig+0x2de>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <DMA_SetConfig+0x354>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d101      	bne.n	8006f06 <DMA_SetConfig+0x2e2>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <DMA_SetConfig+0x2e4>
 8006f06:	2300      	movs	r3, #0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d020      	beq.n	8006f4e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	2201      	movs	r2, #1
 8006f16:	409a      	lsls	r2, r3
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d108      	bne.n	8006f3e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	60da      	str	r2, [r3, #12]
}
 8006f3c:	e007      	b.n	8006f4e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	58025408 	.word	0x58025408
 8006f60:	5802541c 	.word	0x5802541c
 8006f64:	58025430 	.word	0x58025430
 8006f68:	58025444 	.word	0x58025444
 8006f6c:	58025458 	.word	0x58025458
 8006f70:	5802546c 	.word	0x5802546c
 8006f74:	58025480 	.word	0x58025480
 8006f78:	58025494 	.word	0x58025494

08006f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a42      	ldr	r2, [pc, #264]	; (8007094 <DMA_CalcBaseAndBitshift+0x118>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d04a      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a41      	ldr	r2, [pc, #260]	; (8007098 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d045      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a3f      	ldr	r2, [pc, #252]	; (800709c <DMA_CalcBaseAndBitshift+0x120>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d040      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a3e      	ldr	r2, [pc, #248]	; (80070a0 <DMA_CalcBaseAndBitshift+0x124>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d03b      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a3c      	ldr	r2, [pc, #240]	; (80070a4 <DMA_CalcBaseAndBitshift+0x128>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d036      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3b      	ldr	r2, [pc, #236]	; (80070a8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d031      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a39      	ldr	r2, [pc, #228]	; (80070ac <DMA_CalcBaseAndBitshift+0x130>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d02c      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a38      	ldr	r2, [pc, #224]	; (80070b0 <DMA_CalcBaseAndBitshift+0x134>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d027      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a36      	ldr	r2, [pc, #216]	; (80070b4 <DMA_CalcBaseAndBitshift+0x138>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d022      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a35      	ldr	r2, [pc, #212]	; (80070b8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d01d      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a33      	ldr	r2, [pc, #204]	; (80070bc <DMA_CalcBaseAndBitshift+0x140>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d018      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a32      	ldr	r2, [pc, #200]	; (80070c0 <DMA_CalcBaseAndBitshift+0x144>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a30      	ldr	r2, [pc, #192]	; (80070c4 <DMA_CalcBaseAndBitshift+0x148>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00e      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2f      	ldr	r2, [pc, #188]	; (80070c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d009      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2d      	ldr	r2, [pc, #180]	; (80070cc <DMA_CalcBaseAndBitshift+0x150>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d004      	beq.n	8007024 <DMA_CalcBaseAndBitshift+0xa8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2c      	ldr	r2, [pc, #176]	; (80070d0 <DMA_CalcBaseAndBitshift+0x154>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d101      	bne.n	8007028 <DMA_CalcBaseAndBitshift+0xac>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <DMA_CalcBaseAndBitshift+0xae>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d024      	beq.n	8007078 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3b10      	subs	r3, #16
 8007036:	4a27      	ldr	r2, [pc, #156]	; (80070d4 <DMA_CalcBaseAndBitshift+0x158>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007048:	5cd3      	ldrb	r3, [r2, r3]
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d908      	bls.n	8007068 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	4b1f      	ldr	r3, [pc, #124]	; (80070dc <DMA_CalcBaseAndBitshift+0x160>)
 800705e:	4013      	ands	r3, r2
 8007060:	1d1a      	adds	r2, r3, #4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	659a      	str	r2, [r3, #88]	; 0x58
 8007066:	e00d      	b.n	8007084 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <DMA_CalcBaseAndBitshift+0x160>)
 8007070:	4013      	ands	r3, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6593      	str	r3, [r2, #88]	; 0x58
 8007076:	e005      	b.n	8007084 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40020010 	.word	0x40020010
 8007098:	40020028 	.word	0x40020028
 800709c:	40020040 	.word	0x40020040
 80070a0:	40020058 	.word	0x40020058
 80070a4:	40020070 	.word	0x40020070
 80070a8:	40020088 	.word	0x40020088
 80070ac:	400200a0 	.word	0x400200a0
 80070b0:	400200b8 	.word	0x400200b8
 80070b4:	40020410 	.word	0x40020410
 80070b8:	40020428 	.word	0x40020428
 80070bc:	40020440 	.word	0x40020440
 80070c0:	40020458 	.word	0x40020458
 80070c4:	40020470 	.word	0x40020470
 80070c8:	40020488 	.word	0x40020488
 80070cc:	400204a0 	.word	0x400204a0
 80070d0:	400204b8 	.word	0x400204b8
 80070d4:	aaaaaaab 	.word	0xaaaaaaab
 80070d8:	080142f4 	.word	0x080142f4
 80070dc:	fffffc00 	.word	0xfffffc00

080070e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d120      	bne.n	8007136 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d858      	bhi.n	80071ae <DMA_CheckFifoParam+0xce>
 80070fc:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <DMA_CheckFifoParam+0x24>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007115 	.word	0x08007115
 8007108:	08007127 	.word	0x08007127
 800710c:	08007115 	.word	0x08007115
 8007110:	080071af 	.word	0x080071af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d048      	beq.n	80071b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007124:	e045      	b.n	80071b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800712e:	d142      	bne.n	80071b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007134:	e03f      	b.n	80071b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713e:	d123      	bne.n	8007188 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	2b03      	cmp	r3, #3
 8007146:	d838      	bhi.n	80071ba <DMA_CheckFifoParam+0xda>
 8007148:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <DMA_CheckFifoParam+0x70>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007161 	.word	0x08007161
 8007154:	08007167 	.word	0x08007167
 8007158:	08007161 	.word	0x08007161
 800715c:	08007179 	.word	0x08007179
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
        break;
 8007164:	e030      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d025      	beq.n	80071be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007176:	e022      	b.n	80071be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007180:	d11f      	bne.n	80071c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007186:	e01c      	b.n	80071c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	2b02      	cmp	r3, #2
 800718e:	d902      	bls.n	8007196 <DMA_CheckFifoParam+0xb6>
 8007190:	2b03      	cmp	r3, #3
 8007192:	d003      	beq.n	800719c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007194:	e018      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]
        break;
 800719a:	e015      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00e      	beq.n	80071c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
    break;
 80071ac:	e00b      	b.n	80071c6 <DMA_CheckFifoParam+0xe6>
        break;
 80071ae:	bf00      	nop
 80071b0:	e00a      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        break;
 80071b2:	bf00      	nop
 80071b4:	e008      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        break;
 80071b6:	bf00      	nop
 80071b8:	e006      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        break;
 80071ba:	bf00      	nop
 80071bc:	e004      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        break;
 80071be:	bf00      	nop
 80071c0:	e002      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
        break;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <DMA_CheckFifoParam+0xe8>
    break;
 80071c6:	bf00      	nop
    }
  }

  return status;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop

080071d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a38      	ldr	r2, [pc, #224]	; (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a36      	ldr	r2, [pc, #216]	; (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a35      	ldr	r2, [pc, #212]	; (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d018      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a33      	ldr	r2, [pc, #204]	; (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a32      	ldr	r2, [pc, #200]	; (80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a30      	ldr	r2, [pc, #192]	; (80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2d      	ldr	r2, [pc, #180]	; (80072e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d101      	bne.n	800723a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800723a:	2300      	movs	r3, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01a      	beq.n	8007276 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	3b08      	subs	r3, #8
 8007248:	4a28      	ldr	r2, [pc, #160]	; (80072ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007264:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2201      	movs	r2, #1
 800726e:	409a      	lsls	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007274:	e024      	b.n	80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	3b10      	subs	r3, #16
 800727e:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007280:	fba2 2303 	umull	r2, r3, r2, r3
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d806      	bhi.n	800729e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d902      	bls.n	800729e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3308      	adds	r3, #8
 800729c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4b18      	ldr	r3, [pc, #96]	; (8007304 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	461a      	mov	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a16      	ldr	r2, [pc, #88]	; (8007308 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80072b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	2201      	movs	r2, #1
 80072ba:	409a      	lsls	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	58025408 	.word	0x58025408
 80072d0:	5802541c 	.word	0x5802541c
 80072d4:	58025430 	.word	0x58025430
 80072d8:	58025444 	.word	0x58025444
 80072dc:	58025458 	.word	0x58025458
 80072e0:	5802546c 	.word	0x5802546c
 80072e4:	58025480 	.word	0x58025480
 80072e8:	58025494 	.word	0x58025494
 80072ec:	cccccccd 	.word	0xcccccccd
 80072f0:	16009600 	.word	0x16009600
 80072f4:	58025880 	.word	0x58025880
 80072f8:	aaaaaaab 	.word	0xaaaaaaab
 80072fc:	400204b8 	.word	0x400204b8
 8007300:	4002040f 	.word	0x4002040f
 8007304:	10008200 	.word	0x10008200
 8007308:	40020880 	.word	0x40020880

0800730c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d04a      	beq.n	80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b08      	cmp	r3, #8
 8007326:	d847      	bhi.n	80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a25      	ldr	r2, [pc, #148]	; (80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d022      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d01d      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a22      	ldr	r2, [pc, #136]	; (80073cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d018      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d013      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1f      	ldr	r2, [pc, #124]	; (80073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00e      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d009      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d004      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d101      	bne.n	800737c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800737c:	2300      	movs	r3, #0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007394:	671a      	str	r2, [r3, #112]	; 0x70
 8007396:	e009      	b.n	80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	461a      	mov	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80073aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2201      	movs	r2, #1
 80073b2:	409a      	lsls	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	58025408 	.word	0x58025408
 80073c8:	5802541c 	.word	0x5802541c
 80073cc:	58025430 	.word	0x58025430
 80073d0:	58025444 	.word	0x58025444
 80073d4:	58025458 	.word	0x58025458
 80073d8:	5802546c 	.word	0x5802546c
 80073dc:	58025480 	.word	0x58025480
 80073e0:	58025494 	.word	0x58025494
 80073e4:	1600963f 	.word	0x1600963f
 80073e8:	58025940 	.word	0x58025940
 80073ec:	1000823f 	.word	0x1000823f
 80073f0:	40020940 	.word	0x40020940

080073f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007402:	4b89      	ldr	r3, [pc, #548]	; (8007628 <HAL_GPIO_Init+0x234>)
 8007404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007406:	e194      	b.n	8007732 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	2101      	movs	r1, #1
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	4013      	ands	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8186 	beq.w	800772c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2b01      	cmp	r3, #1
 800742a:	d005      	beq.n	8007438 <HAL_GPIO_Init+0x44>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d130      	bne.n	800749a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	2203      	movs	r2, #3
 8007444:	fa02 f303 	lsl.w	r3, r2, r3
 8007448:	43db      	mvns	r3, r3
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4013      	ands	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4313      	orrs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800746e:	2201      	movs	r2, #1
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43db      	mvns	r3, r3
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	4013      	ands	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	091b      	lsrs	r3, r3, #4
 8007484:	f003 0201 	and.w	r2, r3, #1
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	4313      	orrs	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d017      	beq.n	80074d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	2203      	movs	r2, #3
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	43db      	mvns	r3, r3
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	4013      	ands	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d123      	bne.n	800752a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	08da      	lsrs	r2, r3, #3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3208      	adds	r2, #8
 80074ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	220f      	movs	r2, #15
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43db      	mvns	r3, r3
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	4013      	ands	r3, r2
 8007504:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	691a      	ldr	r2, [r3, #16]
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4313      	orrs	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	08da      	lsrs	r2, r3, #3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3208      	adds	r2, #8
 8007524:	69b9      	ldr	r1, [r7, #24]
 8007526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	2203      	movs	r2, #3
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 0203 	and.w	r2, r3, #3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80e0 	beq.w	800772c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800756c:	4b2f      	ldr	r3, [pc, #188]	; (800762c <HAL_GPIO_Init+0x238>)
 800756e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007572:	4a2e      	ldr	r2, [pc, #184]	; (800762c <HAL_GPIO_Init+0x238>)
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800757c:	4b2b      	ldr	r3, [pc, #172]	; (800762c <HAL_GPIO_Init+0x238>)
 800757e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800758a:	4a29      	ldr	r2, [pc, #164]	; (8007630 <HAL_GPIO_Init+0x23c>)
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	089b      	lsrs	r3, r3, #2
 8007590:	3302      	adds	r3, #2
 8007592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	220f      	movs	r2, #15
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43db      	mvns	r3, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	4013      	ands	r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a20      	ldr	r2, [pc, #128]	; (8007634 <HAL_GPIO_Init+0x240>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d052      	beq.n	800765c <HAL_GPIO_Init+0x268>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <HAL_GPIO_Init+0x244>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d031      	beq.n	8007622 <HAL_GPIO_Init+0x22e>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <HAL_GPIO_Init+0x248>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d02b      	beq.n	800761e <HAL_GPIO_Init+0x22a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <HAL_GPIO_Init+0x24c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d025      	beq.n	800761a <HAL_GPIO_Init+0x226>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <HAL_GPIO_Init+0x250>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d01f      	beq.n	8007616 <HAL_GPIO_Init+0x222>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <HAL_GPIO_Init+0x254>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d019      	beq.n	8007612 <HAL_GPIO_Init+0x21e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1a      	ldr	r2, [pc, #104]	; (800764c <HAL_GPIO_Init+0x258>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <HAL_GPIO_Init+0x21a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a19      	ldr	r2, [pc, #100]	; (8007650 <HAL_GPIO_Init+0x25c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00d      	beq.n	800760a <HAL_GPIO_Init+0x216>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a18      	ldr	r2, [pc, #96]	; (8007654 <HAL_GPIO_Init+0x260>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d007      	beq.n	8007606 <HAL_GPIO_Init+0x212>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a17      	ldr	r2, [pc, #92]	; (8007658 <HAL_GPIO_Init+0x264>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d101      	bne.n	8007602 <HAL_GPIO_Init+0x20e>
 80075fe:	2309      	movs	r3, #9
 8007600:	e02d      	b.n	800765e <HAL_GPIO_Init+0x26a>
 8007602:	230a      	movs	r3, #10
 8007604:	e02b      	b.n	800765e <HAL_GPIO_Init+0x26a>
 8007606:	2308      	movs	r3, #8
 8007608:	e029      	b.n	800765e <HAL_GPIO_Init+0x26a>
 800760a:	2307      	movs	r3, #7
 800760c:	e027      	b.n	800765e <HAL_GPIO_Init+0x26a>
 800760e:	2306      	movs	r3, #6
 8007610:	e025      	b.n	800765e <HAL_GPIO_Init+0x26a>
 8007612:	2305      	movs	r3, #5
 8007614:	e023      	b.n	800765e <HAL_GPIO_Init+0x26a>
 8007616:	2304      	movs	r3, #4
 8007618:	e021      	b.n	800765e <HAL_GPIO_Init+0x26a>
 800761a:	2303      	movs	r3, #3
 800761c:	e01f      	b.n	800765e <HAL_GPIO_Init+0x26a>
 800761e:	2302      	movs	r3, #2
 8007620:	e01d      	b.n	800765e <HAL_GPIO_Init+0x26a>
 8007622:	2301      	movs	r3, #1
 8007624:	e01b      	b.n	800765e <HAL_GPIO_Init+0x26a>
 8007626:	bf00      	nop
 8007628:	58000080 	.word	0x58000080
 800762c:	58024400 	.word	0x58024400
 8007630:	58000400 	.word	0x58000400
 8007634:	58020000 	.word	0x58020000
 8007638:	58020400 	.word	0x58020400
 800763c:	58020800 	.word	0x58020800
 8007640:	58020c00 	.word	0x58020c00
 8007644:	58021000 	.word	0x58021000
 8007648:	58021400 	.word	0x58021400
 800764c:	58021800 	.word	0x58021800
 8007650:	58021c00 	.word	0x58021c00
 8007654:	58022000 	.word	0x58022000
 8007658:	58022400 	.word	0x58022400
 800765c:	2300      	movs	r3, #0
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	f002 0203 	and.w	r2, r2, #3
 8007664:	0092      	lsls	r2, r2, #2
 8007666:	4093      	lsls	r3, r2
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800766e:	4938      	ldr	r1, [pc, #224]	; (8007750 <HAL_GPIO_Init+0x35c>)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	3302      	adds	r3, #2
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800767c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	43db      	mvns	r3, r3
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	4013      	ands	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	43db      	mvns	r3, r3
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	4013      	ands	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	43db      	mvns	r3, r3
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	4013      	ands	r3, r2
 8007710:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	3301      	adds	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f ae63 	bne.w	8007408 <HAL_GPIO_Init+0x14>
  }
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	3724      	adds	r7, #36	; 0x24
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	58000400 	.word	0x58000400

08007754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	807b      	strh	r3, [r7, #2]
 8007760:	4613      	mov	r3, r2
 8007762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007764:	787b      	ldrb	r3, [r7, #1]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800776a:	887a      	ldrh	r2, [r7, #2]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007770:	e003      	b.n	800777a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	041a      	lsls	r2, r3, #16
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	619a      	str	r2, [r3, #24]
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e08b      	b.n	80078b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fa fc08 	bl	8001fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d107      	bne.n	8007802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	e006      	b.n	8007810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800780e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d108      	bne.n	800782a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	e007      	b.n	800783a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6859      	ldr	r1, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	4b1d      	ldr	r3, [pc, #116]	; (80078bc <HAL_I2C_Init+0x134>)
 8007846:	430b      	orrs	r3, r1
 8007848:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69d9      	ldr	r1, [r3, #28]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	02008000 	.word	0x02008000

080078c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d138      	bne.n	8007948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e032      	b.n	800794a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	; 0x24
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b20      	cmp	r3, #32
 800796a:	d139      	bne.n	80079e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007976:	2302      	movs	r3, #2
 8007978:	e033      	b.n	80079e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2224      	movs	r2, #36	; 0x24
 8007986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	e000      	b.n	80079e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80079f8:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <HAL_PWREx_ConfigSupply+0x70>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d00a      	beq.n	8007a1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <HAL_PWREx_ConfigSupply+0x70>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d001      	beq.n	8007a16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e01f      	b.n	8007a56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e01d      	b.n	8007a56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <HAL_PWREx_ConfigSupply+0x70>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f023 0207 	bic.w	r2, r3, #7
 8007a22:	490f      	ldr	r1, [pc, #60]	; (8007a60 <HAL_PWREx_ConfigSupply+0x70>)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a2a:	f7fa ffb7 	bl	800299c <HAL_GetTick>
 8007a2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a30:	e009      	b.n	8007a46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a32:	f7fa ffb3 	bl	800299c <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a40:	d901      	bls.n	8007a46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e007      	b.n	8007a56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_PWREx_ConfigSupply+0x70>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a52:	d1ee      	bne.n	8007a32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	58024800 	.word	0x58024800

08007a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	; 0x30
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f000 bc48 	b.w	8008308 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8088 	beq.w	8007b96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a86:	4b99      	ldr	r3, [pc, #612]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a90:	4b96      	ldr	r3, [pc, #600]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d007      	beq.n	8007aac <HAL_RCC_OscConfig+0x48>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b18      	cmp	r3, #24
 8007aa0:	d111      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x62>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aac:	4b8f      	ldr	r3, [pc, #572]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d06d      	beq.n	8007b94 <HAL_RCC_OscConfig+0x130>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d169      	bne.n	8007b94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f000 bc21 	b.w	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ace:	d106      	bne.n	8007ade <HAL_RCC_OscConfig+0x7a>
 8007ad0:	4b86      	ldr	r3, [pc, #536]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a85      	ldr	r2, [pc, #532]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	e02e      	b.n	8007b3c <HAL_RCC_OscConfig+0xd8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10c      	bne.n	8007b00 <HAL_RCC_OscConfig+0x9c>
 8007ae6:	4b81      	ldr	r3, [pc, #516]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a80      	ldr	r2, [pc, #512]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4b7e      	ldr	r3, [pc, #504]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a7d      	ldr	r2, [pc, #500]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	e01d      	b.n	8007b3c <HAL_RCC_OscConfig+0xd8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCC_OscConfig+0xc0>
 8007b0a:	4b78      	ldr	r3, [pc, #480]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a77      	ldr	r2, [pc, #476]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	4b75      	ldr	r3, [pc, #468]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a74      	ldr	r2, [pc, #464]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	e00b      	b.n	8007b3c <HAL_RCC_OscConfig+0xd8>
 8007b24:	4b71      	ldr	r3, [pc, #452]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a70      	ldr	r2, [pc, #448]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4b6e      	ldr	r3, [pc, #440]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6d      	ldr	r2, [pc, #436]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d013      	beq.n	8007b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b44:	f7fa ff2a 	bl	800299c <HAL_GetTick>
 8007b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b4c:	f7fa ff26 	bl	800299c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b64      	cmp	r3, #100	; 0x64
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e3d4      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b5e:	4b63      	ldr	r3, [pc, #396]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f0      	beq.n	8007b4c <HAL_RCC_OscConfig+0xe8>
 8007b6a:	e014      	b.n	8007b96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7fa ff16 	bl	800299c <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b74:	f7fa ff12 	bl	800299c <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b64      	cmp	r3, #100	; 0x64
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e3c0      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b86:	4b59      	ldr	r3, [pc, #356]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x110>
 8007b92:	e000      	b.n	8007b96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80ca 	beq.w	8007d38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba4:	4b51      	ldr	r3, [pc, #324]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bae:	4b4f      	ldr	r3, [pc, #316]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <HAL_RCC_OscConfig+0x166>
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	2b18      	cmp	r3, #24
 8007bbe:	d156      	bne.n	8007c6e <HAL_RCC_OscConfig+0x20a>
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d151      	bne.n	8007c6e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bca:	4b48      	ldr	r3, [pc, #288]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_RCC_OscConfig+0x17e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e392      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007be2:	4b42      	ldr	r3, [pc, #264]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f023 0219 	bic.w	r2, r3, #25
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	493f      	ldr	r1, [pc, #252]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fa fed2 	bl	800299c <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bfc:	f7fa fece 	bl	800299c <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e37c      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c0e:	4b37      	ldr	r3, [pc, #220]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c1a:	f7fa fecb 	bl	80029b4 <HAL_GetREVID>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d817      	bhi.n	8007c58 <HAL_RCC_OscConfig+0x1f4>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d108      	bne.n	8007c42 <HAL_RCC_OscConfig+0x1de>
 8007c30:	4b2e      	ldr	r3, [pc, #184]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c38:	4a2c      	ldr	r2, [pc, #176]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c40:	e07a      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c42:	4b2a      	ldr	r3, [pc, #168]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	031b      	lsls	r3, r3, #12
 8007c50:	4926      	ldr	r1, [pc, #152]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c56:	e06f      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c58:	4b24      	ldr	r3, [pc, #144]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	061b      	lsls	r3, r3, #24
 8007c66:	4921      	ldr	r1, [pc, #132]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c6c:	e064      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d047      	beq.n	8007d06 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c76:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f023 0219 	bic.w	r2, r3, #25
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	491a      	ldr	r1, [pc, #104]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c88:	f7fa fe88 	bl	800299c <HAL_GetTick>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c90:	f7fa fe84 	bl	800299c <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e332      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cae:	f7fa fe81 	bl	80029b4 <HAL_GetREVID>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d819      	bhi.n	8007cf0 <HAL_RCC_OscConfig+0x28c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d108      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x272>
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ccc:	4a07      	ldr	r2, [pc, #28]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	6053      	str	r3, [r2, #4]
 8007cd4:	e030      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	031b      	lsls	r3, r3, #12
 8007ce4:	4901      	ldr	r1, [pc, #4]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	604b      	str	r3, [r1, #4]
 8007cea:	e025      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
 8007cec:	58024400 	.word	0x58024400
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	061b      	lsls	r3, r3, #24
 8007cfe:	4997      	ldr	r1, [pc, #604]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	604b      	str	r3, [r1, #4]
 8007d04:	e018      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d06:	4b95      	ldr	r3, [pc, #596]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a94      	ldr	r2, [pc, #592]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d12:	f7fa fe43 	bl	800299c <HAL_GetTick>
 8007d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d18:	e008      	b.n	8007d2c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d1a:	f7fa fe3f 	bl	800299c <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e2ed      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d2c:	4b8b      	ldr	r3, [pc, #556]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f0      	bne.n	8007d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80a9 	beq.w	8007e98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d46:	4b85      	ldr	r3, [pc, #532]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d50:	4b82      	ldr	r3, [pc, #520]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d007      	beq.n	8007d6c <HAL_RCC_OscConfig+0x308>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b18      	cmp	r3, #24
 8007d60:	d13a      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x374>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d135      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d6c:	4b7b      	ldr	r3, [pc, #492]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <HAL_RCC_OscConfig+0x320>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e2c1      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d84:	f7fa fe16 	bl	80029b4 <HAL_GetREVID>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d817      	bhi.n	8007dc2 <HAL_RCC_OscConfig+0x35e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d108      	bne.n	8007dac <HAL_RCC_OscConfig+0x348>
 8007d9a:	4b70      	ldr	r3, [pc, #448]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007da2:	4a6e      	ldr	r2, [pc, #440]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007da8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007daa:	e075      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dac:	4b6b      	ldr	r3, [pc, #428]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	069b      	lsls	r3, r3, #26
 8007dba:	4968      	ldr	r1, [pc, #416]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dc0:	e06a      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc2:	4b66      	ldr	r3, [pc, #408]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	4962      	ldr	r1, [pc, #392]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dd6:	e05f      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d042      	beq.n	8007e66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007de0:	4b5e      	ldr	r3, [pc, #376]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a5d      	ldr	r2, [pc, #372]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fa fdd6 	bl	800299c <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007df4:	f7fa fdd2 	bl	800299c <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e280      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e06:	4b55      	ldr	r3, [pc, #340]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e12:	f7fa fdcf 	bl	80029b4 <HAL_GetREVID>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d817      	bhi.n	8007e50 <HAL_RCC_OscConfig+0x3ec>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d108      	bne.n	8007e3a <HAL_RCC_OscConfig+0x3d6>
 8007e28:	4b4c      	ldr	r3, [pc, #304]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e30:	4a4a      	ldr	r2, [pc, #296]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e36:	6053      	str	r3, [r2, #4]
 8007e38:	e02e      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
 8007e3a:	4b48      	ldr	r3, [pc, #288]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	069b      	lsls	r3, r3, #26
 8007e48:	4944      	ldr	r1, [pc, #272]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	604b      	str	r3, [r1, #4]
 8007e4e:	e023      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
 8007e50:	4b42      	ldr	r3, [pc, #264]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	493f      	ldr	r1, [pc, #252]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60cb      	str	r3, [r1, #12]
 8007e64:	e018      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e66:	4b3d      	ldr	r3, [pc, #244]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3c      	ldr	r2, [pc, #240]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e72:	f7fa fd93 	bl	800299c <HAL_GetTick>
 8007e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e78:	e008      	b.n	8007e8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e7a:	f7fa fd8f 	bl	800299c <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e23d      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e8c:	4b33      	ldr	r3, [pc, #204]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f0      	bne.n	8007e7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d036      	beq.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d019      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eac:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fa fd70 	bl	800299c <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fa fd6c 	bl	800299c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e21a      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ed2:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x45c>
 8007ede:	e018      	b.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eec:	f7fa fd56 	bl	800299c <HAL_GetTick>
 8007ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ef4:	f7fa fd52 	bl	800299c <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e200      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d039      	beq.n	8007f92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01c      	beq.n	8007f60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f26:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f32:	f7fa fd33 	bl	800299c <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f3a:	f7fa fd2f 	bl	800299c <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e1dd      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f4c:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <HAL_RCC_OscConfig+0x4d6>
 8007f58:	e01b      	b.n	8007f92 <HAL_RCC_OscConfig+0x52e>
 8007f5a:	bf00      	nop
 8007f5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f60:	4b9b      	ldr	r3, [pc, #620]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a9a      	ldr	r2, [pc, #616]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f6c:	f7fa fd16 	bl	800299c <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f74:	f7fa fd12 	bl	800299c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e1c0      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f86:	4b92      	ldr	r3, [pc, #584]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8081 	beq.w	80080a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fa0:	4b8c      	ldr	r3, [pc, #560]	; (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a8b      	ldr	r2, [pc, #556]	; (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fac:	f7fa fcf6 	bl	800299c <HAL_GetTick>
 8007fb0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb4:	f7fa fcf2 	bl	800299c <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	; 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e1a0      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fc6:	4b83      	ldr	r3, [pc, #524]	; (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x584>
 8007fda:	4b7d      	ldr	r3, [pc, #500]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	4a7c      	ldr	r2, [pc, #496]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe6:	e02d      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <HAL_RCC_OscConfig+0x5a6>
 8007ff0:	4b77      	ldr	r3, [pc, #476]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	4a76      	ldr	r2, [pc, #472]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffc:	4b74      	ldr	r3, [pc, #464]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008000:	4a73      	ldr	r2, [pc, #460]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008002:	f023 0304 	bic.w	r3, r3, #4
 8008006:	6713      	str	r3, [r2, #112]	; 0x70
 8008008:	e01c      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d10c      	bne.n	800802c <HAL_RCC_OscConfig+0x5c8>
 8008012:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	4a6e      	ldr	r2, [pc, #440]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008018:	f043 0304 	orr.w	r3, r3, #4
 800801c:	6713      	str	r3, [r2, #112]	; 0x70
 800801e:	4b6c      	ldr	r3, [pc, #432]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	4a6b      	ldr	r2, [pc, #428]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6713      	str	r3, [r2, #112]	; 0x70
 800802a:	e00b      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 800802c:	4b68      	ldr	r3, [pc, #416]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008030:	4a67      	ldr	r2, [pc, #412]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	; 0x70
 8008038:	4b65      	ldr	r3, [pc, #404]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	4a64      	ldr	r2, [pc, #400]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d015      	beq.n	8008078 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804c:	f7fa fca6 	bl	800299c <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008052:	e00a      	b.n	800806a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008054:	f7fa fca2 	bl	800299c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e14e      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806a:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0ee      	beq.n	8008054 <HAL_RCC_OscConfig+0x5f0>
 8008076:	e014      	b.n	80080a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008078:	f7fa fc90 	bl	800299c <HAL_GetTick>
 800807c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800807e:	e00a      	b.n	8008096 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008080:	f7fa fc8c 	bl	800299c <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	f241 3288 	movw	r2, #5000	; 0x1388
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e138      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008096:	4b4e      	ldr	r3, [pc, #312]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1ee      	bne.n	8008080 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 812d 	beq.w	8008306 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080ac:	4b48      	ldr	r3, [pc, #288]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080b4:	2b18      	cmp	r3, #24
 80080b6:	f000 80bd 	beq.w	8008234 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b02      	cmp	r3, #2
 80080c0:	f040 809e 	bne.w	8008200 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c4:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a41      	ldr	r2, [pc, #260]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fa fc64 	bl	800299c <HAL_GetTick>
 80080d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d8:	f7fa fc60 	bl	800299c <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e10e      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ea:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080f6:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080fa:	4b37      	ldr	r3, [pc, #220]	; (80081d8 <HAL_RCC_OscConfig+0x774>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008106:	0112      	lsls	r2, r2, #4
 8008108:	430a      	orrs	r2, r1
 800810a:	4931      	ldr	r1, [pc, #196]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	628b      	str	r3, [r1, #40]	; 0x28
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	3b01      	subs	r3, #1
 8008116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	3b01      	subs	r3, #1
 8008120:	025b      	lsls	r3, r3, #9
 8008122:	b29b      	uxth	r3, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	3b01      	subs	r3, #1
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008138:	3b01      	subs	r3, #1
 800813a:	061b      	lsls	r3, r3, #24
 800813c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008140:	4923      	ldr	r1, [pc, #140]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008146:	4b22      	ldr	r3, [pc, #136]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	4a21      	ldr	r2, [pc, #132]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008152:	4b1f      	ldr	r3, [pc, #124]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008156:	4b21      	ldr	r3, [pc, #132]	; (80081dc <HAL_RCC_OscConfig+0x778>)
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800815e:	00d2      	lsls	r2, r2, #3
 8008160:	491b      	ldr	r1, [pc, #108]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008166:	4b1a      	ldr	r3, [pc, #104]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	f023 020c 	bic.w	r2, r3, #12
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	4917      	ldr	r1, [pc, #92]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008178:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	f023 0202 	bic.w	r2, r3, #2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008184:	4912      	ldr	r1, [pc, #72]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008186:	4313      	orrs	r3, r2
 8008188:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	4a10      	ldr	r2, [pc, #64]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008196:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	4a0d      	ldr	r2, [pc, #52]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800819c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081a2:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	4a0a      	ldr	r2, [pc, #40]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80081ae:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c6:	f7fa fbe9 	bl	800299c <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081cc:	e011      	b.n	80081f2 <HAL_RCC_OscConfig+0x78e>
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58024800 	.word	0x58024800
 80081d8:	fffffc0c 	.word	0xfffffc0c
 80081dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e0:	f7fa fbdc 	bl	800299c <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e08a      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081f2:	4b47      	ldr	r3, [pc, #284]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0f0      	beq.n	80081e0 <HAL_RCC_OscConfig+0x77c>
 80081fe:	e082      	b.n	8008306 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008200:	4b43      	ldr	r3, [pc, #268]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a42      	ldr	r2, [pc, #264]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800820a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fa fbc6 	bl	800299c <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008214:	f7fa fbc2 	bl	800299c <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e070      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008226:	4b3a      	ldr	r3, [pc, #232]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f0      	bne.n	8008214 <HAL_RCC_OscConfig+0x7b0>
 8008232:	e068      	b.n	8008306 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008234:	4b36      	ldr	r3, [pc, #216]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800823a:	4b35      	ldr	r3, [pc, #212]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b01      	cmp	r3, #1
 8008246:	d031      	beq.n	80082ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f003 0203 	and.w	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008252:	429a      	cmp	r2, r3
 8008254:	d12a      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	091b      	lsrs	r3, r3, #4
 800825a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008262:	429a      	cmp	r2, r3
 8008264:	d122      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008272:	429a      	cmp	r2, r3
 8008274:	d11a      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	0a5b      	lsrs	r3, r3, #9
 800827a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d111      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d108      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	0e1b      	lsrs	r3, r3, #24
 800829e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e02b      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b4:	08db      	lsrs	r3, r3, #3
 80082b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d01f      	beq.n	8008306 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80082c6:	4b12      	ldr	r3, [pc, #72]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	4a11      	ldr	r2, [pc, #68]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082d2:	f7fa fb63 	bl	800299c <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80082d8:	bf00      	nop
 80082da:	f7fa fb5f 	bl	800299c <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d0f9      	beq.n	80082da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <HAL_RCC_OscConfig+0x8b0>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082f2:	00d2      	lsls	r2, r2, #3
 80082f4:	4906      	ldr	r1, [pc, #24]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	4a04      	ldr	r2, [pc, #16]	; (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008300:	f043 0301 	orr.w	r3, r3, #1
 8008304:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3730      	adds	r7, #48	; 0x30
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58024400 	.word	0x58024400
 8008314:	ffff0007 	.word	0xffff0007

08008318 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e19c      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800832c:	4b8a      	ldr	r3, [pc, #552]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d910      	bls.n	800835c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833a:	4b87      	ldr	r3, [pc, #540]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 020f 	bic.w	r2, r3, #15
 8008342:	4985      	ldr	r1, [pc, #532]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	4313      	orrs	r3, r2
 8008348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800834a:	4b83      	ldr	r3, [pc, #524]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d001      	beq.n	800835c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e184      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	4b7b      	ldr	r3, [pc, #492]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008374:	429a      	cmp	r2, r3
 8008376:	d908      	bls.n	800838a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008378:	4b78      	ldr	r3, [pc, #480]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	4975      	ldr	r1, [pc, #468]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008386:	4313      	orrs	r3, r2
 8008388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d010      	beq.n	80083b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	4b70      	ldr	r3, [pc, #448]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d908      	bls.n	80083b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083a6:	4b6d      	ldr	r3, [pc, #436]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	496a      	ldr	r1, [pc, #424]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d010      	beq.n	80083e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	4b64      	ldr	r3, [pc, #400]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d908      	bls.n	80083e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083d4:	4b61      	ldr	r3, [pc, #388]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	495e      	ldr	r1, [pc, #376]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d010      	beq.n	8008414 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69da      	ldr	r2, [r3, #28]
 80083f6:	4b59      	ldr	r3, [pc, #356]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083fe:	429a      	cmp	r2, r3
 8008400:	d908      	bls.n	8008414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008402:	4b56      	ldr	r3, [pc, #344]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	4953      	ldr	r1, [pc, #332]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008410:	4313      	orrs	r3, r2
 8008412:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d010      	beq.n	8008442 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	4b4d      	ldr	r3, [pc, #308]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	429a      	cmp	r2, r3
 800842e:	d908      	bls.n	8008442 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008430:	4b4a      	ldr	r3, [pc, #296]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f023 020f 	bic.w	r2, r3, #15
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4947      	ldr	r1, [pc, #284]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800843e:	4313      	orrs	r3, r2
 8008440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d055      	beq.n	80084fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800844e:	4b43      	ldr	r3, [pc, #268]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	4940      	ldr	r1, [pc, #256]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800845c:	4313      	orrs	r3, r2
 800845e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b02      	cmp	r3, #2
 8008466:	d107      	bne.n	8008478 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008468:	4b3c      	ldr	r3, [pc, #240]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d121      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e0f6      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d107      	bne.n	8008490 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008480:	4b36      	ldr	r3, [pc, #216]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0ea      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d107      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008498:	4b30      	ldr	r3, [pc, #192]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0de      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084a8:	4b2c      	ldr	r3, [pc, #176]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0d6      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084b8:	4b28      	ldr	r3, [pc, #160]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f023 0207 	bic.w	r2, r3, #7
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	4925      	ldr	r1, [pc, #148]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ca:	f7fa fa67 	bl	800299c <HAL_GetTick>
 80084ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d0:	e00a      	b.n	80084e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084d2:	f7fa fa63 	bl	800299c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e0be      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e8:	4b1c      	ldr	r3, [pc, #112]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d1eb      	bne.n	80084d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d010      	beq.n	8008528 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	4b14      	ldr	r3, [pc, #80]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	429a      	cmp	r2, r3
 8008514:	d208      	bcs.n	8008528 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f023 020f 	bic.w	r2, r3, #15
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	490e      	ldr	r1, [pc, #56]	; (800855c <HAL_RCC_ClockConfig+0x244>)
 8008524:	4313      	orrs	r3, r2
 8008526:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008528:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d214      	bcs.n	8008560 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008536:	4b08      	ldr	r3, [pc, #32]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f023 020f 	bic.w	r2, r3, #15
 800853e:	4906      	ldr	r1, [pc, #24]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	4313      	orrs	r3, r2
 8008544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d005      	beq.n	8008560 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e086      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
 8008558:	52002000 	.word	0x52002000
 800855c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d010      	beq.n	800858e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	4b3f      	ldr	r3, [pc, #252]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008578:	429a      	cmp	r2, r3
 800857a:	d208      	bcs.n	800858e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800857c:	4b3c      	ldr	r3, [pc, #240]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	4939      	ldr	r1, [pc, #228]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 800858a:	4313      	orrs	r3, r2
 800858c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d010      	beq.n	80085bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	4b34      	ldr	r3, [pc, #208]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d208      	bcs.n	80085bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085aa:	4b31      	ldr	r3, [pc, #196]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	492e      	ldr	r1, [pc, #184]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d010      	beq.n	80085ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699a      	ldr	r2, [r3, #24]
 80085cc:	4b28      	ldr	r3, [pc, #160]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d208      	bcs.n	80085ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085d8:	4b25      	ldr	r3, [pc, #148]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	4922      	ldr	r1, [pc, #136]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d010      	beq.n	8008618 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69da      	ldr	r2, [r3, #28]
 80085fa:	4b1d      	ldr	r3, [pc, #116]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008602:	429a      	cmp	r2, r3
 8008604:	d208      	bcs.n	8008618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008606:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	4917      	ldr	r1, [pc, #92]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008614:	4313      	orrs	r3, r2
 8008616:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008618:	f000 f834 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 800861c:	4602      	mov	r2, r0
 800861e:	4b14      	ldr	r3, [pc, #80]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	4912      	ldr	r1, [pc, #72]	; (8008674 <HAL_RCC_ClockConfig+0x35c>)
 800862a:	5ccb      	ldrb	r3, [r1, r3]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
 8008634:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008636:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	4a0d      	ldr	r2, [pc, #52]	; (8008674 <HAL_RCC_ClockConfig+0x35c>)
 8008640:	5cd3      	ldrb	r3, [r2, r3]
 8008642:	f003 031f 	and.w	r3, r3, #31
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <HAL_RCC_ClockConfig+0x360>)
 800864e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008650:	4a0a      	ldr	r2, [pc, #40]	; (800867c <HAL_RCC_ClockConfig+0x364>)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008656:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <HAL_RCC_ClockConfig+0x368>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f7f9 fed6 	bl	800240c <HAL_InitTick>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	58024400 	.word	0x58024400
 8008674:	080142e4 	.word	0x080142e4
 8008678:	24000004 	.word	0x24000004
 800867c:	24000000 	.word	0x24000000
 8008680:	24000008 	.word	0x24000008

08008684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008684:	b480      	push	{r7}
 8008686:	b089      	sub	sp, #36	; 0x24
 8008688:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800868a:	4bb3      	ldr	r3, [pc, #716]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008692:	2b18      	cmp	r3, #24
 8008694:	f200 8155 	bhi.w	8008942 <HAL_RCC_GetSysClockFreq+0x2be>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	08008705 	.word	0x08008705
 80086a4:	08008943 	.word	0x08008943
 80086a8:	08008943 	.word	0x08008943
 80086ac:	08008943 	.word	0x08008943
 80086b0:	08008943 	.word	0x08008943
 80086b4:	08008943 	.word	0x08008943
 80086b8:	08008943 	.word	0x08008943
 80086bc:	08008943 	.word	0x08008943
 80086c0:	0800872b 	.word	0x0800872b
 80086c4:	08008943 	.word	0x08008943
 80086c8:	08008943 	.word	0x08008943
 80086cc:	08008943 	.word	0x08008943
 80086d0:	08008943 	.word	0x08008943
 80086d4:	08008943 	.word	0x08008943
 80086d8:	08008943 	.word	0x08008943
 80086dc:	08008943 	.word	0x08008943
 80086e0:	08008731 	.word	0x08008731
 80086e4:	08008943 	.word	0x08008943
 80086e8:	08008943 	.word	0x08008943
 80086ec:	08008943 	.word	0x08008943
 80086f0:	08008943 	.word	0x08008943
 80086f4:	08008943 	.word	0x08008943
 80086f8:	08008943 	.word	0x08008943
 80086fc:	08008943 	.word	0x08008943
 8008700:	08008737 	.word	0x08008737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008704:	4b94      	ldr	r3, [pc, #592]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008710:	4b91      	ldr	r3, [pc, #580]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	08db      	lsrs	r3, r3, #3
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	4a90      	ldr	r2, [pc, #576]	; (800895c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800871c:	fa22 f303 	lsr.w	r3, r2, r3
 8008720:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008722:	e111      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008724:	4b8d      	ldr	r3, [pc, #564]	; (800895c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008726:	61bb      	str	r3, [r7, #24]
      break;
 8008728:	e10e      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800872a:	4b8d      	ldr	r3, [pc, #564]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800872c:	61bb      	str	r3, [r7, #24]
      break;
 800872e:	e10b      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008730:	4b8c      	ldr	r3, [pc, #560]	; (8008964 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008732:	61bb      	str	r3, [r7, #24]
      break;
 8008734:	e108      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008736:	4b88      	ldr	r3, [pc, #544]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008740:	4b85      	ldr	r3, [pc, #532]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	091b      	lsrs	r3, r3, #4
 8008746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800874a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800874c:	4b82      	ldr	r3, [pc, #520]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008756:	4b80      	ldr	r3, [pc, #512]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	08db      	lsrs	r3, r3, #3
 800875c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 80e1 	beq.w	800893c <HAL_RCC_GetSysClockFreq+0x2b8>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	f000 8083 	beq.w	8008888 <HAL_RCC_GetSysClockFreq+0x204>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b02      	cmp	r3, #2
 8008786:	f200 80a1 	bhi.w	80088cc <HAL_RCC_GetSysClockFreq+0x248>
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <HAL_RCC_GetSysClockFreq+0x114>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d056      	beq.n	8008844 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008796:	e099      	b.n	80088cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008798:	4b6f      	ldr	r3, [pc, #444]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d02d      	beq.n	8008800 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087a4:	4b6c      	ldr	r3, [pc, #432]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	08db      	lsrs	r3, r3, #3
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	4a6b      	ldr	r2, [pc, #428]	; (800895c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
 80087b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ce:	4b62      	ldr	r3, [pc, #392]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087de:	ed97 6a02 	vldr	s12, [r7, #8]
 80087e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80087fe:	e087      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800896c <HAL_RCC_GetSysClockFreq+0x2e8>
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	4b51      	ldr	r3, [pc, #324]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008822:	ed97 6a02 	vldr	s12, [r7, #8]
 8008826:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008842:	e065      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008856:	4b40      	ldr	r3, [pc, #256]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008866:	ed97 6a02 	vldr	s12, [r7, #8]
 800886a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800886e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800887a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008886:	e043      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008974 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889a:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088ca:	e021      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088de:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80088f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800890e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008910:	4b11      	ldr	r3, [pc, #68]	; (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	0a5b      	lsrs	r3, r3, #9
 8008916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891a:	3301      	adds	r3, #1
 800891c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008928:	edd7 6a07 	vldr	s13, [r7, #28]
 800892c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008934:	ee17 3a90 	vmov	r3, s15
 8008938:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800893a:	e005      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	61bb      	str	r3, [r7, #24]
      break;
 8008940:	e002      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008944:	61bb      	str	r3, [r7, #24]
      break;
 8008946:	bf00      	nop
  }

  return sysclockfreq;
 8008948:	69bb      	ldr	r3, [r7, #24]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3724      	adds	r7, #36	; 0x24
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	58024400 	.word	0x58024400
 800895c:	03d09000 	.word	0x03d09000
 8008960:	003d0900 	.word	0x003d0900
 8008964:	017d7840 	.word	0x017d7840
 8008968:	46000000 	.word	0x46000000
 800896c:	4c742400 	.word	0x4c742400
 8008970:	4a742400 	.word	0x4a742400
 8008974:	4bbebc20 	.word	0x4bbebc20

08008978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800897e:	f7ff fe81 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 8008982:	4602      	mov	r2, r0
 8008984:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	490f      	ldr	r1, [pc, #60]	; (80089cc <HAL_RCC_GetHCLKFreq+0x54>)
 8008990:	5ccb      	ldrb	r3, [r1, r3]
 8008992:	f003 031f 	and.w	r3, r3, #31
 8008996:	fa22 f303 	lsr.w	r3, r2, r3
 800899a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	4a09      	ldr	r2, [pc, #36]	; (80089cc <HAL_RCC_GetHCLKFreq+0x54>)
 80089a6:	5cd3      	ldrb	r3, [r2, r3]
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80089b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089b6:	4a07      	ldr	r2, [pc, #28]	; (80089d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089bc:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80089be:	681b      	ldr	r3, [r3, #0]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	58024400 	.word	0x58024400
 80089cc:	080142e4 	.word	0x080142e4
 80089d0:	24000004 	.word	0x24000004
 80089d4:	24000000 	.word	0x24000000

080089d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089dc:	f7ff ffcc 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 80089e0:	4602      	mov	r2, r0
 80089e2:	4b06      	ldr	r3, [pc, #24]	; (80089fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	091b      	lsrs	r3, r3, #4
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	4904      	ldr	r1, [pc, #16]	; (8008a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80089ee:	5ccb      	ldrb	r3, [r1, r3]
 80089f0:	f003 031f 	and.w	r3, r3, #31
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	58024400 	.word	0x58024400
 8008a00:	080142e4 	.word	0x080142e4

08008a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a08:	f7ff ffb6 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	4904      	ldr	r1, [pc, #16]	; (8008a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a1a:	5ccb      	ldrb	r3, [r1, r3]
 8008a1c:	f003 031f 	and.w	r3, r3, #31
 8008a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	080142e4 	.word	0x080142e4

08008a30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	223f      	movs	r2, #63	; 0x3f
 8008a3e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a40:	4b1a      	ldr	r3, [pc, #104]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f003 0207 	and.w	r2, r3, #7
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008a58:	4b14      	ldr	r3, [pc, #80]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008a64:	4b11      	ldr	r3, [pc, #68]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008a88:	4b08      	ldr	r3, [pc, #32]	; (8008aac <HAL_RCC_GetClockConfig+0x7c>)
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <HAL_RCC_GetClockConfig+0x80>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 020f 	and.w	r2, r3, #15
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	601a      	str	r2, [r3, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	58024400 	.word	0x58024400
 8008ab0:	52002000 	.word	0x52002000

08008ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab8:	b0ca      	sub	sp, #296	; 0x128
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008ad8:	2500      	movs	r5, #0
 8008ada:	ea54 0305 	orrs.w	r3, r4, r5
 8008ade:	d049      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aea:	d02f      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008af0:	d828      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008af6:	d01a      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008afc:	d822      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b06:	d007      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b08:	e01c      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0a:	4bb8      	ldr	r3, [pc, #736]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	4ab7      	ldr	r2, [pc, #732]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b16:	e01a      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	2102      	movs	r1, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f002 fb61 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b2c:	e00f      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b32:	3328      	adds	r3, #40	; 0x28
 8008b34:	2102      	movs	r1, #2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f002 fc08 	bl	800b34c <RCCEx_PLL3_Config>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b42:	e004      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b56:	4ba5      	ldr	r3, [pc, #660]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b64:	4aa1      	ldr	r2, [pc, #644]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b66:	430b      	orrs	r3, r1
 8008b68:	6513      	str	r3, [r2, #80]	; 0x50
 8008b6a:	e003      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008b80:	f04f 0900 	mov.w	r9, #0
 8008b84:	ea58 0309 	orrs.w	r3, r8, r9
 8008b88:	d047      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d82a      	bhi.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008b94:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008bb1 	.word	0x08008bb1
 8008ba0:	08008bbf 	.word	0x08008bbf
 8008ba4:	08008bd5 	.word	0x08008bd5
 8008ba8:	08008bf3 	.word	0x08008bf3
 8008bac:	08008bf3 	.word	0x08008bf3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bb0:	4b8e      	ldr	r3, [pc, #568]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	4a8d      	ldr	r2, [pc, #564]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bbc:	e01a      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f002 fb0e 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd2:	e00f      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd8:	3328      	adds	r3, #40	; 0x28
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f002 fbb5 	bl	800b34c <RCCEx_PLL3_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008be8:	e004      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bf0:	e000      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bfc:	4b7b      	ldr	r3, [pc, #492]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c00:	f023 0107 	bic.w	r1, r3, #7
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0a:	4a78      	ldr	r2, [pc, #480]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6513      	str	r3, [r2, #80]	; 0x50
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008c26:	f04f 0b00 	mov.w	fp, #0
 8008c2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c2e:	d04c      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3a:	d030      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c40:	d829      	bhi.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c42:	2bc0      	cmp	r3, #192	; 0xc0
 8008c44:	d02d      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c46:	2bc0      	cmp	r3, #192	; 0xc0
 8008c48:	d825      	bhi.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c4a:	2b80      	cmp	r3, #128	; 0x80
 8008c4c:	d018      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008c4e:	2b80      	cmp	r3, #128	; 0x80
 8008c50:	d821      	bhi.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d007      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008c5a:	e01c      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c5c:	4b63      	ldr	r3, [pc, #396]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a62      	ldr	r2, [pc, #392]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c68:	e01c      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6e:	3308      	adds	r3, #8
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 fab8 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c7e:	e011      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c84:	3328      	adds	r3, #40	; 0x28
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f002 fb5f 	bl	800b34c <RCCEx_PLL3_Config>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c94:	e006      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c9c:	e002      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c9e:	bf00      	nop
 8008ca0:	e000      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cac:	4b4f      	ldr	r3, [pc, #316]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cba:	4a4c      	ldr	r2, [pc, #304]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	6513      	str	r3, [r2, #80]	; 0x50
 8008cc0:	e003      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008cd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ce0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	d053      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cf6:	d035      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cfc:	d82e      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008cfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d02:	d031      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d08:	d828      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d0e:	d01a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d14:	d822      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d1e:	d007      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d20:	e01c      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d22:	4b32      	ldr	r3, [pc, #200]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d26:	4a31      	ldr	r2, [pc, #196]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d2e:	e01c      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d34:	3308      	adds	r3, #8
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f002 fa55 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d44:	e011      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4a:	3328      	adds	r3, #40	; 0x28
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 fafc 	bl	800b34c <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d5a:	e006      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d62:	e002      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d64:	bf00      	nop
 8008d66:	e000      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d72:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d82:	4a1a      	ldr	r2, [pc, #104]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d84:	430b      	orrs	r3, r1
 8008d86:	6593      	str	r3, [r2, #88]	; 0x58
 8008d88:	e003      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008da2:	2300      	movs	r3, #0
 8008da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008da8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008dac:	460b      	mov	r3, r1
 8008dae:	4313      	orrs	r3, r2
 8008db0:	d056      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dbe:	d038      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dc4:	d831      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dca:	d034      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008dcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dd0:	d82b      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd6:	d01d      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ddc:	d825      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d006      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008de2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008de6:	d00a      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008de8:	e01f      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dea:	bf00      	nop
 8008dec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df0:	4ba2      	ldr	r3, [pc, #648]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4aa1      	ldr	r2, [pc, #644]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dfc:	e01c      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e02:	3308      	adds	r3, #8
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 f9ee 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e12:	e011      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e18:	3328      	adds	r3, #40	; 0x28
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 fa95 	bl	800b34c <RCCEx_PLL3_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e28:	e006      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e30:	e002      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10b      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e40:	4b8e      	ldr	r3, [pc, #568]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e44:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e50:	4a8a      	ldr	r2, [pc, #552]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e52:	430b      	orrs	r3, r1
 8008e54:	6593      	str	r3, [r2, #88]	; 0x58
 8008e56:	e003      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	d03a      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e86:	2b30      	cmp	r3, #48	; 0x30
 8008e88:	d01f      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008e8a:	2b30      	cmp	r3, #48	; 0x30
 8008e8c:	d819      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e8e:	2b20      	cmp	r3, #32
 8008e90:	d00c      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	d815      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d019      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008e9a:	2b10      	cmp	r3, #16
 8008e9c:	d111      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e9e:	4b77      	ldr	r3, [pc, #476]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	4a76      	ldr	r2, [pc, #472]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008eaa:	e011      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	2102      	movs	r1, #2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 f997 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ec0:	e006      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ec8:	e002      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008eca:	bf00      	nop
 8008ecc:	e000      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ed8:	4b68      	ldr	r3, [pc, #416]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008edc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee6:	4a65      	ldr	r2, [pc, #404]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008eec:	e003      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008f02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008f06:	2300      	movs	r3, #0
 8008f08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	d051      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f20:	d035      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f26:	d82e      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f2c:	d031      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f32:	d828      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f38:	d01a      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f3e:	d822      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f48:	d007      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008f4a:	e01c      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4c:	4b4b      	ldr	r3, [pc, #300]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a4a      	ldr	r2, [pc, #296]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f58:	e01c      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5e:	3308      	adds	r3, #8
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f002 f940 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f6e:	e011      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f74:	3328      	adds	r3, #40	; 0x28
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 f9e7 	bl	800b34c <RCCEx_PLL3_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f84:	e006      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f8c:	e002      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f8e:	bf00      	nop
 8008f90:	e000      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f9c:	4b37      	ldr	r3, [pc, #220]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008faa:	4a34      	ldr	r2, [pc, #208]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6513      	str	r3, [r2, #80]	; 0x50
 8008fb0:	e003      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	d056      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fe4:	d033      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fea:	d82c      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ff0:	d02f      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008ff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ff6:	d826      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ffc:	d02b      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009002:	d820      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009008:	d012      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800900a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800900e:	d81a      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d022      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009018:	d115      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901e:	3308      	adds	r3, #8
 8009020:	2101      	movs	r1, #1
 8009022:	4618      	mov	r0, r3
 8009024:	f002 f8e0 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800902e:	e015      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009034:	3328      	adds	r3, #40	; 0x28
 8009036:	2101      	movs	r1, #1
 8009038:	4618      	mov	r0, r3
 800903a:	f002 f987 	bl	800b34c <RCCEx_PLL3_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009044:	e00a      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800904c:	e006      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800904e:	bf00      	nop
 8009050:	e004      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009052:	bf00      	nop
 8009054:	e002      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009056:	bf00      	nop
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800905a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10d      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009068:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009072:	4a02      	ldr	r2, [pc, #8]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009074:	430b      	orrs	r3, r1
 8009076:	6513      	str	r3, [r2, #80]	; 0x50
 8009078:	e006      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800907a:	bf00      	nop
 800907c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800909e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4313      	orrs	r3, r2
 80090a6:	d055      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090b4:	d033      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80090b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090ba:	d82c      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c0:	d02f      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80090c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c6:	d826      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090cc:	d02b      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80090ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090d2:	d820      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d8:	d012      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090de:	d81a      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d022      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80090e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090e8:	d115      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ee:	3308      	adds	r3, #8
 80090f0:	2101      	movs	r1, #1
 80090f2:	4618      	mov	r0, r3
 80090f4:	f002 f878 	bl	800b1e8 <RCCEx_PLL2_Config>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090fe:	e015      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009104:	3328      	adds	r3, #40	; 0x28
 8009106:	2101      	movs	r1, #1
 8009108:	4618      	mov	r0, r3
 800910a:	f002 f91f 	bl	800b34c <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009114:	e00a      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800911c:	e006      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800911e:	bf00      	nop
 8009120:	e004      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009122:	bf00      	nop
 8009124:	e002      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800912a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009134:	4ba3      	ldr	r3, [pc, #652]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009138:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009140:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009144:	4a9f      	ldr	r2, [pc, #636]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009146:	430b      	orrs	r3, r1
 8009148:	6593      	str	r3, [r2, #88]	; 0x58
 800914a:	e003      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800916a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800916e:	460b      	mov	r3, r1
 8009170:	4313      	orrs	r3, r2
 8009172:	d037      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800917e:	d00e      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009184:	d816      	bhi.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d018      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800918a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800918e:	d111      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009190:	4b8c      	ldr	r3, [pc, #560]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	4a8b      	ldr	r2, [pc, #556]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800919c:	e00f      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a2:	3308      	adds	r3, #8
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 f81e 	bl	800b1e8 <RCCEx_PLL2_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091b2:	e004      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091ba:	e000      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80091bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091c6:	4b7f      	ldr	r3, [pc, #508]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80091ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d4:	4a7b      	ldr	r2, [pc, #492]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d6:	430b      	orrs	r3, r1
 80091d8:	6513      	str	r3, [r2, #80]	; 0x50
 80091da:	e003      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80091f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091f4:	2300      	movs	r3, #0
 80091f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80091fe:	460b      	mov	r3, r1
 8009200:	4313      	orrs	r3, r2
 8009202:	d039      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800920a:	2b03      	cmp	r3, #3
 800920c:	d81c      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800920e:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009251 	.word	0x08009251
 8009218:	08009225 	.word	0x08009225
 800921c:	08009233 	.word	0x08009233
 8009220:	08009251 	.word	0x08009251
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009224:	4b67      	ldr	r3, [pc, #412]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	4a66      	ldr	r2, [pc, #408]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800922a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800922e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009230:	e00f      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009236:	3308      	adds	r3, #8
 8009238:	2102      	movs	r1, #2
 800923a:	4618      	mov	r0, r3
 800923c:	f001 ffd4 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009246:	e004      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800924e:	e000      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800925a:	4b5a      	ldr	r3, [pc, #360]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925e:	f023 0103 	bic.w	r1, r3, #3
 8009262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009268:	4a56      	ldr	r2, [pc, #344]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800926a:	430b      	orrs	r3, r1
 800926c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800926e:	e003      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009288:	2300      	movs	r3, #0
 800928a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800928e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009292:	460b      	mov	r3, r1
 8009294:	4313      	orrs	r3, r2
 8009296:	f000 809f 	beq.w	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800929a:	4b4b      	ldr	r3, [pc, #300]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a4a      	ldr	r2, [pc, #296]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092a6:	f7f9 fb79 	bl	800299c <HAL_GetTick>
 80092aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092ae:	e00b      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092b0:	f7f9 fb74 	bl	800299c <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	2b64      	cmp	r3, #100	; 0x64
 80092be:	d903      	bls.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092c6:	e005      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092c8:	4b3f      	ldr	r3, [pc, #252]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0ed      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80092d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d179      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092dc:	4b39      	ldr	r3, [pc, #228]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092e8:	4053      	eors	r3, r2
 80092ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d015      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092f2:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092fe:	4b31      	ldr	r3, [pc, #196]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	4a30      	ldr	r2, [pc, #192]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009308:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800930a:	4b2e      	ldr	r3, [pc, #184]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930e:	4a2d      	ldr	r2, [pc, #180]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009314:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009316:	4a2b      	ldr	r2, [pc, #172]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800931c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932a:	d118      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800932c:	f7f9 fb36 	bl	800299c <HAL_GetTick>
 8009330:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009334:	e00d      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009336:	f7f9 fb31 	bl	800299c <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009340:	1ad2      	subs	r2, r2, r3
 8009342:	f241 3388 	movw	r3, #5000	; 0x1388
 8009346:	429a      	cmp	r2, r3
 8009348:	d903      	bls.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009350:	e005      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009352:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0eb      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800935e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009362:	2b00      	cmp	r3, #0
 8009364:	d129      	bne.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800936a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800936e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009376:	d10e      	bne.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009378:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009388:	091a      	lsrs	r2, r3, #4
 800938a:	4b10      	ldr	r3, [pc, #64]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800938c:	4013      	ands	r3, r2
 800938e:	4a0d      	ldr	r2, [pc, #52]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009390:	430b      	orrs	r3, r1
 8009392:	6113      	str	r3, [r2, #16]
 8009394:	e005      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009396:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	4a0a      	ldr	r2, [pc, #40]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800939c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093a0:	6113      	str	r3, [r2, #16]
 80093a2:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b2:	4a04      	ldr	r2, [pc, #16]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b4:	430b      	orrs	r3, r1
 80093b6:	6713      	str	r3, [r2, #112]	; 0x70
 80093b8:	e00e      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80093c2:	e009      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80093c4:	58024400 	.word	0x58024400
 80093c8:	58024800 	.word	0x58024800
 80093cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f002 0301 	and.w	r3, r2, #1
 80093e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093e8:	2300      	movs	r3, #0
 80093ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	f000 8089 	beq.w	800950c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009400:	2b28      	cmp	r3, #40	; 0x28
 8009402:	d86b      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009404:	a201      	add	r2, pc, #4	; (adr r2, 800940c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	080094e5 	.word	0x080094e5
 8009410:	080094dd 	.word	0x080094dd
 8009414:	080094dd 	.word	0x080094dd
 8009418:	080094dd 	.word	0x080094dd
 800941c:	080094dd 	.word	0x080094dd
 8009420:	080094dd 	.word	0x080094dd
 8009424:	080094dd 	.word	0x080094dd
 8009428:	080094dd 	.word	0x080094dd
 800942c:	080094b1 	.word	0x080094b1
 8009430:	080094dd 	.word	0x080094dd
 8009434:	080094dd 	.word	0x080094dd
 8009438:	080094dd 	.word	0x080094dd
 800943c:	080094dd 	.word	0x080094dd
 8009440:	080094dd 	.word	0x080094dd
 8009444:	080094dd 	.word	0x080094dd
 8009448:	080094dd 	.word	0x080094dd
 800944c:	080094c7 	.word	0x080094c7
 8009450:	080094dd 	.word	0x080094dd
 8009454:	080094dd 	.word	0x080094dd
 8009458:	080094dd 	.word	0x080094dd
 800945c:	080094dd 	.word	0x080094dd
 8009460:	080094dd 	.word	0x080094dd
 8009464:	080094dd 	.word	0x080094dd
 8009468:	080094dd 	.word	0x080094dd
 800946c:	080094e5 	.word	0x080094e5
 8009470:	080094dd 	.word	0x080094dd
 8009474:	080094dd 	.word	0x080094dd
 8009478:	080094dd 	.word	0x080094dd
 800947c:	080094dd 	.word	0x080094dd
 8009480:	080094dd 	.word	0x080094dd
 8009484:	080094dd 	.word	0x080094dd
 8009488:	080094dd 	.word	0x080094dd
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094dd 	.word	0x080094dd
 8009494:	080094dd 	.word	0x080094dd
 8009498:	080094dd 	.word	0x080094dd
 800949c:	080094dd 	.word	0x080094dd
 80094a0:	080094dd 	.word	0x080094dd
 80094a4:	080094dd 	.word	0x080094dd
 80094a8:	080094dd 	.word	0x080094dd
 80094ac:	080094e5 	.word	0x080094e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b4:	3308      	adds	r3, #8
 80094b6:	2101      	movs	r1, #1
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 fe95 	bl	800b1e8 <RCCEx_PLL2_Config>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094c4:	e00f      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ca:	3328      	adds	r3, #40	; 0x28
 80094cc:	2101      	movs	r1, #1
 80094ce:	4618      	mov	r0, r3
 80094d0:	f001 ff3c 	bl	800b34c <RCCEx_PLL3_Config>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094da:	e004      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094e2:	e000      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80094e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094ee:	4bbf      	ldr	r3, [pc, #764]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80094f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094fc:	4abb      	ldr	r2, [pc, #748]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094fe:	430b      	orrs	r3, r1
 8009500:	6553      	str	r3, [r2, #84]	; 0x54
 8009502:	e003      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800950c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f002 0302 	and.w	r3, r2, #2
 8009518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800951c:	2300      	movs	r3, #0
 800951e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009522:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009526:	460b      	mov	r3, r1
 8009528:	4313      	orrs	r3, r2
 800952a:	d041      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800952c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009532:	2b05      	cmp	r3, #5
 8009534:	d824      	bhi.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009589 	.word	0x08009589
 8009540:	08009555 	.word	0x08009555
 8009544:	0800956b 	.word	0x0800956b
 8009548:	08009589 	.word	0x08009589
 800954c:	08009589 	.word	0x08009589
 8009550:	08009589 	.word	0x08009589
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009558:	3308      	adds	r3, #8
 800955a:	2101      	movs	r1, #1
 800955c:	4618      	mov	r0, r3
 800955e:	f001 fe43 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009568:	e00f      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800956e:	3328      	adds	r3, #40	; 0x28
 8009570:	2101      	movs	r1, #1
 8009572:	4618      	mov	r0, r3
 8009574:	f001 feea 	bl	800b34c <RCCEx_PLL3_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800957e:	e004      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009586:	e000      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800958a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009592:	4b96      	ldr	r3, [pc, #600]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009596:	f023 0107 	bic.w	r1, r3, #7
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095a0:	4a92      	ldr	r2, [pc, #584]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095a2:	430b      	orrs	r3, r1
 80095a4:	6553      	str	r3, [r2, #84]	; 0x54
 80095a6:	e003      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f002 0304 	and.w	r3, r2, #4
 80095bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4313      	orrs	r3, r2
 80095ce:	d044      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80095d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095d8:	2b05      	cmp	r3, #5
 80095da:	d825      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80095dc:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80095de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e2:	bf00      	nop
 80095e4:	08009631 	.word	0x08009631
 80095e8:	080095fd 	.word	0x080095fd
 80095ec:	08009613 	.word	0x08009613
 80095f0:	08009631 	.word	0x08009631
 80095f4:	08009631 	.word	0x08009631
 80095f8:	08009631 	.word	0x08009631
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009600:	3308      	adds	r3, #8
 8009602:	2101      	movs	r1, #1
 8009604:	4618      	mov	r0, r3
 8009606:	f001 fdef 	bl	800b1e8 <RCCEx_PLL2_Config>
 800960a:	4603      	mov	r3, r0
 800960c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009610:	e00f      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009616:	3328      	adds	r3, #40	; 0x28
 8009618:	2101      	movs	r1, #1
 800961a:	4618      	mov	r0, r3
 800961c:	f001 fe96 	bl	800b34c <RCCEx_PLL3_Config>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009626:	e004      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800962e:	e000      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800963a:	4b6c      	ldr	r3, [pc, #432]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800963c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963e:	f023 0107 	bic.w	r1, r3, #7
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800964a:	4a68      	ldr	r2, [pc, #416]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800964c:	430b      	orrs	r3, r1
 800964e:	6593      	str	r3, [r2, #88]	; 0x58
 8009650:	e003      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800965a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	f002 0320 	and.w	r3, r2, #32
 8009666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800966a:	2300      	movs	r3, #0
 800966c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009674:	460b      	mov	r3, r1
 8009676:	4313      	orrs	r3, r2
 8009678:	d055      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009686:	d033      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968c:	d82c      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009692:	d02f      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d826      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800969a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800969e:	d02b      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80096a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a4:	d820      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096aa:	d012      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80096ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b0:	d81a      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d022      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80096b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ba:	d115      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c0:	3308      	adds	r3, #8
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 fd8f 	bl	800b1e8 <RCCEx_PLL2_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096d0:	e015      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d6:	3328      	adds	r3, #40	; 0x28
 80096d8:	2102      	movs	r1, #2
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 fe36 	bl	800b34c <RCCEx_PLL3_Config>
 80096e0:	4603      	mov	r3, r0
 80096e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096e6:	e00a      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ee:	e006      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096f0:	bf00      	nop
 80096f2:	e004      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096f4:	bf00      	nop
 80096f6:	e002      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009706:	4b39      	ldr	r3, [pc, #228]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009716:	4a35      	ldr	r2, [pc, #212]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009718:	430b      	orrs	r3, r1
 800971a:	6553      	str	r3, [r2, #84]	; 0x54
 800971c:	e003      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009736:	2300      	movs	r3, #0
 8009738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800973c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009740:	460b      	mov	r3, r1
 8009742:	4313      	orrs	r3, r2
 8009744:	d058      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800974e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009752:	d033      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009754:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009758:	d82c      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975e:	d02f      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009764:	d826      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800976a:	d02b      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800976c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009770:	d820      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009776:	d012      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800977c:	d81a      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d022      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009786:	d115      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978c:	3308      	adds	r3, #8
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fd29 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800979c:	e015      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800979e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a2:	3328      	adds	r3, #40	; 0x28
 80097a4:	2102      	movs	r1, #2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fdd0 	bl	800b34c <RCCEx_PLL3_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097b2:	e00a      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ba:	e006      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097bc:	bf00      	nop
 80097be:	e004      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097c0:	bf00      	nop
 80097c2:	e002      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097c4:	bf00      	nop
 80097c6:	e000      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10e      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097d2:	4b06      	ldr	r3, [pc, #24]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80097da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097e2:	4a02      	ldr	r2, [pc, #8]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6593      	str	r3, [r2, #88]	; 0x58
 80097e8:	e006      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80097ea:	bf00      	nop
 80097ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009808:	2300      	movs	r3, #0
 800980a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800980e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009812:	460b      	mov	r3, r1
 8009814:	4313      	orrs	r3, r2
 8009816:	d055      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009820:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009824:	d033      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009826:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800982a:	d82c      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800982c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009830:	d02f      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009836:	d826      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009838:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800983c:	d02b      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800983e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009842:	d820      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009848:	d012      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800984a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800984e:	d81a      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d022      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009858:	d115      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985e:	3308      	adds	r3, #8
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fcc0 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800986e:	e015      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009874:	3328      	adds	r3, #40	; 0x28
 8009876:	2102      	movs	r1, #2
 8009878:	4618      	mov	r0, r3
 800987a:	f001 fd67 	bl	800b34c <RCCEx_PLL3_Config>
 800987e:	4603      	mov	r3, r0
 8009880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009884:	e00a      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800988c:	e006      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800988e:	bf00      	nop
 8009890:	e004      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009892:	bf00      	nop
 8009894:	e002      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009896:	bf00      	nop
 8009898:	e000      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800989a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098a4:	4ba1      	ldr	r3, [pc, #644]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098b4:	4a9d      	ldr	r2, [pc, #628]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098b6:	430b      	orrs	r3, r1
 80098b8:	6593      	str	r3, [r2, #88]	; 0x58
 80098ba:	e003      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f002 0308 	and.w	r3, r2, #8
 80098d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098d4:	2300      	movs	r3, #0
 80098d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80098de:	460b      	mov	r3, r1
 80098e0:	4313      	orrs	r3, r2
 80098e2:	d01e      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f0:	d10c      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f6:	3328      	adds	r3, #40	; 0x28
 80098f8:	2102      	movs	r1, #2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fd26 	bl	800b34c <RCCEx_PLL3_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800990c:	4b87      	ldr	r3, [pc, #540]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800990e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009910:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800991c:	4a83      	ldr	r2, [pc, #524]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f002 0310 	and.w	r3, r2, #16
 800992e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009932:	2300      	movs	r3, #0
 8009934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009938:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800993c:	460b      	mov	r3, r1
 800993e:	4313      	orrs	r3, r2
 8009940:	d01e      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800994a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994e:	d10c      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009954:	3328      	adds	r3, #40	; 0x28
 8009956:	2102      	movs	r1, #2
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fcf7 	bl	800b34c <RCCEx_PLL3_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800996a:	4b70      	ldr	r3, [pc, #448]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800997a:	4a6c      	ldr	r2, [pc, #432]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800998c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009990:	2300      	movs	r3, #0
 8009992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009996:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800999a:	460b      	mov	r3, r1
 800999c:	4313      	orrs	r3, r2
 800999e:	d03e      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ac:	d022      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80099ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099b2:	d81b      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d003      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80099b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099bc:	d00b      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80099be:	e015      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c4:	3308      	adds	r3, #8
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 fc0d 	bl	800b1e8 <RCCEx_PLL2_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099d4:	e00f      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099da:	3328      	adds	r3, #40	; 0x28
 80099dc:	2102      	movs	r1, #2
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fcb4 	bl	800b34c <RCCEx_PLL3_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099ea:	e004      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099f2:	e000      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80099f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099fe:	4b4b      	ldr	r3, [pc, #300]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a0e:	4a47      	ldr	r2, [pc, #284]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6593      	str	r3, [r2, #88]	; 0x58
 8009a14:	e003      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009a2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d03b      	beq.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a46:	d01f      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a4c:	d818      	bhi.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a52:	d003      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a58:	d007      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009a5a:	e011      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a5c:	4b33      	ldr	r3, [pc, #204]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	4a32      	ldr	r2, [pc, #200]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a68:	e00f      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6e:	3328      	adds	r3, #40	; 0x28
 8009a70:	2101      	movs	r1, #1
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fc6a 	bl	800b34c <RCCEx_PLL3_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a7e:	e004      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a86:	e000      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10b      	bne.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a92:	4b26      	ldr	r3, [pc, #152]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa2:	4a22      	ldr	r2, [pc, #136]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	6553      	str	r3, [r2, #84]	; 0x54
 8009aa8:	e003      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009abe:	673b      	str	r3, [r7, #112]	; 0x70
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	677b      	str	r3, [r7, #116]	; 0x74
 8009ac4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4313      	orrs	r3, r2
 8009acc:	d034      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009adc:	d007      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009ade:	e011      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae0:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a11      	ldr	r2, [pc, #68]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009aec:	e00e      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af2:	3308      	adds	r3, #8
 8009af4:	2102      	movs	r1, #2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fb76 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b02:	e003      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10d      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b22:	4a02      	ldr	r2, [pc, #8]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b24:	430b      	orrs	r3, r1
 8009b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b28:	e006      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b2a:	bf00      	nop
 8009b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b46:	2300      	movs	r3, #0
 8009b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4313      	orrs	r3, r2
 8009b52:	d00c      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b58:	3328      	adds	r3, #40	; 0x28
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fbf5 	bl	800b34c <RCCEx_PLL3_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8009b80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009b84:	460b      	mov	r3, r1
 8009b86:	4313      	orrs	r3, r2
 8009b88:	d038      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b96:	d018      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b9c:	d811      	bhi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ba2:	d014      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ba8:	d80b      	bhi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d011      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb2:	d106      	bne.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb4:	4bc3      	ldr	r3, [pc, #780]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	4ac2      	ldr	r2, [pc, #776]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009bc0:	e008      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bc8:	e004      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bca:	bf00      	nop
 8009bcc:	e002      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bce:	bf00      	nop
 8009bd0:	e000      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bdc:	4bb9      	ldr	r3, [pc, #740]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bec:	4ab5      	ldr	r2, [pc, #724]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	6553      	str	r3, [r2, #84]	; 0x54
 8009bf2:	e003      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d009      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c18:	4baa      	ldr	r3, [pc, #680]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c26:	4aa7      	ldr	r2, [pc, #668]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009c38:	653b      	str	r3, [r7, #80]	; 0x50
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8009c3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d00a      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c48:	4b9e      	ldr	r3, [pc, #632]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c58:	4a9a      	ldr	r2, [pc, #616]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009c74:	460b      	mov	r3, r1
 8009c76:	4313      	orrs	r3, r2
 8009c78:	d009      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c7a:	4b92      	ldr	r3, [pc, #584]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	4a8e      	ldr	r2, [pc, #568]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c8a:	430b      	orrs	r3, r1
 8009c8c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009ca0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	d00e      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009caa:	4b86      	ldr	r3, [pc, #536]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	4a85      	ldr	r2, [pc, #532]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cb4:	6113      	str	r3, [r2, #16]
 8009cb6:	4b83      	ldr	r3, [pc, #524]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb8:	6919      	ldr	r1, [r3, #16]
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009cc2:	4a80      	ldr	r2, [pc, #512]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d009      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ce4:	4b77      	ldr	r3, [pc, #476]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf2:	4a74      	ldr	r2, [pc, #464]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009d04:	633b      	str	r3, [r7, #48]	; 0x30
 8009d06:	2300      	movs	r3, #0
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
 8009d0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4313      	orrs	r3, r2
 8009d12:	d00a      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d14:	4b6b      	ldr	r3, [pc, #428]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d18:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d24:	4a67      	ldr	r2, [pc, #412]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d26:	430b      	orrs	r3, r1
 8009d28:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	2100      	movs	r1, #0
 8009d34:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009d40:	460b      	mov	r3, r1
 8009d42:	4313      	orrs	r3, r2
 8009d44:	d011      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fa4a 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009d54:	4603      	mov	r3, r0
 8009d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	2100      	movs	r1, #0
 8009d74:	6239      	str	r1, [r7, #32]
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d80:	460b      	mov	r3, r1
 8009d82:	4313      	orrs	r3, r2
 8009d84:	d011      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 fa2a 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	2100      	movs	r1, #0
 8009db4:	61b9      	str	r1, [r7, #24]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	61fb      	str	r3, [r7, #28]
 8009dbc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	d011      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dca:	3308      	adds	r3, #8
 8009dcc:	2102      	movs	r1, #2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 fa0a 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	2100      	movs	r1, #0
 8009df4:	6139      	str	r1, [r7, #16]
 8009df6:	f003 0308 	and.w	r3, r3, #8
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e00:	460b      	mov	r3, r1
 8009e02:	4313      	orrs	r3, r2
 8009e04:	d011      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0a:	3328      	adds	r3, #40	; 0x28
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 fa9c 	bl	800b34c <RCCEx_PLL3_Config>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	2100      	movs	r1, #0
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e40:	460b      	mov	r3, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	d011      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4a:	3328      	adds	r3, #40	; 0x28
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 fa7c 	bl	800b34c <RCCEx_PLL3_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	2100      	movs	r1, #0
 8009e74:	6039      	str	r1, [r7, #0]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e80:	460b      	mov	r3, r1
 8009e82:	4313      	orrs	r3, r2
 8009e84:	d011      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	3328      	adds	r3, #40	; 0x28
 8009e8c:	2102      	movs	r1, #2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f001 fa5c 	bl	800b34c <RCCEx_PLL3_Config>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009eaa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e000      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ec4:	58024400 	.word	0x58024400

08009ec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b090      	sub	sp, #64	; 0x40
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009eda:	430b      	orrs	r3, r1
 8009edc:	f040 8094 	bne.w	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ee0:	4b9e      	ldr	r3, [pc, #632]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee4:	f003 0307 	and.w	r3, r3, #7
 8009ee8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	f200 8087 	bhi.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009ef2:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f35 	.word	0x08009f35
 8009f00:	08009f5d 	.word	0x08009f5d
 8009f04:	08009ff9 	.word	0x08009ff9
 8009f08:	08009f85 	.word	0x08009f85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f0c:	4b93      	ldr	r3, [pc, #588]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f18:	d108      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 f810 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f28:	f000 bd45 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f30:	f000 bd41 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f34:	4b89      	ldr	r3, [pc, #548]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f40:	d108      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fd54 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f50:	f000 bd31 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f58:	f000 bd2d 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f5c:	4b7f      	ldr	r3, [pc, #508]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f68:	d108      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f6a:	f107 030c 	add.w	r3, r7, #12
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fe94 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f78:	f000 bd1d 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f80:	f000 bd19 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f84:	4b75      	ldr	r3, [pc, #468]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f8e:	4b73      	ldr	r3, [pc, #460]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d10c      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fa0:	4b6e      	ldr	r3, [pc, #440]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	08db      	lsrs	r3, r3, #3
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	4a6d      	ldr	r2, [pc, #436]	; (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fac:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb2:	e01f      	b.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fb4:	4b69      	ldr	r3, [pc, #420]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc0:	d106      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc8:	d102      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fca:	4b66      	ldr	r3, [pc, #408]	; (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fce:	e011      	b.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fd0:	4b62      	ldr	r3, [pc, #392]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fdc:	d106      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe4:	d102      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fe6:	4b60      	ldr	r3, [pc, #384]	; (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fea:	e003      	b.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ff0:	f000 bce1 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ff4:	f000 bcdf 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ff8:	4b5c      	ldr	r3, [pc, #368]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ffc:	f000 bcdb 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a004:	f000 bcd7 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a010:	430b      	orrs	r3, r1
 800a012:	f040 80ad 	bne.w	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a016:	4b51      	ldr	r3, [pc, #324]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a01e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a026:	d056      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a02e:	f200 8090 	bhi.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	2bc0      	cmp	r3, #192	; 0xc0
 800a036:	f000 8088 	beq.w	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	2bc0      	cmp	r3, #192	; 0xc0
 800a03e:	f200 8088 	bhi.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	2b80      	cmp	r3, #128	; 0x80
 800a046:	d032      	beq.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	2b80      	cmp	r3, #128	; 0x80
 800a04c:	f200 8081 	bhi.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d014      	beq.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a05c:	e079      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a05e:	4b3f      	ldr	r3, [pc, #252]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a06a:	d108      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a06c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a070:	4618      	mov	r0, r3
 800a072:	f000 ff67 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a07a:	f000 bc9c 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a082:	f000 bc98 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a086:	4b35      	ldr	r3, [pc, #212]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a08e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a092:	d108      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a094:	f107 0318 	add.w	r3, r7, #24
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fcab 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a2:	f000 bc88 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0aa:	f000 bc84 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ae:	4b2b      	ldr	r3, [pc, #172]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ba:	d108      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0bc:	f107 030c 	add.w	r3, r7, #12
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fdeb 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ca:	f000 bc74 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0d2:	f000 bc70 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0d6:	4b21      	ldr	r3, [pc, #132]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d10c      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d109      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	08db      	lsrs	r3, r3, #3
 800a0f8:	f003 0303 	and.w	r3, r3, #3
 800a0fc:	4a18      	ldr	r2, [pc, #96]	; (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a102:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a104:	e01f      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a106:	4b15      	ldr	r3, [pc, #84]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a112:	d106      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a11a:	d102      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a120:	e011      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a122:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a12e:	d106      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a136:	d102      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a138:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a13c:	e003      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a142:	f000 bc38 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a146:	f000 bc36 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a14a:	4b08      	ldr	r3, [pc, #32]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14e:	f000 bc32 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a156:	f000 bc2e 	b.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400
 800a160:	03d09000 	.word	0x03d09000
 800a164:	003d0900 	.word	0x003d0900
 800a168:	017d7840 	.word	0x017d7840
 800a16c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a174:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a178:	430b      	orrs	r3, r1
 800a17a:	f040 809c 	bne.w	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a17e:	4b9e      	ldr	r3, [pc, #632]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a182:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a186:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a18e:	d054      	beq.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a196:	f200 808b 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1a0:	f000 8083 	beq.w	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1aa:	f200 8081 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1b4:	d02f      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1bc:	d878      	bhi.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1ca:	d012      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a1cc:	e070      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1ce:	4b8a      	ldr	r3, [pc, #552]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 feaf 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ea:	e3e4      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f0:	e3e1      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1f2:	4b81      	ldr	r3, [pc, #516]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1fe:	d107      	bne.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a200:	f107 0318 	add.w	r3, r7, #24
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fbf5 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a20e:	e3d2      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a214:	e3cf      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a216:	4b78      	ldr	r3, [pc, #480]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a222:	d107      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 fd37 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a232:	e3c0      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a238:	e3bd      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a23a:	4b6f      	ldr	r3, [pc, #444]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a242:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a244:	4b6c      	ldr	r3, [pc, #432]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d10c      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a256:	4b68      	ldr	r3, [pc, #416]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	4a66      	ldr	r2, [pc, #408]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a262:	fa22 f303 	lsr.w	r3, r2, r3
 800a266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a268:	e01e      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a26a:	4b63      	ldr	r3, [pc, #396]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a276:	d106      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a27e:	d102      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a280:	4b5f      	ldr	r3, [pc, #380]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a284:	e010      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a286:	4b5c      	ldr	r3, [pc, #368]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a292:	d106      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a29a:	d102      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a29c:	4b59      	ldr	r3, [pc, #356]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a0:	e002      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a2a6:	e386      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2a8:	e385      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2aa:	4b57      	ldr	r3, [pc, #348]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ae:	e382      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b4:	e37f      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a2be:	430b      	orrs	r3, r1
 800a2c0:	f040 80a7 	bne.w	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a2c4:	4b4c      	ldr	r3, [pc, #304]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a2cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2d4:	d055      	beq.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2dc:	f200 8096 	bhi.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2e6:	f000 8084 	beq.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2f0:	f200 808c 	bhi.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2fa:	d030      	beq.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a302:	f200 8083 	bhi.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d004      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a312:	d012      	beq.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a314:	e07a      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a316:	4b38      	ldr	r3, [pc, #224]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fe0b 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a332:	e340      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a338:	e33d      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a33a:	4b2f      	ldr	r3, [pc, #188]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a346:	d107      	bne.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a348:	f107 0318 	add.w	r3, r7, #24
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fb51 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a356:	e32e      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35c:	e32b      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a35e:	4b26      	ldr	r3, [pc, #152]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a36a:	d107      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a36c:	f107 030c 	add.w	r3, r7, #12
 800a370:	4618      	mov	r0, r3
 800a372:	f000 fc93 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a37a:	e31c      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a380:	e319      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a382:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a38a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a38c:	4b1a      	ldr	r3, [pc, #104]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b04      	cmp	r3, #4
 800a396:	d10c      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a39e:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	08db      	lsrs	r3, r3, #3
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	4a14      	ldr	r2, [pc, #80]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b0:	e01e      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3b2:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3be:	d106      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3c6:	d102      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3c8:	4b0d      	ldr	r3, [pc, #52]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3cc:	e010      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3da:	d106      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e2:	d102      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3e4:	4b07      	ldr	r3, [pc, #28]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e8:	e002      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a3ee:	e2e2      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3f0:	e2e1      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3f2:	4b05      	ldr	r3, [pc, #20]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f6:	e2de      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	03d09000 	.word	0x03d09000
 800a400:	003d0900 	.word	0x003d0900
 800a404:	017d7840 	.word	0x017d7840
 800a408:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a410:	e2d1      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a416:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a41a:	430b      	orrs	r3, r1
 800a41c:	f040 809c 	bne.w	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a420:	4b93      	ldr	r3, [pc, #588]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a424:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a428:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a430:	d054      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a438:	f200 808b 	bhi.w	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a442:	f000 8083 	beq.w	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a44c:	f200 8081 	bhi.w	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a456:	d02f      	beq.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a45e:	d878      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a46c:	d012      	beq.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a46e:	e070      	b.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a470:	4b7f      	ldr	r3, [pc, #508]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a47c:	d107      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a47e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a482:	4618      	mov	r0, r3
 800a484:	f000 fd5e 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48c:	e293      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a492:	e290      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a494:	4b76      	ldr	r3, [pc, #472]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a49c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4a0:	d107      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a2:	f107 0318 	add.w	r3, r7, #24
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 faa4 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b0:	e281      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4b6:	e27e      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b8:	4b6d      	ldr	r3, [pc, #436]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c4:	d107      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fbe6 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d4:	e26f      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4da:	e26c      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4dc:	4b64      	ldr	r3, [pc, #400]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e6:	4b62      	ldr	r3, [pc, #392]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d10c      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f8:	4b5d      	ldr	r3, [pc, #372]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	4a5c      	ldr	r2, [pc, #368]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50a:	e01e      	b.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a50c:	4b58      	ldr	r3, [pc, #352]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a518:	d106      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a520:	d102      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a522:	4b55      	ldr	r3, [pc, #340]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a526:	e010      	b.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a528:	4b51      	ldr	r3, [pc, #324]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a534:	d106      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a53c:	d102      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a53e:	4b4f      	ldr	r3, [pc, #316]	; (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a542:	e002      	b.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a548:	e235      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a54a:	e234      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a54c:	4b4c      	ldr	r3, [pc, #304]	; (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a550:	e231      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a556:	e22e      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a560:	430b      	orrs	r3, r1
 800a562:	f040 808f 	bne.w	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a566:	4b42      	ldr	r3, [pc, #264]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a56e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a576:	d06b      	beq.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a57e:	d874      	bhi.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a586:	d056      	beq.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a58e:	d86c      	bhi.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a596:	d03b      	beq.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a59e:	d864      	bhi.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5a6:	d021      	beq.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5ae:	d85c      	bhi.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d004      	beq.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5bc:	d004      	beq.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a5be:	e054      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5c0:	f7fe fa0a 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800a5c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5c6:	e1f6      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5c8:	4b29      	ldr	r3, [pc, #164]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d4:	d107      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5d6:	f107 0318 	add.w	r3, r7, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fa0a 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e4:	e1e7      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ea:	e1e4      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ec:	4b20      	ldr	r3, [pc, #128]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5f8:	d107      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5fa:	f107 030c 	add.w	r3, r7, #12
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fb4c 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a608:	e1d5      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a60e:	e1d2      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a610:	4b17      	ldr	r3, [pc, #92]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d109      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a61c:	4b14      	ldr	r3, [pc, #80]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	08db      	lsrs	r3, r3, #3
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	4a13      	ldr	r2, [pc, #76]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a628:	fa22 f303 	lsr.w	r3, r2, r3
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a62e:	e1c2      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a634:	e1bf      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a636:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a642:	d102      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a648:	e1b5      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64e:	e1b2      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a65c:	d102      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a662:	e1a8      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a668:	e1a5      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a66e:	e1a2      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a670:	58024400 	.word	0x58024400
 800a674:	03d09000 	.word	0x03d09000
 800a678:	003d0900 	.word	0x003d0900
 800a67c:	017d7840 	.word	0x017d7840
 800a680:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a688:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a68c:	430b      	orrs	r3, r1
 800a68e:	d173      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a690:	4b9c      	ldr	r3, [pc, #624]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a698:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6a0:	d02f      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6a8:	d863      	bhi.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d004      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6b6:	d012      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a6b8:	e05b      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6ba:	4b92      	ldr	r3, [pc, #584]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6c6:	d107      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c8:	f107 0318 	add.w	r3, r7, #24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f991 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d6:	e16e      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6dc:	e16b      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6de:	4b89      	ldr	r3, [pc, #548]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ea:	d107      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fad3 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fa:	e15c      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a700:	e159      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a702:	4b80      	ldr	r3, [pc, #512]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a70c:	4b7d      	ldr	r3, [pc, #500]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b04      	cmp	r3, #4
 800a716:	d10c      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d109      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a71e:	4b79      	ldr	r3, [pc, #484]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	08db      	lsrs	r3, r3, #3
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	4a77      	ldr	r2, [pc, #476]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a72a:	fa22 f303 	lsr.w	r3, r2, r3
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a730:	e01e      	b.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a732:	4b74      	ldr	r3, [pc, #464]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a73e:	d106      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a746:	d102      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a748:	4b70      	ldr	r3, [pc, #448]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a74c:	e010      	b.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a74e:	4b6d      	ldr	r3, [pc, #436]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a75a:	d106      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a762:	d102      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a764:	4b6a      	ldr	r3, [pc, #424]	; (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a768:	e002      	b.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a76e:	e122      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a770:	e121      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a776:	e11e      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a77c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a780:	430b      	orrs	r3, r1
 800a782:	d133      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a784:	4b5f      	ldr	r3, [pc, #380]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a78c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a79a:	d012      	beq.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a79c:	e023      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a79e:	4b59      	ldr	r3, [pc, #356]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7aa:	d107      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fbc7 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ba:	e0fc      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7c0:	e0f9      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c2:	4b50      	ldr	r3, [pc, #320]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7ce:	d107      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d0:	f107 0318 	add.w	r3, r7, #24
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 f90d 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7de:	e0ea      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7e4:	e0e7      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ea:	e0e4      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	f040 808d 	bne.w	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7fa:	4b42      	ldr	r3, [pc, #264]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a802:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a80a:	d06b      	beq.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a812:	d874      	bhi.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81a:	d056      	beq.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a822:	d86c      	bhi.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a82a:	d03b      	beq.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a832:	d864      	bhi.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a83a:	d021      	beq.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a842:	d85c      	bhi.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a850:	d004      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a852:	e054      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a854:	f000 f8b8 	bl	800a9c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a858:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a85a:	e0ac      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a85c:	4b29      	ldr	r3, [pc, #164]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a868:	d107      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86a:	f107 0318 	add.w	r3, r7, #24
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f8c0 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a878:	e09d      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a87e:	e09a      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a880:	4b20      	ldr	r3, [pc, #128]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a88c:	d107      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a88e:	f107 030c 	add.w	r3, r7, #12
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fa02 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89c:	e08b      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a2:	e088      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8a4:	4b17      	ldr	r3, [pc, #92]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d109      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8b0:	4b14      	ldr	r3, [pc, #80]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	08db      	lsrs	r3, r3, #3
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	4a13      	ldr	r2, [pc, #76]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c2:	e078      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c8:	e075      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8ca:	4b0e      	ldr	r3, [pc, #56]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8d6:	d102      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a8d8:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8dc:	e06b      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e2:	e068      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8f0:	d102      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a8f2:	4b07      	ldr	r3, [pc, #28]	; (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f6:	e05e      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fc:	e05b      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a902:	e058      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a904:	58024400 	.word	0x58024400
 800a908:	03d09000 	.word	0x03d09000
 800a90c:	003d0900 	.word	0x003d0900
 800a910:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a918:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a91c:	430b      	orrs	r3, r1
 800a91e:	d148      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a920:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a928:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a930:	d02a      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a938:	d838      	bhi.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d004      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a946:	d00d      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a948:	e030      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a94a:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a956:	d102      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e02b      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a962:	e028      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a964:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a970:	d107      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fae4 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a980:	e019      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a986:	e016      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a988:	4b0d      	ldr	r3, [pc, #52]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a994:	d107      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a996:	f107 0318 	add.w	r3, r7, #24
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f82a 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a4:	e007      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9aa:	e004      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b0:	e001      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3740      	adds	r7, #64	; 0x40
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	017d7840 	.word	0x017d7840

0800a9c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9cc:	f7fd ffd4 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	4904      	ldr	r1, [pc, #16]	; (800a9f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9de:	5ccb      	ldrb	r3, [r1, r3]
 800a9e0:	f003 031f 	and.w	r3, r3, #31
 800a9e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	58024400 	.word	0x58024400
 800a9f0:	080142e4 	.word	0x080142e4

0800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b089      	sub	sp, #36	; 0x24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9fc:	4ba1      	ldr	r3, [pc, #644]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa06:	4b9f      	ldr	r3, [pc, #636]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0a:	0b1b      	lsrs	r3, r3, #12
 800aa0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa12:	4b9c      	ldr	r3, [pc, #624]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa1e:	4b99      	ldr	r3, [pc, #612]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa22:	08db      	lsrs	r3, r3, #3
 800aa24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8111 	beq.w	800ac64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	f000 8083 	beq.w	800ab50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	f200 80a1 	bhi.w	800ab94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d056      	beq.n	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa5e:	e099      	b.n	800ab94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa60:	4b88      	ldr	r3, [pc, #544]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d02d      	beq.n	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa6c:	4b85      	ldr	r3, [pc, #532]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	08db      	lsrs	r3, r3, #3
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	4a84      	ldr	r2, [pc, #528]	; (800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa96:	4b7b      	ldr	r3, [pc, #492]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aac6:	e087      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b6a      	ldr	r3, [pc, #424]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0a:	e065      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1e:	4b59      	ldr	r3, [pc, #356]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4e:	e043      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab62:	4b48      	ldr	r3, [pc, #288]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab92:	e021      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba6:	4b37      	ldr	r3, [pc, #220]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800abd8:	4b2a      	ldr	r3, [pc, #168]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	0a5b      	lsrs	r3, r3, #9
 800abde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfe:	ee17 2a90 	vmov	r2, s15
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac06:	4b1f      	ldr	r3, [pc, #124]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac2c:	ee17 2a90 	vmov	r2, s15
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	0e1b      	lsrs	r3, r3, #24
 800ac3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac5a:	ee17 2a90 	vmov	r2, s15
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac62:	e008      	b.n	800ac76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	609a      	str	r2, [r3, #8]
}
 800ac76:	bf00      	nop
 800ac78:	3724      	adds	r7, #36	; 0x24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	58024400 	.word	0x58024400
 800ac88:	03d09000 	.word	0x03d09000
 800ac8c:	46000000 	.word	0x46000000
 800ac90:	4c742400 	.word	0x4c742400
 800ac94:	4a742400 	.word	0x4a742400
 800ac98:	4bbebc20 	.word	0x4bbebc20

0800ac9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b089      	sub	sp, #36	; 0x24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aca4:	4ba1      	ldr	r3, [pc, #644]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acae:	4b9f      	ldr	r3, [pc, #636]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	0d1b      	lsrs	r3, r3, #20
 800acb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acba:	4b9c      	ldr	r3, [pc, #624]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800acc6:	4b99      	ldr	r3, [pc, #612]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acca:	08db      	lsrs	r3, r3, #3
 800accc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	fb02 f303 	mul.w	r3, r2, r3
 800acd6:	ee07 3a90 	vmov	s15, r3
 800acda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8111 	beq.w	800af0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b02      	cmp	r3, #2
 800acee:	f000 8083 	beq.w	800adf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	f200 80a1 	bhi.w	800ae3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d056      	beq.n	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad06:	e099      	b.n	800ae3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad08:	4b88      	ldr	r3, [pc, #544]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d02d      	beq.n	800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad14:	4b85      	ldr	r3, [pc, #532]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	08db      	lsrs	r3, r3, #3
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	4a84      	ldr	r2, [pc, #528]	; (800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad20:	fa22 f303 	lsr.w	r3, r2, r3
 800ad24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	ee07 3a90 	vmov	s15, r3
 800ad2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b7b      	ldr	r3, [pc, #492]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad52:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad6e:	e087      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad82:	4b6a      	ldr	r3, [pc, #424]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad96:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb2:	e065      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc6:	4b59      	ldr	r3, [pc, #356]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adda:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adf6:	e043      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0a:	4b48      	ldr	r3, [pc, #288]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae3a:	e021      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4e:	4b37      	ldr	r3, [pc, #220]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae62:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae80:	4b2a      	ldr	r3, [pc, #168]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae84:	0a5b      	lsrs	r3, r3, #9
 800ae86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea6:	ee17 2a90 	vmov	r2, s15
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aeae:	4b1f      	ldr	r3, [pc, #124]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	0c1b      	lsrs	r3, r3, #16
 800aeb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb8:	ee07 3a90 	vmov	s15, r3
 800aebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed4:	ee17 2a90 	vmov	r2, s15
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aedc:	4b13      	ldr	r3, [pc, #76]	; (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee0:	0e1b      	lsrs	r3, r3, #24
 800aee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aef6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aefa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af02:	ee17 2a90 	vmov	r2, s15
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af0a:	e008      	b.n	800af1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	609a      	str	r2, [r3, #8]
}
 800af1e:	bf00      	nop
 800af20:	3724      	adds	r7, #36	; 0x24
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	58024400 	.word	0x58024400
 800af30:	03d09000 	.word	0x03d09000
 800af34:	46000000 	.word	0x46000000
 800af38:	4c742400 	.word	0x4c742400
 800af3c:	4a742400 	.word	0x4a742400
 800af40:	4bbebc20 	.word	0x4bbebc20

0800af44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af44:	b480      	push	{r7}
 800af46:	b089      	sub	sp, #36	; 0x24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af4c:	4ba0      	ldr	r3, [pc, #640]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af50:	f003 0303 	and.w	r3, r3, #3
 800af54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af56:	4b9e      	ldr	r3, [pc, #632]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5a:	091b      	lsrs	r3, r3, #4
 800af5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af62:	4b9b      	ldr	r3, [pc, #620]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af6c:	4b98      	ldr	r3, [pc, #608]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	fb02 f303 	mul.w	r3, r2, r3
 800af7c:	ee07 3a90 	vmov	s15, r3
 800af80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8111 	beq.w	800b1b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b02      	cmp	r3, #2
 800af94:	f000 8083 	beq.w	800b09e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	f200 80a1 	bhi.w	800b0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d056      	beq.n	800b05a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afac:	e099      	b.n	800b0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afae:	4b88      	ldr	r3, [pc, #544]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0320 	and.w	r3, r3, #32
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d02d      	beq.n	800b016 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afba:	4b85      	ldr	r3, [pc, #532]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	08db      	lsrs	r3, r3, #3
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	4a83      	ldr	r2, [pc, #524]	; (800b1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afc6:	fa22 f303 	lsr.w	r3, r2, r3
 800afca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe4:	4b7a      	ldr	r3, [pc, #488]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afec:	ee07 3a90 	vmov	s15, r3
 800aff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aff8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800affc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b010:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b014:	e087      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	ee07 3a90 	vmov	s15, r3
 800b01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b020:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b028:	4b69      	ldr	r3, [pc, #420]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b030:	ee07 3a90 	vmov	s15, r3
 800b034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b038:	ed97 6a03 	vldr	s12, [r7, #12]
 800b03c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b058:	e065      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	ee07 3a90 	vmov	s15, r3
 800b060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b064:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06c:	4b58      	ldr	r3, [pc, #352]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b080:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b09c:	e043      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	ee07 3a90 	vmov	s15, r3
 800b0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b0:	4b47      	ldr	r3, [pc, #284]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b8:	ee07 3a90 	vmov	s15, r3
 800b0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0e0:	e021      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	ee07 3a90 	vmov	s15, r3
 800b0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f4:	4b36      	ldr	r3, [pc, #216]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b104:	ed97 6a03 	vldr	s12, [r7, #12]
 800b108:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b10c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b124:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b126:	4b2a      	ldr	r3, [pc, #168]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12a:	0a5b      	lsrs	r3, r3, #9
 800b12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b130:	ee07 3a90 	vmov	s15, r3
 800b134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b13c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b140:	edd7 6a07 	vldr	s13, [r7, #28]
 800b144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b14c:	ee17 2a90 	vmov	r2, s15
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b154:	4b1e      	ldr	r3, [pc, #120]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b158:	0c1b      	lsrs	r3, r3, #16
 800b15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b16a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b16e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b17a:	ee17 2a90 	vmov	r2, s15
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b182:	4b13      	ldr	r3, [pc, #76]	; (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b186:	0e1b      	lsrs	r3, r3, #24
 800b188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a8:	ee17 2a90 	vmov	r2, s15
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1b0:	e008      	b.n	800b1c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	609a      	str	r2, [r3, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	3724      	adds	r7, #36	; 0x24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	03d09000 	.word	0x03d09000
 800b1d8:	46000000 	.word	0x46000000
 800b1dc:	4c742400 	.word	0x4c742400
 800b1e0:	4a742400 	.word	0x4a742400
 800b1e4:	4bbebc20 	.word	0x4bbebc20

0800b1e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1f6:	4b53      	ldr	r3, [pc, #332]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d101      	bne.n	800b206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e099      	b.n	800b33a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b206:	4b4f      	ldr	r3, [pc, #316]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a4e      	ldr	r2, [pc, #312]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b212:	f7f7 fbc3 	bl	800299c <HAL_GetTick>
 800b216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b218:	e008      	b.n	800b22c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b21a:	f7f7 fbbf 	bl	800299c <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	2b02      	cmp	r3, #2
 800b226:	d901      	bls.n	800b22c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e086      	b.n	800b33a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b22c:	4b45      	ldr	r3, [pc, #276]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1f0      	bne.n	800b21a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b238:	4b42      	ldr	r3, [pc, #264]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	031b      	lsls	r3, r3, #12
 800b246:	493f      	ldr	r1, [pc, #252]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b248:	4313      	orrs	r3, r2
 800b24a:	628b      	str	r3, [r1, #40]	; 0x28
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	3b01      	subs	r3, #1
 800b252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	025b      	lsls	r3, r3, #9
 800b25e:	b29b      	uxth	r3, r3
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	3b01      	subs	r3, #1
 800b268:	041b      	lsls	r3, r3, #16
 800b26a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	3b01      	subs	r3, #1
 800b276:	061b      	lsls	r3, r3, #24
 800b278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b27c:	4931      	ldr	r1, [pc, #196]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b282:	4b30      	ldr	r3, [pc, #192]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b286:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	492d      	ldr	r1, [pc, #180]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b290:	4313      	orrs	r3, r2
 800b292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b294:	4b2b      	ldr	r3, [pc, #172]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b298:	f023 0220 	bic.w	r2, r3, #32
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	4928      	ldr	r1, [pc, #160]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2a6:	4b27      	ldr	r3, [pc, #156]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2aa:	4a26      	ldr	r2, [pc, #152]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2ac:	f023 0310 	bic.w	r3, r3, #16
 800b2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2b2:	4b24      	ldr	r3, [pc, #144]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2b6:	4b24      	ldr	r3, [pc, #144]	; (800b348 <RCCEx_PLL2_Config+0x160>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	69d2      	ldr	r2, [r2, #28]
 800b2be:	00d2      	lsls	r2, r2, #3
 800b2c0:	4920      	ldr	r1, [pc, #128]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2c6:	4b1f      	ldr	r3, [pc, #124]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ca:	4a1e      	ldr	r2, [pc, #120]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	f043 0310 	orr.w	r3, r3, #16
 800b2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d106      	bne.n	800b2e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2d8:	4b1a      	ldr	r3, [pc, #104]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	4a19      	ldr	r2, [pc, #100]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2e4:	e00f      	b.n	800b306 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d106      	bne.n	800b2fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2ec:	4b15      	ldr	r3, [pc, #84]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	4a14      	ldr	r2, [pc, #80]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2f8:	e005      	b.n	800b306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2fa:	4b12      	ldr	r3, [pc, #72]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fe:	4a11      	ldr	r2, [pc, #68]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b306:	4b0f      	ldr	r3, [pc, #60]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a0e      	ldr	r2, [pc, #56]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b30c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b312:	f7f7 fb43 	bl	800299c <HAL_GetTick>
 800b316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b318:	e008      	b.n	800b32c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b31a:	f7f7 fb3f 	bl	800299c <HAL_GetTick>
 800b31e:	4602      	mov	r2, r0
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	2b02      	cmp	r3, #2
 800b326:	d901      	bls.n	800b32c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	e006      	b.n	800b33a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b32c:	4b05      	ldr	r3, [pc, #20]	; (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0f0      	beq.n	800b31a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	58024400 	.word	0x58024400
 800b348:	ffff0007 	.word	0xffff0007

0800b34c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b35a:	4b53      	ldr	r3, [pc, #332]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35e:	f003 0303 	and.w	r3, r3, #3
 800b362:	2b03      	cmp	r3, #3
 800b364:	d101      	bne.n	800b36a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e099      	b.n	800b49e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b36a:	4b4f      	ldr	r3, [pc, #316]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a4e      	ldr	r2, [pc, #312]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b376:	f7f7 fb11 	bl	800299c <HAL_GetTick>
 800b37a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b37c:	e008      	b.n	800b390 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b37e:	f7f7 fb0d 	bl	800299c <HAL_GetTick>
 800b382:	4602      	mov	r2, r0
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d901      	bls.n	800b390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e086      	b.n	800b49e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b390:	4b45      	ldr	r3, [pc, #276]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1f0      	bne.n	800b37e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b39c:	4b42      	ldr	r3, [pc, #264]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	051b      	lsls	r3, r3, #20
 800b3aa:	493f      	ldr	r1, [pc, #252]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	628b      	str	r3, [r1, #40]	; 0x28
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	025b      	lsls	r3, r3, #9
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	041b      	lsls	r3, r3, #16
 800b3ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3d2:	431a      	orrs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	061b      	lsls	r3, r3, #24
 800b3dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3e0:	4931      	ldr	r1, [pc, #196]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3e6:	4b30      	ldr	r3, [pc, #192]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	492d      	ldr	r1, [pc, #180]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3f8:	4b2b      	ldr	r3, [pc, #172]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	4928      	ldr	r1, [pc, #160]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b406:	4313      	orrs	r3, r2
 800b408:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b40a:	4b27      	ldr	r3, [pc, #156]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	4a26      	ldr	r2, [pc, #152]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b416:	4b24      	ldr	r3, [pc, #144]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b41a:	4b24      	ldr	r3, [pc, #144]	; (800b4ac <RCCEx_PLL3_Config+0x160>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	69d2      	ldr	r2, [r2, #28]
 800b422:	00d2      	lsls	r2, r2, #3
 800b424:	4920      	ldr	r1, [pc, #128]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b426:	4313      	orrs	r3, r2
 800b428:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b42a:	4b1f      	ldr	r3, [pc, #124]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42e:	4a1e      	ldr	r2, [pc, #120]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d106      	bne.n	800b44a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a19      	ldr	r2, [pc, #100]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b446:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b448:	e00f      	b.n	800b46a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d106      	bne.n	800b45e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b450:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a14      	ldr	r2, [pc, #80]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b45c:	e005      	b.n	800b46a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b462:	4a11      	ldr	r2, [pc, #68]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b468:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b46a:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a0e      	ldr	r2, [pc, #56]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b476:	f7f7 fa91 	bl	800299c <HAL_GetTick>
 800b47a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b47c:	e008      	b.n	800b490 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b47e:	f7f7 fa8d 	bl	800299c <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d901      	bls.n	800b490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e006      	b.n	800b49e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b490:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f0      	beq.n	800b47e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	58024400 	.word	0x58024400
 800b4ac:	ffff0007 	.word	0xffff0007

0800b4b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e10f      	b.n	800b6e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a87      	ldr	r2, [pc, #540]	; (800b6ec <HAL_SPI_Init+0x23c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d00f      	beq.n	800b4f2 <HAL_SPI_Init+0x42>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a86      	ldr	r2, [pc, #536]	; (800b6f0 <HAL_SPI_Init+0x240>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d00a      	beq.n	800b4f2 <HAL_SPI_Init+0x42>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a84      	ldr	r2, [pc, #528]	; (800b6f4 <HAL_SPI_Init+0x244>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d005      	beq.n	800b4f2 <HAL_SPI_Init+0x42>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	2b0f      	cmp	r3, #15
 800b4ec:	d901      	bls.n	800b4f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e0f7      	b.n	800b6e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f900 	bl	800b6f8 <SPI_GetPacketSize>
 800b4f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a7b      	ldr	r2, [pc, #492]	; (800b6ec <HAL_SPI_Init+0x23c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00c      	beq.n	800b51e <HAL_SPI_Init+0x6e>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a79      	ldr	r2, [pc, #484]	; (800b6f0 <HAL_SPI_Init+0x240>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d007      	beq.n	800b51e <HAL_SPI_Init+0x6e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a78      	ldr	r2, [pc, #480]	; (800b6f4 <HAL_SPI_Init+0x244>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d002      	beq.n	800b51e <HAL_SPI_Init+0x6e>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d811      	bhi.n	800b542 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b522:	4a72      	ldr	r2, [pc, #456]	; (800b6ec <HAL_SPI_Init+0x23c>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d009      	beq.n	800b53c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a70      	ldr	r2, [pc, #448]	; (800b6f0 <HAL_SPI_Init+0x240>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d004      	beq.n	800b53c <HAL_SPI_Init+0x8c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a6f      	ldr	r2, [pc, #444]	; (800b6f4 <HAL_SPI_Init+0x244>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d104      	bne.n	800b546 <HAL_SPI_Init+0x96>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b10      	cmp	r3, #16
 800b540:	d901      	bls.n	800b546 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e0cd      	b.n	800b6e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7f6 fd9c 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f022 0201 	bic.w	r2, r2, #1
 800b576:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b582:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b58c:	d119      	bne.n	800b5c2 <HAL_SPI_Init+0x112>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b596:	d103      	bne.n	800b5a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10c      	bne.n	800b5c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5b0:	d107      	bne.n	800b5c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00f      	beq.n	800b5ee <HAL_SPI_Init+0x13e>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	2b06      	cmp	r3, #6
 800b5d4:	d90b      	bls.n	800b5ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	e007      	b.n	800b5fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69da      	ldr	r2, [r3, #28]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b606:	431a      	orrs	r2, r3
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b610:	ea42 0103 	orr.w	r1, r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	430a      	orrs	r2, r1
 800b61e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	431a      	orrs	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62e:	431a      	orrs	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b652:	431a      	orrs	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	431a      	orrs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b65e:	ea42 0103 	orr.w	r1, r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	430a      	orrs	r2, r1
 800b66c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d113      	bne.n	800b69e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b688:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b69c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0201 	bic.w	r2, r2, #1
 800b6ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	40013000 	.word	0x40013000
 800b6f0:	40003800 	.word	0x40003800
 800b6f4:	40003c00 	.word	0x40003c00

0800b6f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b704:	095b      	lsrs	r3, r3, #5
 800b706:	3301      	adds	r3, #1
 800b708:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	3301      	adds	r3, #1
 800b710:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	3307      	adds	r3, #7
 800b716:	08db      	lsrs	r3, r3, #3
 800b718:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e049      	b.n	800b7d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7f6 fd07 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2202      	movs	r2, #2
 800b75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3304      	adds	r3, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f000 fea9 	bl	800c4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d001      	beq.n	800b7f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e054      	b.n	800b89e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68da      	ldr	r2, [r3, #12]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f042 0201 	orr.w	r2, r2, #1
 800b80a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a26      	ldr	r2, [pc, #152]	; (800b8ac <HAL_TIM_Base_Start_IT+0xd0>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d022      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b81e:	d01d      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a22      	ldr	r2, [pc, #136]	; (800b8b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d018      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a21      	ldr	r2, [pc, #132]	; (800b8b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d013      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1f      	ldr	r2, [pc, #124]	; (800b8b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d00e      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1e      	ldr	r2, [pc, #120]	; (800b8bc <HAL_TIM_Base_Start_IT+0xe0>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d009      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a1c      	ldr	r2, [pc, #112]	; (800b8c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d004      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a1b      	ldr	r2, [pc, #108]	; (800b8c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d115      	bne.n	800b888 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689a      	ldr	r2, [r3, #8]
 800b862:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <HAL_TIM_Base_Start_IT+0xec>)
 800b864:	4013      	ands	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b06      	cmp	r3, #6
 800b86c:	d015      	beq.n	800b89a <HAL_TIM_Base_Start_IT+0xbe>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b874:	d011      	beq.n	800b89a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f042 0201 	orr.w	r2, r2, #1
 800b884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b886:	e008      	b.n	800b89a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f042 0201 	orr.w	r2, r2, #1
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	e000      	b.n	800b89c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b89a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	40010000 	.word	0x40010000
 800b8b0:	40000400 	.word	0x40000400
 800b8b4:	40000800 	.word	0x40000800
 800b8b8:	40000c00 	.word	0x40000c00
 800b8bc:	40010400 	.word	0x40010400
 800b8c0:	40001800 	.word	0x40001800
 800b8c4:	40014000 	.word	0x40014000
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d109      	bne.n	800b8f4 <HAL_TIM_OC_Start_IT+0x28>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	bf14      	ite	ne
 800b8ec:	2301      	movne	r3, #1
 800b8ee:	2300      	moveq	r3, #0
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	e03c      	b.n	800b96e <HAL_TIM_OC_Start_IT+0xa2>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d109      	bne.n	800b90e <HAL_TIM_OC_Start_IT+0x42>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b01      	cmp	r3, #1
 800b904:	bf14      	ite	ne
 800b906:	2301      	movne	r3, #1
 800b908:	2300      	moveq	r3, #0
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	e02f      	b.n	800b96e <HAL_TIM_OC_Start_IT+0xa2>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b08      	cmp	r3, #8
 800b912:	d109      	bne.n	800b928 <HAL_TIM_OC_Start_IT+0x5c>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	bf14      	ite	ne
 800b920:	2301      	movne	r3, #1
 800b922:	2300      	moveq	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	e022      	b.n	800b96e <HAL_TIM_OC_Start_IT+0xa2>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b0c      	cmp	r3, #12
 800b92c:	d109      	bne.n	800b942 <HAL_TIM_OC_Start_IT+0x76>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b01      	cmp	r3, #1
 800b938:	bf14      	ite	ne
 800b93a:	2301      	movne	r3, #1
 800b93c:	2300      	moveq	r3, #0
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	e015      	b.n	800b96e <HAL_TIM_OC_Start_IT+0xa2>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b10      	cmp	r3, #16
 800b946:	d109      	bne.n	800b95c <HAL_TIM_OC_Start_IT+0x90>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b01      	cmp	r3, #1
 800b952:	bf14      	ite	ne
 800b954:	2301      	movne	r3, #1
 800b956:	2300      	moveq	r3, #0
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	e008      	b.n	800b96e <HAL_TIM_OC_Start_IT+0xa2>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b01      	cmp	r3, #1
 800b966:	bf14      	ite	ne
 800b968:	2301      	movne	r3, #1
 800b96a:	2300      	moveq	r3, #0
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e0ec      	b.n	800bb50 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <HAL_TIM_OC_Start_IT+0xba>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b984:	e023      	b.n	800b9ce <HAL_TIM_OC_Start_IT+0x102>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b04      	cmp	r3, #4
 800b98a:	d104      	bne.n	800b996 <HAL_TIM_OC_Start_IT+0xca>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b994:	e01b      	b.n	800b9ce <HAL_TIM_OC_Start_IT+0x102>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d104      	bne.n	800b9a6 <HAL_TIM_OC_Start_IT+0xda>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9a4:	e013      	b.n	800b9ce <HAL_TIM_OC_Start_IT+0x102>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b0c      	cmp	r3, #12
 800b9aa:	d104      	bne.n	800b9b6 <HAL_TIM_OC_Start_IT+0xea>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9b4:	e00b      	b.n	800b9ce <HAL_TIM_OC_Start_IT+0x102>
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2b10      	cmp	r3, #16
 800b9ba:	d104      	bne.n	800b9c6 <HAL_TIM_OC_Start_IT+0xfa>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9c4:	e003      	b.n	800b9ce <HAL_TIM_OC_Start_IT+0x102>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b0c      	cmp	r3, #12
 800b9d2:	d841      	bhi.n	800ba58 <HAL_TIM_OC_Start_IT+0x18c>
 800b9d4:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <HAL_TIM_OC_Start_IT+0x110>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800ba11 	.word	0x0800ba11
 800b9e0:	0800ba59 	.word	0x0800ba59
 800b9e4:	0800ba59 	.word	0x0800ba59
 800b9e8:	0800ba59 	.word	0x0800ba59
 800b9ec:	0800ba23 	.word	0x0800ba23
 800b9f0:	0800ba59 	.word	0x0800ba59
 800b9f4:	0800ba59 	.word	0x0800ba59
 800b9f8:	0800ba59 	.word	0x0800ba59
 800b9fc:	0800ba35 	.word	0x0800ba35
 800ba00:	0800ba59 	.word	0x0800ba59
 800ba04:	0800ba59 	.word	0x0800ba59
 800ba08:	0800ba59 	.word	0x0800ba59
 800ba0c:	0800ba47 	.word	0x0800ba47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68da      	ldr	r2, [r3, #12]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0202 	orr.w	r2, r2, #2
 800ba1e:	60da      	str	r2, [r3, #12]
      break;
 800ba20:	e01d      	b.n	800ba5e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68da      	ldr	r2, [r3, #12]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f042 0204 	orr.w	r2, r2, #4
 800ba30:	60da      	str	r2, [r3, #12]
      break;
 800ba32:	e014      	b.n	800ba5e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f042 0208 	orr.w	r2, r2, #8
 800ba42:	60da      	str	r2, [r3, #12]
      break;
 800ba44:	e00b      	b.n	800ba5e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68da      	ldr	r2, [r3, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f042 0210 	orr.w	r2, r2, #16
 800ba54:	60da      	str	r2, [r3, #12]
      break;
 800ba56:	e002      	b.n	800ba5e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d174      	bne.n	800bb4e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 f943 	bl	800ccf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a38      	ldr	r2, [pc, #224]	; (800bb58 <HAL_TIM_OC_Start_IT+0x28c>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d013      	beq.n	800baa4 <HAL_TIM_OC_Start_IT+0x1d8>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a36      	ldr	r2, [pc, #216]	; (800bb5c <HAL_TIM_OC_Start_IT+0x290>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d00e      	beq.n	800baa4 <HAL_TIM_OC_Start_IT+0x1d8>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a35      	ldr	r2, [pc, #212]	; (800bb60 <HAL_TIM_OC_Start_IT+0x294>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d009      	beq.n	800baa4 <HAL_TIM_OC_Start_IT+0x1d8>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a33      	ldr	r2, [pc, #204]	; (800bb64 <HAL_TIM_OC_Start_IT+0x298>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d004      	beq.n	800baa4 <HAL_TIM_OC_Start_IT+0x1d8>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a32      	ldr	r2, [pc, #200]	; (800bb68 <HAL_TIM_OC_Start_IT+0x29c>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d101      	bne.n	800baa8 <HAL_TIM_OC_Start_IT+0x1dc>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <HAL_TIM_OC_Start_IT+0x1de>
 800baa8:	2300      	movs	r3, #0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d007      	beq.n	800babe <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800babc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a25      	ldr	r2, [pc, #148]	; (800bb58 <HAL_TIM_OC_Start_IT+0x28c>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d022      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad0:	d01d      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a25      	ldr	r2, [pc, #148]	; (800bb6c <HAL_TIM_OC_Start_IT+0x2a0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d018      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a23      	ldr	r2, [pc, #140]	; (800bb70 <HAL_TIM_OC_Start_IT+0x2a4>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d013      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a22      	ldr	r2, [pc, #136]	; (800bb74 <HAL_TIM_OC_Start_IT+0x2a8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00e      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a19      	ldr	r2, [pc, #100]	; (800bb5c <HAL_TIM_OC_Start_IT+0x290>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d009      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a1e      	ldr	r2, [pc, #120]	; (800bb78 <HAL_TIM_OC_Start_IT+0x2ac>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d004      	beq.n	800bb0e <HAL_TIM_OC_Start_IT+0x242>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a15      	ldr	r2, [pc, #84]	; (800bb60 <HAL_TIM_OC_Start_IT+0x294>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d115      	bne.n	800bb3a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	4b19      	ldr	r3, [pc, #100]	; (800bb7c <HAL_TIM_OC_Start_IT+0x2b0>)
 800bb16:	4013      	ands	r3, r2
 800bb18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b06      	cmp	r3, #6
 800bb1e:	d015      	beq.n	800bb4c <HAL_TIM_OC_Start_IT+0x280>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb26:	d011      	beq.n	800bb4c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f042 0201 	orr.w	r2, r2, #1
 800bb36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb38:	e008      	b.n	800bb4c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f042 0201 	orr.w	r2, r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e000      	b.n	800bb4e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb4c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	40010000 	.word	0x40010000
 800bb5c:	40010400 	.word	0x40010400
 800bb60:	40014000 	.word	0x40014000
 800bb64:	40014400 	.word	0x40014400
 800bb68:	40014800 	.word	0x40014800
 800bb6c:	40000400 	.word	0x40000400
 800bb70:	40000800 	.word	0x40000800
 800bb74:	40000c00 	.word	0x40000c00
 800bb78:	40001800 	.word	0x40001800
 800bb7c:	00010007 	.word	0x00010007

0800bb80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e049      	b.n	800bc26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f841 	bl	800bc2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	f000 fc80 	bl	800c4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc36:	bf00      	nop
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
	...

0800bc44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d109      	bne.n	800bc68 <HAL_TIM_PWM_Start+0x24>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	bf14      	ite	ne
 800bc60:	2301      	movne	r3, #1
 800bc62:	2300      	moveq	r3, #0
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	e03c      	b.n	800bce2 <HAL_TIM_PWM_Start+0x9e>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d109      	bne.n	800bc82 <HAL_TIM_PWM_Start+0x3e>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	bf14      	ite	ne
 800bc7a:	2301      	movne	r3, #1
 800bc7c:	2300      	moveq	r3, #0
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	e02f      	b.n	800bce2 <HAL_TIM_PWM_Start+0x9e>
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b08      	cmp	r3, #8
 800bc86:	d109      	bne.n	800bc9c <HAL_TIM_PWM_Start+0x58>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	bf14      	ite	ne
 800bc94:	2301      	movne	r3, #1
 800bc96:	2300      	moveq	r3, #0
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	e022      	b.n	800bce2 <HAL_TIM_PWM_Start+0x9e>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b0c      	cmp	r3, #12
 800bca0:	d109      	bne.n	800bcb6 <HAL_TIM_PWM_Start+0x72>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	bf14      	ite	ne
 800bcae:	2301      	movne	r3, #1
 800bcb0:	2300      	moveq	r3, #0
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	e015      	b.n	800bce2 <HAL_TIM_PWM_Start+0x9e>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d109      	bne.n	800bcd0 <HAL_TIM_PWM_Start+0x8c>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	bf14      	ite	ne
 800bcc8:	2301      	movne	r3, #1
 800bcca:	2300      	moveq	r3, #0
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	e008      	b.n	800bce2 <HAL_TIM_PWM_Start+0x9e>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	bf14      	ite	ne
 800bcdc:	2301      	movne	r3, #1
 800bcde:	2300      	moveq	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e0a1      	b.n	800be2e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d104      	bne.n	800bcfa <HAL_TIM_PWM_Start+0xb6>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcf8:	e023      	b.n	800bd42 <HAL_TIM_PWM_Start+0xfe>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d104      	bne.n	800bd0a <HAL_TIM_PWM_Start+0xc6>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2202      	movs	r2, #2
 800bd04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd08:	e01b      	b.n	800bd42 <HAL_TIM_PWM_Start+0xfe>
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b08      	cmp	r3, #8
 800bd0e:	d104      	bne.n	800bd1a <HAL_TIM_PWM_Start+0xd6>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd18:	e013      	b.n	800bd42 <HAL_TIM_PWM_Start+0xfe>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b0c      	cmp	r3, #12
 800bd1e:	d104      	bne.n	800bd2a <HAL_TIM_PWM_Start+0xe6>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2202      	movs	r2, #2
 800bd24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd28:	e00b      	b.n	800bd42 <HAL_TIM_PWM_Start+0xfe>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b10      	cmp	r3, #16
 800bd2e:	d104      	bne.n	800bd3a <HAL_TIM_PWM_Start+0xf6>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2202      	movs	r2, #2
 800bd34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd38:	e003      	b.n	800bd42 <HAL_TIM_PWM_Start+0xfe>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2202      	movs	r2, #2
 800bd3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2201      	movs	r2, #1
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 ffd4 	bl	800ccf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a38      	ldr	r2, [pc, #224]	; (800be38 <HAL_TIM_PWM_Start+0x1f4>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d013      	beq.n	800bd82 <HAL_TIM_PWM_Start+0x13e>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a37      	ldr	r2, [pc, #220]	; (800be3c <HAL_TIM_PWM_Start+0x1f8>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d00e      	beq.n	800bd82 <HAL_TIM_PWM_Start+0x13e>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a35      	ldr	r2, [pc, #212]	; (800be40 <HAL_TIM_PWM_Start+0x1fc>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d009      	beq.n	800bd82 <HAL_TIM_PWM_Start+0x13e>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a34      	ldr	r2, [pc, #208]	; (800be44 <HAL_TIM_PWM_Start+0x200>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d004      	beq.n	800bd82 <HAL_TIM_PWM_Start+0x13e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a32      	ldr	r2, [pc, #200]	; (800be48 <HAL_TIM_PWM_Start+0x204>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d101      	bne.n	800bd86 <HAL_TIM_PWM_Start+0x142>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <HAL_TIM_PWM_Start+0x144>
 800bd86:	2300      	movs	r3, #0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d007      	beq.n	800bd9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a25      	ldr	r2, [pc, #148]	; (800be38 <HAL_TIM_PWM_Start+0x1f4>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d022      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdae:	d01d      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a25      	ldr	r2, [pc, #148]	; (800be4c <HAL_TIM_PWM_Start+0x208>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d018      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a24      	ldr	r2, [pc, #144]	; (800be50 <HAL_TIM_PWM_Start+0x20c>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d013      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a22      	ldr	r2, [pc, #136]	; (800be54 <HAL_TIM_PWM_Start+0x210>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d00e      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a1a      	ldr	r2, [pc, #104]	; (800be3c <HAL_TIM_PWM_Start+0x1f8>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d009      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a1e      	ldr	r2, [pc, #120]	; (800be58 <HAL_TIM_PWM_Start+0x214>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d004      	beq.n	800bdec <HAL_TIM_PWM_Start+0x1a8>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a16      	ldr	r2, [pc, #88]	; (800be40 <HAL_TIM_PWM_Start+0x1fc>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d115      	bne.n	800be18 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689a      	ldr	r2, [r3, #8]
 800bdf2:	4b1a      	ldr	r3, [pc, #104]	; (800be5c <HAL_TIM_PWM_Start+0x218>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b06      	cmp	r3, #6
 800bdfc:	d015      	beq.n	800be2a <HAL_TIM_PWM_Start+0x1e6>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be04:	d011      	beq.n	800be2a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f042 0201 	orr.w	r2, r2, #1
 800be14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be16:	e008      	b.n	800be2a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f042 0201 	orr.w	r2, r2, #1
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	e000      	b.n	800be2c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	40010000 	.word	0x40010000
 800be3c:	40010400 	.word	0x40010400
 800be40:	40014000 	.word	0x40014000
 800be44:	40014400 	.word	0x40014400
 800be48:	40014800 	.word	0x40014800
 800be4c:	40000400 	.word	0x40000400
 800be50:	40000800 	.word	0x40000800
 800be54:	40000c00 	.word	0x40000c00
 800be58:	40001800 	.word	0x40001800
 800be5c:	00010007 	.word	0x00010007

0800be60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f003 0302 	and.w	r3, r3, #2
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d020      	beq.n	800bec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f003 0302 	and.w	r3, r3, #2
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01b      	beq.n	800bec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f06f 0202 	mvn.w	r2, #2
 800be94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	f003 0303 	and.w	r3, r3, #3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d003      	beq.n	800beb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 faec 	bl	800c488 <HAL_TIM_IC_CaptureCallback>
 800beb0:	e005      	b.n	800bebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7f4 fbe6 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 faef 	bl	800c49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	f003 0304 	and.w	r3, r3, #4
 800beca:	2b00      	cmp	r3, #0
 800becc:	d020      	beq.n	800bf10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01b      	beq.n	800bf10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f06f 0204 	mvn.w	r2, #4
 800bee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2202      	movs	r2, #2
 800bee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fac6 	bl	800c488 <HAL_TIM_IC_CaptureCallback>
 800befc:	e005      	b.n	800bf0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7f4 fbc0 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fac9 	bl	800c49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d020      	beq.n	800bf5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f003 0308 	and.w	r3, r3, #8
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01b      	beq.n	800bf5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f06f 0208 	mvn.w	r2, #8
 800bf2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2204      	movs	r2, #4
 800bf32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 faa0 	bl	800c488 <HAL_TIM_IC_CaptureCallback>
 800bf48:	e005      	b.n	800bf56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7f4 fb9a 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 faa3 	bl	800c49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	f003 0310 	and.w	r3, r3, #16
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d020      	beq.n	800bfa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f003 0310 	and.w	r3, r3, #16
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01b      	beq.n	800bfa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f06f 0210 	mvn.w	r2, #16
 800bf78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fa7a 	bl	800c488 <HAL_TIM_IC_CaptureCallback>
 800bf94:	e005      	b.n	800bfa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7f4 fb74 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fa7d 	bl	800c49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00c      	beq.n	800bfcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d007      	beq.n	800bfcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f06f 0201 	mvn.w	r2, #1
 800bfc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7f5 fe2a 	bl	8001c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d104      	bne.n	800bfe0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00c      	beq.n	800bffa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800bff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 ffbb 	bl	800cf70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00c      	beq.n	800c01e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d007      	beq.n	800c01e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 ffb3 	bl	800cf84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00c      	beq.n	800c042 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fa37 	bl	800c4b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f003 0320 	and.w	r3, r3, #32
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00c      	beq.n	800c066 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b00      	cmp	r3, #0
 800c054:	d007      	beq.n	800c066 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f06f 0220 	mvn.w	r2, #32
 800c05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 ff7b 	bl	800cf5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c086:	2b01      	cmp	r3, #1
 800c088:	d101      	bne.n	800c08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c08a:	2302      	movs	r3, #2
 800c08c:	e0ff      	b.n	800c28e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b14      	cmp	r3, #20
 800c09a:	f200 80f0 	bhi.w	800c27e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c09e:	a201      	add	r2, pc, #4	; (adr r2, 800c0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0f9 	.word	0x0800c0f9
 800c0a8:	0800c27f 	.word	0x0800c27f
 800c0ac:	0800c27f 	.word	0x0800c27f
 800c0b0:	0800c27f 	.word	0x0800c27f
 800c0b4:	0800c139 	.word	0x0800c139
 800c0b8:	0800c27f 	.word	0x0800c27f
 800c0bc:	0800c27f 	.word	0x0800c27f
 800c0c0:	0800c27f 	.word	0x0800c27f
 800c0c4:	0800c17b 	.word	0x0800c17b
 800c0c8:	0800c27f 	.word	0x0800c27f
 800c0cc:	0800c27f 	.word	0x0800c27f
 800c0d0:	0800c27f 	.word	0x0800c27f
 800c0d4:	0800c1bb 	.word	0x0800c1bb
 800c0d8:	0800c27f 	.word	0x0800c27f
 800c0dc:	0800c27f 	.word	0x0800c27f
 800c0e0:	0800c27f 	.word	0x0800c27f
 800c0e4:	0800c1fd 	.word	0x0800c1fd
 800c0e8:	0800c27f 	.word	0x0800c27f
 800c0ec:	0800c27f 	.word	0x0800c27f
 800c0f0:	0800c27f 	.word	0x0800c27f
 800c0f4:	0800c23d 	.word	0x0800c23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fa86 	bl	800c610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699a      	ldr	r2, [r3, #24]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f042 0208 	orr.w	r2, r2, #8
 800c112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0204 	bic.w	r2, r2, #4
 800c122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6999      	ldr	r1, [r3, #24]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	691a      	ldr	r2, [r3, #16]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	619a      	str	r2, [r3, #24]
      break;
 800c136:	e0a5      	b.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 faf6 	bl	800c730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	699a      	ldr	r2, [r3, #24]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	699a      	ldr	r2, [r3, #24]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6999      	ldr	r1, [r3, #24]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	021a      	lsls	r2, r3, #8
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	619a      	str	r2, [r3, #24]
      break;
 800c178:	e084      	b.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68b9      	ldr	r1, [r7, #8]
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fb5f 	bl	800c844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69da      	ldr	r2, [r3, #28]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f042 0208 	orr.w	r2, r2, #8
 800c194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f022 0204 	bic.w	r2, r2, #4
 800c1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69d9      	ldr	r1, [r3, #28]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	691a      	ldr	r2, [r3, #16]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	61da      	str	r2, [r3, #28]
      break;
 800c1b8:	e064      	b.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 fbc7 	bl	800c954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69da      	ldr	r2, [r3, #28]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69da      	ldr	r2, [r3, #28]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	69d9      	ldr	r1, [r3, #28]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	021a      	lsls	r2, r3, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	61da      	str	r2, [r3, #28]
      break;
 800c1fa:	e043      	b.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68b9      	ldr	r1, [r7, #8]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 fc10 	bl	800ca28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f042 0208 	orr.w	r2, r2, #8
 800c216:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0204 	bic.w	r2, r2, #4
 800c226:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	691a      	ldr	r2, [r3, #16]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	430a      	orrs	r2, r1
 800c238:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c23a:	e023      	b.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	4618      	mov	r0, r3
 800c244:	f000 fc54 	bl	800caf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c256:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c266:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	021a      	lsls	r2, r3, #8
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	430a      	orrs	r2, r1
 800c27a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c27c:	e002      	b.n	800c284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	75fb      	strb	r3, [r7, #23]
      break;
 800c282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop

0800c298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d101      	bne.n	800c2b4 <HAL_TIM_ConfigClockSource+0x1c>
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e0dc      	b.n	800c46e <HAL_TIM_ConfigClockSource+0x1d6>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	4b6a      	ldr	r3, [pc, #424]	; (800c478 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a64      	ldr	r2, [pc, #400]	; (800c47c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	f000 80a9 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2f0:	4a62      	ldr	r2, [pc, #392]	; (800c47c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	f200 80ae 	bhi.w	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2f8:	4a61      	ldr	r2, [pc, #388]	; (800c480 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	f000 80a1 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c300:	4a5f      	ldr	r2, [pc, #380]	; (800c480 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	f200 80a6 	bhi.w	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c308:	4a5e      	ldr	r2, [pc, #376]	; (800c484 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	f000 8099 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c310:	4a5c      	ldr	r2, [pc, #368]	; (800c484 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c312:	4293      	cmp	r3, r2
 800c314:	f200 809e 	bhi.w	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c318:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c31c:	f000 8091 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c324:	f200 8096 	bhi.w	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c32c:	f000 8089 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c334:	f200 808e 	bhi.w	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c33c:	d03e      	beq.n	800c3bc <HAL_TIM_ConfigClockSource+0x124>
 800c33e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c342:	f200 8087 	bhi.w	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c34a:	f000 8086 	beq.w	800c45a <HAL_TIM_ConfigClockSource+0x1c2>
 800c34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c352:	d87f      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c354:	2b70      	cmp	r3, #112	; 0x70
 800c356:	d01a      	beq.n	800c38e <HAL_TIM_ConfigClockSource+0xf6>
 800c358:	2b70      	cmp	r3, #112	; 0x70
 800c35a:	d87b      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c35c:	2b60      	cmp	r3, #96	; 0x60
 800c35e:	d050      	beq.n	800c402 <HAL_TIM_ConfigClockSource+0x16a>
 800c360:	2b60      	cmp	r3, #96	; 0x60
 800c362:	d877      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c364:	2b50      	cmp	r3, #80	; 0x50
 800c366:	d03c      	beq.n	800c3e2 <HAL_TIM_ConfigClockSource+0x14a>
 800c368:	2b50      	cmp	r3, #80	; 0x50
 800c36a:	d873      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c36c:	2b40      	cmp	r3, #64	; 0x40
 800c36e:	d058      	beq.n	800c422 <HAL_TIM_ConfigClockSource+0x18a>
 800c370:	2b40      	cmp	r3, #64	; 0x40
 800c372:	d86f      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c374:	2b30      	cmp	r3, #48	; 0x30
 800c376:	d064      	beq.n	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c378:	2b30      	cmp	r3, #48	; 0x30
 800c37a:	d86b      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c37c:	2b20      	cmp	r3, #32
 800c37e:	d060      	beq.n	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c380:	2b20      	cmp	r3, #32
 800c382:	d867      	bhi.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
 800c384:	2b00      	cmp	r3, #0
 800c386:	d05c      	beq.n	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d05a      	beq.n	800c442 <HAL_TIM_ConfigClockSource+0x1aa>
 800c38c:	e062      	b.n	800c454 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	6899      	ldr	r1, [r3, #8]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f000 fc8b 	bl	800ccb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	609a      	str	r2, [r3, #8]
      break;
 800c3ba:	e04f      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6818      	ldr	r0, [r3, #0]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	6899      	ldr	r1, [r3, #8]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f000 fc74 	bl	800ccb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689a      	ldr	r2, [r3, #8]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3de:	609a      	str	r2, [r3, #8]
      break;
 800c3e0:	e03c      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6818      	ldr	r0, [r3, #0]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	6859      	ldr	r1, [r3, #4]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f000 fbe4 	bl	800cbbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2150      	movs	r1, #80	; 0x50
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fc3e 	bl	800cc7c <TIM_ITRx_SetConfig>
      break;
 800c400:	e02c      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6818      	ldr	r0, [r3, #0]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	6859      	ldr	r1, [r3, #4]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	461a      	mov	r2, r3
 800c410:	f000 fc03 	bl	800cc1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2160      	movs	r1, #96	; 0x60
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fc2e 	bl	800cc7c <TIM_ITRx_SetConfig>
      break;
 800c420:	e01c      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	6859      	ldr	r1, [r3, #4]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	461a      	mov	r2, r3
 800c430:	f000 fbc4 	bl	800cbbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2140      	movs	r1, #64	; 0x40
 800c43a:	4618      	mov	r0, r3
 800c43c:	f000 fc1e 	bl	800cc7c <TIM_ITRx_SetConfig>
      break;
 800c440:	e00c      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f000 fc15 	bl	800cc7c <TIM_ITRx_SetConfig>
      break;
 800c452:	e003      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	73fb      	strb	r3, [r7, #15]
      break;
 800c458:	e000      	b.n	800c45c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c45a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	ffceff88 	.word	0xffceff88
 800c47c:	00100040 	.word	0x00100040
 800c480:	00100030 	.word	0x00100030
 800c484:	00100020 	.word	0x00100020

0800c488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4b8:	bf00      	nop
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a46      	ldr	r2, [pc, #280]	; (800c5f0 <TIM_Base_SetConfig+0x12c>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d013      	beq.n	800c504 <TIM_Base_SetConfig+0x40>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e2:	d00f      	beq.n	800c504 <TIM_Base_SetConfig+0x40>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a43      	ldr	r2, [pc, #268]	; (800c5f4 <TIM_Base_SetConfig+0x130>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d00b      	beq.n	800c504 <TIM_Base_SetConfig+0x40>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a42      	ldr	r2, [pc, #264]	; (800c5f8 <TIM_Base_SetConfig+0x134>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d007      	beq.n	800c504 <TIM_Base_SetConfig+0x40>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a41      	ldr	r2, [pc, #260]	; (800c5fc <TIM_Base_SetConfig+0x138>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d003      	beq.n	800c504 <TIM_Base_SetConfig+0x40>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4a40      	ldr	r2, [pc, #256]	; (800c600 <TIM_Base_SetConfig+0x13c>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d108      	bne.n	800c516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c50a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	4313      	orrs	r3, r2
 800c514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a35      	ldr	r2, [pc, #212]	; (800c5f0 <TIM_Base_SetConfig+0x12c>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d01f      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c524:	d01b      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a32      	ldr	r2, [pc, #200]	; (800c5f4 <TIM_Base_SetConfig+0x130>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d017      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a31      	ldr	r2, [pc, #196]	; (800c5f8 <TIM_Base_SetConfig+0x134>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d013      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a30      	ldr	r2, [pc, #192]	; (800c5fc <TIM_Base_SetConfig+0x138>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d00f      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a2f      	ldr	r2, [pc, #188]	; (800c600 <TIM_Base_SetConfig+0x13c>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d00b      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a2e      	ldr	r2, [pc, #184]	; (800c604 <TIM_Base_SetConfig+0x140>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d007      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a2d      	ldr	r2, [pc, #180]	; (800c608 <TIM_Base_SetConfig+0x144>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d003      	beq.n	800c55e <TIM_Base_SetConfig+0x9a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a2c      	ldr	r2, [pc, #176]	; (800c60c <TIM_Base_SetConfig+0x148>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d108      	bne.n	800c570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	689a      	ldr	r2, [r3, #8]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a16      	ldr	r2, [pc, #88]	; (800c5f0 <TIM_Base_SetConfig+0x12c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d00f      	beq.n	800c5bc <TIM_Base_SetConfig+0xf8>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a18      	ldr	r2, [pc, #96]	; (800c600 <TIM_Base_SetConfig+0x13c>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d00b      	beq.n	800c5bc <TIM_Base_SetConfig+0xf8>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a17      	ldr	r2, [pc, #92]	; (800c604 <TIM_Base_SetConfig+0x140>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d007      	beq.n	800c5bc <TIM_Base_SetConfig+0xf8>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a16      	ldr	r2, [pc, #88]	; (800c608 <TIM_Base_SetConfig+0x144>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d003      	beq.n	800c5bc <TIM_Base_SetConfig+0xf8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a15      	ldr	r2, [pc, #84]	; (800c60c <TIM_Base_SetConfig+0x148>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d103      	bne.n	800c5c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d105      	bne.n	800c5e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	f023 0201 	bic.w	r2, r3, #1
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	611a      	str	r2, [r3, #16]
  }
}
 800c5e2:	bf00      	nop
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	40010000 	.word	0x40010000
 800c5f4:	40000400 	.word	0x40000400
 800c5f8:	40000800 	.word	0x40000800
 800c5fc:	40000c00 	.word	0x40000c00
 800c600:	40010400 	.word	0x40010400
 800c604:	40014000 	.word	0x40014000
 800c608:	40014400 	.word	0x40014400
 800c60c:	40014800 	.word	0x40014800

0800c610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	f023 0201 	bic.w	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4b37      	ldr	r3, [pc, #220]	; (800c718 <TIM_OC1_SetConfig+0x108>)
 800c63c:	4013      	ands	r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f023 0303 	bic.w	r3, r3, #3
 800c646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f023 0302 	bic.w	r3, r3, #2
 800c658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	4313      	orrs	r3, r2
 800c662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a2d      	ldr	r2, [pc, #180]	; (800c71c <TIM_OC1_SetConfig+0x10c>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d00f      	beq.n	800c68c <TIM_OC1_SetConfig+0x7c>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a2c      	ldr	r2, [pc, #176]	; (800c720 <TIM_OC1_SetConfig+0x110>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d00b      	beq.n	800c68c <TIM_OC1_SetConfig+0x7c>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a2b      	ldr	r2, [pc, #172]	; (800c724 <TIM_OC1_SetConfig+0x114>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d007      	beq.n	800c68c <TIM_OC1_SetConfig+0x7c>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a2a      	ldr	r2, [pc, #168]	; (800c728 <TIM_OC1_SetConfig+0x118>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d003      	beq.n	800c68c <TIM_OC1_SetConfig+0x7c>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a29      	ldr	r2, [pc, #164]	; (800c72c <TIM_OC1_SetConfig+0x11c>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d10c      	bne.n	800c6a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f023 0308 	bic.w	r3, r3, #8
 800c692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f023 0304 	bic.w	r3, r3, #4
 800c6a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a1c      	ldr	r2, [pc, #112]	; (800c71c <TIM_OC1_SetConfig+0x10c>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d00f      	beq.n	800c6ce <TIM_OC1_SetConfig+0xbe>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a1b      	ldr	r2, [pc, #108]	; (800c720 <TIM_OC1_SetConfig+0x110>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00b      	beq.n	800c6ce <TIM_OC1_SetConfig+0xbe>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a1a      	ldr	r2, [pc, #104]	; (800c724 <TIM_OC1_SetConfig+0x114>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d007      	beq.n	800c6ce <TIM_OC1_SetConfig+0xbe>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a19      	ldr	r2, [pc, #100]	; (800c728 <TIM_OC1_SetConfig+0x118>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d003      	beq.n	800c6ce <TIM_OC1_SetConfig+0xbe>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a18      	ldr	r2, [pc, #96]	; (800c72c <TIM_OC1_SetConfig+0x11c>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d111      	bne.n	800c6f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	685a      	ldr	r2, [r3, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	621a      	str	r2, [r3, #32]
}
 800c70c:	bf00      	nop
 800c70e:	371c      	adds	r7, #28
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	fffeff8f 	.word	0xfffeff8f
 800c71c:	40010000 	.word	0x40010000
 800c720:	40010400 	.word	0x40010400
 800c724:	40014000 	.word	0x40014000
 800c728:	40014400 	.word	0x40014400
 800c72c:	40014800 	.word	0x40014800

0800c730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6a1b      	ldr	r3, [r3, #32]
 800c744:	f023 0210 	bic.w	r2, r3, #16
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	4b34      	ldr	r3, [pc, #208]	; (800c82c <TIM_OC2_SetConfig+0xfc>)
 800c75c:	4013      	ands	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	4313      	orrs	r3, r2
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f023 0320 	bic.w	r3, r3, #32
 800c77a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	011b      	lsls	r3, r3, #4
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	4313      	orrs	r3, r2
 800c786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a29      	ldr	r2, [pc, #164]	; (800c830 <TIM_OC2_SetConfig+0x100>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d003      	beq.n	800c798 <TIM_OC2_SetConfig+0x68>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a28      	ldr	r2, [pc, #160]	; (800c834 <TIM_OC2_SetConfig+0x104>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d10d      	bne.n	800c7b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	011b      	lsls	r3, r3, #4
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a1e      	ldr	r2, [pc, #120]	; (800c830 <TIM_OC2_SetConfig+0x100>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d00f      	beq.n	800c7dc <TIM_OC2_SetConfig+0xac>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a1d      	ldr	r2, [pc, #116]	; (800c834 <TIM_OC2_SetConfig+0x104>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d00b      	beq.n	800c7dc <TIM_OC2_SetConfig+0xac>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a1c      	ldr	r2, [pc, #112]	; (800c838 <TIM_OC2_SetConfig+0x108>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d007      	beq.n	800c7dc <TIM_OC2_SetConfig+0xac>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a1b      	ldr	r2, [pc, #108]	; (800c83c <TIM_OC2_SetConfig+0x10c>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d003      	beq.n	800c7dc <TIM_OC2_SetConfig+0xac>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a1a      	ldr	r2, [pc, #104]	; (800c840 <TIM_OC2_SetConfig+0x110>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d113      	bne.n	800c804 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	4313      	orrs	r3, r2
 800c802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	621a      	str	r2, [r3, #32]
}
 800c81e:	bf00      	nop
 800c820:	371c      	adds	r7, #28
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	feff8fff 	.word	0xfeff8fff
 800c830:	40010000 	.word	0x40010000
 800c834:	40010400 	.word	0x40010400
 800c838:	40014000 	.word	0x40014000
 800c83c:	40014400 	.word	0x40014400
 800c840:	40014800 	.word	0x40014800

0800c844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c844:	b480      	push	{r7}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a1b      	ldr	r3, [r3, #32]
 800c858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	69db      	ldr	r3, [r3, #28]
 800c86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	4b33      	ldr	r3, [pc, #204]	; (800c93c <TIM_OC3_SetConfig+0xf8>)
 800c870:	4013      	ands	r3, r2
 800c872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f023 0303 	bic.w	r3, r3, #3
 800c87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4313      	orrs	r3, r2
 800c884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c88c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	021b      	lsls	r3, r3, #8
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a28      	ldr	r2, [pc, #160]	; (800c940 <TIM_OC3_SetConfig+0xfc>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d003      	beq.n	800c8aa <TIM_OC3_SetConfig+0x66>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a27      	ldr	r2, [pc, #156]	; (800c944 <TIM_OC3_SetConfig+0x100>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d10d      	bne.n	800c8c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	021b      	lsls	r3, r3, #8
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	; (800c940 <TIM_OC3_SetConfig+0xfc>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d00f      	beq.n	800c8ee <TIM_OC3_SetConfig+0xaa>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a1c      	ldr	r2, [pc, #112]	; (800c944 <TIM_OC3_SetConfig+0x100>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00b      	beq.n	800c8ee <TIM_OC3_SetConfig+0xaa>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a1b      	ldr	r2, [pc, #108]	; (800c948 <TIM_OC3_SetConfig+0x104>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d007      	beq.n	800c8ee <TIM_OC3_SetConfig+0xaa>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a1a      	ldr	r2, [pc, #104]	; (800c94c <TIM_OC3_SetConfig+0x108>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d003      	beq.n	800c8ee <TIM_OC3_SetConfig+0xaa>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a19      	ldr	r2, [pc, #100]	; (800c950 <TIM_OC3_SetConfig+0x10c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d113      	bne.n	800c916 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	011b      	lsls	r3, r3, #4
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	4313      	orrs	r3, r2
 800c908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	011b      	lsls	r3, r3, #4
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	4313      	orrs	r3, r2
 800c914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	621a      	str	r2, [r3, #32]
}
 800c930:	bf00      	nop
 800c932:	371c      	adds	r7, #28
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	fffeff8f 	.word	0xfffeff8f
 800c940:	40010000 	.word	0x40010000
 800c944:	40010400 	.word	0x40010400
 800c948:	40014000 	.word	0x40014000
 800c94c:	40014400 	.word	0x40014400
 800c950:	40014800 	.word	0x40014800

0800c954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4b24      	ldr	r3, [pc, #144]	; (800ca10 <TIM_OC4_SetConfig+0xbc>)
 800c980:	4013      	ands	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	4313      	orrs	r3, r2
 800c996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c99e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	031b      	lsls	r3, r3, #12
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a19      	ldr	r2, [pc, #100]	; (800ca14 <TIM_OC4_SetConfig+0xc0>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d00f      	beq.n	800c9d4 <TIM_OC4_SetConfig+0x80>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a18      	ldr	r2, [pc, #96]	; (800ca18 <TIM_OC4_SetConfig+0xc4>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00b      	beq.n	800c9d4 <TIM_OC4_SetConfig+0x80>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a17      	ldr	r2, [pc, #92]	; (800ca1c <TIM_OC4_SetConfig+0xc8>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d007      	beq.n	800c9d4 <TIM_OC4_SetConfig+0x80>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a16      	ldr	r2, [pc, #88]	; (800ca20 <TIM_OC4_SetConfig+0xcc>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d003      	beq.n	800c9d4 <TIM_OC4_SetConfig+0x80>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a15      	ldr	r2, [pc, #84]	; (800ca24 <TIM_OC4_SetConfig+0xd0>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d109      	bne.n	800c9e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	019b      	lsls	r3, r3, #6
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	feff8fff 	.word	0xfeff8fff
 800ca14:	40010000 	.word	0x40010000
 800ca18:	40010400 	.word	0x40010400
 800ca1c:	40014000 	.word	0x40014000
 800ca20:	40014400 	.word	0x40014400
 800ca24:	40014800 	.word	0x40014800

0800ca28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4b21      	ldr	r3, [pc, #132]	; (800cad8 <TIM_OC5_SetConfig+0xb0>)
 800ca54:	4013      	ands	r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	041b      	lsls	r3, r3, #16
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4a18      	ldr	r2, [pc, #96]	; (800cadc <TIM_OC5_SetConfig+0xb4>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d00f      	beq.n	800ca9e <TIM_OC5_SetConfig+0x76>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a17      	ldr	r2, [pc, #92]	; (800cae0 <TIM_OC5_SetConfig+0xb8>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d00b      	beq.n	800ca9e <TIM_OC5_SetConfig+0x76>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a16      	ldr	r2, [pc, #88]	; (800cae4 <TIM_OC5_SetConfig+0xbc>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d007      	beq.n	800ca9e <TIM_OC5_SetConfig+0x76>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a15      	ldr	r2, [pc, #84]	; (800cae8 <TIM_OC5_SetConfig+0xc0>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d003      	beq.n	800ca9e <TIM_OC5_SetConfig+0x76>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a14      	ldr	r2, [pc, #80]	; (800caec <TIM_OC5_SetConfig+0xc4>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d109      	bne.n	800cab2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	021b      	lsls	r3, r3, #8
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	4313      	orrs	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	621a      	str	r2, [r3, #32]
}
 800cacc:	bf00      	nop
 800cace:	371c      	adds	r7, #28
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	fffeff8f 	.word	0xfffeff8f
 800cadc:	40010000 	.word	0x40010000
 800cae0:	40010400 	.word	0x40010400
 800cae4:	40014000 	.word	0x40014000
 800cae8:	40014400 	.word	0x40014400
 800caec:	40014800 	.word	0x40014800

0800caf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b087      	sub	sp, #28
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	4b22      	ldr	r3, [pc, #136]	; (800cba4 <TIM_OC6_SetConfig+0xb4>)
 800cb1c:	4013      	ands	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	021b      	lsls	r3, r3, #8
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	051b      	lsls	r3, r3, #20
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a19      	ldr	r2, [pc, #100]	; (800cba8 <TIM_OC6_SetConfig+0xb8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d00f      	beq.n	800cb68 <TIM_OC6_SetConfig+0x78>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a18      	ldr	r2, [pc, #96]	; (800cbac <TIM_OC6_SetConfig+0xbc>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d00b      	beq.n	800cb68 <TIM_OC6_SetConfig+0x78>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a17      	ldr	r2, [pc, #92]	; (800cbb0 <TIM_OC6_SetConfig+0xc0>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d007      	beq.n	800cb68 <TIM_OC6_SetConfig+0x78>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a16      	ldr	r2, [pc, #88]	; (800cbb4 <TIM_OC6_SetConfig+0xc4>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d003      	beq.n	800cb68 <TIM_OC6_SetConfig+0x78>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a15      	ldr	r2, [pc, #84]	; (800cbb8 <TIM_OC6_SetConfig+0xc8>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d109      	bne.n	800cb7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	029b      	lsls	r3, r3, #10
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	621a      	str	r2, [r3, #32]
}
 800cb96:	bf00      	nop
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	feff8fff 	.word	0xfeff8fff
 800cba8:	40010000 	.word	0x40010000
 800cbac:	40010400 	.word	0x40010400
 800cbb0:	40014000 	.word	0x40014000
 800cbb4:	40014400 	.word	0x40014400
 800cbb8:	40014800 	.word	0x40014800

0800cbbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b087      	sub	sp, #28
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	f023 0201 	bic.w	r2, r3, #1
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f023 030a 	bic.w	r3, r3, #10
 800cbf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	621a      	str	r2, [r3, #32]
}
 800cc0e:	bf00      	nop
 800cc10:	371c      	adds	r7, #28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b087      	sub	sp, #28
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	f023 0210 	bic.w	r2, r3, #16
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	031b      	lsls	r3, r3, #12
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	011b      	lsls	r3, r3, #4
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	621a      	str	r2, [r3, #32]
}
 800cc6e:	bf00      	nop
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <TIM_ITRx_SetConfig+0x38>)
 800cc90:	4013      	ands	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc94:	683a      	ldr	r2, [r7, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	f043 0307 	orr.w	r3, r3, #7
 800cc9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	609a      	str	r2, [r3, #8]
}
 800cca6:	bf00      	nop
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	ffcfff8f 	.word	0xffcfff8f

0800ccb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b087      	sub	sp, #28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
 800ccc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	021a      	lsls	r2, r3, #8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	4313      	orrs	r3, r2
 800cce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	609a      	str	r2, [r3, #8]
}
 800ccec:	bf00      	nop
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b087      	sub	sp, #28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	f003 031f 	and.w	r3, r3, #31
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6a1a      	ldr	r2, [r3, #32]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	43db      	mvns	r3, r3
 800cd1a:	401a      	ands	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6a1a      	ldr	r2, [r3, #32]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f003 031f 	and.w	r3, r3, #31
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd30:	431a      	orrs	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	621a      	str	r2, [r3, #32]
}
 800cd36:	bf00      	nop
 800cd38:	371c      	adds	r7, #28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
	...

0800cd44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d101      	bne.n	800cd5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd58:	2302      	movs	r3, #2
 800cd5a:	e06d      	b.n	800ce38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2202      	movs	r2, #2
 800cd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a30      	ldr	r2, [pc, #192]	; (800ce44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d004      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a2f      	ldr	r2, [pc, #188]	; (800ce48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d108      	bne.n	800cda2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cda8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a20      	ldr	r2, [pc, #128]	; (800ce44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d022      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdce:	d01d      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a1d      	ldr	r2, [pc, #116]	; (800ce4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d018      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a1c      	ldr	r2, [pc, #112]	; (800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d013      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a1a      	ldr	r2, [pc, #104]	; (800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d00e      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a15      	ldr	r2, [pc, #84]	; (800ce48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d009      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a16      	ldr	r2, [pc, #88]	; (800ce58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d004      	beq.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a15      	ldr	r2, [pc, #84]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d10c      	bne.n	800ce26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr
 800ce44:	40010000 	.word	0x40010000
 800ce48:	40010400 	.word	0x40010400
 800ce4c:	40000400 	.word	0x40000400
 800ce50:	40000800 	.word	0x40000800
 800ce54:	40000c00 	.word	0x40000c00
 800ce58:	40001800 	.word	0x40001800
 800ce5c:	40014000 	.word	0x40014000

0800ce60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d101      	bne.n	800ce7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce78:	2302      	movs	r3, #2
 800ce7a:	e065      	b.n	800cf48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee2:	4313      	orrs	r3, r2
 800cee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	041b      	lsls	r3, r3, #16
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a16      	ldr	r2, [pc, #88]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d004      	beq.n	800cf0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a14      	ldr	r2, [pc, #80]	; (800cf58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d115      	bne.n	800cf36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	051b      	lsls	r3, r3, #20
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	69db      	ldr	r3, [r3, #28]
 800cf24:	4313      	orrs	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	40010000 	.word	0x40010000
 800cf58:	40010400 	.word	0x40010400

0800cf5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf78:	bf00      	nop
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d101      	bne.n	800cfaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e042      	b.n	800d030 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7f5 f9b3 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2224      	movs	r2, #36	; 0x24
 800cfc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f022 0201 	bic.w	r2, r2, #1
 800cfd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d002      	beq.n	800cfe8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f001 fa44 	bl	800e470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fcd9 	bl	800d9a0 <UART_SetConfig>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d101      	bne.n	800cff8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e01b      	b.n	800d030 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f042 0201 	orr.w	r2, r2, #1
 800d026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f001 fac3 	bl	800e5b4 <UART_CheckIdleState>
 800d02e:	4603      	mov	r3, r0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08a      	sub	sp, #40	; 0x28
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	603b      	str	r3, [r7, #0]
 800d044:	4613      	mov	r3, r2
 800d046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d04e:	2b20      	cmp	r3, #32
 800d050:	d17b      	bne.n	800d14a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <HAL_UART_Transmit+0x26>
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e074      	b.n	800d14c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2221      	movs	r2, #33	; 0x21
 800d06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d072:	f7f5 fc93 	bl	800299c <HAL_GetTick>
 800d076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	88fa      	ldrh	r2, [r7, #6]
 800d07c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	88fa      	ldrh	r2, [r7, #6]
 800d084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d090:	d108      	bne.n	800d0a4 <HAL_UART_Transmit+0x6c>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d104      	bne.n	800d0a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d09a:	2300      	movs	r3, #0
 800d09c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	61bb      	str	r3, [r7, #24]
 800d0a2:	e003      	b.n	800d0ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d0ac:	e030      	b.n	800d110 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2180      	movs	r1, #128	; 0x80
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f001 fb25 	bl	800e708 <UART_WaitOnFlagUntilTimeout>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d005      	beq.n	800d0d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e03d      	b.n	800d14c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10b      	bne.n	800d0ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	3302      	adds	r3, #2
 800d0ea:	61bb      	str	r3, [r7, #24]
 800d0ec:	e007      	b.n	800d0fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d104:	b29b      	uxth	r3, r3
 800d106:	3b01      	subs	r3, #1
 800d108:	b29a      	uxth	r2, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d116:	b29b      	uxth	r3, r3
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d1c8      	bne.n	800d0ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2200      	movs	r2, #0
 800d124:	2140      	movs	r1, #64	; 0x40
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f001 faee 	bl	800e708 <UART_WaitOnFlagUntilTimeout>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d005      	beq.n	800d13e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2220      	movs	r2, #32
 800d136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e006      	b.n	800d14c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2220      	movs	r2, #32
 800d142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	e000      	b.n	800d14c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d14a:	2302      	movs	r3, #2
  }
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3720      	adds	r7, #32
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b08a      	sub	sp, #40	; 0x28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d168:	2b20      	cmp	r3, #32
 800d16a:	d137      	bne.n	800d1dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d002      	beq.n	800d178 <HAL_UART_Receive_IT+0x24>
 800d172:	88fb      	ldrh	r3, [r7, #6]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	e030      	b.n	800d1de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a18      	ldr	r2, [pc, #96]	; (800d1e8 <HAL_UART_Receive_IT+0x94>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d01f      	beq.n	800d1cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d018      	beq.n	800d1cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	e853 3f00 	ldrex	r3, [r3]
 800d1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	623b      	str	r3, [r7, #32]
 800d1ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1bc:	69f9      	ldr	r1, [r7, #28]
 800d1be:	6a3a      	ldr	r2, [r7, #32]
 800d1c0:	e841 2300 	strex	r3, r2, [r1]
 800d1c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1e6      	bne.n	800d19a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d1cc:	88fb      	ldrh	r3, [r7, #6]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	68b9      	ldr	r1, [r7, #8]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f001 fb06 	bl	800e7e4 <UART_Start_Receive_IT>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	e000      	b.n	800d1de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d1dc:	2302      	movs	r3, #2
  }
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3728      	adds	r7, #40	; 0x28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	58000c00 	.word	0x58000c00

0800d1ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b0ba      	sub	sp, #232	; 0xe8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d216:	f640 030f 	movw	r3, #2063	; 0x80f
 800d21a:	4013      	ands	r3, r2
 800d21c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11b      	bne.n	800d260 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d22c:	f003 0320 	and.w	r3, r3, #32
 800d230:	2b00      	cmp	r3, #0
 800d232:	d015      	beq.n	800d260 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d238:	f003 0320 	and.w	r3, r3, #32
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d105      	bne.n	800d24c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 8377 	beq.w	800d944 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	4798      	blx	r3
      }
      return;
 800d25e:	e371      	b.n	800d944 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 8123 	beq.w	800d4b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d26a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d26e:	4b8d      	ldr	r3, [pc, #564]	; (800d4a4 <HAL_UART_IRQHandler+0x2b8>)
 800d270:	4013      	ands	r3, r2
 800d272:	2b00      	cmp	r3, #0
 800d274:	d106      	bne.n	800d284 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d276:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d27a:	4b8b      	ldr	r3, [pc, #556]	; (800d4a8 <HAL_UART_IRQHandler+0x2bc>)
 800d27c:	4013      	ands	r3, r2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 8116 	beq.w	800d4b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d288:	f003 0301 	and.w	r3, r3, #1
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d011      	beq.n	800d2b4 <HAL_UART_IRQHandler+0xc8>
 800d290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00b      	beq.n	800d2b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2aa:	f043 0201 	orr.w	r2, r3, #1
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2b8:	f003 0302 	and.w	r3, r3, #2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d011      	beq.n	800d2e4 <HAL_UART_IRQHandler+0xf8>
 800d2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00b      	beq.n	800d2e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2202      	movs	r2, #2
 800d2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2da:	f043 0204 	orr.w	r2, r3, #4
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2e8:	f003 0304 	and.w	r3, r3, #4
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d011      	beq.n	800d314 <HAL_UART_IRQHandler+0x128>
 800d2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2f4:	f003 0301 	and.w	r3, r3, #1
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00b      	beq.n	800d314 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2204      	movs	r2, #4
 800d302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d30a:	f043 0202 	orr.w	r2, r3, #2
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d318:	f003 0308 	and.w	r3, r3, #8
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d017      	beq.n	800d350 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d324:	f003 0320 	and.w	r3, r3, #32
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d105      	bne.n	800d338 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d32c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d330:	4b5c      	ldr	r3, [pc, #368]	; (800d4a4 <HAL_UART_IRQHandler+0x2b8>)
 800d332:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00b      	beq.n	800d350 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2208      	movs	r2, #8
 800d33e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d346:	f043 0208 	orr.w	r2, r3, #8
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d012      	beq.n	800d382 <HAL_UART_IRQHandler+0x196>
 800d35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00c      	beq.n	800d382 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d378:	f043 0220 	orr.w	r2, r3, #32
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f000 82dd 	beq.w	800d948 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d392:	f003 0320 	and.w	r3, r3, #32
 800d396:	2b00      	cmp	r3, #0
 800d398:	d013      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d39a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d39e:	f003 0320 	and.w	r3, r3, #32
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d105      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d007      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d003      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d6:	2b40      	cmp	r3, #64	; 0x40
 800d3d8:	d005      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d054      	beq.n	800d490 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f001 fb1e 	bl	800ea28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f6:	2b40      	cmp	r3, #64	; 0x40
 800d3f8:	d146      	bne.n	800d488 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3308      	adds	r3, #8
 800d400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d408:	e853 3f00 	ldrex	r3, [r3]
 800d40c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3308      	adds	r3, #8
 800d422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d42a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d43e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1d9      	bne.n	800d3fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d017      	beq.n	800d480 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d456:	4a15      	ldr	r2, [pc, #84]	; (800d4ac <HAL_UART_IRQHandler+0x2c0>)
 800d458:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d460:	4618      	mov	r0, r3
 800d462:	f7f8 fa6f 	bl	8005944 <HAL_DMA_Abort_IT>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d019      	beq.n	800d4a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d47a:	4610      	mov	r0, r2
 800d47c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d47e:	e00f      	b.n	800d4a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fa77 	bl	800d974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d486:	e00b      	b.n	800d4a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fa73 	bl	800d974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d48e:	e007      	b.n	800d4a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fa6f 	bl	800d974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d49e:	e253      	b.n	800d948 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a0:	bf00      	nop
    return;
 800d4a2:	e251      	b.n	800d948 <HAL_UART_IRQHandler+0x75c>
 800d4a4:	10000001 	.word	0x10000001
 800d4a8:	04000120 	.word	0x04000120
 800d4ac:	0800eaf5 	.word	0x0800eaf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	f040 81e7 	bne.w	800d888 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4be:	f003 0310 	and.w	r3, r3, #16
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f000 81e0 	beq.w	800d888 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4cc:	f003 0310 	and.w	r3, r3, #16
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 81d9 	beq.w	800d888 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2210      	movs	r2, #16
 800d4dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e8:	2b40      	cmp	r3, #64	; 0x40
 800d4ea:	f040 8151 	bne.w	800d790 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a96      	ldr	r2, [pc, #600]	; (800d750 <HAL_UART_IRQHandler+0x564>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d068      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a93      	ldr	r2, [pc, #588]	; (800d754 <HAL_UART_IRQHandler+0x568>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d061      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a91      	ldr	r2, [pc, #580]	; (800d758 <HAL_UART_IRQHandler+0x56c>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d05a      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a8e      	ldr	r2, [pc, #568]	; (800d75c <HAL_UART_IRQHandler+0x570>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d053      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a8c      	ldr	r2, [pc, #560]	; (800d760 <HAL_UART_IRQHandler+0x574>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d04c      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a89      	ldr	r2, [pc, #548]	; (800d764 <HAL_UART_IRQHandler+0x578>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d045      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a87      	ldr	r2, [pc, #540]	; (800d768 <HAL_UART_IRQHandler+0x57c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d03e      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a84      	ldr	r2, [pc, #528]	; (800d76c <HAL_UART_IRQHandler+0x580>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d037      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a82      	ldr	r2, [pc, #520]	; (800d770 <HAL_UART_IRQHandler+0x584>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d030      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a7f      	ldr	r2, [pc, #508]	; (800d774 <HAL_UART_IRQHandler+0x588>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d029      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a7d      	ldr	r2, [pc, #500]	; (800d778 <HAL_UART_IRQHandler+0x58c>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d022      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a7a      	ldr	r2, [pc, #488]	; (800d77c <HAL_UART_IRQHandler+0x590>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d01b      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a78      	ldr	r2, [pc, #480]	; (800d780 <HAL_UART_IRQHandler+0x594>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d014      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a75      	ldr	r2, [pc, #468]	; (800d784 <HAL_UART_IRQHandler+0x598>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d00d      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a73      	ldr	r2, [pc, #460]	; (800d788 <HAL_UART_IRQHandler+0x59c>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d006      	beq.n	800d5ce <HAL_UART_IRQHandler+0x3e2>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a70      	ldr	r2, [pc, #448]	; (800d78c <HAL_UART_IRQHandler+0x5a0>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d106      	bne.n	800d5dc <HAL_UART_IRQHandler+0x3f0>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	e005      	b.n	800d5e8 <HAL_UART_IRQHandler+0x3fc>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d5ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 81ab 	beq.w	800d94c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d600:	429a      	cmp	r2, r3
 800d602:	f080 81a3 	bcs.w	800d94c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d60c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d61c:	f000 8087 	beq.w	800d72e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d62c:	e853 3f00 	ldrex	r3, [r3]
 800d630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d63c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d64a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d64e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d652:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d65a:	e841 2300 	strex	r3, r2, [r1]
 800d65e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1da      	bne.n	800d620 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	3308      	adds	r3, #8
 800d670:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d674:	e853 3f00 	ldrex	r3, [r3]
 800d678:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d67a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d67c:	f023 0301 	bic.w	r3, r3, #1
 800d680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3308      	adds	r3, #8
 800d68a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d68e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d692:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d696:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d6a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e1      	bne.n	800d66a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6b0:	e853 3f00 	ldrex	r3, [r3]
 800d6b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d6cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6d2:	e841 2300 	strex	r3, r2, [r1]
 800d6d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1e3      	bne.n	800d6a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6f4:	e853 3f00 	ldrex	r3, [r3]
 800d6f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6fc:	f023 0310 	bic.w	r3, r3, #16
 800d700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	461a      	mov	r2, r3
 800d70a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d70e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d710:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d712:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d716:	e841 2300 	strex	r3, r2, [r1]
 800d71a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d71c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1e4      	bne.n	800d6ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d728:	4618      	mov	r0, r3
 800d72a:	f7f7 fded 	bl	8005308 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2202      	movs	r2, #2
 800d732:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d740:	b29b      	uxth	r3, r3
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	b29b      	uxth	r3, r3
 800d746:	4619      	mov	r1, r3
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f91d 	bl	800d988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d74e:	e0fd      	b.n	800d94c <HAL_UART_IRQHandler+0x760>
 800d750:	40020010 	.word	0x40020010
 800d754:	40020028 	.word	0x40020028
 800d758:	40020040 	.word	0x40020040
 800d75c:	40020058 	.word	0x40020058
 800d760:	40020070 	.word	0x40020070
 800d764:	40020088 	.word	0x40020088
 800d768:	400200a0 	.word	0x400200a0
 800d76c:	400200b8 	.word	0x400200b8
 800d770:	40020410 	.word	0x40020410
 800d774:	40020428 	.word	0x40020428
 800d778:	40020440 	.word	0x40020440
 800d77c:	40020458 	.word	0x40020458
 800d780:	40020470 	.word	0x40020470
 800d784:	40020488 	.word	0x40020488
 800d788:	400204a0 	.word	0x400204a0
 800d78c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f000 80cf 	beq.w	800d950 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d7b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f000 80ca 	beq.w	800d950 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	e853 3f00 	ldrex	r3, [r3]
 800d7c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7de:	647b      	str	r3, [r7, #68]	; 0x44
 800d7e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7e6:	e841 2300 	strex	r3, r2, [r1]
 800d7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1e4      	bne.n	800d7bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	e853 3f00 	ldrex	r3, [r3]
 800d800:	623b      	str	r3, [r7, #32]
   return(result);
 800d802:	6a3a      	ldr	r2, [r7, #32]
 800d804:	4b55      	ldr	r3, [pc, #340]	; (800d95c <HAL_UART_IRQHandler+0x770>)
 800d806:	4013      	ands	r3, r2
 800d808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3308      	adds	r3, #8
 800d812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d816:	633a      	str	r2, [r7, #48]	; 0x30
 800d818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d81e:	e841 2300 	strex	r3, r2, [r1]
 800d822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e3      	bne.n	800d7f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2220      	movs	r2, #32
 800d82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	e853 3f00 	ldrex	r3, [r3]
 800d84a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f023 0310 	bic.w	r3, r3, #16
 800d852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d860:	61fb      	str	r3, [r7, #28]
 800d862:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d864:	69b9      	ldr	r1, [r7, #24]
 800d866:	69fa      	ldr	r2, [r7, #28]
 800d868:	e841 2300 	strex	r3, r2, [r1]
 800d86c:	617b      	str	r3, [r7, #20]
   return(result);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1e4      	bne.n	800d83e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2202      	movs	r2, #2
 800d878:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d87a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f881 	bl	800d988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d886:	e063      	b.n	800d950 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d88c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00e      	beq.n	800d8b2 <HAL_UART_IRQHandler+0x6c6>
 800d894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d008      	beq.n	800d8b2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d8a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f001 fe80 	bl	800f5b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8b0:	e051      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d014      	beq.n	800d8e8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d105      	bne.n	800d8d6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d008      	beq.n	800d8e8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d03a      	beq.n	800d954 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	4798      	blx	r3
    }
    return;
 800d8e6:	e035      	b.n	800d954 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d009      	beq.n	800d908 <HAL_UART_IRQHandler+0x71c>
 800d8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f001 f90d 	bl	800eb20 <UART_EndTransmit_IT>
    return;
 800d906:	e026      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d90c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d009      	beq.n	800d928 <HAL_UART_IRQHandler+0x73c>
 800d914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d918:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f001 fe59 	bl	800f5d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d926:	e016      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d92c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d010      	beq.n	800d956 <HAL_UART_IRQHandler+0x76a>
 800d934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	da0c      	bge.n	800d956 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f001 fe41 	bl	800f5c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d942:	e008      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
      return;
 800d944:	bf00      	nop
 800d946:	e006      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
    return;
 800d948:	bf00      	nop
 800d94a:	e004      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
      return;
 800d94c:	bf00      	nop
 800d94e:	e002      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
      return;
 800d950:	bf00      	nop
 800d952:	e000      	b.n	800d956 <HAL_UART_IRQHandler+0x76a>
    return;
 800d954:	bf00      	nop
  }
}
 800d956:	37e8      	adds	r7, #232	; 0xe8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	effffffe 	.word	0xeffffffe

0800d960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9a4:	b092      	sub	sp, #72	; 0x48
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	689a      	ldr	r2, [r3, #8]
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	69db      	ldr	r3, [r3, #28]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4bbe      	ldr	r3, [pc, #760]	; (800dcc8 <UART_SetConfig+0x328>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	6812      	ldr	r2, [r2, #0]
 800d9d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9d8:	430b      	orrs	r3, r1
 800d9da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4ab3      	ldr	r2, [pc, #716]	; (800dccc <UART_SetConfig+0x32c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d004      	beq.n	800da0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da08:	4313      	orrs	r3, r2
 800da0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689a      	ldr	r2, [r3, #8]
 800da12:	4baf      	ldr	r3, [pc, #700]	; (800dcd0 <UART_SetConfig+0x330>)
 800da14:	4013      	ands	r3, r2
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	6812      	ldr	r2, [r2, #0]
 800da1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da1c:	430b      	orrs	r3, r1
 800da1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	f023 010f 	bic.w	r1, r3, #15
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	430a      	orrs	r2, r1
 800da34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4aa6      	ldr	r2, [pc, #664]	; (800dcd4 <UART_SetConfig+0x334>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d177      	bne.n	800db30 <UART_SetConfig+0x190>
 800da40:	4ba5      	ldr	r3, [pc, #660]	; (800dcd8 <UART_SetConfig+0x338>)
 800da42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da48:	2b28      	cmp	r3, #40	; 0x28
 800da4a:	d86d      	bhi.n	800db28 <UART_SetConfig+0x188>
 800da4c:	a201      	add	r2, pc, #4	; (adr r2, 800da54 <UART_SetConfig+0xb4>)
 800da4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da52:	bf00      	nop
 800da54:	0800daf9 	.word	0x0800daf9
 800da58:	0800db29 	.word	0x0800db29
 800da5c:	0800db29 	.word	0x0800db29
 800da60:	0800db29 	.word	0x0800db29
 800da64:	0800db29 	.word	0x0800db29
 800da68:	0800db29 	.word	0x0800db29
 800da6c:	0800db29 	.word	0x0800db29
 800da70:	0800db29 	.word	0x0800db29
 800da74:	0800db01 	.word	0x0800db01
 800da78:	0800db29 	.word	0x0800db29
 800da7c:	0800db29 	.word	0x0800db29
 800da80:	0800db29 	.word	0x0800db29
 800da84:	0800db29 	.word	0x0800db29
 800da88:	0800db29 	.word	0x0800db29
 800da8c:	0800db29 	.word	0x0800db29
 800da90:	0800db29 	.word	0x0800db29
 800da94:	0800db09 	.word	0x0800db09
 800da98:	0800db29 	.word	0x0800db29
 800da9c:	0800db29 	.word	0x0800db29
 800daa0:	0800db29 	.word	0x0800db29
 800daa4:	0800db29 	.word	0x0800db29
 800daa8:	0800db29 	.word	0x0800db29
 800daac:	0800db29 	.word	0x0800db29
 800dab0:	0800db29 	.word	0x0800db29
 800dab4:	0800db11 	.word	0x0800db11
 800dab8:	0800db29 	.word	0x0800db29
 800dabc:	0800db29 	.word	0x0800db29
 800dac0:	0800db29 	.word	0x0800db29
 800dac4:	0800db29 	.word	0x0800db29
 800dac8:	0800db29 	.word	0x0800db29
 800dacc:	0800db29 	.word	0x0800db29
 800dad0:	0800db29 	.word	0x0800db29
 800dad4:	0800db19 	.word	0x0800db19
 800dad8:	0800db29 	.word	0x0800db29
 800dadc:	0800db29 	.word	0x0800db29
 800dae0:	0800db29 	.word	0x0800db29
 800dae4:	0800db29 	.word	0x0800db29
 800dae8:	0800db29 	.word	0x0800db29
 800daec:	0800db29 	.word	0x0800db29
 800daf0:	0800db29 	.word	0x0800db29
 800daf4:	0800db21 	.word	0x0800db21
 800daf8:	2301      	movs	r3, #1
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e222      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db00:	2304      	movs	r3, #4
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e21e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db08:	2308      	movs	r3, #8
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e21a      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db10:	2310      	movs	r3, #16
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e216      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db18:	2320      	movs	r3, #32
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e212      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db20:	2340      	movs	r3, #64	; 0x40
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e20e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db28:	2380      	movs	r3, #128	; 0x80
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e20a      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a69      	ldr	r2, [pc, #420]	; (800dcdc <UART_SetConfig+0x33c>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d130      	bne.n	800db9c <UART_SetConfig+0x1fc>
 800db3a:	4b67      	ldr	r3, [pc, #412]	; (800dcd8 <UART_SetConfig+0x338>)
 800db3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3e:	f003 0307 	and.w	r3, r3, #7
 800db42:	2b05      	cmp	r3, #5
 800db44:	d826      	bhi.n	800db94 <UART_SetConfig+0x1f4>
 800db46:	a201      	add	r2, pc, #4	; (adr r2, 800db4c <UART_SetConfig+0x1ac>)
 800db48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4c:	0800db65 	.word	0x0800db65
 800db50:	0800db6d 	.word	0x0800db6d
 800db54:	0800db75 	.word	0x0800db75
 800db58:	0800db7d 	.word	0x0800db7d
 800db5c:	0800db85 	.word	0x0800db85
 800db60:	0800db8d 	.word	0x0800db8d
 800db64:	2300      	movs	r3, #0
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e1ec      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db6c:	2304      	movs	r3, #4
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e1e8      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db74:	2308      	movs	r3, #8
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e1e4      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db7c:	2310      	movs	r3, #16
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e1e0      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db84:	2320      	movs	r3, #32
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e1dc      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db8c:	2340      	movs	r3, #64	; 0x40
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e1d8      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db94:	2380      	movs	r3, #128	; 0x80
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e1d4      	b.n	800df46 <UART_SetConfig+0x5a6>
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a4f      	ldr	r2, [pc, #316]	; (800dce0 <UART_SetConfig+0x340>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d130      	bne.n	800dc08 <UART_SetConfig+0x268>
 800dba6:	4b4c      	ldr	r3, [pc, #304]	; (800dcd8 <UART_SetConfig+0x338>)
 800dba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	2b05      	cmp	r3, #5
 800dbb0:	d826      	bhi.n	800dc00 <UART_SetConfig+0x260>
 800dbb2:	a201      	add	r2, pc, #4	; (adr r2, 800dbb8 <UART_SetConfig+0x218>)
 800dbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb8:	0800dbd1 	.word	0x0800dbd1
 800dbbc:	0800dbd9 	.word	0x0800dbd9
 800dbc0:	0800dbe1 	.word	0x0800dbe1
 800dbc4:	0800dbe9 	.word	0x0800dbe9
 800dbc8:	0800dbf1 	.word	0x0800dbf1
 800dbcc:	0800dbf9 	.word	0x0800dbf9
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e1b6      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dbd8:	2304      	movs	r3, #4
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e1b2      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dbe0:	2308      	movs	r3, #8
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e1ae      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dbe8:	2310      	movs	r3, #16
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e1aa      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dbf0:	2320      	movs	r3, #32
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e1a6      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dbf8:	2340      	movs	r3, #64	; 0x40
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e1a2      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc00:	2380      	movs	r3, #128	; 0x80
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e19e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a35      	ldr	r2, [pc, #212]	; (800dce4 <UART_SetConfig+0x344>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d130      	bne.n	800dc74 <UART_SetConfig+0x2d4>
 800dc12:	4b31      	ldr	r3, [pc, #196]	; (800dcd8 <UART_SetConfig+0x338>)
 800dc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	d826      	bhi.n	800dc6c <UART_SetConfig+0x2cc>
 800dc1e:	a201      	add	r2, pc, #4	; (adr r2, 800dc24 <UART_SetConfig+0x284>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc3d 	.word	0x0800dc3d
 800dc28:	0800dc45 	.word	0x0800dc45
 800dc2c:	0800dc4d 	.word	0x0800dc4d
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc5d 	.word	0x0800dc5d
 800dc38:	0800dc65 	.word	0x0800dc65
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e180      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc44:	2304      	movs	r3, #4
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e17c      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc4c:	2308      	movs	r3, #8
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e178      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc54:	2310      	movs	r3, #16
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e174      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc5c:	2320      	movs	r3, #32
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e170      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc64:	2340      	movs	r3, #64	; 0x40
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e16c      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc6c:	2380      	movs	r3, #128	; 0x80
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e168      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a1b      	ldr	r2, [pc, #108]	; (800dce8 <UART_SetConfig+0x348>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d142      	bne.n	800dd04 <UART_SetConfig+0x364>
 800dc7e:	4b16      	ldr	r3, [pc, #88]	; (800dcd8 <UART_SetConfig+0x338>)
 800dc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	2b05      	cmp	r3, #5
 800dc88:	d838      	bhi.n	800dcfc <UART_SetConfig+0x35c>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <UART_SetConfig+0x2f0>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca9 	.word	0x0800dca9
 800dc94:	0800dcb1 	.word	0x0800dcb1
 800dc98:	0800dcb9 	.word	0x0800dcb9
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dced 	.word	0x0800dced
 800dca4:	0800dcf5 	.word	0x0800dcf5
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e14a      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dcb0:	2304      	movs	r3, #4
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e146      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e142      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dcc0:	2310      	movs	r3, #16
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e13e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dcc8:	cfff69f3 	.word	0xcfff69f3
 800dccc:	58000c00 	.word	0x58000c00
 800dcd0:	11fff4ff 	.word	0x11fff4ff
 800dcd4:	40011000 	.word	0x40011000
 800dcd8:	58024400 	.word	0x58024400
 800dcdc:	40004400 	.word	0x40004400
 800dce0:	40004800 	.word	0x40004800
 800dce4:	40004c00 	.word	0x40004c00
 800dce8:	40005000 	.word	0x40005000
 800dcec:	2320      	movs	r3, #32
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e128      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dcf4:	2340      	movs	r3, #64	; 0x40
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e124      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dcfc:	2380      	movs	r3, #128	; 0x80
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e120      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4acb      	ldr	r2, [pc, #812]	; (800e038 <UART_SetConfig+0x698>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d176      	bne.n	800ddfc <UART_SetConfig+0x45c>
 800dd0e:	4bcb      	ldr	r3, [pc, #812]	; (800e03c <UART_SetConfig+0x69c>)
 800dd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd16:	2b28      	cmp	r3, #40	; 0x28
 800dd18:	d86c      	bhi.n	800ddf4 <UART_SetConfig+0x454>
 800dd1a:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <UART_SetConfig+0x380>)
 800dd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd20:	0800ddc5 	.word	0x0800ddc5
 800dd24:	0800ddf5 	.word	0x0800ddf5
 800dd28:	0800ddf5 	.word	0x0800ddf5
 800dd2c:	0800ddf5 	.word	0x0800ddf5
 800dd30:	0800ddf5 	.word	0x0800ddf5
 800dd34:	0800ddf5 	.word	0x0800ddf5
 800dd38:	0800ddf5 	.word	0x0800ddf5
 800dd3c:	0800ddf5 	.word	0x0800ddf5
 800dd40:	0800ddcd 	.word	0x0800ddcd
 800dd44:	0800ddf5 	.word	0x0800ddf5
 800dd48:	0800ddf5 	.word	0x0800ddf5
 800dd4c:	0800ddf5 	.word	0x0800ddf5
 800dd50:	0800ddf5 	.word	0x0800ddf5
 800dd54:	0800ddf5 	.word	0x0800ddf5
 800dd58:	0800ddf5 	.word	0x0800ddf5
 800dd5c:	0800ddf5 	.word	0x0800ddf5
 800dd60:	0800ddd5 	.word	0x0800ddd5
 800dd64:	0800ddf5 	.word	0x0800ddf5
 800dd68:	0800ddf5 	.word	0x0800ddf5
 800dd6c:	0800ddf5 	.word	0x0800ddf5
 800dd70:	0800ddf5 	.word	0x0800ddf5
 800dd74:	0800ddf5 	.word	0x0800ddf5
 800dd78:	0800ddf5 	.word	0x0800ddf5
 800dd7c:	0800ddf5 	.word	0x0800ddf5
 800dd80:	0800dddd 	.word	0x0800dddd
 800dd84:	0800ddf5 	.word	0x0800ddf5
 800dd88:	0800ddf5 	.word	0x0800ddf5
 800dd8c:	0800ddf5 	.word	0x0800ddf5
 800dd90:	0800ddf5 	.word	0x0800ddf5
 800dd94:	0800ddf5 	.word	0x0800ddf5
 800dd98:	0800ddf5 	.word	0x0800ddf5
 800dd9c:	0800ddf5 	.word	0x0800ddf5
 800dda0:	0800dde5 	.word	0x0800dde5
 800dda4:	0800ddf5 	.word	0x0800ddf5
 800dda8:	0800ddf5 	.word	0x0800ddf5
 800ddac:	0800ddf5 	.word	0x0800ddf5
 800ddb0:	0800ddf5 	.word	0x0800ddf5
 800ddb4:	0800ddf5 	.word	0x0800ddf5
 800ddb8:	0800ddf5 	.word	0x0800ddf5
 800ddbc:	0800ddf5 	.word	0x0800ddf5
 800ddc0:	0800dded 	.word	0x0800dded
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e0bc      	b.n	800df46 <UART_SetConfig+0x5a6>
 800ddcc:	2304      	movs	r3, #4
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e0b8      	b.n	800df46 <UART_SetConfig+0x5a6>
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e0b4      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dddc:	2310      	movs	r3, #16
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e0b0      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dde4:	2320      	movs	r3, #32
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e0ac      	b.n	800df46 <UART_SetConfig+0x5a6>
 800ddec:	2340      	movs	r3, #64	; 0x40
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e0a8      	b.n	800df46 <UART_SetConfig+0x5a6>
 800ddf4:	2380      	movs	r3, #128	; 0x80
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e0a4      	b.n	800df46 <UART_SetConfig+0x5a6>
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a8f      	ldr	r2, [pc, #572]	; (800e040 <UART_SetConfig+0x6a0>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d130      	bne.n	800de68 <UART_SetConfig+0x4c8>
 800de06:	4b8d      	ldr	r3, [pc, #564]	; (800e03c <UART_SetConfig+0x69c>)
 800de08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0a:	f003 0307 	and.w	r3, r3, #7
 800de0e:	2b05      	cmp	r3, #5
 800de10:	d826      	bhi.n	800de60 <UART_SetConfig+0x4c0>
 800de12:	a201      	add	r2, pc, #4	; (adr r2, 800de18 <UART_SetConfig+0x478>)
 800de14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de18:	0800de31 	.word	0x0800de31
 800de1c:	0800de39 	.word	0x0800de39
 800de20:	0800de41 	.word	0x0800de41
 800de24:	0800de49 	.word	0x0800de49
 800de28:	0800de51 	.word	0x0800de51
 800de2c:	0800de59 	.word	0x0800de59
 800de30:	2300      	movs	r3, #0
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e086      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de38:	2304      	movs	r3, #4
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e082      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de40:	2308      	movs	r3, #8
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e07e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de48:	2310      	movs	r3, #16
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e07a      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de50:	2320      	movs	r3, #32
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e076      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de58:	2340      	movs	r3, #64	; 0x40
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e072      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de60:	2380      	movs	r3, #128	; 0x80
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e06e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a75      	ldr	r2, [pc, #468]	; (800e044 <UART_SetConfig+0x6a4>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d130      	bne.n	800ded4 <UART_SetConfig+0x534>
 800de72:	4b72      	ldr	r3, [pc, #456]	; (800e03c <UART_SetConfig+0x69c>)
 800de74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d826      	bhi.n	800decc <UART_SetConfig+0x52c>
 800de7e:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <UART_SetConfig+0x4e4>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800de9d 	.word	0x0800de9d
 800de88:	0800dea5 	.word	0x0800dea5
 800de8c:	0800dead 	.word	0x0800dead
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800debd 	.word	0x0800debd
 800de98:	0800dec5 	.word	0x0800dec5
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e050      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dea4:	2304      	movs	r3, #4
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e04c      	b.n	800df46 <UART_SetConfig+0x5a6>
 800deac:	2308      	movs	r3, #8
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e048      	b.n	800df46 <UART_SetConfig+0x5a6>
 800deb4:	2310      	movs	r3, #16
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e044      	b.n	800df46 <UART_SetConfig+0x5a6>
 800debc:	2320      	movs	r3, #32
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e040      	b.n	800df46 <UART_SetConfig+0x5a6>
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e03c      	b.n	800df46 <UART_SetConfig+0x5a6>
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e038      	b.n	800df46 <UART_SetConfig+0x5a6>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a5b      	ldr	r2, [pc, #364]	; (800e048 <UART_SetConfig+0x6a8>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d130      	bne.n	800df40 <UART_SetConfig+0x5a0>
 800dede:	4b57      	ldr	r3, [pc, #348]	; (800e03c <UART_SetConfig+0x69c>)
 800dee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	d826      	bhi.n	800df38 <UART_SetConfig+0x598>
 800deea:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <UART_SetConfig+0x550>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df11 	.word	0x0800df11
 800def8:	0800df19 	.word	0x0800df19
 800defc:	0800df21 	.word	0x0800df21
 800df00:	0800df29 	.word	0x0800df29
 800df04:	0800df31 	.word	0x0800df31
 800df08:	2302      	movs	r3, #2
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e01a      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df10:	2304      	movs	r3, #4
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e016      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df18:	2308      	movs	r3, #8
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e012      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df20:	2310      	movs	r3, #16
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e00e      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df28:	2320      	movs	r3, #32
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e00a      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df30:	2340      	movs	r3, #64	; 0x40
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e006      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df38:	2380      	movs	r3, #128	; 0x80
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e002      	b.n	800df46 <UART_SetConfig+0x5a6>
 800df40:	2380      	movs	r3, #128	; 0x80
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a3f      	ldr	r2, [pc, #252]	; (800e048 <UART_SetConfig+0x6a8>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	f040 80f8 	bne.w	800e142 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df56:	2b20      	cmp	r3, #32
 800df58:	dc46      	bgt.n	800dfe8 <UART_SetConfig+0x648>
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	f2c0 8082 	blt.w	800e064 <UART_SetConfig+0x6c4>
 800df60:	3b02      	subs	r3, #2
 800df62:	2b1e      	cmp	r3, #30
 800df64:	d87e      	bhi.n	800e064 <UART_SetConfig+0x6c4>
 800df66:	a201      	add	r2, pc, #4	; (adr r2, 800df6c <UART_SetConfig+0x5cc>)
 800df68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6c:	0800dfef 	.word	0x0800dfef
 800df70:	0800e065 	.word	0x0800e065
 800df74:	0800dff7 	.word	0x0800dff7
 800df78:	0800e065 	.word	0x0800e065
 800df7c:	0800e065 	.word	0x0800e065
 800df80:	0800e065 	.word	0x0800e065
 800df84:	0800e007 	.word	0x0800e007
 800df88:	0800e065 	.word	0x0800e065
 800df8c:	0800e065 	.word	0x0800e065
 800df90:	0800e065 	.word	0x0800e065
 800df94:	0800e065 	.word	0x0800e065
 800df98:	0800e065 	.word	0x0800e065
 800df9c:	0800e065 	.word	0x0800e065
 800dfa0:	0800e065 	.word	0x0800e065
 800dfa4:	0800e017 	.word	0x0800e017
 800dfa8:	0800e065 	.word	0x0800e065
 800dfac:	0800e065 	.word	0x0800e065
 800dfb0:	0800e065 	.word	0x0800e065
 800dfb4:	0800e065 	.word	0x0800e065
 800dfb8:	0800e065 	.word	0x0800e065
 800dfbc:	0800e065 	.word	0x0800e065
 800dfc0:	0800e065 	.word	0x0800e065
 800dfc4:	0800e065 	.word	0x0800e065
 800dfc8:	0800e065 	.word	0x0800e065
 800dfcc:	0800e065 	.word	0x0800e065
 800dfd0:	0800e065 	.word	0x0800e065
 800dfd4:	0800e065 	.word	0x0800e065
 800dfd8:	0800e065 	.word	0x0800e065
 800dfdc:	0800e065 	.word	0x0800e065
 800dfe0:	0800e065 	.word	0x0800e065
 800dfe4:	0800e057 	.word	0x0800e057
 800dfe8:	2b40      	cmp	r3, #64	; 0x40
 800dfea:	d037      	beq.n	800e05c <UART_SetConfig+0x6bc>
 800dfec:	e03a      	b.n	800e064 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dfee:	f7fc fceb 	bl	800a9c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800dff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dff4:	e03c      	b.n	800e070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fc fcfa 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e004:	e034      	b.n	800e070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e006:	f107 0318 	add.w	r3, r7, #24
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fc fe46 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e014:	e02c      	b.n	800e070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <UART_SetConfig+0x69c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0320 	and.w	r3, r3, #32
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d016      	beq.n	800e050 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e022:	4b06      	ldr	r3, [pc, #24]	; (800e03c <UART_SetConfig+0x69c>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	08db      	lsrs	r3, r3, #3
 800e028:	f003 0303 	and.w	r3, r3, #3
 800e02c:	4a07      	ldr	r2, [pc, #28]	; (800e04c <UART_SetConfig+0x6ac>)
 800e02e:	fa22 f303 	lsr.w	r3, r2, r3
 800e032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e034:	e01c      	b.n	800e070 <UART_SetConfig+0x6d0>
 800e036:	bf00      	nop
 800e038:	40011400 	.word	0x40011400
 800e03c:	58024400 	.word	0x58024400
 800e040:	40007800 	.word	0x40007800
 800e044:	40007c00 	.word	0x40007c00
 800e048:	58000c00 	.word	0x58000c00
 800e04c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e050:	4b9d      	ldr	r3, [pc, #628]	; (800e2c8 <UART_SetConfig+0x928>)
 800e052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e054:	e00c      	b.n	800e070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e056:	4b9d      	ldr	r3, [pc, #628]	; (800e2cc <UART_SetConfig+0x92c>)
 800e058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e05a:	e009      	b.n	800e070 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e062:	e005      	b.n	800e070 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e064:	2300      	movs	r3, #0
 800e066:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e06e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e072:	2b00      	cmp	r3, #0
 800e074:	f000 81de 	beq.w	800e434 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07c:	4a94      	ldr	r2, [pc, #592]	; (800e2d0 <UART_SetConfig+0x930>)
 800e07e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e082:	461a      	mov	r2, r3
 800e084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e086:	fbb3 f3f2 	udiv	r3, r3, r2
 800e08a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	4613      	mov	r3, r2
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	4413      	add	r3, r2
 800e096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e098:	429a      	cmp	r2, r3
 800e09a:	d305      	bcc.n	800e0a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d903      	bls.n	800e0b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0ae:	e1c1      	b.n	800e434 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	60bb      	str	r3, [r7, #8]
 800e0b6:	60fa      	str	r2, [r7, #12]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0bc:	4a84      	ldr	r2, [pc, #528]	; (800e2d0 <UART_SetConfig+0x930>)
 800e0be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	607a      	str	r2, [r7, #4]
 800e0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0d2:	f7f2 f955 	bl	8000380 <__aeabi_uldivmod>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	4610      	mov	r0, r2
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f04f 0200 	mov.w	r2, #0
 800e0e2:	f04f 0300 	mov.w	r3, #0
 800e0e6:	020b      	lsls	r3, r1, #8
 800e0e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0ec:	0202      	lsls	r2, r0, #8
 800e0ee:	6979      	ldr	r1, [r7, #20]
 800e0f0:	6849      	ldr	r1, [r1, #4]
 800e0f2:	0849      	lsrs	r1, r1, #1
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	eb12 0804 	adds.w	r8, r2, r4
 800e0fe:	eb43 0905 	adc.w	r9, r3, r5
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	469a      	mov	sl, r3
 800e10a:	4693      	mov	fp, r2
 800e10c:	4652      	mov	r2, sl
 800e10e:	465b      	mov	r3, fp
 800e110:	4640      	mov	r0, r8
 800e112:	4649      	mov	r1, r9
 800e114:	f7f2 f934 	bl	8000380 <__aeabi_uldivmod>
 800e118:	4602      	mov	r2, r0
 800e11a:	460b      	mov	r3, r1
 800e11c:	4613      	mov	r3, r2
 800e11e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e126:	d308      	bcc.n	800e13a <UART_SetConfig+0x79a>
 800e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e12e:	d204      	bcs.n	800e13a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e136:	60da      	str	r2, [r3, #12]
 800e138:	e17c      	b.n	800e434 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e140:	e178      	b.n	800e434 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	69db      	ldr	r3, [r3, #28]
 800e146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e14a:	f040 80c5 	bne.w	800e2d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e14e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e152:	2b20      	cmp	r3, #32
 800e154:	dc48      	bgt.n	800e1e8 <UART_SetConfig+0x848>
 800e156:	2b00      	cmp	r3, #0
 800e158:	db7b      	blt.n	800e252 <UART_SetConfig+0x8b2>
 800e15a:	2b20      	cmp	r3, #32
 800e15c:	d879      	bhi.n	800e252 <UART_SetConfig+0x8b2>
 800e15e:	a201      	add	r2, pc, #4	; (adr r2, 800e164 <UART_SetConfig+0x7c4>)
 800e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e164:	0800e1ef 	.word	0x0800e1ef
 800e168:	0800e1f7 	.word	0x0800e1f7
 800e16c:	0800e253 	.word	0x0800e253
 800e170:	0800e253 	.word	0x0800e253
 800e174:	0800e1ff 	.word	0x0800e1ff
 800e178:	0800e253 	.word	0x0800e253
 800e17c:	0800e253 	.word	0x0800e253
 800e180:	0800e253 	.word	0x0800e253
 800e184:	0800e20f 	.word	0x0800e20f
 800e188:	0800e253 	.word	0x0800e253
 800e18c:	0800e253 	.word	0x0800e253
 800e190:	0800e253 	.word	0x0800e253
 800e194:	0800e253 	.word	0x0800e253
 800e198:	0800e253 	.word	0x0800e253
 800e19c:	0800e253 	.word	0x0800e253
 800e1a0:	0800e253 	.word	0x0800e253
 800e1a4:	0800e21f 	.word	0x0800e21f
 800e1a8:	0800e253 	.word	0x0800e253
 800e1ac:	0800e253 	.word	0x0800e253
 800e1b0:	0800e253 	.word	0x0800e253
 800e1b4:	0800e253 	.word	0x0800e253
 800e1b8:	0800e253 	.word	0x0800e253
 800e1bc:	0800e253 	.word	0x0800e253
 800e1c0:	0800e253 	.word	0x0800e253
 800e1c4:	0800e253 	.word	0x0800e253
 800e1c8:	0800e253 	.word	0x0800e253
 800e1cc:	0800e253 	.word	0x0800e253
 800e1d0:	0800e253 	.word	0x0800e253
 800e1d4:	0800e253 	.word	0x0800e253
 800e1d8:	0800e253 	.word	0x0800e253
 800e1dc:	0800e253 	.word	0x0800e253
 800e1e0:	0800e253 	.word	0x0800e253
 800e1e4:	0800e245 	.word	0x0800e245
 800e1e8:	2b40      	cmp	r3, #64	; 0x40
 800e1ea:	d02e      	beq.n	800e24a <UART_SetConfig+0x8aa>
 800e1ec:	e031      	b.n	800e252 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1ee:	f7fa fbf3 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800e1f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1f4:	e033      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1f6:	f7fa fc05 	bl	8008a04 <HAL_RCC_GetPCLK2Freq>
 800e1fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1fc:	e02f      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e202:	4618      	mov	r0, r3
 800e204:	f7fc fbf6 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e20c:	e027      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e20e:	f107 0318 	add.w	r3, r7, #24
 800e212:	4618      	mov	r0, r3
 800e214:	f7fc fd42 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21c:	e01f      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e21e:	4b2d      	ldr	r3, [pc, #180]	; (800e2d4 <UART_SetConfig+0x934>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f003 0320 	and.w	r3, r3, #32
 800e226:	2b00      	cmp	r3, #0
 800e228:	d009      	beq.n	800e23e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e22a:	4b2a      	ldr	r3, [pc, #168]	; (800e2d4 <UART_SetConfig+0x934>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	08db      	lsrs	r3, r3, #3
 800e230:	f003 0303 	and.w	r3, r3, #3
 800e234:	4a24      	ldr	r2, [pc, #144]	; (800e2c8 <UART_SetConfig+0x928>)
 800e236:	fa22 f303 	lsr.w	r3, r2, r3
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e23c:	e00f      	b.n	800e25e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e23e:	4b22      	ldr	r3, [pc, #136]	; (800e2c8 <UART_SetConfig+0x928>)
 800e240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e242:	e00c      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e244:	4b21      	ldr	r3, [pc, #132]	; (800e2cc <UART_SetConfig+0x92c>)
 800e246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e248:	e009      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e250:	e005      	b.n	800e25e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e252:	2300      	movs	r3, #0
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e25c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 80e7 	beq.w	800e434 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	4a19      	ldr	r2, [pc, #100]	; (800e2d0 <UART_SetConfig+0x930>)
 800e26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e270:	461a      	mov	r2, r3
 800e272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e274:	fbb3 f3f2 	udiv	r3, r3, r2
 800e278:	005a      	lsls	r2, r3, #1
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	085b      	lsrs	r3, r3, #1
 800e280:	441a      	add	r2, r3
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	fbb2 f3f3 	udiv	r3, r2, r3
 800e28a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	2b0f      	cmp	r3, #15
 800e290:	d916      	bls.n	800e2c0 <UART_SetConfig+0x920>
 800e292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e298:	d212      	bcs.n	800e2c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	f023 030f 	bic.w	r3, r3, #15
 800e2a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a6:	085b      	lsrs	r3, r3, #1
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	f003 0307 	and.w	r3, r3, #7
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e2bc:	60da      	str	r2, [r3, #12]
 800e2be:	e0b9      	b.n	800e434 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2c6:	e0b5      	b.n	800e434 <UART_SetConfig+0xa94>
 800e2c8:	03d09000 	.word	0x03d09000
 800e2cc:	003d0900 	.word	0x003d0900
 800e2d0:	080142fc 	.word	0x080142fc
 800e2d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2dc:	2b20      	cmp	r3, #32
 800e2de:	dc49      	bgt.n	800e374 <UART_SetConfig+0x9d4>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	db7c      	blt.n	800e3de <UART_SetConfig+0xa3e>
 800e2e4:	2b20      	cmp	r3, #32
 800e2e6:	d87a      	bhi.n	800e3de <UART_SetConfig+0xa3e>
 800e2e8:	a201      	add	r2, pc, #4	; (adr r2, 800e2f0 <UART_SetConfig+0x950>)
 800e2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ee:	bf00      	nop
 800e2f0:	0800e37b 	.word	0x0800e37b
 800e2f4:	0800e383 	.word	0x0800e383
 800e2f8:	0800e3df 	.word	0x0800e3df
 800e2fc:	0800e3df 	.word	0x0800e3df
 800e300:	0800e38b 	.word	0x0800e38b
 800e304:	0800e3df 	.word	0x0800e3df
 800e308:	0800e3df 	.word	0x0800e3df
 800e30c:	0800e3df 	.word	0x0800e3df
 800e310:	0800e39b 	.word	0x0800e39b
 800e314:	0800e3df 	.word	0x0800e3df
 800e318:	0800e3df 	.word	0x0800e3df
 800e31c:	0800e3df 	.word	0x0800e3df
 800e320:	0800e3df 	.word	0x0800e3df
 800e324:	0800e3df 	.word	0x0800e3df
 800e328:	0800e3df 	.word	0x0800e3df
 800e32c:	0800e3df 	.word	0x0800e3df
 800e330:	0800e3ab 	.word	0x0800e3ab
 800e334:	0800e3df 	.word	0x0800e3df
 800e338:	0800e3df 	.word	0x0800e3df
 800e33c:	0800e3df 	.word	0x0800e3df
 800e340:	0800e3df 	.word	0x0800e3df
 800e344:	0800e3df 	.word	0x0800e3df
 800e348:	0800e3df 	.word	0x0800e3df
 800e34c:	0800e3df 	.word	0x0800e3df
 800e350:	0800e3df 	.word	0x0800e3df
 800e354:	0800e3df 	.word	0x0800e3df
 800e358:	0800e3df 	.word	0x0800e3df
 800e35c:	0800e3df 	.word	0x0800e3df
 800e360:	0800e3df 	.word	0x0800e3df
 800e364:	0800e3df 	.word	0x0800e3df
 800e368:	0800e3df 	.word	0x0800e3df
 800e36c:	0800e3df 	.word	0x0800e3df
 800e370:	0800e3d1 	.word	0x0800e3d1
 800e374:	2b40      	cmp	r3, #64	; 0x40
 800e376:	d02e      	beq.n	800e3d6 <UART_SetConfig+0xa36>
 800e378:	e031      	b.n	800e3de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e37a:	f7fa fb2d 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800e37e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e380:	e033      	b.n	800e3ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e382:	f7fa fb3f 	bl	8008a04 <HAL_RCC_GetPCLK2Freq>
 800e386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e388:	e02f      	b.n	800e3ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fc fb30 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e398:	e027      	b.n	800e3ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e39a:	f107 0318 	add.w	r3, r7, #24
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fc fc7c 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3a8:	e01f      	b.n	800e3ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3aa:	4b2d      	ldr	r3, [pc, #180]	; (800e460 <UART_SetConfig+0xac0>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d009      	beq.n	800e3ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3b6:	4b2a      	ldr	r3, [pc, #168]	; (800e460 <UART_SetConfig+0xac0>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	08db      	lsrs	r3, r3, #3
 800e3bc:	f003 0303 	and.w	r3, r3, #3
 800e3c0:	4a28      	ldr	r2, [pc, #160]	; (800e464 <UART_SetConfig+0xac4>)
 800e3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800e3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3c8:	e00f      	b.n	800e3ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e3ca:	4b26      	ldr	r3, [pc, #152]	; (800e464 <UART_SetConfig+0xac4>)
 800e3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ce:	e00c      	b.n	800e3ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3d0:	4b25      	ldr	r3, [pc, #148]	; (800e468 <UART_SetConfig+0xac8>)
 800e3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3d4:	e009      	b.n	800e3ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3dc:	e005      	b.n	800e3ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3e8:	bf00      	nop
    }

    if (pclk != 0U)
 800e3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d021      	beq.n	800e434 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f4:	4a1d      	ldr	r2, [pc, #116]	; (800e46c <UART_SetConfig+0xacc>)
 800e3f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	085b      	lsrs	r3, r3, #1
 800e408:	441a      	add	r2, r3
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e412:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	2b0f      	cmp	r3, #15
 800e418:	d909      	bls.n	800e42e <UART_SetConfig+0xa8e>
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e420:	d205      	bcs.n	800e42e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	b29a      	uxth	r2, r3
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60da      	str	r2, [r3, #12]
 800e42c:	e002      	b.n	800e434 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2201      	movs	r2, #1
 800e438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	2201      	movs	r2, #1
 800e440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2200      	movs	r2, #0
 800e448:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	2200      	movs	r2, #0
 800e44e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e450:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e454:	4618      	mov	r0, r3
 800e456:	3748      	adds	r7, #72	; 0x48
 800e458:	46bd      	mov	sp, r7
 800e45a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e45e:	bf00      	nop
 800e460:	58024400 	.word	0x58024400
 800e464:	03d09000 	.word	0x03d09000
 800e468:	003d0900 	.word	0x003d0900
 800e46c:	080142fc 	.word	0x080142fc

0800e470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e47c:	f003 0308 	and.w	r3, r3, #8
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00a      	beq.n	800e49a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	430a      	orrs	r2, r1
 800e498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00a      	beq.n	800e4bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	430a      	orrs	r2, r1
 800e4ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c0:	f003 0302 	and.w	r3, r3, #2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00a      	beq.n	800e4de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	430a      	orrs	r2, r1
 800e4dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e2:	f003 0304 	and.w	r3, r3, #4
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00a      	beq.n	800e500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	430a      	orrs	r2, r1
 800e4fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e504:	f003 0310 	and.w	r3, r3, #16
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00a      	beq.n	800e522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	430a      	orrs	r2, r1
 800e520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e526:	f003 0320 	and.w	r3, r3, #32
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00a      	beq.n	800e544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	430a      	orrs	r2, r1
 800e542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d01a      	beq.n	800e586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	430a      	orrs	r2, r1
 800e564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e56a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e56e:	d10a      	bne.n	800e586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	430a      	orrs	r2, r1
 800e584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00a      	beq.n	800e5a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	430a      	orrs	r2, r1
 800e5a6:	605a      	str	r2, [r3, #4]
  }
}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b098      	sub	sp, #96	; 0x60
 800e5b8:	af02      	add	r7, sp, #8
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5c4:	f7f4 f9ea 	bl	800299c <HAL_GetTick>
 800e5c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f003 0308 	and.w	r3, r3, #8
 800e5d4:	2b08      	cmp	r3, #8
 800e5d6:	d12f      	bne.n	800e638 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f88e 	bl	800e708 <UART_WaitOnFlagUntilTimeout>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d022      	beq.n	800e638 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	e853 3f00 	ldrex	r3, [r3]
 800e5fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e606:	653b      	str	r3, [r7, #80]	; 0x50
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	461a      	mov	r2, r3
 800e60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e610:	647b      	str	r3, [r7, #68]	; 0x44
 800e612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e6      	bne.n	800e5f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2220      	movs	r2, #32
 800e628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e634:	2303      	movs	r3, #3
 800e636:	e063      	b.n	800e700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f003 0304 	and.w	r3, r3, #4
 800e642:	2b04      	cmp	r3, #4
 800e644:	d149      	bne.n	800e6da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e646:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e64e:	2200      	movs	r2, #0
 800e650:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f857 	bl	800e708 <UART_WaitOnFlagUntilTimeout>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d03c      	beq.n	800e6da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	e853 3f00 	ldrex	r3, [r3]
 800e66c:	623b      	str	r3, [r7, #32]
   return(result);
 800e66e:	6a3b      	ldr	r3, [r7, #32]
 800e670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e674:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67e:	633b      	str	r3, [r7, #48]	; 0x30
 800e680:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e686:	e841 2300 	strex	r3, r2, [r1]
 800e68a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1e6      	bne.n	800e660 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3308      	adds	r3, #8
 800e698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	e853 3f00 	ldrex	r3, [r3]
 800e6a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f023 0301 	bic.w	r3, r3, #1
 800e6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6b2:	61fa      	str	r2, [r7, #28]
 800e6b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b6:	69b9      	ldr	r1, [r7, #24]
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	e841 2300 	strex	r3, r2, [r1]
 800e6be:	617b      	str	r3, [r7, #20]
   return(result);
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1e5      	bne.n	800e692 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2220      	movs	r2, #32
 800e6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	e012      	b.n	800e700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2220      	movs	r2, #32
 800e6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3758      	adds	r7, #88	; 0x58
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	603b      	str	r3, [r7, #0]
 800e714:	4613      	mov	r3, r2
 800e716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e718:	e04f      	b.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e720:	d04b      	beq.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e722:	f7f4 f93b 	bl	800299c <HAL_GetTick>
 800e726:	4602      	mov	r2, r0
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	69ba      	ldr	r2, [r7, #24]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d302      	bcc.n	800e738 <UART_WaitOnFlagUntilTimeout+0x30>
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e738:	2303      	movs	r3, #3
 800e73a:	e04e      	b.n	800e7da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f003 0304 	and.w	r3, r3, #4
 800e746:	2b00      	cmp	r3, #0
 800e748:	d037      	beq.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	2b80      	cmp	r3, #128	; 0x80
 800e74e:	d034      	beq.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b40      	cmp	r3, #64	; 0x40
 800e754:	d031      	beq.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	69db      	ldr	r3, [r3, #28]
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b08      	cmp	r3, #8
 800e762:	d110      	bne.n	800e786 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2208      	movs	r2, #8
 800e76a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f000 f95b 	bl	800ea28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2208      	movs	r2, #8
 800e776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	e029      	b.n	800e7da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	69db      	ldr	r3, [r3, #28]
 800e78c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e794:	d111      	bne.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e79e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 f941 	bl	800ea28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e00f      	b.n	800e7da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	69da      	ldr	r2, [r3, #28]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	bf0c      	ite	eq
 800e7ca:	2301      	moveq	r3, #1
 800e7cc:	2300      	movne	r3, #0
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d0a0      	beq.n	800e71a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b0a3      	sub	sp, #140	; 0x8c
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	88fa      	ldrh	r2, [r7, #6]
 800e7fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	88fa      	ldrh	r2, [r7, #6]
 800e804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2200      	movs	r2, #0
 800e80c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e816:	d10e      	bne.n	800e836 <UART_Start_Receive_IT+0x52>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	691b      	ldr	r3, [r3, #16]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d105      	bne.n	800e82c <UART_Start_Receive_IT+0x48>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e826:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e82a:	e02d      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	22ff      	movs	r2, #255	; 0xff
 800e830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e834:	e028      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10d      	bne.n	800e85a <UART_Start_Receive_IT+0x76>
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d104      	bne.n	800e850 <UART_Start_Receive_IT+0x6c>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	22ff      	movs	r2, #255	; 0xff
 800e84a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e84e:	e01b      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	227f      	movs	r2, #127	; 0x7f
 800e854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e858:	e016      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e862:	d10d      	bne.n	800e880 <UART_Start_Receive_IT+0x9c>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d104      	bne.n	800e876 <UART_Start_Receive_IT+0x92>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	227f      	movs	r2, #127	; 0x7f
 800e870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e874:	e008      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	223f      	movs	r2, #63	; 0x3f
 800e87a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e87e:	e003      	b.n	800e888 <UART_Start_Receive_IT+0xa4>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2200      	movs	r2, #0
 800e884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2222      	movs	r2, #34	; 0x22
 800e894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	3308      	adds	r3, #8
 800e89e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8a2:	e853 3f00 	ldrex	r3, [r3]
 800e8a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e8a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8aa:	f043 0301 	orr.w	r3, r3, #1
 800e8ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e8bc:	673a      	str	r2, [r7, #112]	; 0x70
 800e8be:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e8c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8c4:	e841 2300 	strex	r3, r2, [r1]
 800e8c8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e8ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e3      	bne.n	800e898 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8d8:	d14f      	bne.n	800e97a <UART_Start_Receive_IT+0x196>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8e0:	88fa      	ldrh	r2, [r7, #6]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d349      	bcc.n	800e97a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ee:	d107      	bne.n	800e900 <UART_Start_Receive_IT+0x11c>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	691b      	ldr	r3, [r3, #16]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d103      	bne.n	800e900 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	4a47      	ldr	r2, [pc, #284]	; (800ea18 <UART_Start_Receive_IT+0x234>)
 800e8fc:	675a      	str	r2, [r3, #116]	; 0x74
 800e8fe:	e002      	b.n	800e906 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4a46      	ldr	r2, [pc, #280]	; (800ea1c <UART_Start_Receive_IT+0x238>)
 800e904:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	691b      	ldr	r3, [r3, #16]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d01a      	beq.n	800e944 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e916:	e853 3f00 	ldrex	r3, [r3]
 800e91a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	461a      	mov	r2, r3
 800e92c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e930:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e932:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e934:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e936:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e938:	e841 2300 	strex	r3, r2, [r1]
 800e93c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1e4      	bne.n	800e90e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3308      	adds	r3, #8
 800e94a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94e:	e853 3f00 	ldrex	r3, [r3]
 800e952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e95a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3308      	adds	r3, #8
 800e962:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e964:	64ba      	str	r2, [r7, #72]	; 0x48
 800e966:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e968:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e96a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e96c:	e841 2300 	strex	r3, r2, [r1]
 800e970:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e5      	bne.n	800e944 <UART_Start_Receive_IT+0x160>
 800e978:	e046      	b.n	800ea08 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e982:	d107      	bne.n	800e994 <UART_Start_Receive_IT+0x1b0>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d103      	bne.n	800e994 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4a24      	ldr	r2, [pc, #144]	; (800ea20 <UART_Start_Receive_IT+0x23c>)
 800e990:	675a      	str	r2, [r3, #116]	; 0x74
 800e992:	e002      	b.n	800e99a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	4a23      	ldr	r2, [pc, #140]	; (800ea24 <UART_Start_Receive_IT+0x240>)
 800e998:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	691b      	ldr	r3, [r3, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d019      	beq.n	800e9d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9aa:	e853 3f00 	ldrex	r3, [r3]
 800e9ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e9b6:	677b      	str	r3, [r7, #116]	; 0x74
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e9c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c8:	e841 2300 	strex	r3, r2, [r1]
 800e9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d1e6      	bne.n	800e9a2 <UART_Start_Receive_IT+0x1be>
 800e9d4:	e018      	b.n	800ea08 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	e853 3f00 	ldrex	r3, [r3]
 800e9e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	f043 0320 	orr.w	r3, r3, #32
 800e9ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9f4:	623b      	str	r3, [r7, #32]
 800e9f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f8:	69f9      	ldr	r1, [r7, #28]
 800e9fa:	6a3a      	ldr	r2, [r7, #32]
 800e9fc:	e841 2300 	strex	r3, r2, [r1]
 800ea00:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1e6      	bne.n	800e9d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	378c      	adds	r7, #140	; 0x8c
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	0800f249 	.word	0x0800f249
 800ea1c:	0800eee9 	.word	0x0800eee9
 800ea20:	0800ed31 	.word	0x0800ed31
 800ea24:	0800eb79 	.word	0x0800eb79

0800ea28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b095      	sub	sp, #84	; 0x54
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea38:	e853 3f00 	ldrex	r3, [r3]
 800ea3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ea50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea56:	e841 2300 	strex	r3, r2, [r1]
 800ea5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1e6      	bne.n	800ea30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	3308      	adds	r3, #8
 800ea68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	e853 3f00 	ldrex	r3, [r3]
 800ea70:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea72:	69fa      	ldr	r2, [r7, #28]
 800ea74:	4b1e      	ldr	r3, [pc, #120]	; (800eaf0 <UART_EndRxTransfer+0xc8>)
 800ea76:	4013      	ands	r3, r2
 800ea78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3308      	adds	r3, #8
 800ea80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea8a:	e841 2300 	strex	r3, r2, [r1]
 800ea8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1e5      	bne.n	800ea62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d118      	bne.n	800ead0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	e853 3f00 	ldrex	r3, [r3]
 800eaaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f023 0310 	bic.w	r3, r3, #16
 800eab2:	647b      	str	r3, [r7, #68]	; 0x44
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	461a      	mov	r2, r3
 800eaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eabc:	61bb      	str	r3, [r7, #24]
 800eabe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac0:	6979      	ldr	r1, [r7, #20]
 800eac2:	69ba      	ldr	r2, [r7, #24]
 800eac4:	e841 2300 	strex	r3, r2, [r1]
 800eac8:	613b      	str	r3, [r7, #16]
   return(result);
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1e6      	bne.n	800ea9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eae4:	bf00      	nop
 800eae6:	3754      	adds	r7, #84	; 0x54
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	effffffe 	.word	0xeffffffe

0800eaf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7fe ff2e 	bl	800d974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb18:	bf00      	nop
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b088      	sub	sp, #32
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	e853 3f00 	ldrex	r3, [r3]
 800eb34:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb3c:	61fb      	str	r3, [r7, #28]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	461a      	mov	r2, r3
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	61bb      	str	r3, [r7, #24]
 800eb48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4a:	6979      	ldr	r1, [r7, #20]
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	e841 2300 	strex	r3, r2, [r1]
 800eb52:	613b      	str	r3, [r7, #16]
   return(result);
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e6      	bne.n	800eb28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2220      	movs	r2, #32
 800eb5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7fe fef9 	bl	800d960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb6e:	bf00      	nop
 800eb70:	3720      	adds	r7, #32
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
	...

0800eb78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b09c      	sub	sp, #112	; 0x70
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb90:	2b22      	cmp	r3, #34	; 0x22
 800eb92:	f040 80be 	bne.w	800ed12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eba0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eba4:	b2d9      	uxtb	r1, r3
 800eba6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebb0:	400a      	ands	r2, r1
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebba:	1c5a      	adds	r2, r3, #1
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	b29a      	uxth	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f040 80a1 	bne.w	800ed22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe8:	e853 3f00 	ldrex	r3, [r3]
 800ebec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ebee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec06:	e841 2300 	strex	r3, r2, [r1]
 800ec0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1e6      	bne.n	800ebe0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	3308      	adds	r3, #8
 800ec18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	e853 3f00 	ldrex	r3, [r3]
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec24:	f023 0301 	bic.w	r3, r3, #1
 800ec28:	667b      	str	r3, [r7, #100]	; 0x64
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3308      	adds	r3, #8
 800ec30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec32:	647a      	str	r2, [r7, #68]	; 0x44
 800ec34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec3a:	e841 2300 	strex	r3, r2, [r1]
 800ec3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1e5      	bne.n	800ec12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2220      	movs	r2, #32
 800ec4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a33      	ldr	r2, [pc, #204]	; (800ed2c <UART_RxISR_8BIT+0x1b4>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d01f      	beq.n	800eca4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d018      	beq.n	800eca4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7a:	e853 3f00 	ldrex	r3, [r3]
 800ec7e:	623b      	str	r3, [r7, #32]
   return(result);
 800ec80:	6a3b      	ldr	r3, [r7, #32]
 800ec82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec86:	663b      	str	r3, [r7, #96]	; 0x60
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec90:	633b      	str	r3, [r7, #48]	; 0x30
 800ec92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec98:	e841 2300 	strex	r3, r2, [r1]
 800ec9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1e6      	bne.n	800ec72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d12e      	bne.n	800ed0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	e853 3f00 	ldrex	r3, [r3]
 800ecbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f023 0310 	bic.w	r3, r3, #16
 800ecc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	461a      	mov	r2, r3
 800ecce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecd0:	61fb      	str	r3, [r7, #28]
 800ecd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd4:	69b9      	ldr	r1, [r7, #24]
 800ecd6:	69fa      	ldr	r2, [r7, #28]
 800ecd8:	e841 2300 	strex	r3, r2, [r1]
 800ecdc:	617b      	str	r3, [r7, #20]
   return(result);
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d1e6      	bne.n	800ecb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	69db      	ldr	r3, [r3, #28]
 800ecea:	f003 0310 	and.w	r3, r3, #16
 800ecee:	2b10      	cmp	r3, #16
 800ecf0:	d103      	bne.n	800ecfa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2210      	movs	r2, #16
 800ecf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed00:	4619      	mov	r1, r3
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7fe fe40 	bl	800d988 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed08:	e00b      	b.n	800ed22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7f1 fcf0 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800ed10:	e007      	b.n	800ed22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	699a      	ldr	r2, [r3, #24]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f042 0208 	orr.w	r2, r2, #8
 800ed20:	619a      	str	r2, [r3, #24]
}
 800ed22:	bf00      	nop
 800ed24:	3770      	adds	r7, #112	; 0x70
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	58000c00 	.word	0x58000c00

0800ed30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b09c      	sub	sp, #112	; 0x70
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed48:	2b22      	cmp	r3, #34	; 0x22
 800ed4a:	f040 80be 	bne.w	800eeca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ed62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ed66:	4013      	ands	r3, r2
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed72:	1c9a      	adds	r2, r3, #2
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	3b01      	subs	r3, #1
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f040 80a1 	bne.w	800eeda <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eda0:	e853 3f00 	ldrex	r3, [r3]
 800eda4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800eda6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edac:	667b      	str	r3, [r7, #100]	; 0x64
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	461a      	mov	r2, r3
 800edb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edb6:	657b      	str	r3, [r7, #84]	; 0x54
 800edb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edbe:	e841 2300 	strex	r3, r2, [r1]
 800edc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800edc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1e6      	bne.n	800ed98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3308      	adds	r3, #8
 800edd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd4:	e853 3f00 	ldrex	r3, [r3]
 800edd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eddc:	f023 0301 	bic.w	r3, r3, #1
 800ede0:	663b      	str	r3, [r7, #96]	; 0x60
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	3308      	adds	r3, #8
 800ede8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edea:	643a      	str	r2, [r7, #64]	; 0x40
 800edec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800edf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edf2:	e841 2300 	strex	r3, r2, [r1]
 800edf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1e5      	bne.n	800edca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2220      	movs	r2, #32
 800ee02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a33      	ldr	r2, [pc, #204]	; (800eee4 <UART_RxISR_16BIT+0x1b4>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d01f      	beq.n	800ee5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d018      	beq.n	800ee5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6a3b      	ldr	r3, [r7, #32]
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	461a      	mov	r2, r3
 800ee46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e6      	bne.n	800ee2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d12e      	bne.n	800eec2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	e853 3f00 	ldrex	r3, [r3]
 800ee76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	f023 0310 	bic.w	r3, r3, #16
 800ee7e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	461a      	mov	r2, r3
 800ee86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee88:	61bb      	str	r3, [r7, #24]
 800ee8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8c:	6979      	ldr	r1, [r7, #20]
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	e841 2300 	strex	r3, r2, [r1]
 800ee94:	613b      	str	r3, [r7, #16]
   return(result);
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1e6      	bne.n	800ee6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	f003 0310 	and.w	r3, r3, #16
 800eea6:	2b10      	cmp	r3, #16
 800eea8:	d103      	bne.n	800eeb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2210      	movs	r2, #16
 800eeb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7fe fd64 	bl	800d988 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eec0:	e00b      	b.n	800eeda <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7f1 fc14 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800eec8:	e007      	b.n	800eeda <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	699a      	ldr	r2, [r3, #24]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f042 0208 	orr.w	r2, r2, #8
 800eed8:	619a      	str	r2, [r3, #24]
}
 800eeda:	bf00      	nop
 800eedc:	3770      	adds	r7, #112	; 0x70
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	58000c00 	.word	0x58000c00

0800eee8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b0ac      	sub	sp, #176	; 0xb0
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eef6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	69db      	ldr	r3, [r3, #28]
 800ef00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef1e:	2b22      	cmp	r3, #34	; 0x22
 800ef20:	f040 8180 	bne.w	800f224 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef2a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef2e:	e123      	b.n	800f178 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ef3e:	b2d9      	uxtb	r1, r3
 800ef40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef4a:	400a      	ands	r2, r1
 800ef4c:	b2d2      	uxtb	r2, r2
 800ef4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef54:	1c5a      	adds	r2, r3, #1
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	3b01      	subs	r3, #1
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	69db      	ldr	r3, [r3, #28]
 800ef72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef7a:	f003 0307 	and.w	r3, r3, #7
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d053      	beq.n	800f02a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef86:	f003 0301 	and.w	r3, r3, #1
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d011      	beq.n	800efb2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ef8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00b      	beq.n	800efb2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efa8:	f043 0201 	orr.w	r2, r3, #1
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efb6:	f003 0302 	and.w	r3, r3, #2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d011      	beq.n	800efe2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800efbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efc2:	f003 0301 	and.w	r3, r3, #1
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00b      	beq.n	800efe2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2202      	movs	r2, #2
 800efd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efd8:	f043 0204 	orr.w	r2, r3, #4
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efe6:	f003 0304 	and.w	r3, r3, #4
 800efea:	2b00      	cmp	r3, #0
 800efec:	d011      	beq.n	800f012 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800efee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eff2:	f003 0301 	and.w	r3, r3, #1
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00b      	beq.n	800f012 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2204      	movs	r2, #4
 800f000:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f008:	f043 0202 	orr.w	r2, r3, #2
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d006      	beq.n	800f02a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7fe fca9 	bl	800d974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f030:	b29b      	uxth	r3, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	f040 80a0 	bne.w	800f178 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f040:	e853 3f00 	ldrex	r3, [r3]
 800f044:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f04c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	461a      	mov	r2, r3
 800f056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f05a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f05c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f060:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f062:	e841 2300 	strex	r3, r2, [r1]
 800f066:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1e4      	bne.n	800f038 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	3308      	adds	r3, #8
 800f074:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f078:	e853 3f00 	ldrex	r3, [r3]
 800f07c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f07e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f080:	4b6e      	ldr	r3, [pc, #440]	; (800f23c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f082:	4013      	ands	r3, r2
 800f084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3308      	adds	r3, #8
 800f08e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f092:	66ba      	str	r2, [r7, #104]	; 0x68
 800f094:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f096:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f098:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f09a:	e841 2300 	strex	r3, r2, [r1]
 800f09e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f0a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1e3      	bne.n	800f06e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2220      	movs	r2, #32
 800f0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4a60      	ldr	r2, [pc, #384]	; (800f240 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d021      	beq.n	800f108 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d01a      	beq.n	800f108 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0da:	e853 3f00 	ldrex	r3, [r3]
 800f0de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0f4:	657b      	str	r3, [r7, #84]	; 0x54
 800f0f6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0fc:	e841 2300 	strex	r3, r2, [r1]
 800f100:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1e4      	bne.n	800f0d2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d130      	bne.n	800f172 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f11e:	e853 3f00 	ldrex	r3, [r3]
 800f122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f126:	f023 0310 	bic.w	r3, r3, #16
 800f12a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f138:	643b      	str	r3, [r7, #64]	; 0x40
 800f13a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f13e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f140:	e841 2300 	strex	r3, r2, [r1]
 800f144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1e4      	bne.n	800f116 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	69db      	ldr	r3, [r3, #28]
 800f152:	f003 0310 	and.w	r3, r3, #16
 800f156:	2b10      	cmp	r3, #16
 800f158:	d103      	bne.n	800f162 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2210      	movs	r2, #16
 800f160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f168:	4619      	mov	r1, r3
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7fe fc0c 	bl	800d988 <HAL_UARTEx_RxEventCallback>
 800f170:	e002      	b.n	800f178 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7f1 fabc 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f178:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d006      	beq.n	800f18e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f184:	f003 0320 	and.w	r3, r3, #32
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f47f aed1 	bne.w	800ef30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f194:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f198:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d049      	beq.n	800f234 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f1a6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d242      	bcs.n	800f234 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	e853 3f00 	ldrex	r3, [r3]
 800f1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	3308      	adds	r3, #8
 800f1ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f1d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1da:	e841 2300 	strex	r3, r2, [r1]
 800f1de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1e3      	bne.n	800f1ae <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a16      	ldr	r2, [pc, #88]	; (800f244 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f1ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	e853 3f00 	ldrex	r3, [r3]
 800f1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f043 0320 	orr.w	r3, r3, #32
 800f200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	461a      	mov	r2, r3
 800f20a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f20e:	61bb      	str	r3, [r7, #24]
 800f210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f212:	6979      	ldr	r1, [r7, #20]
 800f214:	69ba      	ldr	r2, [r7, #24]
 800f216:	e841 2300 	strex	r3, r2, [r1]
 800f21a:	613b      	str	r3, [r7, #16]
   return(result);
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e4      	bne.n	800f1ec <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f222:	e007      	b.n	800f234 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	699a      	ldr	r2, [r3, #24]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f042 0208 	orr.w	r2, r2, #8
 800f232:	619a      	str	r2, [r3, #24]
}
 800f234:	bf00      	nop
 800f236:	37b0      	adds	r7, #176	; 0xb0
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	effffffe 	.word	0xeffffffe
 800f240:	58000c00 	.word	0x58000c00
 800f244:	0800eb79 	.word	0x0800eb79

0800f248 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b0ae      	sub	sp, #184	; 0xb8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f256:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69db      	ldr	r3, [r3, #28]
 800f260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f27e:	2b22      	cmp	r3, #34	; 0x22
 800f280:	f040 8184 	bne.w	800f58c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f28a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f28e:	e127      	b.n	800f4e0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f296:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f29e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f2a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f2a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f2b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2b8:	1c9a      	adds	r2, r3, #2
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	69db      	ldr	r3, [r3, #28]
 800f2d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2de:	f003 0307 	and.w	r3, r3, #7
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d053      	beq.n	800f38e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2ea:	f003 0301 	and.w	r3, r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d011      	beq.n	800f316 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00b      	beq.n	800f316 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2201      	movs	r2, #1
 800f304:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f30c:	f043 0201 	orr.w	r2, r3, #1
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f31a:	f003 0302 	and.w	r3, r3, #2
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d011      	beq.n	800f346 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f326:	f003 0301 	and.w	r3, r3, #1
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00b      	beq.n	800f346 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2202      	movs	r2, #2
 800f334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f33c:	f043 0204 	orr.w	r2, r3, #4
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f34a:	f003 0304 	and.w	r3, r3, #4
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d011      	beq.n	800f376 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00b      	beq.n	800f376 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2204      	movs	r2, #4
 800f364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f36c:	f043 0202 	orr.w	r2, r3, #2
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d006      	beq.n	800f38e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7fe faf7 	bl	800d974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f394:	b29b      	uxth	r3, r3
 800f396:	2b00      	cmp	r3, #0
 800f398:	f040 80a2 	bne.w	800f4e0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3a4:	e853 3f00 	ldrex	r3, [r3]
 800f3a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f3aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f3c2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f3c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f3ca:	e841 2300 	strex	r3, r2, [r1]
 800f3ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1e2      	bne.n	800f39c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3308      	adds	r3, #8
 800f3dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3e0:	e853 3f00 	ldrex	r3, [r3]
 800f3e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f3e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3e8:	4b6e      	ldr	r3, [pc, #440]	; (800f5a4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3308      	adds	r3, #8
 800f3f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f3fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f3fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f400:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f402:	e841 2300 	strex	r3, r2, [r1]
 800f406:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1e3      	bne.n	800f3d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2220      	movs	r2, #32
 800f412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a60      	ldr	r2, [pc, #384]	; (800f5a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d021      	beq.n	800f470 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f436:	2b00      	cmp	r3, #0
 800f438:	d01a      	beq.n	800f470 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f442:	e853 3f00 	ldrex	r3, [r3]
 800f446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f44a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f44e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	461a      	mov	r2, r3
 800f458:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f45c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f45e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f464:	e841 2300 	strex	r3, r2, [r1]
 800f468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1e4      	bne.n	800f43a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f474:	2b01      	cmp	r3, #1
 800f476:	d130      	bne.n	800f4da <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f486:	e853 3f00 	ldrex	r3, [r3]
 800f48a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48e:	f023 0310 	bic.w	r3, r3, #16
 800f492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	461a      	mov	r2, r3
 800f49c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4a0:	647b      	str	r3, [r7, #68]	; 0x44
 800f4a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4a8:	e841 2300 	strex	r3, r2, [r1]
 800f4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1e4      	bne.n	800f47e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	69db      	ldr	r3, [r3, #28]
 800f4ba:	f003 0310 	and.w	r3, r3, #16
 800f4be:	2b10      	cmp	r3, #16
 800f4c0:	d103      	bne.n	800f4ca <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2210      	movs	r2, #16
 800f4c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7fe fa58 	bl	800d988 <HAL_UARTEx_RxEventCallback>
 800f4d8:	e002      	b.n	800f4e0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7f1 f908 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d006      	beq.n	800f4f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f4e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f4ec:	f003 0320 	and.w	r3, r3, #32
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f47f aecd 	bne.w	800f290 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f500:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f504:	2b00      	cmp	r3, #0
 800f506:	d049      	beq.n	800f59c <UART_RxISR_16BIT_FIFOEN+0x354>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f50e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f512:	429a      	cmp	r2, r3
 800f514:	d242      	bcs.n	800f59c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	3308      	adds	r3, #8
 800f51c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f520:	e853 3f00 	ldrex	r3, [r3]
 800f524:	623b      	str	r3, [r7, #32]
   return(result);
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f52c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	3308      	adds	r3, #8
 800f536:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f53a:	633a      	str	r2, [r7, #48]	; 0x30
 800f53c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f542:	e841 2300 	strex	r3, r2, [r1]
 800f546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1e3      	bne.n	800f516 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a16      	ldr	r2, [pc, #88]	; (800f5ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f552:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	e853 3f00 	ldrex	r3, [r3]
 800f560:	60fb      	str	r3, [r7, #12]
   return(result);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f043 0320 	orr.w	r3, r3, #32
 800f568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	461a      	mov	r2, r3
 800f572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57a:	69b9      	ldr	r1, [r7, #24]
 800f57c:	69fa      	ldr	r2, [r7, #28]
 800f57e:	e841 2300 	strex	r3, r2, [r1]
 800f582:	617b      	str	r3, [r7, #20]
   return(result);
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1e4      	bne.n	800f554 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f58a:	e007      	b.n	800f59c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	699a      	ldr	r2, [r3, #24]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f042 0208 	orr.w	r2, r2, #8
 800f59a:	619a      	str	r2, [r3, #24]
}
 800f59c:	bf00      	nop
 800f59e:	37b8      	adds	r7, #184	; 0xb8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	effffffe 	.word	0xeffffffe
 800f5a8:	58000c00 	.word	0x58000c00
 800f5ac:	0800ed31 	.word	0x0800ed31

0800f5b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5b8:	bf00      	nop
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5cc:	bf00      	nop
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5e0:	bf00      	nop
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d101      	bne.n	800f602 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5fe:	2302      	movs	r3, #2
 800f600:	e027      	b.n	800f652 <HAL_UARTEx_DisableFifoMode+0x66>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2201      	movs	r2, #1
 800f606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2224      	movs	r2, #36	; 0x24
 800f60e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f022 0201 	bic.w	r2, r2, #1
 800f628:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f630:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2220      	movs	r2, #32
 800f644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f650:	2300      	movs	r3, #0
}
 800f652:	4618      	mov	r0, r3
 800f654:	3714      	adds	r7, #20
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b084      	sub	sp, #16
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d101      	bne.n	800f676 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f672:	2302      	movs	r3, #2
 800f674:	e02d      	b.n	800f6d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2224      	movs	r2, #36	; 0x24
 800f682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f022 0201 	bic.w	r2, r2, #1
 800f69c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	689b      	ldr	r3, [r3, #8]
 800f6a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 f850 	bl	800f758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2220      	movs	r2, #32
 800f6c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b084      	sub	sp, #16
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
 800f6e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d101      	bne.n	800f6f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	e02d      	b.n	800f74e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2224      	movs	r2, #36	; 0x24
 800f6fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f022 0201 	bic.w	r2, r2, #1
 800f718:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	430a      	orrs	r2, r1
 800f72c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f812 	bl	800f758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2220      	movs	r2, #32
 800f740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f74c:	2300      	movs	r3, #0
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
	...

0800f758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f764:	2b00      	cmp	r3, #0
 800f766:	d108      	bne.n	800f77a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2201      	movs	r2, #1
 800f774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f778:	e031      	b.n	800f7de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f77a:	2310      	movs	r3, #16
 800f77c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f77e:	2310      	movs	r3, #16
 800f780:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	0e5b      	lsrs	r3, r3, #25
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	f003 0307 	and.w	r3, r3, #7
 800f790:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	0f5b      	lsrs	r3, r3, #29
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f003 0307 	and.w	r3, r3, #7
 800f7a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7a2:	7bbb      	ldrb	r3, [r7, #14]
 800f7a4:	7b3a      	ldrb	r2, [r7, #12]
 800f7a6:	4911      	ldr	r1, [pc, #68]	; (800f7ec <UARTEx_SetNbDataToProcess+0x94>)
 800f7a8:	5c8a      	ldrb	r2, [r1, r2]
 800f7aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f7ae:	7b3a      	ldrb	r2, [r7, #12]
 800f7b0:	490f      	ldr	r1, [pc, #60]	; (800f7f0 <UARTEx_SetNbDataToProcess+0x98>)
 800f7b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7c0:	7bfb      	ldrb	r3, [r7, #15]
 800f7c2:	7b7a      	ldrb	r2, [r7, #13]
 800f7c4:	4909      	ldr	r1, [pc, #36]	; (800f7ec <UARTEx_SetNbDataToProcess+0x94>)
 800f7c6:	5c8a      	ldrb	r2, [r1, r2]
 800f7c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f7cc:	7b7a      	ldrb	r2, [r7, #13]
 800f7ce:	4908      	ldr	r1, [pc, #32]	; (800f7f0 <UARTEx_SetNbDataToProcess+0x98>)
 800f7d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f7de:	bf00      	nop
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	08014314 	.word	0x08014314
 800f7f0:	0801431c 	.word	0x0801431c

0800f7f4 <__NVIC_SetPriority>:
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	6039      	str	r1, [r7, #0]
 800f7fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f804:	2b00      	cmp	r3, #0
 800f806:	db0a      	blt.n	800f81e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	490c      	ldr	r1, [pc, #48]	; (800f840 <__NVIC_SetPriority+0x4c>)
 800f80e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f812:	0112      	lsls	r2, r2, #4
 800f814:	b2d2      	uxtb	r2, r2
 800f816:	440b      	add	r3, r1
 800f818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f81c:	e00a      	b.n	800f834 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	b2da      	uxtb	r2, r3
 800f822:	4908      	ldr	r1, [pc, #32]	; (800f844 <__NVIC_SetPriority+0x50>)
 800f824:	88fb      	ldrh	r3, [r7, #6]
 800f826:	f003 030f 	and.w	r3, r3, #15
 800f82a:	3b04      	subs	r3, #4
 800f82c:	0112      	lsls	r2, r2, #4
 800f82e:	b2d2      	uxtb	r2, r2
 800f830:	440b      	add	r3, r1
 800f832:	761a      	strb	r2, [r3, #24]
}
 800f834:	bf00      	nop
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	e000e100 	.word	0xe000e100
 800f844:	e000ed00 	.word	0xe000ed00

0800f848 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f848:	b580      	push	{r7, lr}
 800f84a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f84c:	4b05      	ldr	r3, [pc, #20]	; (800f864 <SysTick_Handler+0x1c>)
 800f84e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f850:	f002 fada 	bl	8011e08 <xTaskGetSchedulerState>
 800f854:	4603      	mov	r3, r0
 800f856:	2b01      	cmp	r3, #1
 800f858:	d001      	beq.n	800f85e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f85a:	f003 f8fd 	bl	8012a58 <xPortSysTickHandler>
  }
}
 800f85e:	bf00      	nop
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	e000e010 	.word	0xe000e010

0800f868 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f868:	b580      	push	{r7, lr}
 800f86a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f86c:	2100      	movs	r1, #0
 800f86e:	f06f 0004 	mvn.w	r0, #4
 800f872:	f7ff ffbf 	bl	800f7f4 <__NVIC_SetPriority>
#endif
}
 800f876:	bf00      	nop
 800f878:	bd80      	pop	{r7, pc}
	...

0800f87c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f882:	f3ef 8305 	mrs	r3, IPSR
 800f886:	603b      	str	r3, [r7, #0]
  return(result);
 800f888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d003      	beq.n	800f896 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f88e:	f06f 0305 	mvn.w	r3, #5
 800f892:	607b      	str	r3, [r7, #4]
 800f894:	e00c      	b.n	800f8b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f896:	4b0a      	ldr	r3, [pc, #40]	; (800f8c0 <osKernelInitialize+0x44>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f89e:	4b08      	ldr	r3, [pc, #32]	; (800f8c0 <osKernelInitialize+0x44>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	607b      	str	r3, [r7, #4]
 800f8a8:	e002      	b.n	800f8b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f8b0:	687b      	ldr	r3, [r7, #4]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	2400063c 	.word	0x2400063c

0800f8c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8ca:	f3ef 8305 	mrs	r3, IPSR
 800f8ce:	603b      	str	r3, [r7, #0]
  return(result);
 800f8d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d003      	beq.n	800f8de <osKernelStart+0x1a>
    stat = osErrorISR;
 800f8d6:	f06f 0305 	mvn.w	r3, #5
 800f8da:	607b      	str	r3, [r7, #4]
 800f8dc:	e010      	b.n	800f900 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f8de:	4b0b      	ldr	r3, [pc, #44]	; (800f90c <osKernelStart+0x48>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d109      	bne.n	800f8fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f8e6:	f7ff ffbf 	bl	800f868 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f8ea:	4b08      	ldr	r3, [pc, #32]	; (800f90c <osKernelStart+0x48>)
 800f8ec:	2202      	movs	r2, #2
 800f8ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f8f0:	f001 fda4 	bl	801143c <vTaskStartScheduler>
      stat = osOK;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	607b      	str	r3, [r7, #4]
 800f8f8:	e002      	b.n	800f900 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f8fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f900:	687b      	ldr	r3, [r7, #4]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	2400063c 	.word	0x2400063c

0800f910 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f910:	b580      	push	{r7, lr}
 800f912:	b08e      	sub	sp, #56	; 0x38
 800f914:	af04      	add	r7, sp, #16
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f91c:	2300      	movs	r3, #0
 800f91e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f920:	f3ef 8305 	mrs	r3, IPSR
 800f924:	617b      	str	r3, [r7, #20]
  return(result);
 800f926:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d17e      	bne.n	800fa2a <osThreadNew+0x11a>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d07b      	beq.n	800fa2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f932:	2380      	movs	r3, #128	; 0x80
 800f934:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f936:	2318      	movs	r3, #24
 800f938:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f93e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f942:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d045      	beq.n	800f9d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d002      	beq.n	800f958 <osThreadNew+0x48>
        name = attr->name;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	699b      	ldr	r3, [r3, #24]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	699b      	ldr	r3, [r3, #24]
 800f964:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d008      	beq.n	800f97e <osThreadNew+0x6e>
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	2b38      	cmp	r3, #56	; 0x38
 800f970:	d805      	bhi.n	800f97e <osThreadNew+0x6e>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	f003 0301 	and.w	r3, r3, #1
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d001      	beq.n	800f982 <osThreadNew+0x72>
        return (NULL);
 800f97e:	2300      	movs	r3, #0
 800f980:	e054      	b.n	800fa2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	695b      	ldr	r3, [r3, #20]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d003      	beq.n	800f992 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	695b      	ldr	r3, [r3, #20]
 800f98e:	089b      	lsrs	r3, r3, #2
 800f990:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00e      	beq.n	800f9b8 <osThreadNew+0xa8>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	2b5b      	cmp	r3, #91	; 0x5b
 800f9a0:	d90a      	bls.n	800f9b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d006      	beq.n	800f9b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	695b      	ldr	r3, [r3, #20]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d002      	beq.n	800f9b8 <osThreadNew+0xa8>
        mem = 1;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	61bb      	str	r3, [r7, #24]
 800f9b6:	e010      	b.n	800f9da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10c      	bne.n	800f9da <osThreadNew+0xca>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d108      	bne.n	800f9da <osThreadNew+0xca>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d104      	bne.n	800f9da <osThreadNew+0xca>
          mem = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	61bb      	str	r3, [r7, #24]
 800f9d4:	e001      	b.n	800f9da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d110      	bne.n	800fa02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9e8:	9202      	str	r2, [sp, #8]
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	6a3a      	ldr	r2, [r7, #32]
 800f9f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f001 fb4a 	bl	8011090 <xTaskCreateStatic>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	613b      	str	r3, [r7, #16]
 800fa00:	e013      	b.n	800fa2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d110      	bne.n	800fa2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	f107 0310 	add.w	r3, r7, #16
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f001 fb95 	bl	801114a <xTaskCreate>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d001      	beq.n	800fa2a <osThreadNew+0x11a>
            hTask = NULL;
 800fa26:	2300      	movs	r3, #0
 800fa28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fa2a:	693b      	ldr	r3, [r7, #16]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3728      	adds	r7, #40	; 0x28
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa3a:	f3ef 8305 	mrs	r3, IPSR
 800fa3e:	603b      	str	r3, [r7, #0]
  return(result);
 800fa40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d003      	beq.n	800fa4e <osThreadYield+0x1a>
    stat = osErrorISR;
 800fa46:	f06f 0305 	mvn.w	r3, #5
 800fa4a:	607b      	str	r3, [r7, #4]
 800fa4c:	e009      	b.n	800fa62 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800fa52:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <osThreadYield+0x3c>)
 800fa54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800fa62:	687b      	ldr	r3, [r7, #4]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	e000ed04 	.word	0xe000ed04

0800fa74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa7c:	f3ef 8305 	mrs	r3, IPSR
 800fa80:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d003      	beq.n	800fa90 <osDelay+0x1c>
    stat = osErrorISR;
 800fa88:	f06f 0305 	mvn.w	r3, #5
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	e007      	b.n	800faa0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d002      	beq.n	800faa0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f001 fc9a 	bl	80113d4 <vTaskDelay>
    }
  }

  return (stat);
 800faa0:	68fb      	ldr	r3, [r7, #12]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800faaa:	b580      	push	{r7, lr}
 800faac:	b086      	sub	sp, #24
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800fab2:	2300      	movs	r3, #0
 800fab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fab6:	f3ef 8305 	mrs	r3, IPSR
 800faba:	60fb      	str	r3, [r7, #12]
  return(result);
 800fabc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d12d      	bne.n	800fb1e <osEventFlagsNew+0x74>
    mem = -1;
 800fac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fac6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d015      	beq.n	800fafa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	689b      	ldr	r3, [r3, #8]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d006      	beq.n	800fae4 <osEventFlagsNew+0x3a>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	2b1f      	cmp	r3, #31
 800fadc:	d902      	bls.n	800fae4 <osEventFlagsNew+0x3a>
        mem = 1;
 800fade:	2301      	movs	r3, #1
 800fae0:	613b      	str	r3, [r7, #16]
 800fae2:	e00c      	b.n	800fafe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d108      	bne.n	800fafe <osEventFlagsNew+0x54>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d104      	bne.n	800fafe <osEventFlagsNew+0x54>
          mem = 0;
 800faf4:	2300      	movs	r3, #0
 800faf6:	613b      	str	r3, [r7, #16]
 800faf8:	e001      	b.n	800fafe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d106      	bne.n	800fb12 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f000 fa3d 	bl	800ff88 <xEventGroupCreateStatic>
 800fb0e:	6178      	str	r0, [r7, #20]
 800fb10:	e005      	b.n	800fb1e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d102      	bne.n	800fb1e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800fb18:	f000 fa6d 	bl	800fff6 <xEventGroupCreate>
 800fb1c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800fb1e:	697b      	ldr	r3, [r7, #20]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d004      	beq.n	800fb46 <osEventFlagsSet+0x1e>
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800fb46:	f06f 0303 	mvn.w	r3, #3
 800fb4a:	617b      	str	r3, [r7, #20]
 800fb4c:	e028      	b.n	800fba0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb4e:	f3ef 8305 	mrs	r3, IPSR
 800fb52:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb54:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d01d      	beq.n	800fb96 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800fb5e:	f107 0308 	add.w	r3, r7, #8
 800fb62:	461a      	mov	r2, r3
 800fb64:	6839      	ldr	r1, [r7, #0]
 800fb66:	6938      	ldr	r0, [r7, #16]
 800fb68:	f000 fbe8 	bl	801033c <xEventGroupSetBitsFromISR>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d103      	bne.n	800fb7a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800fb72:	f06f 0302 	mvn.w	r3, #2
 800fb76:	617b      	str	r3, [r7, #20]
 800fb78:	e012      	b.n	800fba0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00d      	beq.n	800fba0 <osEventFlagsSet+0x78>
 800fb84:	4b09      	ldr	r3, [pc, #36]	; (800fbac <osEventFlagsSet+0x84>)
 800fb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	e004      	b.n	800fba0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800fb96:	6839      	ldr	r1, [r7, #0]
 800fb98:	6938      	ldr	r0, [r7, #16]
 800fb9a:	f000 fb15 	bl	80101c8 <xEventGroupSetBits>
 800fb9e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800fba0:	697b      	ldr	r3, [r7, #20]
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3718      	adds	r7, #24
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	e000ed04 	.word	0xe000ed04

0800fbb0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b08c      	sub	sp, #48	; 0x30
 800fbb4:	af02      	add	r7, sp, #8
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
 800fbbc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d004      	beq.n	800fbd2 <osEventFlagsWait+0x22>
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d003      	beq.n	800fbda <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800fbd2:	f06f 0303 	mvn.w	r3, #3
 800fbd6:	61fb      	str	r3, [r7, #28]
 800fbd8:	e04b      	b.n	800fc72 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbda:	f3ef 8305 	mrs	r3, IPSR
 800fbde:	617b      	str	r3, [r7, #20]
  return(result);
 800fbe0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d003      	beq.n	800fbee <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800fbe6:	f06f 0305 	mvn.w	r3, #5
 800fbea:	61fb      	str	r3, [r7, #28]
 800fbec:	e041      	b.n	800fc72 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d002      	beq.n	800fbfe <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800fbfc:	e001      	b.n	800fc02 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f003 0302 	and.w	r3, r3, #2
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	623b      	str	r3, [r7, #32]
 800fc10:	e001      	b.n	800fc16 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800fc12:	2301      	movs	r3, #1
 800fc14:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	6a3a      	ldr	r2, [r7, #32]
 800fc1e:	68b9      	ldr	r1, [r7, #8]
 800fc20:	69b8      	ldr	r0, [r7, #24]
 800fc22:	f000 fa03 	bl	801002c <xEventGroupWaitBits>
 800fc26:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d010      	beq.n	800fc54 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	4013      	ands	r3, r2
 800fc38:	68ba      	ldr	r2, [r7, #8]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d019      	beq.n	800fc72 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d003      	beq.n	800fc4c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800fc44:	f06f 0301 	mvn.w	r3, #1
 800fc48:	61fb      	str	r3, [r7, #28]
 800fc4a:	e012      	b.n	800fc72 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fc4c:	f06f 0302 	mvn.w	r3, #2
 800fc50:	61fb      	str	r3, [r7, #28]
 800fc52:	e00e      	b.n	800fc72 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	4013      	ands	r3, r2
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d109      	bne.n	800fc72 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d003      	beq.n	800fc6c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800fc64:	f06f 0301 	mvn.w	r3, #1
 800fc68:	61fb      	str	r3, [r7, #28]
 800fc6a:	e002      	b.n	800fc72 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fc6c:	f06f 0302 	mvn.w	r3, #2
 800fc70:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800fc72:	69fb      	ldr	r3, [r7, #28]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3728      	adds	r7, #40	; 0x28
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b08a      	sub	sp, #40	; 0x28
 800fc80:	af02      	add	r7, sp, #8
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc8c:	f3ef 8305 	mrs	r3, IPSR
 800fc90:	613b      	str	r3, [r7, #16]
  return(result);
 800fc92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d15f      	bne.n	800fd58 <osMessageQueueNew+0xdc>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d05c      	beq.n	800fd58 <osMessageQueueNew+0xdc>
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d059      	beq.n	800fd58 <osMessageQueueNew+0xdc>
    mem = -1;
 800fca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fca8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d029      	beq.n	800fd04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d012      	beq.n	800fcde <osMessageQueueNew+0x62>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	2b4f      	cmp	r3, #79	; 0x4f
 800fcbe:	d90e      	bls.n	800fcde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00a      	beq.n	800fcde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	695a      	ldr	r2, [r3, #20]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	68b9      	ldr	r1, [r7, #8]
 800fcd0:	fb01 f303 	mul.w	r3, r1, r3
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d302      	bcc.n	800fcde <osMessageQueueNew+0x62>
        mem = 1;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	61bb      	str	r3, [r7, #24]
 800fcdc:	e014      	b.n	800fd08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d110      	bne.n	800fd08 <osMessageQueueNew+0x8c>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10c      	bne.n	800fd08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d108      	bne.n	800fd08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d104      	bne.n	800fd08 <osMessageQueueNew+0x8c>
          mem = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	61bb      	str	r3, [r7, #24]
 800fd02:	e001      	b.n	800fd08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fd04:	2300      	movs	r3, #0
 800fd06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d10b      	bne.n	800fd26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	691a      	ldr	r2, [r3, #16]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	2100      	movs	r1, #0
 800fd18:	9100      	str	r1, [sp, #0]
 800fd1a:	68b9      	ldr	r1, [r7, #8]
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f000 fc3d 	bl	801059c <xQueueGenericCreateStatic>
 800fd22:	61f8      	str	r0, [r7, #28]
 800fd24:	e008      	b.n	800fd38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d105      	bne.n	800fd38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	68b9      	ldr	r1, [r7, #8]
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f000 fcab 	bl	801068c <xQueueGenericCreate>
 800fd36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00c      	beq.n	800fd58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d003      	beq.n	800fd4c <osMessageQueueNew+0xd0>
        name = attr->name;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	617b      	str	r3, [r7, #20]
 800fd4a:	e001      	b.n	800fd50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fd50:	6979      	ldr	r1, [r7, #20]
 800fd52:	69f8      	ldr	r0, [r7, #28]
 800fd54:	f001 f93e 	bl	8010fd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fd58:	69fb      	ldr	r3, [r7, #28]
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3720      	adds	r7, #32
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b088      	sub	sp, #32
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	603b      	str	r3, [r7, #0]
 800fd70:	4613      	mov	r3, r2
 800fd72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd7c:	f3ef 8305 	mrs	r3, IPSR
 800fd80:	617b      	str	r3, [r7, #20]
  return(result);
 800fd82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d028      	beq.n	800fdda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d005      	beq.n	800fd9a <osMessageQueuePut+0x36>
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <osMessageQueuePut+0x36>
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d003      	beq.n	800fda2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fd9a:	f06f 0303 	mvn.w	r3, #3
 800fd9e:	61fb      	str	r3, [r7, #28]
 800fda0:	e038      	b.n	800fe14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fda2:	2300      	movs	r3, #0
 800fda4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fda6:	f107 0210 	add.w	r2, r7, #16
 800fdaa:	2300      	movs	r3, #0
 800fdac:	68b9      	ldr	r1, [r7, #8]
 800fdae:	69b8      	ldr	r0, [r7, #24]
 800fdb0:	f000 fdc8 	bl	8010944 <xQueueGenericSendFromISR>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d003      	beq.n	800fdc2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fdba:	f06f 0302 	mvn.w	r3, #2
 800fdbe:	61fb      	str	r3, [r7, #28]
 800fdc0:	e028      	b.n	800fe14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d025      	beq.n	800fe14 <osMessageQueuePut+0xb0>
 800fdc8:	4b15      	ldr	r3, [pc, #84]	; (800fe20 <osMessageQueuePut+0xbc>)
 800fdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdce:	601a      	str	r2, [r3, #0]
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	e01c      	b.n	800fe14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d002      	beq.n	800fde6 <osMessageQueuePut+0x82>
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d103      	bne.n	800fdee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fde6:	f06f 0303 	mvn.w	r3, #3
 800fdea:	61fb      	str	r3, [r7, #28]
 800fdec:	e012      	b.n	800fe14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fdee:	2300      	movs	r3, #0
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	68b9      	ldr	r1, [r7, #8]
 800fdf4:	69b8      	ldr	r0, [r7, #24]
 800fdf6:	f000 fca7 	bl	8010748 <xQueueGenericSend>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d009      	beq.n	800fe14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d003      	beq.n	800fe0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fe06:	f06f 0301 	mvn.w	r3, #1
 800fe0a:	61fb      	str	r3, [r7, #28]
 800fe0c:	e002      	b.n	800fe14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fe0e:	f06f 0302 	mvn.w	r3, #2
 800fe12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe14:	69fb      	ldr	r3, [r7, #28]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3720      	adds	r7, #32
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	e000ed04 	.word	0xe000ed04

0800fe24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b088      	sub	sp, #32
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
 800fe30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fe36:	2300      	movs	r3, #0
 800fe38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe3a:	f3ef 8305 	mrs	r3, IPSR
 800fe3e:	617b      	str	r3, [r7, #20]
  return(result);
 800fe40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d028      	beq.n	800fe98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d005      	beq.n	800fe58 <osMessageQueueGet+0x34>
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <osMessageQueueGet+0x34>
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d003      	beq.n	800fe60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fe58:	f06f 0303 	mvn.w	r3, #3
 800fe5c:	61fb      	str	r3, [r7, #28]
 800fe5e:	e037      	b.n	800fed0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fe60:	2300      	movs	r3, #0
 800fe62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fe64:	f107 0310 	add.w	r3, r7, #16
 800fe68:	461a      	mov	r2, r3
 800fe6a:	68b9      	ldr	r1, [r7, #8]
 800fe6c:	69b8      	ldr	r0, [r7, #24]
 800fe6e:	f000 fee5 	bl	8010c3c <xQueueReceiveFromISR>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d003      	beq.n	800fe80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fe78:	f06f 0302 	mvn.w	r3, #2
 800fe7c:	61fb      	str	r3, [r7, #28]
 800fe7e:	e027      	b.n	800fed0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d024      	beq.n	800fed0 <osMessageQueueGet+0xac>
 800fe86:	4b15      	ldr	r3, [pc, #84]	; (800fedc <osMessageQueueGet+0xb8>)
 800fe88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	f3bf 8f4f 	dsb	sy
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	e01b      	b.n	800fed0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d002      	beq.n	800fea4 <osMessageQueueGet+0x80>
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d103      	bne.n	800feac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fea4:	f06f 0303 	mvn.w	r3, #3
 800fea8:	61fb      	str	r3, [r7, #28]
 800feaa:	e011      	b.n	800fed0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800feac:	683a      	ldr	r2, [r7, #0]
 800feae:	68b9      	ldr	r1, [r7, #8]
 800feb0:	69b8      	ldr	r0, [r7, #24]
 800feb2:	f000 fde3 	bl	8010a7c <xQueueReceive>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d009      	beq.n	800fed0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d003      	beq.n	800feca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fec2:	f06f 0301 	mvn.w	r3, #1
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	e002      	b.n	800fed0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800feca:	f06f 0302 	mvn.w	r3, #2
 800fece:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fed0:	69fb      	ldr	r3, [r7, #28]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3720      	adds	r7, #32
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	e000ed04 	.word	0xe000ed04

0800fee0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d102      	bne.n	800fef8 <osMessageQueueGetCount+0x18>
    count = 0U;
 800fef2:	2300      	movs	r3, #0
 800fef4:	617b      	str	r3, [r7, #20]
 800fef6:	e00e      	b.n	800ff16 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fef8:	f3ef 8305 	mrs	r3, IPSR
 800fefc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fefe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d004      	beq.n	800ff0e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800ff04:	6938      	ldr	r0, [r7, #16]
 800ff06:	f000 ff37 	bl	8010d78 <uxQueueMessagesWaitingFromISR>
 800ff0a:	6178      	str	r0, [r7, #20]
 800ff0c:	e003      	b.n	800ff16 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ff0e:	6938      	ldr	r0, [r7, #16]
 800ff10:	f000 ff14 	bl	8010d3c <uxQueueMessagesWaiting>
 800ff14:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800ff16:	697b      	ldr	r3, [r7, #20]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3718      	adds	r7, #24
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4a07      	ldr	r2, [pc, #28]	; (800ff4c <vApplicationGetIdleTaskMemory+0x2c>)
 800ff30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	4a06      	ldr	r2, [pc, #24]	; (800ff50 <vApplicationGetIdleTaskMemory+0x30>)
 800ff36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2280      	movs	r2, #128	; 0x80
 800ff3c:	601a      	str	r2, [r3, #0]
}
 800ff3e:	bf00      	nop
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	24000640 	.word	0x24000640
 800ff50:	2400069c 	.word	0x2400069c

0800ff54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ff54:	b480      	push	{r7}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4a07      	ldr	r2, [pc, #28]	; (800ff80 <vApplicationGetTimerTaskMemory+0x2c>)
 800ff64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	4a06      	ldr	r2, [pc, #24]	; (800ff84 <vApplicationGetTimerTaskMemory+0x30>)
 800ff6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff72:	601a      	str	r2, [r3, #0]
}
 800ff74:	bf00      	nop
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	2400089c 	.word	0x2400089c
 800ff84:	240008f8 	.word	0x240008f8

0800ff88 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d10a      	bne.n	800ffac <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9a:	f383 8811 	msr	BASEPRI, r3
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	f3bf 8f4f 	dsb	sy
 800ffa6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ffa8:	bf00      	nop
 800ffaa:	e7fe      	b.n	800ffaa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ffac:	2320      	movs	r3, #32
 800ffae:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	2b20      	cmp	r3, #32
 800ffb4:	d00a      	beq.n	800ffcc <xEventGroupCreateStatic+0x44>
	__asm volatile
 800ffb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	60fb      	str	r3, [r7, #12]
}
 800ffc8:	bf00      	nop
 800ffca:	e7fe      	b.n	800ffca <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00a      	beq.n	800ffec <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	3304      	adds	r3, #4
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f000 f9bf 	bl	8010364 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ffec:	697b      	ldr	r3, [r7, #20]
	}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3718      	adds	r7, #24
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800fffc:	2020      	movs	r0, #32
 800fffe:	f002 fdbb 	bl	8012b78 <pvPortMalloc>
 8010002:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00a      	beq.n	8010020 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3304      	adds	r3, #4
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f9a5 	bl	8010364 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010020:	687b      	ldr	r3, [r7, #4]
	}
 8010022:	4618      	mov	r0, r3
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
	...

0801002c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b090      	sub	sp, #64	; 0x40
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8010042:	2300      	movs	r3, #0
 8010044:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d10a      	bne.n	8010062 <xEventGroupWaitBits+0x36>
	__asm volatile
 801004c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010050:	f383 8811 	msr	BASEPRI, r3
 8010054:	f3bf 8f6f 	isb	sy
 8010058:	f3bf 8f4f 	dsb	sy
 801005c:	623b      	str	r3, [r7, #32]
}
 801005e:	bf00      	nop
 8010060:	e7fe      	b.n	8010060 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00a      	beq.n	8010082 <xEventGroupWaitBits+0x56>
	__asm volatile
 801006c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	61fb      	str	r3, [r7, #28]
}
 801007e:	bf00      	nop
 8010080:	e7fe      	b.n	8010080 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10a      	bne.n	801009e <xEventGroupWaitBits+0x72>
	__asm volatile
 8010088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	61bb      	str	r3, [r7, #24]
}
 801009a:	bf00      	nop
 801009c:	e7fe      	b.n	801009c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801009e:	f001 feb3 	bl	8011e08 <xTaskGetSchedulerState>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d102      	bne.n	80100ae <xEventGroupWaitBits+0x82>
 80100a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d101      	bne.n	80100b2 <xEventGroupWaitBits+0x86>
 80100ae:	2301      	movs	r3, #1
 80100b0:	e000      	b.n	80100b4 <xEventGroupWaitBits+0x88>
 80100b2:	2300      	movs	r3, #0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d10a      	bne.n	80100ce <xEventGroupWaitBits+0xa2>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	617b      	str	r3, [r7, #20]
}
 80100ca:	bf00      	nop
 80100cc:	e7fe      	b.n	80100cc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80100ce:	f001 fa1b 	bl	8011508 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80100d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80100d8:	683a      	ldr	r2, [r7, #0]
 80100da:	68b9      	ldr	r1, [r7, #8]
 80100dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100de:	f000 f90b 	bl	80102f8 <prvTestWaitCondition>
 80100e2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80100e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00e      	beq.n	8010108 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d028      	beq.n	801014a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	43db      	mvns	r3, r3
 8010100:	401a      	ands	r2, r3
 8010102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010104:	601a      	str	r2, [r3, #0]
 8010106:	e020      	b.n	801014a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801010a:	2b00      	cmp	r3, #0
 801010c:	d104      	bne.n	8010118 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801010e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010110:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8010112:	2301      	movs	r3, #1
 8010114:	633b      	str	r3, [r7, #48]	; 0x30
 8010116:	e018      	b.n	801014a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d003      	beq.n	8010126 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010124:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d003      	beq.n	8010134 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801012c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010132:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010136:	1d18      	adds	r0, r3, #4
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	4313      	orrs	r3, r2
 801013e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010140:	4619      	mov	r1, r3
 8010142:	f001 fbd9 	bl	80118f8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801014a:	f001 f9eb 	bl	8011524 <xTaskResumeAll>
 801014e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010152:	2b00      	cmp	r3, #0
 8010154:	d031      	beq.n	80101ba <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010158:	2b00      	cmp	r3, #0
 801015a:	d107      	bne.n	801016c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801015c:	4b19      	ldr	r3, [pc, #100]	; (80101c4 <xEventGroupWaitBits+0x198>)
 801015e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	f3bf 8f4f 	dsb	sy
 8010168:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801016c:	f001 fed8 	bl	8011f20 <uxTaskResetEventItemValue>
 8010170:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8010172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010178:	2b00      	cmp	r3, #0
 801017a:	d11a      	bne.n	80101b2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801017c:	f002 fbda 	bl	8012934 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8010180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	68b9      	ldr	r1, [r7, #8]
 801018a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801018c:	f000 f8b4 	bl	80102f8 <prvTestWaitCondition>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d009      	beq.n	80101aa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d006      	beq.n	80101aa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	43db      	mvns	r3, r3
 80101a4:	401a      	ands	r2, r3
 80101a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80101aa:	2301      	movs	r3, #1
 80101ac:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80101ae:	f002 fbf1 	bl	8012994 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80101b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80101b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80101ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3740      	adds	r7, #64	; 0x40
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	e000ed04 	.word	0xe000ed04

080101c8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08e      	sub	sp, #56	; 0x38
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80101d2:	2300      	movs	r3, #0
 80101d4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80101da:	2300      	movs	r3, #0
 80101dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <xEventGroupSetBits+0x32>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	613b      	str	r3, [r7, #16]
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00a      	beq.n	801021a <xEventGroupSetBits+0x52>
	__asm volatile
 8010204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	60fb      	str	r3, [r7, #12]
}
 8010216:	bf00      	nop
 8010218:	e7fe      	b.n	8010218 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801021a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021c:	3304      	adds	r3, #4
 801021e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	3308      	adds	r3, #8
 8010224:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010226:	f001 f96f 	bl	8011508 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	431a      	orrs	r2, r3
 8010238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801023c:	e03c      	b.n	80102b8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801023e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801024a:	2300      	movs	r3, #0
 801024c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010254:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801025c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010264:	2b00      	cmp	r3, #0
 8010266:	d108      	bne.n	801027a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	4013      	ands	r3, r2
 8010270:	2b00      	cmp	r3, #0
 8010272:	d00b      	beq.n	801028c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010274:	2301      	movs	r3, #1
 8010276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010278:	e008      	b.n	801028c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801027a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	4013      	ands	r3, r2
 8010282:	69ba      	ldr	r2, [r7, #24]
 8010284:	429a      	cmp	r2, r3
 8010286:	d101      	bne.n	801028c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010288:	2301      	movs	r3, #1
 801028a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801028c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d010      	beq.n	80102b4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010298:	2b00      	cmp	r3, #0
 801029a:	d003      	beq.n	80102a4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801029c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80102a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80102ac:	4619      	mov	r1, r3
 80102ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80102b0:	f001 fbee 	bl	8011a90 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80102b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d1be      	bne.n	801023e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c6:	43db      	mvns	r3, r3
 80102c8:	401a      	ands	r2, r3
 80102ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102cc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80102ce:	f001 f929 	bl	8011524 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80102d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d4:	681b      	ldr	r3, [r3, #0]
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3738      	adds	r7, #56	; 0x38
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b082      	sub	sp, #8
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80102e8:	6839      	ldr	r1, [r7, #0]
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff ff6c 	bl	80101c8 <xEventGroupSetBits>
}
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80102f8:	b480      	push	{r7}
 80102fa:	b087      	sub	sp, #28
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010304:	2300      	movs	r3, #0
 8010306:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d107      	bne.n	801031e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	4013      	ands	r3, r2
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00a      	beq.n	801032e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010318:	2301      	movs	r3, #1
 801031a:	617b      	str	r3, [r7, #20]
 801031c:	e007      	b.n	801032e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	4013      	ands	r3, r2
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	429a      	cmp	r2, r3
 8010328:	d101      	bne.n	801032e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801032a:	2301      	movs	r3, #1
 801032c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801032e:	697b      	ldr	r3, [r7, #20]
}
 8010330:	4618      	mov	r0, r3
 8010332:	371c      	adds	r7, #28
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	68f9      	ldr	r1, [r7, #12]
 801034e:	4804      	ldr	r0, [pc, #16]	; (8010360 <xEventGroupSetBitsFromISR+0x24>)
 8010350:	f002 f9a0 	bl	8012694 <xTimerPendFunctionCallFromISR>
 8010354:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010356:	697b      	ldr	r3, [r7, #20]
	}
 8010358:	4618      	mov	r0, r3
 801035a:	3718      	adds	r7, #24
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	080102df 	.word	0x080102df

08010364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f103 0208 	add.w	r2, r3, #8
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801037c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f103 0208 	add.w	r2, r3, #8
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f103 0208 	add.w	r2, r3, #8
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010398:	bf00      	nop
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80103b2:	bf00      	nop
 80103b4:	370c      	adds	r7, #12
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr

080103be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103be:	b480      	push	{r7}
 80103c0:	b085      	sub	sp, #20
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	689a      	ldr	r2, [r3, #8]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	683a      	ldr	r2, [r7, #0]
 80103e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	1c5a      	adds	r2, r3, #1
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	601a      	str	r2, [r3, #0]
}
 80103fa:	bf00      	nop
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr

08010406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010406:	b480      	push	{r7}
 8010408:	b085      	sub	sp, #20
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801041c:	d103      	bne.n	8010426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	e00c      	b.n	8010440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	3308      	adds	r3, #8
 801042a:	60fb      	str	r3, [r7, #12]
 801042c:	e002      	b.n	8010434 <vListInsert+0x2e>
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	429a      	cmp	r2, r3
 801043e:	d2f6      	bcs.n	801042e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	683a      	ldr	r2, [r7, #0]
 801044e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	683a      	ldr	r2, [r7, #0]
 801045a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	601a      	str	r2, [r3, #0]
}
 801046c:	bf00      	nop
 801046e:	3714      	adds	r7, #20
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010478:	b480      	push	{r7}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	6892      	ldr	r2, [r2, #8]
 801048e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	6852      	ldr	r2, [r2, #4]
 8010498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d103      	bne.n	80104ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	689a      	ldr	r2, [r3, #8]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	1e5a      	subs	r2, r3, #1
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3714      	adds	r7, #20
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10a      	bne.n	80104f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	60bb      	str	r3, [r7, #8]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80104f6:	f002 fa1d 	bl	8012934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010502:	68f9      	ldr	r1, [r7, #12]
 8010504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010506:	fb01 f303 	mul.w	r3, r1, r3
 801050a:	441a      	add	r2, r3
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2200      	movs	r2, #0
 8010514:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010526:	3b01      	subs	r3, #1
 8010528:	68f9      	ldr	r1, [r7, #12]
 801052a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801052c:	fb01 f303 	mul.w	r3, r1, r3
 8010530:	441a      	add	r2, r3
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	22ff      	movs	r2, #255	; 0xff
 801053a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	22ff      	movs	r2, #255	; 0xff
 8010542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d114      	bne.n	8010576 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	691b      	ldr	r3, [r3, #16]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d01a      	beq.n	801058a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3310      	adds	r3, #16
 8010558:	4618      	mov	r0, r3
 801055a:	f001 fa35 	bl	80119c8 <xTaskRemoveFromEventList>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d012      	beq.n	801058a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010564:	4b0c      	ldr	r3, [pc, #48]	; (8010598 <xQueueGenericReset+0xcc>)
 8010566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	e009      	b.n	801058a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	3310      	adds	r3, #16
 801057a:	4618      	mov	r0, r3
 801057c:	f7ff fef2 	bl	8010364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	3324      	adds	r3, #36	; 0x24
 8010584:	4618      	mov	r0, r3
 8010586:	f7ff feed 	bl	8010364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801058a:	f002 fa03 	bl	8012994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801058e:	2301      	movs	r3, #1
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801059c:	b580      	push	{r7, lr}
 801059e:	b08e      	sub	sp, #56	; 0x38
 80105a0:	af02      	add	r7, sp, #8
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
 80105a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10a      	bne.n	80105c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80105b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b4:	f383 8811 	msr	BASEPRI, r3
 80105b8:	f3bf 8f6f 	isb	sy
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105c2:	bf00      	nop
 80105c4:	e7fe      	b.n	80105c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d10a      	bne.n	80105e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80105cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d0:	f383 8811 	msr	BASEPRI, r3
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80105de:	bf00      	nop
 80105e0:	e7fe      	b.n	80105e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d002      	beq.n	80105ee <xQueueGenericCreateStatic+0x52>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <xQueueGenericCreateStatic+0x56>
 80105ee:	2301      	movs	r3, #1
 80105f0:	e000      	b.n	80105f4 <xQueueGenericCreateStatic+0x58>
 80105f2:	2300      	movs	r3, #0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10a      	bne.n	801060e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	623b      	str	r3, [r7, #32]
}
 801060a:	bf00      	nop
 801060c:	e7fe      	b.n	801060c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <xQueueGenericCreateStatic+0x7e>
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d101      	bne.n	801061e <xQueueGenericCreateStatic+0x82>
 801061a:	2301      	movs	r3, #1
 801061c:	e000      	b.n	8010620 <xQueueGenericCreateStatic+0x84>
 801061e:	2300      	movs	r3, #0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10a      	bne.n	801063a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	61fb      	str	r3, [r7, #28]
}
 8010636:	bf00      	nop
 8010638:	e7fe      	b.n	8010638 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801063a:	2350      	movs	r3, #80	; 0x50
 801063c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2b50      	cmp	r3, #80	; 0x50
 8010642:	d00a      	beq.n	801065a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	61bb      	str	r3, [r7, #24]
}
 8010656:	bf00      	nop
 8010658:	e7fe      	b.n	8010658 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801065a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00d      	beq.n	8010682 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010668:	2201      	movs	r2, #1
 801066a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801066e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010674:	9300      	str	r3, [sp, #0]
 8010676:	4613      	mov	r3, r2
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	68b9      	ldr	r1, [r7, #8]
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	f000 f83f 	bl	8010700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010684:	4618      	mov	r0, r3
 8010686:	3730      	adds	r7, #48	; 0x30
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	af02      	add	r7, sp, #8
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	4613      	mov	r3, r2
 8010698:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d10a      	bne.n	80106b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80106a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a4:	f383 8811 	msr	BASEPRI, r3
 80106a8:	f3bf 8f6f 	isb	sy
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	613b      	str	r3, [r7, #16]
}
 80106b2:	bf00      	nop
 80106b4:	e7fe      	b.n	80106b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	fb02 f303 	mul.w	r3, r2, r3
 80106be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	3350      	adds	r3, #80	; 0x50
 80106c4:	4618      	mov	r0, r3
 80106c6:	f002 fa57 	bl	8012b78 <pvPortMalloc>
 80106ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d011      	beq.n	80106f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	3350      	adds	r3, #80	; 0x50
 80106da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80106e4:	79fa      	ldrb	r2, [r7, #7]
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	4613      	mov	r3, r2
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	68b9      	ldr	r1, [r7, #8]
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f000 f805 	bl	8010700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106f6:	69bb      	ldr	r3, [r7, #24]
	}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3720      	adds	r7, #32
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d103      	bne.n	801071c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	601a      	str	r2, [r3, #0]
 801071a:	e002      	b.n	8010722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	68fa      	ldr	r2, [r7, #12]
 8010726:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801072e:	2101      	movs	r1, #1
 8010730:	69b8      	ldr	r0, [r7, #24]
 8010732:	f7ff fecb 	bl	80104cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	78fa      	ldrb	r2, [r7, #3]
 801073a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801073e:	bf00      	nop
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
	...

08010748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b08e      	sub	sp, #56	; 0x38
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010756:	2300      	movs	r3, #0
 8010758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010760:	2b00      	cmp	r3, #0
 8010762:	d10a      	bne.n	801077a <xQueueGenericSend+0x32>
	__asm volatile
 8010764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010776:	bf00      	nop
 8010778:	e7fe      	b.n	8010778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d103      	bne.n	8010788 <xQueueGenericSend+0x40>
 8010780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <xQueueGenericSend+0x44>
 8010788:	2301      	movs	r3, #1
 801078a:	e000      	b.n	801078e <xQueueGenericSend+0x46>
 801078c:	2300      	movs	r3, #0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10a      	bne.n	80107a8 <xQueueGenericSend+0x60>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107a4:	bf00      	nop
 80107a6:	e7fe      	b.n	80107a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	2b02      	cmp	r3, #2
 80107ac:	d103      	bne.n	80107b6 <xQueueGenericSend+0x6e>
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d101      	bne.n	80107ba <xQueueGenericSend+0x72>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e000      	b.n	80107bc <xQueueGenericSend+0x74>
 80107ba:	2300      	movs	r3, #0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10a      	bne.n	80107d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80107c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	623b      	str	r3, [r7, #32]
}
 80107d2:	bf00      	nop
 80107d4:	e7fe      	b.n	80107d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107d6:	f001 fb17 	bl	8011e08 <xTaskGetSchedulerState>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d102      	bne.n	80107e6 <xQueueGenericSend+0x9e>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d101      	bne.n	80107ea <xQueueGenericSend+0xa2>
 80107e6:	2301      	movs	r3, #1
 80107e8:	e000      	b.n	80107ec <xQueueGenericSend+0xa4>
 80107ea:	2300      	movs	r3, #0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d10a      	bne.n	8010806 <xQueueGenericSend+0xbe>
	__asm volatile
 80107f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	61fb      	str	r3, [r7, #28]
}
 8010802:	bf00      	nop
 8010804:	e7fe      	b.n	8010804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010806:	f002 f895 	bl	8012934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010812:	429a      	cmp	r2, r3
 8010814:	d302      	bcc.n	801081c <xQueueGenericSend+0xd4>
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	2b02      	cmp	r3, #2
 801081a:	d129      	bne.n	8010870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	68b9      	ldr	r1, [r7, #8]
 8010820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010822:	f000 fac7 	bl	8010db4 <prvCopyDataToQueue>
 8010826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082c:	2b00      	cmp	r3, #0
 801082e:	d010      	beq.n	8010852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	3324      	adds	r3, #36	; 0x24
 8010834:	4618      	mov	r0, r3
 8010836:	f001 f8c7 	bl	80119c8 <xTaskRemoveFromEventList>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d013      	beq.n	8010868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010840:	4b3f      	ldr	r3, [pc, #252]	; (8010940 <xQueueGenericSend+0x1f8>)
 8010842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010846:	601a      	str	r2, [r3, #0]
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	e00a      	b.n	8010868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010854:	2b00      	cmp	r3, #0
 8010856:	d007      	beq.n	8010868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010858:	4b39      	ldr	r3, [pc, #228]	; (8010940 <xQueueGenericSend+0x1f8>)
 801085a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801085e:	601a      	str	r2, [r3, #0]
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010868:	f002 f894 	bl	8012994 <vPortExitCritical>
				return pdPASS;
 801086c:	2301      	movs	r3, #1
 801086e:	e063      	b.n	8010938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d103      	bne.n	801087e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010876:	f002 f88d 	bl	8012994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801087a:	2300      	movs	r3, #0
 801087c:	e05c      	b.n	8010938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801087e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010880:	2b00      	cmp	r3, #0
 8010882:	d106      	bne.n	8010892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010884:	f107 0314 	add.w	r3, r7, #20
 8010888:	4618      	mov	r0, r3
 801088a:	f001 f963 	bl	8011b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801088e:	2301      	movs	r3, #1
 8010890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010892:	f002 f87f 	bl	8012994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010896:	f000 fe37 	bl	8011508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801089a:	f002 f84b 	bl	8012934 <vPortEnterCritical>
 801089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108a4:	b25b      	sxtb	r3, r3
 80108a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108aa:	d103      	bne.n	80108b4 <xQueueGenericSend+0x16c>
 80108ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ae:	2200      	movs	r2, #0
 80108b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108ba:	b25b      	sxtb	r3, r3
 80108bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108c0:	d103      	bne.n	80108ca <xQueueGenericSend+0x182>
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	2200      	movs	r2, #0
 80108c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108ca:	f002 f863 	bl	8012994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108ce:	1d3a      	adds	r2, r7, #4
 80108d0:	f107 0314 	add.w	r3, r7, #20
 80108d4:	4611      	mov	r1, r2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f001 f952 	bl	8011b80 <xTaskCheckForTimeOut>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d124      	bne.n	801092c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80108e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e4:	f000 fb5e 	bl	8010fa4 <prvIsQueueFull>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d018      	beq.n	8010920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80108ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f0:	3310      	adds	r3, #16
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	4611      	mov	r1, r2
 80108f6:	4618      	mov	r0, r3
 80108f8:	f000 ffda 	bl	80118b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80108fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108fe:	f000 fae9 	bl	8010ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010902:	f000 fe0f 	bl	8011524 <xTaskResumeAll>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	f47f af7c 	bne.w	8010806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801090e:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <xQueueGenericSend+0x1f8>)
 8010910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	e772      	b.n	8010806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010922:	f000 fad7 	bl	8010ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010926:	f000 fdfd 	bl	8011524 <xTaskResumeAll>
 801092a:	e76c      	b.n	8010806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801092c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801092e:	f000 fad1 	bl	8010ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010932:	f000 fdf7 	bl	8011524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010938:	4618      	mov	r0, r3
 801093a:	3738      	adds	r7, #56	; 0x38
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	e000ed04 	.word	0xe000ed04

08010944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b090      	sub	sp, #64	; 0x40
 8010948:	af00      	add	r7, sp, #0
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	607a      	str	r2, [r7, #4]
 8010950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10a      	bne.n	8010972 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010960:	f383 8811 	msr	BASEPRI, r3
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801096e:	bf00      	nop
 8010970:	e7fe      	b.n	8010970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d103      	bne.n	8010980 <xQueueGenericSendFromISR+0x3c>
 8010978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097c:	2b00      	cmp	r3, #0
 801097e:	d101      	bne.n	8010984 <xQueueGenericSendFromISR+0x40>
 8010980:	2301      	movs	r3, #1
 8010982:	e000      	b.n	8010986 <xQueueGenericSendFromISR+0x42>
 8010984:	2300      	movs	r3, #0
 8010986:	2b00      	cmp	r3, #0
 8010988:	d10a      	bne.n	80109a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801098a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801099c:	bf00      	nop
 801099e:	e7fe      	b.n	801099e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d103      	bne.n	80109ae <xQueueGenericSendFromISR+0x6a>
 80109a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d101      	bne.n	80109b2 <xQueueGenericSendFromISR+0x6e>
 80109ae:	2301      	movs	r3, #1
 80109b0:	e000      	b.n	80109b4 <xQueueGenericSendFromISR+0x70>
 80109b2:	2300      	movs	r3, #0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10a      	bne.n	80109ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	623b      	str	r3, [r7, #32]
}
 80109ca:	bf00      	nop
 80109cc:	e7fe      	b.n	80109cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109ce:	f002 f893 	bl	8012af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80109d2:	f3ef 8211 	mrs	r2, BASEPRI
 80109d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109da:	f383 8811 	msr	BASEPRI, r3
 80109de:	f3bf 8f6f 	isb	sy
 80109e2:	f3bf 8f4f 	dsb	sy
 80109e6:	61fa      	str	r2, [r7, #28]
 80109e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80109ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d302      	bcc.n	8010a00 <xQueueGenericSendFromISR+0xbc>
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	2b02      	cmp	r3, #2
 80109fe:	d12f      	bne.n	8010a60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a10:	683a      	ldr	r2, [r7, #0]
 8010a12:	68b9      	ldr	r1, [r7, #8]
 8010a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a16:	f000 f9cd 	bl	8010db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a22:	d112      	bne.n	8010a4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d016      	beq.n	8010a5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2e:	3324      	adds	r3, #36	; 0x24
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 ffc9 	bl	80119c8 <xTaskRemoveFromEventList>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00e      	beq.n	8010a5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00b      	beq.n	8010a5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2201      	movs	r2, #1
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	e007      	b.n	8010a5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010a4e:	3301      	adds	r3, #1
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	b25a      	sxtb	r2, r3
 8010a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010a5e:	e001      	b.n	8010a64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a60:	2300      	movs	r3, #0
 8010a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010a6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3740      	adds	r7, #64	; 0x40
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
	...

08010a7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b08c      	sub	sp, #48	; 0x30
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10a      	bne.n	8010aac <xQueueReceive+0x30>
	__asm volatile
 8010a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	623b      	str	r3, [r7, #32]
}
 8010aa8:	bf00      	nop
 8010aaa:	e7fe      	b.n	8010aaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d103      	bne.n	8010aba <xQueueReceive+0x3e>
 8010ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d101      	bne.n	8010abe <xQueueReceive+0x42>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e000      	b.n	8010ac0 <xQueueReceive+0x44>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10a      	bne.n	8010ada <xQueueReceive+0x5e>
	__asm volatile
 8010ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac8:	f383 8811 	msr	BASEPRI, r3
 8010acc:	f3bf 8f6f 	isb	sy
 8010ad0:	f3bf 8f4f 	dsb	sy
 8010ad4:	61fb      	str	r3, [r7, #28]
}
 8010ad6:	bf00      	nop
 8010ad8:	e7fe      	b.n	8010ad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ada:	f001 f995 	bl	8011e08 <xTaskGetSchedulerState>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d102      	bne.n	8010aea <xQueueReceive+0x6e>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d101      	bne.n	8010aee <xQueueReceive+0x72>
 8010aea:	2301      	movs	r3, #1
 8010aec:	e000      	b.n	8010af0 <xQueueReceive+0x74>
 8010aee:	2300      	movs	r3, #0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10a      	bne.n	8010b0a <xQueueReceive+0x8e>
	__asm volatile
 8010af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	61bb      	str	r3, [r7, #24]
}
 8010b06:	bf00      	nop
 8010b08:	e7fe      	b.n	8010b08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b0a:	f001 ff13 	bl	8012934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d01f      	beq.n	8010b5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b1a:	68b9      	ldr	r1, [r7, #8]
 8010b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b1e:	f000 f9b3 	bl	8010e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b24:	1e5a      	subs	r2, r3, #1
 8010b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2c:	691b      	ldr	r3, [r3, #16]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00f      	beq.n	8010b52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b34:	3310      	adds	r3, #16
 8010b36:	4618      	mov	r0, r3
 8010b38:	f000 ff46 	bl	80119c8 <xTaskRemoveFromEventList>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d007      	beq.n	8010b52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b42:	4b3d      	ldr	r3, [pc, #244]	; (8010c38 <xQueueReceive+0x1bc>)
 8010b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b52:	f001 ff1f 	bl	8012994 <vPortExitCritical>
				return pdPASS;
 8010b56:	2301      	movs	r3, #1
 8010b58:	e069      	b.n	8010c2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d103      	bne.n	8010b68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b60:	f001 ff18 	bl	8012994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b64:	2300      	movs	r3, #0
 8010b66:	e062      	b.n	8010c2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d106      	bne.n	8010b7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b6e:	f107 0310 	add.w	r3, r7, #16
 8010b72:	4618      	mov	r0, r3
 8010b74:	f000 ffee 	bl	8011b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b7c:	f001 ff0a 	bl	8012994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b80:	f000 fcc2 	bl	8011508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b84:	f001 fed6 	bl	8012934 <vPortEnterCritical>
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b8e:	b25b      	sxtb	r3, r3
 8010b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b94:	d103      	bne.n	8010b9e <xQueueReceive+0x122>
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ba4:	b25b      	sxtb	r3, r3
 8010ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010baa:	d103      	bne.n	8010bb4 <xQueueReceive+0x138>
 8010bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bb4:	f001 feee 	bl	8012994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bb8:	1d3a      	adds	r2, r7, #4
 8010bba:	f107 0310 	add.w	r3, r7, #16
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 ffdd 	bl	8011b80 <xTaskCheckForTimeOut>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d123      	bne.n	8010c14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bce:	f000 f9d3 	bl	8010f78 <prvIsQueueEmpty>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d017      	beq.n	8010c08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	3324      	adds	r3, #36	; 0x24
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	4611      	mov	r1, r2
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 fe65 	bl	80118b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010be8:	f000 f974 	bl	8010ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010bec:	f000 fc9a 	bl	8011524 <xTaskResumeAll>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d189      	bne.n	8010b0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010bf6:	4b10      	ldr	r3, [pc, #64]	; (8010c38 <xQueueReceive+0x1bc>)
 8010bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	e780      	b.n	8010b0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c0a:	f000 f963 	bl	8010ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c0e:	f000 fc89 	bl	8011524 <xTaskResumeAll>
 8010c12:	e77a      	b.n	8010b0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c16:	f000 f95d 	bl	8010ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c1a:	f000 fc83 	bl	8011524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c20:	f000 f9aa 	bl	8010f78 <prvIsQueueEmpty>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f43f af6f 	beq.w	8010b0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3730      	adds	r7, #48	; 0x30
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	e000ed04 	.word	0xe000ed04

08010c3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b08e      	sub	sp, #56	; 0x38
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10a      	bne.n	8010c68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	623b      	str	r3, [r7, #32]
}
 8010c64:	bf00      	nop
 8010c66:	e7fe      	b.n	8010c66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d103      	bne.n	8010c76 <xQueueReceiveFromISR+0x3a>
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <xQueueReceiveFromISR+0x3e>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e000      	b.n	8010c7c <xQueueReceiveFromISR+0x40>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d10a      	bne.n	8010c96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c84:	f383 8811 	msr	BASEPRI, r3
 8010c88:	f3bf 8f6f 	isb	sy
 8010c8c:	f3bf 8f4f 	dsb	sy
 8010c90:	61fb      	str	r3, [r7, #28]
}
 8010c92:	bf00      	nop
 8010c94:	e7fe      	b.n	8010c94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c96:	f001 ff2f 	bl	8012af8 <vPortValidateInterruptPriority>
	__asm volatile
 8010c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	61ba      	str	r2, [r7, #24]
 8010cb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010cb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d02f      	beq.n	8010d22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ccc:	68b9      	ldr	r1, [r7, #8]
 8010cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cd0:	f000 f8da 	bl	8010e88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd6:	1e5a      	subs	r2, r3, #1
 8010cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010cdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ce4:	d112      	bne.n	8010d0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d016      	beq.n	8010d1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	3310      	adds	r3, #16
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f000 fe68 	bl	80119c8 <xTaskRemoveFromEventList>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d00e      	beq.n	8010d1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00b      	beq.n	8010d1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2201      	movs	r2, #1
 8010d08:	601a      	str	r2, [r3, #0]
 8010d0a:	e007      	b.n	8010d1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d10:	3301      	adds	r3, #1
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	b25a      	sxtb	r2, r3
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8010d20:	e001      	b.n	8010d26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010d22:	2300      	movs	r3, #0
 8010d24:	637b      	str	r3, [r7, #52]	; 0x34
 8010d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	f383 8811 	msr	BASEPRI, r3
}
 8010d30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3738      	adds	r7, #56	; 0x38
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10a      	bne.n	8010d60 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4e:	f383 8811 	msr	BASEPRI, r3
 8010d52:	f3bf 8f6f 	isb	sy
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	60bb      	str	r3, [r7, #8]
}
 8010d5c:	bf00      	nop
 8010d5e:	e7fe      	b.n	8010d5e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010d60:	f001 fde8 	bl	8012934 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d68:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010d6a:	f001 fe13 	bl	8012994 <vPortExitCritical>

	return uxReturn;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010d70:	4618      	mov	r0, r3
 8010d72:	3710      	adds	r7, #16
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b087      	sub	sp, #28
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10a      	bne.n	8010da0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8010d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8e:	f383 8811 	msr	BASEPRI, r3
 8010d92:	f3bf 8f6f 	isb	sy
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	60fb      	str	r3, [r7, #12]
}
 8010d9c:	bf00      	nop
 8010d9e:	e7fe      	b.n	8010d9e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010da4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010da6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010da8:	4618      	mov	r0, r3
 8010daa:	371c      	adds	r7, #28
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10d      	bne.n	8010dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d14d      	bne.n	8010e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	689b      	ldr	r3, [r3, #8]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f001 f830 	bl	8011e44 <xTaskPriorityDisinherit>
 8010de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2200      	movs	r2, #0
 8010dea:	609a      	str	r2, [r3, #8]
 8010dec:	e043      	b.n	8010e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d119      	bne.n	8010e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	6858      	ldr	r0, [r3, #4]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	68b9      	ldr	r1, [r7, #8]
 8010e00:	f002 f8de 	bl	8012fc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0c:	441a      	add	r2, r3
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	685a      	ldr	r2, [r3, #4]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d32b      	bcc.n	8010e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	605a      	str	r2, [r3, #4]
 8010e26:	e026      	b.n	8010e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	68d8      	ldr	r0, [r3, #12]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e30:	461a      	mov	r2, r3
 8010e32:	68b9      	ldr	r1, [r7, #8]
 8010e34:	f002 f8c4 	bl	8012fc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	68da      	ldr	r2, [r3, #12]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e40:	425b      	negs	r3, r3
 8010e42:	441a      	add	r2, r3
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d207      	bcs.n	8010e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	689a      	ldr	r2, [r3, #8]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5c:	425b      	negs	r3, r3
 8010e5e:	441a      	add	r2, r3
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	d105      	bne.n	8010e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	3b01      	subs	r3, #1
 8010e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	1c5a      	adds	r2, r3, #1
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010e7e:	697b      	ldr	r3, [r7, #20]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3718      	adds	r7, #24
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d018      	beq.n	8010ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	68da      	ldr	r2, [r3, #12]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea2:	441a      	add	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	68da      	ldr	r2, [r3, #12]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d303      	bcc.n	8010ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	68d9      	ldr	r1, [r3, #12]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	6838      	ldr	r0, [r7, #0]
 8010ec8:	f002 f87a 	bl	8012fc0 <memcpy>
	}
}
 8010ecc:	bf00      	nop
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010edc:	f001 fd2a 	bl	8012934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ee8:	e011      	b.n	8010f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d012      	beq.n	8010f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	3324      	adds	r3, #36	; 0x24
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f000 fd66 	bl	80119c8 <xTaskRemoveFromEventList>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d001      	beq.n	8010f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f02:	f000 fe9f 	bl	8011c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	dce9      	bgt.n	8010eea <prvUnlockQueue+0x16>
 8010f16:	e000      	b.n	8010f1a <prvUnlockQueue+0x46>
					break;
 8010f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	22ff      	movs	r2, #255	; 0xff
 8010f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010f22:	f001 fd37 	bl	8012994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f26:	f001 fd05 	bl	8012934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f32:	e011      	b.n	8010f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d012      	beq.n	8010f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	3310      	adds	r3, #16
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 fd41 	bl	80119c8 <xTaskRemoveFromEventList>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d001      	beq.n	8010f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f4c:	f000 fe7a 	bl	8011c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f50:	7bbb      	ldrb	r3, [r7, #14]
 8010f52:	3b01      	subs	r3, #1
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	dce9      	bgt.n	8010f34 <prvUnlockQueue+0x60>
 8010f60:	e000      	b.n	8010f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	22ff      	movs	r2, #255	; 0xff
 8010f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010f6c:	f001 fd12 	bl	8012994 <vPortExitCritical>
}
 8010f70:	bf00      	nop
 8010f72:	3710      	adds	r7, #16
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f80:	f001 fcd8 	bl	8012934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d102      	bne.n	8010f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	60fb      	str	r3, [r7, #12]
 8010f90:	e001      	b.n	8010f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010f92:	2300      	movs	r3, #0
 8010f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f96:	f001 fcfd 	bl	8012994 <vPortExitCritical>

	return xReturn;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fac:	f001 fcc2 	bl	8012934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d102      	bne.n	8010fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	e001      	b.n	8010fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fc6:	f001 fce5 	bl	8012994 <vPortExitCritical>

	return xReturn;
 8010fca:	68fb      	ldr	r3, [r7, #12]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010fde:	2300      	movs	r3, #0
 8010fe0:	60fb      	str	r3, [r7, #12]
 8010fe2:	e014      	b.n	801100e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010fe4:	4a0f      	ldr	r2, [pc, #60]	; (8011024 <vQueueAddToRegistry+0x50>)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10b      	bne.n	8011008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ff0:	490c      	ldr	r1, [pc, #48]	; (8011024 <vQueueAddToRegistry+0x50>)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010ffa:	4a0a      	ldr	r2, [pc, #40]	; (8011024 <vQueueAddToRegistry+0x50>)
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	00db      	lsls	r3, r3, #3
 8011000:	4413      	add	r3, r2
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011006:	e006      	b.n	8011016 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	3301      	adds	r3, #1
 801100c:	60fb      	str	r3, [r7, #12]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2b07      	cmp	r3, #7
 8011012:	d9e7      	bls.n	8010fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011014:	bf00      	nop
 8011016:	bf00      	nop
 8011018:	3714      	adds	r7, #20
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	24000cf8 	.word	0x24000cf8

08011028 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011028:	b580      	push	{r7, lr}
 801102a:	b086      	sub	sp, #24
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011038:	f001 fc7c 	bl	8012934 <vPortEnterCritical>
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011042:	b25b      	sxtb	r3, r3
 8011044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011048:	d103      	bne.n	8011052 <vQueueWaitForMessageRestricted+0x2a>
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	2200      	movs	r2, #0
 801104e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011058:	b25b      	sxtb	r3, r3
 801105a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801105e:	d103      	bne.n	8011068 <vQueueWaitForMessageRestricted+0x40>
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	2200      	movs	r2, #0
 8011064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011068:	f001 fc94 	bl	8012994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	3324      	adds	r3, #36	; 0x24
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	68b9      	ldr	r1, [r7, #8]
 801107c:	4618      	mov	r0, r3
 801107e:	f000 fc77 	bl	8011970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011082:	6978      	ldr	r0, [r7, #20]
 8011084:	f7ff ff26 	bl	8010ed4 <prvUnlockQueue>
	}
 8011088:	bf00      	nop
 801108a:	3718      	adds	r7, #24
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011090:	b580      	push	{r7, lr}
 8011092:	b08e      	sub	sp, #56	; 0x38
 8011094:	af04      	add	r7, sp, #16
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	607a      	str	r2, [r7, #4]
 801109c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d10a      	bne.n	80110ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	623b      	str	r3, [r7, #32]
}
 80110b6:	bf00      	nop
 80110b8:	e7fe      	b.n	80110b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80110ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d10a      	bne.n	80110d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80110c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	61fb      	str	r3, [r7, #28]
}
 80110d2:	bf00      	nop
 80110d4:	e7fe      	b.n	80110d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80110d6:	235c      	movs	r3, #92	; 0x5c
 80110d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	2b5c      	cmp	r3, #92	; 0x5c
 80110de:	d00a      	beq.n	80110f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80110e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	61bb      	str	r3, [r7, #24]
}
 80110f2:	bf00      	nop
 80110f4:	e7fe      	b.n	80110f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80110f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80110f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d01e      	beq.n	801113c <xTaskCreateStatic+0xac>
 80110fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011100:	2b00      	cmp	r3, #0
 8011102:	d01b      	beq.n	801113c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801110c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011110:	2202      	movs	r2, #2
 8011112:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011116:	2300      	movs	r3, #0
 8011118:	9303      	str	r3, [sp, #12]
 801111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111c:	9302      	str	r3, [sp, #8]
 801111e:	f107 0314 	add.w	r3, r7, #20
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	68b9      	ldr	r1, [r7, #8]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 f850 	bl	80111d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011136:	f000 f8dd 	bl	80112f4 <prvAddNewTaskToReadyList>
 801113a:	e001      	b.n	8011140 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801113c:	2300      	movs	r3, #0
 801113e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011140:	697b      	ldr	r3, [r7, #20]
	}
 8011142:	4618      	mov	r0, r3
 8011144:	3728      	adds	r7, #40	; 0x28
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801114a:	b580      	push	{r7, lr}
 801114c:	b08c      	sub	sp, #48	; 0x30
 801114e:	af04      	add	r7, sp, #16
 8011150:	60f8      	str	r0, [r7, #12]
 8011152:	60b9      	str	r1, [r7, #8]
 8011154:	603b      	str	r3, [r7, #0]
 8011156:	4613      	mov	r3, r2
 8011158:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801115a:	88fb      	ldrh	r3, [r7, #6]
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	4618      	mov	r0, r3
 8011160:	f001 fd0a 	bl	8012b78 <pvPortMalloc>
 8011164:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00e      	beq.n	801118a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801116c:	205c      	movs	r0, #92	; 0x5c
 801116e:	f001 fd03 	bl	8012b78 <pvPortMalloc>
 8011172:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d003      	beq.n	8011182 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	697a      	ldr	r2, [r7, #20]
 801117e:	631a      	str	r2, [r3, #48]	; 0x30
 8011180:	e005      	b.n	801118e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011182:	6978      	ldr	r0, [r7, #20]
 8011184:	f001 fdc4 	bl	8012d10 <vPortFree>
 8011188:	e001      	b.n	801118e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801118a:	2300      	movs	r3, #0
 801118c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801118e:	69fb      	ldr	r3, [r7, #28]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d017      	beq.n	80111c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	2200      	movs	r2, #0
 8011198:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801119c:	88fa      	ldrh	r2, [r7, #6]
 801119e:	2300      	movs	r3, #0
 80111a0:	9303      	str	r3, [sp, #12]
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	9302      	str	r3, [sp, #8]
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	9301      	str	r3, [sp, #4]
 80111aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	68b9      	ldr	r1, [r7, #8]
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f000 f80e 	bl	80111d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80111b8:	69f8      	ldr	r0, [r7, #28]
 80111ba:	f000 f89b 	bl	80112f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80111be:	2301      	movs	r3, #1
 80111c0:	61bb      	str	r3, [r7, #24]
 80111c2:	e002      	b.n	80111ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80111c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80111ca:	69bb      	ldr	r3, [r7, #24]
	}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3720      	adds	r7, #32
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b088      	sub	sp, #32
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80111e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	461a      	mov	r2, r3
 80111ec:	21a5      	movs	r1, #165	; 0xa5
 80111ee:	f001 fef5 	bl	8012fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80111f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80111fc:	440b      	add	r3, r1
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	f023 0307 	bic.w	r3, r3, #7
 801120a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	f003 0307 	and.w	r3, r3, #7
 8011212:	2b00      	cmp	r3, #0
 8011214:	d00a      	beq.n	801122c <prvInitialiseNewTask+0x58>
	__asm volatile
 8011216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121a:	f383 8811 	msr	BASEPRI, r3
 801121e:	f3bf 8f6f 	isb	sy
 8011222:	f3bf 8f4f 	dsb	sy
 8011226:	617b      	str	r3, [r7, #20]
}
 8011228:	bf00      	nop
 801122a:	e7fe      	b.n	801122a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d01f      	beq.n	8011272 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011232:	2300      	movs	r3, #0
 8011234:	61fb      	str	r3, [r7, #28]
 8011236:	e012      	b.n	801125e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	4413      	add	r3, r2
 801123e:	7819      	ldrb	r1, [r3, #0]
 8011240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	4413      	add	r3, r2
 8011246:	3334      	adds	r3, #52	; 0x34
 8011248:	460a      	mov	r2, r1
 801124a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	4413      	add	r3, r2
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d006      	beq.n	8011266 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	3301      	adds	r3, #1
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	2b0f      	cmp	r3, #15
 8011262:	d9e9      	bls.n	8011238 <prvInitialiseNewTask+0x64>
 8011264:	e000      	b.n	8011268 <prvInitialiseNewTask+0x94>
			{
				break;
 8011266:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126a:	2200      	movs	r2, #0
 801126c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011270:	e003      	b.n	801127a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	2200      	movs	r2, #0
 8011276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127c:	2b37      	cmp	r3, #55	; 0x37
 801127e:	d901      	bls.n	8011284 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011280:	2337      	movs	r3, #55	; 0x37
 8011282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801128e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011292:	2200      	movs	r2, #0
 8011294:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011298:	3304      	adds	r3, #4
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff f882 	bl	80103a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80112a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a2:	3318      	adds	r3, #24
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff f87d 	bl	80103a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80112aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80112ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	2200      	movs	r2, #0
 80112c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	2200      	movs	r2, #0
 80112ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	68f9      	ldr	r1, [r7, #12]
 80112d2:	69b8      	ldr	r0, [r7, #24]
 80112d4:	f001 f9fe 	bl	80126d4 <pxPortInitialiseStack>
 80112d8:	4602      	mov	r2, r0
 80112da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80112de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80112e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112ea:	bf00      	nop
 80112ec:	3720      	adds	r7, #32
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
	...

080112f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80112fc:	f001 fb1a 	bl	8012934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011300:	4b2d      	ldr	r3, [pc, #180]	; (80113b8 <prvAddNewTaskToReadyList+0xc4>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	3301      	adds	r3, #1
 8011306:	4a2c      	ldr	r2, [pc, #176]	; (80113b8 <prvAddNewTaskToReadyList+0xc4>)
 8011308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801130a:	4b2c      	ldr	r3, [pc, #176]	; (80113bc <prvAddNewTaskToReadyList+0xc8>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d109      	bne.n	8011326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011312:	4a2a      	ldr	r2, [pc, #168]	; (80113bc <prvAddNewTaskToReadyList+0xc8>)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011318:	4b27      	ldr	r3, [pc, #156]	; (80113b8 <prvAddNewTaskToReadyList+0xc4>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d110      	bne.n	8011342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011320:	f000 fcb4 	bl	8011c8c <prvInitialiseTaskLists>
 8011324:	e00d      	b.n	8011342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011326:	4b26      	ldr	r3, [pc, #152]	; (80113c0 <prvAddNewTaskToReadyList+0xcc>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801132e:	4b23      	ldr	r3, [pc, #140]	; (80113bc <prvAddNewTaskToReadyList+0xc8>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011338:	429a      	cmp	r2, r3
 801133a:	d802      	bhi.n	8011342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801133c:	4a1f      	ldr	r2, [pc, #124]	; (80113bc <prvAddNewTaskToReadyList+0xc8>)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011342:	4b20      	ldr	r3, [pc, #128]	; (80113c4 <prvAddNewTaskToReadyList+0xd0>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	3301      	adds	r3, #1
 8011348:	4a1e      	ldr	r2, [pc, #120]	; (80113c4 <prvAddNewTaskToReadyList+0xd0>)
 801134a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801134c:	4b1d      	ldr	r3, [pc, #116]	; (80113c4 <prvAddNewTaskToReadyList+0xd0>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011358:	4b1b      	ldr	r3, [pc, #108]	; (80113c8 <prvAddNewTaskToReadyList+0xd4>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	429a      	cmp	r2, r3
 801135e:	d903      	bls.n	8011368 <prvAddNewTaskToReadyList+0x74>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011364:	4a18      	ldr	r2, [pc, #96]	; (80113c8 <prvAddNewTaskToReadyList+0xd4>)
 8011366:	6013      	str	r3, [r2, #0]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136c:	4613      	mov	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4a15      	ldr	r2, [pc, #84]	; (80113cc <prvAddNewTaskToReadyList+0xd8>)
 8011376:	441a      	add	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	3304      	adds	r3, #4
 801137c:	4619      	mov	r1, r3
 801137e:	4610      	mov	r0, r2
 8011380:	f7ff f81d 	bl	80103be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011384:	f001 fb06 	bl	8012994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011388:	4b0d      	ldr	r3, [pc, #52]	; (80113c0 <prvAddNewTaskToReadyList+0xcc>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00e      	beq.n	80113ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011390:	4b0a      	ldr	r3, [pc, #40]	; (80113bc <prvAddNewTaskToReadyList+0xc8>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139a:	429a      	cmp	r2, r3
 801139c:	d207      	bcs.n	80113ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801139e:	4b0c      	ldr	r3, [pc, #48]	; (80113d0 <prvAddNewTaskToReadyList+0xdc>)
 80113a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a4:	601a      	str	r2, [r3, #0]
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113ae:	bf00      	nop
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	2400120c 	.word	0x2400120c
 80113bc:	24000d38 	.word	0x24000d38
 80113c0:	24001218 	.word	0x24001218
 80113c4:	24001228 	.word	0x24001228
 80113c8:	24001214 	.word	0x24001214
 80113cc:	24000d3c 	.word	0x24000d3c
 80113d0:	e000ed04 	.word	0xe000ed04

080113d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80113dc:	2300      	movs	r3, #0
 80113de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d017      	beq.n	8011416 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80113e6:	4b13      	ldr	r3, [pc, #76]	; (8011434 <vTaskDelay+0x60>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00a      	beq.n	8011404 <vTaskDelay+0x30>
	__asm volatile
 80113ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f2:	f383 8811 	msr	BASEPRI, r3
 80113f6:	f3bf 8f6f 	isb	sy
 80113fa:	f3bf 8f4f 	dsb	sy
 80113fe:	60bb      	str	r3, [r7, #8]
}
 8011400:	bf00      	nop
 8011402:	e7fe      	b.n	8011402 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011404:	f000 f880 	bl	8011508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011408:	2100      	movs	r1, #0
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 fda0 	bl	8011f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011410:	f000 f888 	bl	8011524 <xTaskResumeAll>
 8011414:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d107      	bne.n	801142c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801141c:	4b06      	ldr	r3, [pc, #24]	; (8011438 <vTaskDelay+0x64>)
 801141e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011422:	601a      	str	r2, [r3, #0]
 8011424:	f3bf 8f4f 	dsb	sy
 8011428:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801142c:	bf00      	nop
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	24001234 	.word	0x24001234
 8011438:	e000ed04 	.word	0xe000ed04

0801143c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b08a      	sub	sp, #40	; 0x28
 8011440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011442:	2300      	movs	r3, #0
 8011444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011446:	2300      	movs	r3, #0
 8011448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801144a:	463a      	mov	r2, r7
 801144c:	1d39      	adds	r1, r7, #4
 801144e:	f107 0308 	add.w	r3, r7, #8
 8011452:	4618      	mov	r0, r3
 8011454:	f7fe fd64 	bl	800ff20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	68ba      	ldr	r2, [r7, #8]
 801145e:	9202      	str	r2, [sp, #8]
 8011460:	9301      	str	r3, [sp, #4]
 8011462:	2300      	movs	r3, #0
 8011464:	9300      	str	r3, [sp, #0]
 8011466:	2300      	movs	r3, #0
 8011468:	460a      	mov	r2, r1
 801146a:	4921      	ldr	r1, [pc, #132]	; (80114f0 <vTaskStartScheduler+0xb4>)
 801146c:	4821      	ldr	r0, [pc, #132]	; (80114f4 <vTaskStartScheduler+0xb8>)
 801146e:	f7ff fe0f 	bl	8011090 <xTaskCreateStatic>
 8011472:	4603      	mov	r3, r0
 8011474:	4a20      	ldr	r2, [pc, #128]	; (80114f8 <vTaskStartScheduler+0xbc>)
 8011476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011478:	4b1f      	ldr	r3, [pc, #124]	; (80114f8 <vTaskStartScheduler+0xbc>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d002      	beq.n	8011486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011480:	2301      	movs	r3, #1
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	e001      	b.n	801148a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d102      	bne.n	8011496 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011490:	f000 fdb2 	bl	8011ff8 <xTimerCreateTimerTask>
 8011494:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d116      	bne.n	80114ca <vTaskStartScheduler+0x8e>
	__asm volatile
 801149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a0:	f383 8811 	msr	BASEPRI, r3
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	613b      	str	r3, [r7, #16]
}
 80114ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80114b0:	4b12      	ldr	r3, [pc, #72]	; (80114fc <vTaskStartScheduler+0xc0>)
 80114b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80114b8:	4b11      	ldr	r3, [pc, #68]	; (8011500 <vTaskStartScheduler+0xc4>)
 80114ba:	2201      	movs	r2, #1
 80114bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80114be:	4b11      	ldr	r3, [pc, #68]	; (8011504 <vTaskStartScheduler+0xc8>)
 80114c0:	2200      	movs	r2, #0
 80114c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80114c4:	f001 f994 	bl	80127f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80114c8:	e00e      	b.n	80114e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114d0:	d10a      	bne.n	80114e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80114d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d6:	f383 8811 	msr	BASEPRI, r3
 80114da:	f3bf 8f6f 	isb	sy
 80114de:	f3bf 8f4f 	dsb	sy
 80114e2:	60fb      	str	r3, [r7, #12]
}
 80114e4:	bf00      	nop
 80114e6:	e7fe      	b.n	80114e6 <vTaskStartScheduler+0xaa>
}
 80114e8:	bf00      	nop
 80114ea:	3718      	adds	r7, #24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	08014218 	.word	0x08014218
 80114f4:	08011c5d 	.word	0x08011c5d
 80114f8:	24001230 	.word	0x24001230
 80114fc:	2400122c 	.word	0x2400122c
 8011500:	24001218 	.word	0x24001218
 8011504:	24001210 	.word	0x24001210

08011508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011508:	b480      	push	{r7}
 801150a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801150c:	4b04      	ldr	r3, [pc, #16]	; (8011520 <vTaskSuspendAll+0x18>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	3301      	adds	r3, #1
 8011512:	4a03      	ldr	r2, [pc, #12]	; (8011520 <vTaskSuspendAll+0x18>)
 8011514:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011516:	bf00      	nop
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	24001234 	.word	0x24001234

08011524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801152a:	2300      	movs	r3, #0
 801152c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801152e:	2300      	movs	r3, #0
 8011530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011532:	4b42      	ldr	r3, [pc, #264]	; (801163c <xTaskResumeAll+0x118>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10a      	bne.n	8011550 <xTaskResumeAll+0x2c>
	__asm volatile
 801153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153e:	f383 8811 	msr	BASEPRI, r3
 8011542:	f3bf 8f6f 	isb	sy
 8011546:	f3bf 8f4f 	dsb	sy
 801154a:	603b      	str	r3, [r7, #0]
}
 801154c:	bf00      	nop
 801154e:	e7fe      	b.n	801154e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011550:	f001 f9f0 	bl	8012934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011554:	4b39      	ldr	r3, [pc, #228]	; (801163c <xTaskResumeAll+0x118>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	3b01      	subs	r3, #1
 801155a:	4a38      	ldr	r2, [pc, #224]	; (801163c <xTaskResumeAll+0x118>)
 801155c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801155e:	4b37      	ldr	r3, [pc, #220]	; (801163c <xTaskResumeAll+0x118>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d162      	bne.n	801162c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011566:	4b36      	ldr	r3, [pc, #216]	; (8011640 <xTaskResumeAll+0x11c>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d05e      	beq.n	801162c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801156e:	e02f      	b.n	80115d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011570:	4b34      	ldr	r3, [pc, #208]	; (8011644 <xTaskResumeAll+0x120>)
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	3318      	adds	r3, #24
 801157c:	4618      	mov	r0, r3
 801157e:	f7fe ff7b 	bl	8010478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	3304      	adds	r3, #4
 8011586:	4618      	mov	r0, r3
 8011588:	f7fe ff76 	bl	8010478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011590:	4b2d      	ldr	r3, [pc, #180]	; (8011648 <xTaskResumeAll+0x124>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	429a      	cmp	r2, r3
 8011596:	d903      	bls.n	80115a0 <xTaskResumeAll+0x7c>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801159c:	4a2a      	ldr	r2, [pc, #168]	; (8011648 <xTaskResumeAll+0x124>)
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a4:	4613      	mov	r3, r2
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	4413      	add	r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4a27      	ldr	r2, [pc, #156]	; (801164c <xTaskResumeAll+0x128>)
 80115ae:	441a      	add	r2, r3
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	3304      	adds	r3, #4
 80115b4:	4619      	mov	r1, r3
 80115b6:	4610      	mov	r0, r2
 80115b8:	f7fe ff01 	bl	80103be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c0:	4b23      	ldr	r3, [pc, #140]	; (8011650 <xTaskResumeAll+0x12c>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d302      	bcc.n	80115d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80115ca:	4b22      	ldr	r3, [pc, #136]	; (8011654 <xTaskResumeAll+0x130>)
 80115cc:	2201      	movs	r2, #1
 80115ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115d0:	4b1c      	ldr	r3, [pc, #112]	; (8011644 <xTaskResumeAll+0x120>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1cb      	bne.n	8011570 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d001      	beq.n	80115e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80115de:	f000 fbf3 	bl	8011dc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80115e2:	4b1d      	ldr	r3, [pc, #116]	; (8011658 <xTaskResumeAll+0x134>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d010      	beq.n	8011610 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80115ee:	f000 f847 	bl	8011680 <xTaskIncrementTick>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d002      	beq.n	80115fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80115f8:	4b16      	ldr	r3, [pc, #88]	; (8011654 <xTaskResumeAll+0x130>)
 80115fa:	2201      	movs	r2, #1
 80115fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	3b01      	subs	r3, #1
 8011602:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1f1      	bne.n	80115ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801160a:	4b13      	ldr	r3, [pc, #76]	; (8011658 <xTaskResumeAll+0x134>)
 801160c:	2200      	movs	r2, #0
 801160e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011610:	4b10      	ldr	r3, [pc, #64]	; (8011654 <xTaskResumeAll+0x130>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d009      	beq.n	801162c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011618:	2301      	movs	r3, #1
 801161a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801161c:	4b0f      	ldr	r3, [pc, #60]	; (801165c <xTaskResumeAll+0x138>)
 801161e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801162c:	f001 f9b2 	bl	8012994 <vPortExitCritical>

	return xAlreadyYielded;
 8011630:	68bb      	ldr	r3, [r7, #8]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	24001234 	.word	0x24001234
 8011640:	2400120c 	.word	0x2400120c
 8011644:	240011cc 	.word	0x240011cc
 8011648:	24001214 	.word	0x24001214
 801164c:	24000d3c 	.word	0x24000d3c
 8011650:	24000d38 	.word	0x24000d38
 8011654:	24001220 	.word	0x24001220
 8011658:	2400121c 	.word	0x2400121c
 801165c:	e000ed04 	.word	0xe000ed04

08011660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011666:	4b05      	ldr	r3, [pc, #20]	; (801167c <xTaskGetTickCount+0x1c>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801166c:	687b      	ldr	r3, [r7, #4]
}
 801166e:	4618      	mov	r0, r3
 8011670:	370c      	adds	r7, #12
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop
 801167c:	24001210 	.word	0x24001210

08011680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011686:	2300      	movs	r3, #0
 8011688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801168a:	4b4f      	ldr	r3, [pc, #316]	; (80117c8 <xTaskIncrementTick+0x148>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	f040 808f 	bne.w	80117b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011694:	4b4d      	ldr	r3, [pc, #308]	; (80117cc <xTaskIncrementTick+0x14c>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	3301      	adds	r3, #1
 801169a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801169c:	4a4b      	ldr	r2, [pc, #300]	; (80117cc <xTaskIncrementTick+0x14c>)
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d120      	bne.n	80116ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80116a8:	4b49      	ldr	r3, [pc, #292]	; (80117d0 <xTaskIncrementTick+0x150>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00a      	beq.n	80116c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80116b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b6:	f383 8811 	msr	BASEPRI, r3
 80116ba:	f3bf 8f6f 	isb	sy
 80116be:	f3bf 8f4f 	dsb	sy
 80116c2:	603b      	str	r3, [r7, #0]
}
 80116c4:	bf00      	nop
 80116c6:	e7fe      	b.n	80116c6 <xTaskIncrementTick+0x46>
 80116c8:	4b41      	ldr	r3, [pc, #260]	; (80117d0 <xTaskIncrementTick+0x150>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	60fb      	str	r3, [r7, #12]
 80116ce:	4b41      	ldr	r3, [pc, #260]	; (80117d4 <xTaskIncrementTick+0x154>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	4a3f      	ldr	r2, [pc, #252]	; (80117d0 <xTaskIncrementTick+0x150>)
 80116d4:	6013      	str	r3, [r2, #0]
 80116d6:	4a3f      	ldr	r2, [pc, #252]	; (80117d4 <xTaskIncrementTick+0x154>)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	6013      	str	r3, [r2, #0]
 80116dc:	4b3e      	ldr	r3, [pc, #248]	; (80117d8 <xTaskIncrementTick+0x158>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	3301      	adds	r3, #1
 80116e2:	4a3d      	ldr	r2, [pc, #244]	; (80117d8 <xTaskIncrementTick+0x158>)
 80116e4:	6013      	str	r3, [r2, #0]
 80116e6:	f000 fb6f 	bl	8011dc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80116ea:	4b3c      	ldr	r3, [pc, #240]	; (80117dc <xTaskIncrementTick+0x15c>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	693a      	ldr	r2, [r7, #16]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d349      	bcc.n	8011788 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116f4:	4b36      	ldr	r3, [pc, #216]	; (80117d0 <xTaskIncrementTick+0x150>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d104      	bne.n	8011708 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116fe:	4b37      	ldr	r3, [pc, #220]	; (80117dc <xTaskIncrementTick+0x15c>)
 8011700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011704:	601a      	str	r2, [r3, #0]
					break;
 8011706:	e03f      	b.n	8011788 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011708:	4b31      	ldr	r3, [pc, #196]	; (80117d0 <xTaskIncrementTick+0x150>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011718:	693a      	ldr	r2, [r7, #16]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	429a      	cmp	r2, r3
 801171e:	d203      	bcs.n	8011728 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011720:	4a2e      	ldr	r2, [pc, #184]	; (80117dc <xTaskIncrementTick+0x15c>)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011726:	e02f      	b.n	8011788 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	3304      	adds	r3, #4
 801172c:	4618      	mov	r0, r3
 801172e:	f7fe fea3 	bl	8010478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011736:	2b00      	cmp	r3, #0
 8011738:	d004      	beq.n	8011744 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	3318      	adds	r3, #24
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fe9a 	bl	8010478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011748:	4b25      	ldr	r3, [pc, #148]	; (80117e0 <xTaskIncrementTick+0x160>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d903      	bls.n	8011758 <xTaskIncrementTick+0xd8>
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011754:	4a22      	ldr	r2, [pc, #136]	; (80117e0 <xTaskIncrementTick+0x160>)
 8011756:	6013      	str	r3, [r2, #0]
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801175c:	4613      	mov	r3, r2
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	4413      	add	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4a1f      	ldr	r2, [pc, #124]	; (80117e4 <xTaskIncrementTick+0x164>)
 8011766:	441a      	add	r2, r3
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	3304      	adds	r3, #4
 801176c:	4619      	mov	r1, r3
 801176e:	4610      	mov	r0, r2
 8011770:	f7fe fe25 	bl	80103be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011778:	4b1b      	ldr	r3, [pc, #108]	; (80117e8 <xTaskIncrementTick+0x168>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177e:	429a      	cmp	r2, r3
 8011780:	d3b8      	bcc.n	80116f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011782:	2301      	movs	r3, #1
 8011784:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011786:	e7b5      	b.n	80116f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011788:	4b17      	ldr	r3, [pc, #92]	; (80117e8 <xTaskIncrementTick+0x168>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801178e:	4915      	ldr	r1, [pc, #84]	; (80117e4 <xTaskIncrementTick+0x164>)
 8011790:	4613      	mov	r3, r2
 8011792:	009b      	lsls	r3, r3, #2
 8011794:	4413      	add	r3, r2
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	440b      	add	r3, r1
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d901      	bls.n	80117a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80117a0:	2301      	movs	r3, #1
 80117a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80117a4:	4b11      	ldr	r3, [pc, #68]	; (80117ec <xTaskIncrementTick+0x16c>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d007      	beq.n	80117bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80117ac:	2301      	movs	r3, #1
 80117ae:	617b      	str	r3, [r7, #20]
 80117b0:	e004      	b.n	80117bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80117b2:	4b0f      	ldr	r3, [pc, #60]	; (80117f0 <xTaskIncrementTick+0x170>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	3301      	adds	r3, #1
 80117b8:	4a0d      	ldr	r2, [pc, #52]	; (80117f0 <xTaskIncrementTick+0x170>)
 80117ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80117bc:	697b      	ldr	r3, [r7, #20]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3718      	adds	r7, #24
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	24001234 	.word	0x24001234
 80117cc:	24001210 	.word	0x24001210
 80117d0:	240011c4 	.word	0x240011c4
 80117d4:	240011c8 	.word	0x240011c8
 80117d8:	24001224 	.word	0x24001224
 80117dc:	2400122c 	.word	0x2400122c
 80117e0:	24001214 	.word	0x24001214
 80117e4:	24000d3c 	.word	0x24000d3c
 80117e8:	24000d38 	.word	0x24000d38
 80117ec:	24001220 	.word	0x24001220
 80117f0:	2400121c 	.word	0x2400121c

080117f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80117fa:	4b28      	ldr	r3, [pc, #160]	; (801189c <vTaskSwitchContext+0xa8>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d003      	beq.n	801180a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011802:	4b27      	ldr	r3, [pc, #156]	; (80118a0 <vTaskSwitchContext+0xac>)
 8011804:	2201      	movs	r2, #1
 8011806:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011808:	e041      	b.n	801188e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801180a:	4b25      	ldr	r3, [pc, #148]	; (80118a0 <vTaskSwitchContext+0xac>)
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011810:	4b24      	ldr	r3, [pc, #144]	; (80118a4 <vTaskSwitchContext+0xb0>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	60fb      	str	r3, [r7, #12]
 8011816:	e010      	b.n	801183a <vTaskSwitchContext+0x46>
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d10a      	bne.n	8011834 <vTaskSwitchContext+0x40>
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	607b      	str	r3, [r7, #4]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <vTaskSwitchContext+0x3e>
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	3b01      	subs	r3, #1
 8011838:	60fb      	str	r3, [r7, #12]
 801183a:	491b      	ldr	r1, [pc, #108]	; (80118a8 <vTaskSwitchContext+0xb4>)
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	4613      	mov	r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	4413      	add	r3, r2
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	440b      	add	r3, r1
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d0e4      	beq.n	8011818 <vTaskSwitchContext+0x24>
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	4613      	mov	r3, r2
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	4413      	add	r3, r2
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	4a13      	ldr	r2, [pc, #76]	; (80118a8 <vTaskSwitchContext+0xb4>)
 801185a:	4413      	add	r3, r2
 801185c:	60bb      	str	r3, [r7, #8]
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	685a      	ldr	r2, [r3, #4]
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	605a      	str	r2, [r3, #4]
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	685a      	ldr	r2, [r3, #4]
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	3308      	adds	r3, #8
 8011870:	429a      	cmp	r2, r3
 8011872:	d104      	bne.n	801187e <vTaskSwitchContext+0x8a>
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	685a      	ldr	r2, [r3, #4]
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	605a      	str	r2, [r3, #4]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	4a09      	ldr	r2, [pc, #36]	; (80118ac <vTaskSwitchContext+0xb8>)
 8011886:	6013      	str	r3, [r2, #0]
 8011888:	4a06      	ldr	r2, [pc, #24]	; (80118a4 <vTaskSwitchContext+0xb0>)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6013      	str	r3, [r2, #0]
}
 801188e:	bf00      	nop
 8011890:	3714      	adds	r7, #20
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	24001234 	.word	0x24001234
 80118a0:	24001220 	.word	0x24001220
 80118a4:	24001214 	.word	0x24001214
 80118a8:	24000d3c 	.word	0x24000d3c
 80118ac:	24000d38 	.word	0x24000d38

080118b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d10a      	bne.n	80118d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80118c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c4:	f383 8811 	msr	BASEPRI, r3
 80118c8:	f3bf 8f6f 	isb	sy
 80118cc:	f3bf 8f4f 	dsb	sy
 80118d0:	60fb      	str	r3, [r7, #12]
}
 80118d2:	bf00      	nop
 80118d4:	e7fe      	b.n	80118d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118d6:	4b07      	ldr	r3, [pc, #28]	; (80118f4 <vTaskPlaceOnEventList+0x44>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3318      	adds	r3, #24
 80118dc:	4619      	mov	r1, r3
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7fe fd91 	bl	8010406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118e4:	2101      	movs	r1, #1
 80118e6:	6838      	ldr	r0, [r7, #0]
 80118e8:	f000 fb32 	bl	8011f50 <prvAddCurrentTaskToDelayedList>
}
 80118ec:	bf00      	nop
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	24000d38 	.word	0x24000d38

080118f8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10a      	bne.n	8011920 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190e:	f383 8811 	msr	BASEPRI, r3
 8011912:	f3bf 8f6f 	isb	sy
 8011916:	f3bf 8f4f 	dsb	sy
 801191a:	617b      	str	r3, [r7, #20]
}
 801191c:	bf00      	nop
 801191e:	e7fe      	b.n	801191e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011920:	4b11      	ldr	r3, [pc, #68]	; (8011968 <vTaskPlaceOnUnorderedEventList+0x70>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d10a      	bne.n	801193e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801192c:	f383 8811 	msr	BASEPRI, r3
 8011930:	f3bf 8f6f 	isb	sy
 8011934:	f3bf 8f4f 	dsb	sy
 8011938:	613b      	str	r3, [r7, #16]
}
 801193a:	bf00      	nop
 801193c:	e7fe      	b.n	801193c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801193e:	4b0b      	ldr	r3, [pc, #44]	; (801196c <vTaskPlaceOnUnorderedEventList+0x74>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011948:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801194a:	4b08      	ldr	r3, [pc, #32]	; (801196c <vTaskPlaceOnUnorderedEventList+0x74>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	3318      	adds	r3, #24
 8011950:	4619      	mov	r1, r3
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f7fe fd33 	bl	80103be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011958:	2101      	movs	r1, #1
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 faf8 	bl	8011f50 <prvAddCurrentTaskToDelayedList>
}
 8011960:	bf00      	nop
 8011962:	3718      	adds	r7, #24
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	24001234 	.word	0x24001234
 801196c:	24000d38 	.word	0x24000d38

08011970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011970:	b580      	push	{r7, lr}
 8011972:	b086      	sub	sp, #24
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d10a      	bne.n	8011998 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	617b      	str	r3, [r7, #20]
}
 8011994:	bf00      	nop
 8011996:	e7fe      	b.n	8011996 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011998:	4b0a      	ldr	r3, [pc, #40]	; (80119c4 <vTaskPlaceOnEventListRestricted+0x54>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	3318      	adds	r3, #24
 801199e:	4619      	mov	r1, r3
 80119a0:	68f8      	ldr	r0, [r7, #12]
 80119a2:	f7fe fd0c 	bl	80103be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d002      	beq.n	80119b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80119ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80119b2:	6879      	ldr	r1, [r7, #4]
 80119b4:	68b8      	ldr	r0, [r7, #8]
 80119b6:	f000 facb 	bl	8011f50 <prvAddCurrentTaskToDelayedList>
	}
 80119ba:	bf00      	nop
 80119bc:	3718      	adds	r7, #24
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	24000d38 	.word	0x24000d38

080119c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b086      	sub	sp, #24
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d10a      	bne.n	80119f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80119de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e2:	f383 8811 	msr	BASEPRI, r3
 80119e6:	f3bf 8f6f 	isb	sy
 80119ea:	f3bf 8f4f 	dsb	sy
 80119ee:	60fb      	str	r3, [r7, #12]
}
 80119f0:	bf00      	nop
 80119f2:	e7fe      	b.n	80119f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	3318      	adds	r3, #24
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7fe fd3d 	bl	8010478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119fe:	4b1e      	ldr	r3, [pc, #120]	; (8011a78 <xTaskRemoveFromEventList+0xb0>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d11d      	bne.n	8011a42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	3304      	adds	r3, #4
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fe fd34 	bl	8010478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a14:	4b19      	ldr	r3, [pc, #100]	; (8011a7c <xTaskRemoveFromEventList+0xb4>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d903      	bls.n	8011a24 <xTaskRemoveFromEventList+0x5c>
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a20:	4a16      	ldr	r2, [pc, #88]	; (8011a7c <xTaskRemoveFromEventList+0xb4>)
 8011a22:	6013      	str	r3, [r2, #0]
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a28:	4613      	mov	r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	4413      	add	r3, r2
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	4a13      	ldr	r2, [pc, #76]	; (8011a80 <xTaskRemoveFromEventList+0xb8>)
 8011a32:	441a      	add	r2, r3
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	3304      	adds	r3, #4
 8011a38:	4619      	mov	r1, r3
 8011a3a:	4610      	mov	r0, r2
 8011a3c:	f7fe fcbf 	bl	80103be <vListInsertEnd>
 8011a40:	e005      	b.n	8011a4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	3318      	adds	r3, #24
 8011a46:	4619      	mov	r1, r3
 8011a48:	480e      	ldr	r0, [pc, #56]	; (8011a84 <xTaskRemoveFromEventList+0xbc>)
 8011a4a:	f7fe fcb8 	bl	80103be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a52:	4b0d      	ldr	r3, [pc, #52]	; (8011a88 <xTaskRemoveFromEventList+0xc0>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d905      	bls.n	8011a68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a60:	4b0a      	ldr	r3, [pc, #40]	; (8011a8c <xTaskRemoveFromEventList+0xc4>)
 8011a62:	2201      	movs	r2, #1
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	e001      	b.n	8011a6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a6c:	697b      	ldr	r3, [r7, #20]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3718      	adds	r7, #24
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	24001234 	.word	0x24001234
 8011a7c:	24001214 	.word	0x24001214
 8011a80:	24000d3c 	.word	0x24000d3c
 8011a84:	240011cc 	.word	0x240011cc
 8011a88:	24000d38 	.word	0x24000d38
 8011a8c:	24001220 	.word	0x24001220

08011a90 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011a9a:	4b29      	ldr	r3, [pc, #164]	; (8011b40 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10a      	bne.n	8011ab8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa6:	f383 8811 	msr	BASEPRI, r3
 8011aaa:	f3bf 8f6f 	isb	sy
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	613b      	str	r3, [r7, #16]
}
 8011ab4:	bf00      	nop
 8011ab6:	e7fe      	b.n	8011ab6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d10a      	bne.n	8011ae4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad2:	f383 8811 	msr	BASEPRI, r3
 8011ad6:	f3bf 8f6f 	isb	sy
 8011ada:	f3bf 8f4f 	dsb	sy
 8011ade:	60fb      	str	r3, [r7, #12]
}
 8011ae0:	bf00      	nop
 8011ae2:	e7fe      	b.n	8011ae2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7fe fcc7 	bl	8010478 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	3304      	adds	r3, #4
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7fe fcc2 	bl	8010478 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af8:	4b12      	ldr	r3, [pc, #72]	; (8011b44 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d903      	bls.n	8011b08 <vTaskRemoveFromUnorderedEventList+0x78>
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b04:	4a0f      	ldr	r2, [pc, #60]	; (8011b44 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011b06:	6013      	str	r3, [r2, #0]
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4a0c      	ldr	r2, [pc, #48]	; (8011b48 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011b16:	441a      	add	r2, r3
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	4610      	mov	r0, r2
 8011b20:	f7fe fc4d 	bl	80103be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b28:	4b08      	ldr	r3, [pc, #32]	; (8011b4c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d902      	bls.n	8011b38 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011b32:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011b34:	2201      	movs	r2, #1
 8011b36:	601a      	str	r2, [r3, #0]
	}
}
 8011b38:	bf00      	nop
 8011b3a:	3718      	adds	r7, #24
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}
 8011b40:	24001234 	.word	0x24001234
 8011b44:	24001214 	.word	0x24001214
 8011b48:	24000d3c 	.word	0x24000d3c
 8011b4c:	24000d38 	.word	0x24000d38
 8011b50:	24001220 	.word	0x24001220

08011b54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b5c:	4b06      	ldr	r3, [pc, #24]	; (8011b78 <vTaskInternalSetTimeOutState+0x24>)
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b64:	4b05      	ldr	r3, [pc, #20]	; (8011b7c <vTaskInternalSetTimeOutState+0x28>)
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	605a      	str	r2, [r3, #4]
}
 8011b6c:	bf00      	nop
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr
 8011b78:	24001224 	.word	0x24001224
 8011b7c:	24001210 	.word	0x24001210

08011b80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b088      	sub	sp, #32
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10a      	bne.n	8011ba6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b94:	f383 8811 	msr	BASEPRI, r3
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	613b      	str	r3, [r7, #16]
}
 8011ba2:	bf00      	nop
 8011ba4:	e7fe      	b.n	8011ba4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d10a      	bne.n	8011bc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb0:	f383 8811 	msr	BASEPRI, r3
 8011bb4:	f3bf 8f6f 	isb	sy
 8011bb8:	f3bf 8f4f 	dsb	sy
 8011bbc:	60fb      	str	r3, [r7, #12]
}
 8011bbe:	bf00      	nop
 8011bc0:	e7fe      	b.n	8011bc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011bc2:	f000 feb7 	bl	8012934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bc6:	4b1d      	ldr	r3, [pc, #116]	; (8011c3c <xTaskCheckForTimeOut+0xbc>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	69ba      	ldr	r2, [r7, #24]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bde:	d102      	bne.n	8011be6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011be0:	2300      	movs	r3, #0
 8011be2:	61fb      	str	r3, [r7, #28]
 8011be4:	e023      	b.n	8011c2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	4b15      	ldr	r3, [pc, #84]	; (8011c40 <xTaskCheckForTimeOut+0xc0>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d007      	beq.n	8011c02 <xTaskCheckForTimeOut+0x82>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	69ba      	ldr	r2, [r7, #24]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d302      	bcc.n	8011c02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	61fb      	str	r3, [r7, #28]
 8011c00:	e015      	b.n	8011c2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	697a      	ldr	r2, [r7, #20]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d20b      	bcs.n	8011c24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	1ad2      	subs	r2, r2, r3
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f7ff ff9b 	bl	8011b54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	61fb      	str	r3, [r7, #28]
 8011c22:	e004      	b.n	8011c2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2200      	movs	r2, #0
 8011c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c2e:	f000 feb1 	bl	8012994 <vPortExitCritical>

	return xReturn;
 8011c32:	69fb      	ldr	r3, [r7, #28]
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3720      	adds	r7, #32
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	24001210 	.word	0x24001210
 8011c40:	24001224 	.word	0x24001224

08011c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c44:	b480      	push	{r7}
 8011c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c48:	4b03      	ldr	r3, [pc, #12]	; (8011c58 <vTaskMissedYield+0x14>)
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	601a      	str	r2, [r3, #0]
}
 8011c4e:	bf00      	nop
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr
 8011c58:	24001220 	.word	0x24001220

08011c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c64:	f000 f852 	bl	8011d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c68:	4b06      	ldr	r3, [pc, #24]	; (8011c84 <prvIdleTask+0x28>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d9f9      	bls.n	8011c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c70:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <prvIdleTask+0x2c>)
 8011c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c76:	601a      	str	r2, [r3, #0]
 8011c78:	f3bf 8f4f 	dsb	sy
 8011c7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011c80:	e7f0      	b.n	8011c64 <prvIdleTask+0x8>
 8011c82:	bf00      	nop
 8011c84:	24000d3c 	.word	0x24000d3c
 8011c88:	e000ed04 	.word	0xe000ed04

08011c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c92:	2300      	movs	r3, #0
 8011c94:	607b      	str	r3, [r7, #4]
 8011c96:	e00c      	b.n	8011cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4413      	add	r3, r2
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	4a12      	ldr	r2, [pc, #72]	; (8011cec <prvInitialiseTaskLists+0x60>)
 8011ca4:	4413      	add	r3, r2
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7fe fb5c 	bl	8010364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	607b      	str	r3, [r7, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b37      	cmp	r3, #55	; 0x37
 8011cb6:	d9ef      	bls.n	8011c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011cb8:	480d      	ldr	r0, [pc, #52]	; (8011cf0 <prvInitialiseTaskLists+0x64>)
 8011cba:	f7fe fb53 	bl	8010364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011cbe:	480d      	ldr	r0, [pc, #52]	; (8011cf4 <prvInitialiseTaskLists+0x68>)
 8011cc0:	f7fe fb50 	bl	8010364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011cc4:	480c      	ldr	r0, [pc, #48]	; (8011cf8 <prvInitialiseTaskLists+0x6c>)
 8011cc6:	f7fe fb4d 	bl	8010364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cca:	480c      	ldr	r0, [pc, #48]	; (8011cfc <prvInitialiseTaskLists+0x70>)
 8011ccc:	f7fe fb4a 	bl	8010364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011cd0:	480b      	ldr	r0, [pc, #44]	; (8011d00 <prvInitialiseTaskLists+0x74>)
 8011cd2:	f7fe fb47 	bl	8010364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011cd6:	4b0b      	ldr	r3, [pc, #44]	; (8011d04 <prvInitialiseTaskLists+0x78>)
 8011cd8:	4a05      	ldr	r2, [pc, #20]	; (8011cf0 <prvInitialiseTaskLists+0x64>)
 8011cda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011cdc:	4b0a      	ldr	r3, [pc, #40]	; (8011d08 <prvInitialiseTaskLists+0x7c>)
 8011cde:	4a05      	ldr	r2, [pc, #20]	; (8011cf4 <prvInitialiseTaskLists+0x68>)
 8011ce0:	601a      	str	r2, [r3, #0]
}
 8011ce2:	bf00      	nop
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	24000d3c 	.word	0x24000d3c
 8011cf0:	2400119c 	.word	0x2400119c
 8011cf4:	240011b0 	.word	0x240011b0
 8011cf8:	240011cc 	.word	0x240011cc
 8011cfc:	240011e0 	.word	0x240011e0
 8011d00:	240011f8 	.word	0x240011f8
 8011d04:	240011c4 	.word	0x240011c4
 8011d08:	240011c8 	.word	0x240011c8

08011d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d12:	e019      	b.n	8011d48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d14:	f000 fe0e 	bl	8012934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d18:	4b10      	ldr	r3, [pc, #64]	; (8011d5c <prvCheckTasksWaitingTermination+0x50>)
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	3304      	adds	r3, #4
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7fe fba7 	bl	8010478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d2a:	4b0d      	ldr	r3, [pc, #52]	; (8011d60 <prvCheckTasksWaitingTermination+0x54>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	4a0b      	ldr	r2, [pc, #44]	; (8011d60 <prvCheckTasksWaitingTermination+0x54>)
 8011d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d34:	4b0b      	ldr	r3, [pc, #44]	; (8011d64 <prvCheckTasksWaitingTermination+0x58>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3b01      	subs	r3, #1
 8011d3a:	4a0a      	ldr	r2, [pc, #40]	; (8011d64 <prvCheckTasksWaitingTermination+0x58>)
 8011d3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d3e:	f000 fe29 	bl	8012994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 f810 	bl	8011d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d48:	4b06      	ldr	r3, [pc, #24]	; (8011d64 <prvCheckTasksWaitingTermination+0x58>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1e1      	bne.n	8011d14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d50:	bf00      	nop
 8011d52:	bf00      	nop
 8011d54:	3708      	adds	r7, #8
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	240011e0 	.word	0x240011e0
 8011d60:	2400120c 	.word	0x2400120c
 8011d64:	240011f4 	.word	0x240011f4

08011d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d108      	bne.n	8011d8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f000 ffc6 	bl	8012d10 <vPortFree>
				vPortFree( pxTCB );
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 ffc3 	bl	8012d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d8a:	e018      	b.n	8011dbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d103      	bne.n	8011d9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 ffba 	bl	8012d10 <vPortFree>
	}
 8011d9c:	e00f      	b.n	8011dbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011da4:	2b02      	cmp	r3, #2
 8011da6:	d00a      	beq.n	8011dbe <prvDeleteTCB+0x56>
	__asm volatile
 8011da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dac:	f383 8811 	msr	BASEPRI, r3
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	60fb      	str	r3, [r7, #12]
}
 8011dba:	bf00      	nop
 8011dbc:	e7fe      	b.n	8011dbc <prvDeleteTCB+0x54>
	}
 8011dbe:	bf00      	nop
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
	...

08011dc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dce:	4b0c      	ldr	r3, [pc, #48]	; (8011e00 <prvResetNextTaskUnblockTime+0x38>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d104      	bne.n	8011de2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011dd8:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <prvResetNextTaskUnblockTime+0x3c>)
 8011dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011dde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011de0:	e008      	b.n	8011df4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011de2:	4b07      	ldr	r3, [pc, #28]	; (8011e00 <prvResetNextTaskUnblockTime+0x38>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	4a04      	ldr	r2, [pc, #16]	; (8011e04 <prvResetNextTaskUnblockTime+0x3c>)
 8011df2:	6013      	str	r3, [r2, #0]
}
 8011df4:	bf00      	nop
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr
 8011e00:	240011c4 	.word	0x240011c4
 8011e04:	2400122c 	.word	0x2400122c

08011e08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e0e:	4b0b      	ldr	r3, [pc, #44]	; (8011e3c <xTaskGetSchedulerState+0x34>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d102      	bne.n	8011e1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e16:	2301      	movs	r3, #1
 8011e18:	607b      	str	r3, [r7, #4]
 8011e1a:	e008      	b.n	8011e2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e1c:	4b08      	ldr	r3, [pc, #32]	; (8011e40 <xTaskGetSchedulerState+0x38>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d102      	bne.n	8011e2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e24:	2302      	movs	r3, #2
 8011e26:	607b      	str	r3, [r7, #4]
 8011e28:	e001      	b.n	8011e2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e2e:	687b      	ldr	r3, [r7, #4]
	}
 8011e30:	4618      	mov	r0, r3
 8011e32:	370c      	adds	r7, #12
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	24001218 	.word	0x24001218
 8011e40:	24001234 	.word	0x24001234

08011e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011e50:	2300      	movs	r3, #0
 8011e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d056      	beq.n	8011f08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011e5a:	4b2e      	ldr	r3, [pc, #184]	; (8011f14 <xTaskPriorityDisinherit+0xd0>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	693a      	ldr	r2, [r7, #16]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d00a      	beq.n	8011e7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e68:	f383 8811 	msr	BASEPRI, r3
 8011e6c:	f3bf 8f6f 	isb	sy
 8011e70:	f3bf 8f4f 	dsb	sy
 8011e74:	60fb      	str	r3, [r7, #12]
}
 8011e76:	bf00      	nop
 8011e78:	e7fe      	b.n	8011e78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d10a      	bne.n	8011e98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e86:	f383 8811 	msr	BASEPRI, r3
 8011e8a:	f3bf 8f6f 	isb	sy
 8011e8e:	f3bf 8f4f 	dsb	sy
 8011e92:	60bb      	str	r3, [r7, #8]
}
 8011e94:	bf00      	nop
 8011e96:	e7fe      	b.n	8011e96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e9c:	1e5a      	subs	r2, r3, #1
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d02c      	beq.n	8011f08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d128      	bne.n	8011f08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	3304      	adds	r3, #4
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fe fadc 	bl	8010478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ecc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed8:	4b0f      	ldr	r3, [pc, #60]	; (8011f18 <xTaskPriorityDisinherit+0xd4>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d903      	bls.n	8011ee8 <xTaskPriorityDisinherit+0xa4>
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee4:	4a0c      	ldr	r2, [pc, #48]	; (8011f18 <xTaskPriorityDisinherit+0xd4>)
 8011ee6:	6013      	str	r3, [r2, #0]
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eec:	4613      	mov	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4413      	add	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	4a09      	ldr	r2, [pc, #36]	; (8011f1c <xTaskPriorityDisinherit+0xd8>)
 8011ef6:	441a      	add	r2, r3
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	3304      	adds	r3, #4
 8011efc:	4619      	mov	r1, r3
 8011efe:	4610      	mov	r0, r2
 8011f00:	f7fe fa5d 	bl	80103be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f04:	2301      	movs	r3, #1
 8011f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f08:	697b      	ldr	r3, [r7, #20]
	}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3718      	adds	r7, #24
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	24000d38 	.word	0x24000d38
 8011f18:	24001214 	.word	0x24001214
 8011f1c:	24000d3c 	.word	0x24000d3c

08011f20 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011f26:	4b09      	ldr	r3, [pc, #36]	; (8011f4c <uxTaskResetEventItemValue+0x2c>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	699b      	ldr	r3, [r3, #24]
 8011f2c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f2e:	4b07      	ldr	r3, [pc, #28]	; (8011f4c <uxTaskResetEventItemValue+0x2c>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f34:	4b05      	ldr	r3, [pc, #20]	; (8011f4c <uxTaskResetEventItemValue+0x2c>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011f3c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011f3e:	687b      	ldr	r3, [r7, #4]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr
 8011f4c:	24000d38 	.word	0x24000d38

08011f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f5a:	4b21      	ldr	r3, [pc, #132]	; (8011fe0 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f60:	4b20      	ldr	r3, [pc, #128]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	3304      	adds	r3, #4
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fe fa86 	bl	8010478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f72:	d10a      	bne.n	8011f8a <prvAddCurrentTaskToDelayedList+0x3a>
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d007      	beq.n	8011f8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f7a:	4b1a      	ldr	r3, [pc, #104]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	3304      	adds	r3, #4
 8011f80:	4619      	mov	r1, r3
 8011f82:	4819      	ldr	r0, [pc, #100]	; (8011fe8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f84:	f7fe fa1b 	bl	80103be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f88:	e026      	b.n	8011fd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	4413      	add	r3, r2
 8011f90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f92:	4b14      	ldr	r3, [pc, #80]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	68ba      	ldr	r2, [r7, #8]
 8011f98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f9a:	68ba      	ldr	r2, [r7, #8]
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d209      	bcs.n	8011fb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fa2:	4b12      	ldr	r3, [pc, #72]	; (8011fec <prvAddCurrentTaskToDelayedList+0x9c>)
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	4b0f      	ldr	r3, [pc, #60]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	3304      	adds	r3, #4
 8011fac:	4619      	mov	r1, r3
 8011fae:	4610      	mov	r0, r2
 8011fb0:	f7fe fa29 	bl	8010406 <vListInsert>
}
 8011fb4:	e010      	b.n	8011fd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fb6:	4b0e      	ldr	r3, [pc, #56]	; (8011ff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	4b0a      	ldr	r3, [pc, #40]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	3304      	adds	r3, #4
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	4610      	mov	r0, r2
 8011fc4:	f7fe fa1f 	bl	8010406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fc8:	4b0a      	ldr	r3, [pc, #40]	; (8011ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d202      	bcs.n	8011fd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011fd2:	4a08      	ldr	r2, [pc, #32]	; (8011ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	6013      	str	r3, [r2, #0]
}
 8011fd8:	bf00      	nop
 8011fda:	3710      	adds	r7, #16
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	24001210 	.word	0x24001210
 8011fe4:	24000d38 	.word	0x24000d38
 8011fe8:	240011f8 	.word	0x240011f8
 8011fec:	240011c8 	.word	0x240011c8
 8011ff0:	240011c4 	.word	0x240011c4
 8011ff4:	2400122c 	.word	0x2400122c

08011ff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b08a      	sub	sp, #40	; 0x28
 8011ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011ffe:	2300      	movs	r3, #0
 8012000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012002:	f000 fb07 	bl	8012614 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012006:	4b1c      	ldr	r3, [pc, #112]	; (8012078 <xTimerCreateTimerTask+0x80>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d021      	beq.n	8012052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012012:	2300      	movs	r3, #0
 8012014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012016:	1d3a      	adds	r2, r7, #4
 8012018:	f107 0108 	add.w	r1, r7, #8
 801201c:	f107 030c 	add.w	r3, r7, #12
 8012020:	4618      	mov	r0, r3
 8012022:	f7fd ff97 	bl	800ff54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012026:	6879      	ldr	r1, [r7, #4]
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	68fa      	ldr	r2, [r7, #12]
 801202c:	9202      	str	r2, [sp, #8]
 801202e:	9301      	str	r3, [sp, #4]
 8012030:	2302      	movs	r3, #2
 8012032:	9300      	str	r3, [sp, #0]
 8012034:	2300      	movs	r3, #0
 8012036:	460a      	mov	r2, r1
 8012038:	4910      	ldr	r1, [pc, #64]	; (801207c <xTimerCreateTimerTask+0x84>)
 801203a:	4811      	ldr	r0, [pc, #68]	; (8012080 <xTimerCreateTimerTask+0x88>)
 801203c:	f7ff f828 	bl	8011090 <xTaskCreateStatic>
 8012040:	4603      	mov	r3, r0
 8012042:	4a10      	ldr	r2, [pc, #64]	; (8012084 <xTimerCreateTimerTask+0x8c>)
 8012044:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012046:	4b0f      	ldr	r3, [pc, #60]	; (8012084 <xTimerCreateTimerTask+0x8c>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801204e:	2301      	movs	r3, #1
 8012050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d10a      	bne.n	801206e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801205c:	f383 8811 	msr	BASEPRI, r3
 8012060:	f3bf 8f6f 	isb	sy
 8012064:	f3bf 8f4f 	dsb	sy
 8012068:	613b      	str	r3, [r7, #16]
}
 801206a:	bf00      	nop
 801206c:	e7fe      	b.n	801206c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801206e:	697b      	ldr	r3, [r7, #20]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	24001268 	.word	0x24001268
 801207c:	08014220 	.word	0x08014220
 8012080:	080121bd 	.word	0x080121bd
 8012084:	2400126c 	.word	0x2400126c

08012088 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b08a      	sub	sp, #40	; 0x28
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012096:	2300      	movs	r3, #0
 8012098:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10a      	bne.n	80120b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	623b      	str	r3, [r7, #32]
}
 80120b2:	bf00      	nop
 80120b4:	e7fe      	b.n	80120b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80120b6:	4b1a      	ldr	r3, [pc, #104]	; (8012120 <xTimerGenericCommand+0x98>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d02a      	beq.n	8012114 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2b05      	cmp	r3, #5
 80120ce:	dc18      	bgt.n	8012102 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80120d0:	f7ff fe9a 	bl	8011e08 <xTaskGetSchedulerState>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b02      	cmp	r3, #2
 80120d8:	d109      	bne.n	80120ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80120da:	4b11      	ldr	r3, [pc, #68]	; (8012120 <xTimerGenericCommand+0x98>)
 80120dc:	6818      	ldr	r0, [r3, #0]
 80120de:	f107 0110 	add.w	r1, r7, #16
 80120e2:	2300      	movs	r3, #0
 80120e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120e6:	f7fe fb2f 	bl	8010748 <xQueueGenericSend>
 80120ea:	6278      	str	r0, [r7, #36]	; 0x24
 80120ec:	e012      	b.n	8012114 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80120ee:	4b0c      	ldr	r3, [pc, #48]	; (8012120 <xTimerGenericCommand+0x98>)
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	f107 0110 	add.w	r1, r7, #16
 80120f6:	2300      	movs	r3, #0
 80120f8:	2200      	movs	r2, #0
 80120fa:	f7fe fb25 	bl	8010748 <xQueueGenericSend>
 80120fe:	6278      	str	r0, [r7, #36]	; 0x24
 8012100:	e008      	b.n	8012114 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012102:	4b07      	ldr	r3, [pc, #28]	; (8012120 <xTimerGenericCommand+0x98>)
 8012104:	6818      	ldr	r0, [r3, #0]
 8012106:	f107 0110 	add.w	r1, r7, #16
 801210a:	2300      	movs	r3, #0
 801210c:	683a      	ldr	r2, [r7, #0]
 801210e:	f7fe fc19 	bl	8010944 <xQueueGenericSendFromISR>
 8012112:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012116:	4618      	mov	r0, r3
 8012118:	3728      	adds	r7, #40	; 0x28
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	24001268 	.word	0x24001268

08012124 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af02      	add	r7, sp, #8
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801212e:	4b22      	ldr	r3, [pc, #136]	; (80121b8 <prvProcessExpiredTimer+0x94>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	3304      	adds	r3, #4
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe f99b 	bl	8010478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012148:	f003 0304 	and.w	r3, r3, #4
 801214c:	2b00      	cmp	r3, #0
 801214e:	d022      	beq.n	8012196 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	699a      	ldr	r2, [r3, #24]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	18d1      	adds	r1, r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	683a      	ldr	r2, [r7, #0]
 801215c:	6978      	ldr	r0, [r7, #20]
 801215e:	f000 f8d1 	bl	8012304 <prvInsertTimerInActiveList>
 8012162:	4603      	mov	r3, r0
 8012164:	2b00      	cmp	r3, #0
 8012166:	d01f      	beq.n	80121a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012168:	2300      	movs	r3, #0
 801216a:	9300      	str	r3, [sp, #0]
 801216c:	2300      	movs	r3, #0
 801216e:	687a      	ldr	r2, [r7, #4]
 8012170:	2100      	movs	r1, #0
 8012172:	6978      	ldr	r0, [r7, #20]
 8012174:	f7ff ff88 	bl	8012088 <xTimerGenericCommand>
 8012178:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d113      	bne.n	80121a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	60fb      	str	r3, [r7, #12]
}
 8012192:	bf00      	nop
 8012194:	e7fe      	b.n	8012194 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801219c:	f023 0301 	bic.w	r3, r3, #1
 80121a0:	b2da      	uxtb	r2, r3
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	6a1b      	ldr	r3, [r3, #32]
 80121ac:	6978      	ldr	r0, [r7, #20]
 80121ae:	4798      	blx	r3
}
 80121b0:	bf00      	nop
 80121b2:	3718      	adds	r7, #24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	24001260 	.word	0x24001260

080121bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121c4:	f107 0308 	add.w	r3, r7, #8
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 f857 	bl	801227c <prvGetNextExpireTime>
 80121ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	4619      	mov	r1, r3
 80121d4:	68f8      	ldr	r0, [r7, #12]
 80121d6:	f000 f803 	bl	80121e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80121da:	f000 f8d5 	bl	8012388 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121de:	e7f1      	b.n	80121c4 <prvTimerTask+0x8>

080121e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80121ea:	f7ff f98d 	bl	8011508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80121ee:	f107 0308 	add.w	r3, r7, #8
 80121f2:	4618      	mov	r0, r3
 80121f4:	f000 f866 	bl	80122c4 <prvSampleTimeNow>
 80121f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d130      	bne.n	8012262 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d10a      	bne.n	801221c <prvProcessTimerOrBlockTask+0x3c>
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	429a      	cmp	r2, r3
 801220c:	d806      	bhi.n	801221c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801220e:	f7ff f989 	bl	8011524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012212:	68f9      	ldr	r1, [r7, #12]
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff ff85 	bl	8012124 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801221a:	e024      	b.n	8012266 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d008      	beq.n	8012234 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012222:	4b13      	ldr	r3, [pc, #76]	; (8012270 <prvProcessTimerOrBlockTask+0x90>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d101      	bne.n	8012230 <prvProcessTimerOrBlockTask+0x50>
 801222c:	2301      	movs	r3, #1
 801222e:	e000      	b.n	8012232 <prvProcessTimerOrBlockTask+0x52>
 8012230:	2300      	movs	r3, #0
 8012232:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012234:	4b0f      	ldr	r3, [pc, #60]	; (8012274 <prvProcessTimerOrBlockTask+0x94>)
 8012236:	6818      	ldr	r0, [r3, #0]
 8012238:	687a      	ldr	r2, [r7, #4]
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	4619      	mov	r1, r3
 8012242:	f7fe fef1 	bl	8011028 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012246:	f7ff f96d 	bl	8011524 <xTaskResumeAll>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d10a      	bne.n	8012266 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012250:	4b09      	ldr	r3, [pc, #36]	; (8012278 <prvProcessTimerOrBlockTask+0x98>)
 8012252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	f3bf 8f6f 	isb	sy
}
 8012260:	e001      	b.n	8012266 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012262:	f7ff f95f 	bl	8011524 <xTaskResumeAll>
}
 8012266:	bf00      	nop
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	24001264 	.word	0x24001264
 8012274:	24001268 	.word	0x24001268
 8012278:	e000ed04 	.word	0xe000ed04

0801227c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801227c:	b480      	push	{r7}
 801227e:	b085      	sub	sp, #20
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012284:	4b0e      	ldr	r3, [pc, #56]	; (80122c0 <prvGetNextExpireTime+0x44>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d101      	bne.n	8012292 <prvGetNextExpireTime+0x16>
 801228e:	2201      	movs	r2, #1
 8012290:	e000      	b.n	8012294 <prvGetNextExpireTime+0x18>
 8012292:	2200      	movs	r2, #0
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d105      	bne.n	80122ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80122a0:	4b07      	ldr	r3, [pc, #28]	; (80122c0 <prvGetNextExpireTime+0x44>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	60fb      	str	r3, [r7, #12]
 80122aa:	e001      	b.n	80122b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80122ac:	2300      	movs	r3, #0
 80122ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80122b0:	68fb      	ldr	r3, [r7, #12]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3714      	adds	r7, #20
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr
 80122be:	bf00      	nop
 80122c0:	24001260 	.word	0x24001260

080122c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80122cc:	f7ff f9c8 	bl	8011660 <xTaskGetTickCount>
 80122d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80122d2:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <prvSampleTimeNow+0x3c>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68fa      	ldr	r2, [r7, #12]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d205      	bcs.n	80122e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80122dc:	f000 f936 	bl	801254c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2201      	movs	r2, #1
 80122e4:	601a      	str	r2, [r3, #0]
 80122e6:	e002      	b.n	80122ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80122ee:	4a04      	ldr	r2, [pc, #16]	; (8012300 <prvSampleTimeNow+0x3c>)
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80122f4:	68fb      	ldr	r3, [r7, #12]
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3710      	adds	r7, #16
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	bf00      	nop
 8012300:	24001270 	.word	0x24001270

08012304 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
 8012310:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012312:	2300      	movs	r3, #0
 8012314:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	68ba      	ldr	r2, [r7, #8]
 801231a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012322:	68ba      	ldr	r2, [r7, #8]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	429a      	cmp	r2, r3
 8012328:	d812      	bhi.n	8012350 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	1ad2      	subs	r2, r2, r3
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	699b      	ldr	r3, [r3, #24]
 8012334:	429a      	cmp	r2, r3
 8012336:	d302      	bcc.n	801233e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012338:	2301      	movs	r3, #1
 801233a:	617b      	str	r3, [r7, #20]
 801233c:	e01b      	b.n	8012376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801233e:	4b10      	ldr	r3, [pc, #64]	; (8012380 <prvInsertTimerInActiveList+0x7c>)
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	3304      	adds	r3, #4
 8012346:	4619      	mov	r1, r3
 8012348:	4610      	mov	r0, r2
 801234a:	f7fe f85c 	bl	8010406 <vListInsert>
 801234e:	e012      	b.n	8012376 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	429a      	cmp	r2, r3
 8012356:	d206      	bcs.n	8012366 <prvInsertTimerInActiveList+0x62>
 8012358:	68ba      	ldr	r2, [r7, #8]
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	429a      	cmp	r2, r3
 801235e:	d302      	bcc.n	8012366 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012360:	2301      	movs	r3, #1
 8012362:	617b      	str	r3, [r7, #20]
 8012364:	e007      	b.n	8012376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012366:	4b07      	ldr	r3, [pc, #28]	; (8012384 <prvInsertTimerInActiveList+0x80>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	3304      	adds	r3, #4
 801236e:	4619      	mov	r1, r3
 8012370:	4610      	mov	r0, r2
 8012372:	f7fe f848 	bl	8010406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012376:	697b      	ldr	r3, [r7, #20]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3718      	adds	r7, #24
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	24001264 	.word	0x24001264
 8012384:	24001260 	.word	0x24001260

08012388 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b08e      	sub	sp, #56	; 0x38
 801238c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801238e:	e0ca      	b.n	8012526 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	da18      	bge.n	80123c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012396:	1d3b      	adds	r3, r7, #4
 8012398:	3304      	adds	r3, #4
 801239a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d10a      	bne.n	80123b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80123a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a6:	f383 8811 	msr	BASEPRI, r3
 80123aa:	f3bf 8f6f 	isb	sy
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	61fb      	str	r3, [r7, #28]
}
 80123b4:	bf00      	nop
 80123b6:	e7fe      	b.n	80123b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80123b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123be:	6850      	ldr	r0, [r2, #4]
 80123c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123c2:	6892      	ldr	r2, [r2, #8]
 80123c4:	4611      	mov	r1, r2
 80123c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	f2c0 80aa 	blt.w	8012524 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80123d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d6:	695b      	ldr	r3, [r3, #20]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d004      	beq.n	80123e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123de:	3304      	adds	r3, #4
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fe f849 	bl	8010478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123e6:	463b      	mov	r3, r7
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff ff6b 	bl	80122c4 <prvSampleTimeNow>
 80123ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b09      	cmp	r3, #9
 80123f4:	f200 8097 	bhi.w	8012526 <prvProcessReceivedCommands+0x19e>
 80123f8:	a201      	add	r2, pc, #4	; (adr r2, 8012400 <prvProcessReceivedCommands+0x78>)
 80123fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123fe:	bf00      	nop
 8012400:	08012429 	.word	0x08012429
 8012404:	08012429 	.word	0x08012429
 8012408:	08012429 	.word	0x08012429
 801240c:	0801249d 	.word	0x0801249d
 8012410:	080124b1 	.word	0x080124b1
 8012414:	080124fb 	.word	0x080124fb
 8012418:	08012429 	.word	0x08012429
 801241c:	08012429 	.word	0x08012429
 8012420:	0801249d 	.word	0x0801249d
 8012424:	080124b1 	.word	0x080124b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801242e:	f043 0301 	orr.w	r3, r3, #1
 8012432:	b2da      	uxtb	r2, r3
 8012434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801243a:	68ba      	ldr	r2, [r7, #8]
 801243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	18d1      	adds	r1, r2, r3
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012448:	f7ff ff5c 	bl	8012304 <prvInsertTimerInActiveList>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d069      	beq.n	8012526 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012454:	6a1b      	ldr	r3, [r3, #32]
 8012456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012458:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012460:	f003 0304 	and.w	r3, r3, #4
 8012464:	2b00      	cmp	r3, #0
 8012466:	d05e      	beq.n	8012526 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246c:	699b      	ldr	r3, [r3, #24]
 801246e:	441a      	add	r2, r3
 8012470:	2300      	movs	r3, #0
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	2300      	movs	r3, #0
 8012476:	2100      	movs	r1, #0
 8012478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801247a:	f7ff fe05 	bl	8012088 <xTimerGenericCommand>
 801247e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012480:	6a3b      	ldr	r3, [r7, #32]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d14f      	bne.n	8012526 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248a:	f383 8811 	msr	BASEPRI, r3
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f3bf 8f4f 	dsb	sy
 8012496:	61bb      	str	r3, [r7, #24]
}
 8012498:	bf00      	nop
 801249a:	e7fe      	b.n	801249a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124a2:	f023 0301 	bic.w	r3, r3, #1
 80124a6:	b2da      	uxtb	r2, r3
 80124a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80124ae:	e03a      	b.n	8012526 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80124b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b6:	f043 0301 	orr.w	r3, r3, #1
 80124ba:	b2da      	uxtb	r2, r3
 80124bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80124c2:	68ba      	ldr	r2, [r7, #8]
 80124c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80124c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ca:	699b      	ldr	r3, [r3, #24]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d10a      	bne.n	80124e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80124d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d4:	f383 8811 	msr	BASEPRI, r3
 80124d8:	f3bf 8f6f 	isb	sy
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	617b      	str	r3, [r7, #20]
}
 80124e2:	bf00      	nop
 80124e4:	e7fe      	b.n	80124e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80124e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e8:	699a      	ldr	r2, [r3, #24]
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	18d1      	adds	r1, r2, r3
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124f4:	f7ff ff06 	bl	8012304 <prvInsertTimerInActiveList>
					break;
 80124f8:	e015      	b.n	8012526 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80124fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012500:	f003 0302 	and.w	r3, r3, #2
 8012504:	2b00      	cmp	r3, #0
 8012506:	d103      	bne.n	8012510 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801250a:	f000 fc01 	bl	8012d10 <vPortFree>
 801250e:	e00a      	b.n	8012526 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012516:	f023 0301 	bic.w	r3, r3, #1
 801251a:	b2da      	uxtb	r2, r3
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012522:	e000      	b.n	8012526 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012524:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012526:	4b08      	ldr	r3, [pc, #32]	; (8012548 <prvProcessReceivedCommands+0x1c0>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	1d39      	adds	r1, r7, #4
 801252c:	2200      	movs	r2, #0
 801252e:	4618      	mov	r0, r3
 8012530:	f7fe faa4 	bl	8010a7c <xQueueReceive>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	f47f af2a 	bne.w	8012390 <prvProcessReceivedCommands+0x8>
	}
}
 801253c:	bf00      	nop
 801253e:	bf00      	nop
 8012540:	3730      	adds	r7, #48	; 0x30
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	24001268 	.word	0x24001268

0801254c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b088      	sub	sp, #32
 8012550:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012552:	e048      	b.n	80125e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012554:	4b2d      	ldr	r3, [pc, #180]	; (801260c <prvSwitchTimerLists+0xc0>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	68db      	ldr	r3, [r3, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801255e:	4b2b      	ldr	r3, [pc, #172]	; (801260c <prvSwitchTimerLists+0xc0>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	3304      	adds	r3, #4
 801256c:	4618      	mov	r0, r3
 801256e:	f7fd ff83 	bl	8010478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6a1b      	ldr	r3, [r3, #32]
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012580:	f003 0304 	and.w	r3, r3, #4
 8012584:	2b00      	cmp	r3, #0
 8012586:	d02e      	beq.n	80125e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	699b      	ldr	r3, [r3, #24]
 801258c:	693a      	ldr	r2, [r7, #16]
 801258e:	4413      	add	r3, r2
 8012590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012592:	68ba      	ldr	r2, [r7, #8]
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	429a      	cmp	r2, r3
 8012598:	d90e      	bls.n	80125b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	68ba      	ldr	r2, [r7, #8]
 801259e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125a6:	4b19      	ldr	r3, [pc, #100]	; (801260c <prvSwitchTimerLists+0xc0>)
 80125a8:	681a      	ldr	r2, [r3, #0]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	3304      	adds	r3, #4
 80125ae:	4619      	mov	r1, r3
 80125b0:	4610      	mov	r0, r2
 80125b2:	f7fd ff28 	bl	8010406 <vListInsert>
 80125b6:	e016      	b.n	80125e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80125b8:	2300      	movs	r3, #0
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	2300      	movs	r3, #0
 80125be:	693a      	ldr	r2, [r7, #16]
 80125c0:	2100      	movs	r1, #0
 80125c2:	68f8      	ldr	r0, [r7, #12]
 80125c4:	f7ff fd60 	bl	8012088 <xTimerGenericCommand>
 80125c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d10a      	bne.n	80125e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80125d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	603b      	str	r3, [r7, #0]
}
 80125e2:	bf00      	nop
 80125e4:	e7fe      	b.n	80125e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125e6:	4b09      	ldr	r3, [pc, #36]	; (801260c <prvSwitchTimerLists+0xc0>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d1b1      	bne.n	8012554 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80125f0:	4b06      	ldr	r3, [pc, #24]	; (801260c <prvSwitchTimerLists+0xc0>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80125f6:	4b06      	ldr	r3, [pc, #24]	; (8012610 <prvSwitchTimerLists+0xc4>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4a04      	ldr	r2, [pc, #16]	; (801260c <prvSwitchTimerLists+0xc0>)
 80125fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125fe:	4a04      	ldr	r2, [pc, #16]	; (8012610 <prvSwitchTimerLists+0xc4>)
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	6013      	str	r3, [r2, #0]
}
 8012604:	bf00      	nop
 8012606:	3718      	adds	r7, #24
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}
 801260c:	24001260 	.word	0x24001260
 8012610:	24001264 	.word	0x24001264

08012614 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801261a:	f000 f98b 	bl	8012934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801261e:	4b15      	ldr	r3, [pc, #84]	; (8012674 <prvCheckForValidListAndQueue+0x60>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d120      	bne.n	8012668 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012626:	4814      	ldr	r0, [pc, #80]	; (8012678 <prvCheckForValidListAndQueue+0x64>)
 8012628:	f7fd fe9c 	bl	8010364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801262c:	4813      	ldr	r0, [pc, #76]	; (801267c <prvCheckForValidListAndQueue+0x68>)
 801262e:	f7fd fe99 	bl	8010364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012632:	4b13      	ldr	r3, [pc, #76]	; (8012680 <prvCheckForValidListAndQueue+0x6c>)
 8012634:	4a10      	ldr	r2, [pc, #64]	; (8012678 <prvCheckForValidListAndQueue+0x64>)
 8012636:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012638:	4b12      	ldr	r3, [pc, #72]	; (8012684 <prvCheckForValidListAndQueue+0x70>)
 801263a:	4a10      	ldr	r2, [pc, #64]	; (801267c <prvCheckForValidListAndQueue+0x68>)
 801263c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801263e:	2300      	movs	r3, #0
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	4b11      	ldr	r3, [pc, #68]	; (8012688 <prvCheckForValidListAndQueue+0x74>)
 8012644:	4a11      	ldr	r2, [pc, #68]	; (801268c <prvCheckForValidListAndQueue+0x78>)
 8012646:	2110      	movs	r1, #16
 8012648:	200a      	movs	r0, #10
 801264a:	f7fd ffa7 	bl	801059c <xQueueGenericCreateStatic>
 801264e:	4603      	mov	r3, r0
 8012650:	4a08      	ldr	r2, [pc, #32]	; (8012674 <prvCheckForValidListAndQueue+0x60>)
 8012652:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012654:	4b07      	ldr	r3, [pc, #28]	; (8012674 <prvCheckForValidListAndQueue+0x60>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d005      	beq.n	8012668 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801265c:	4b05      	ldr	r3, [pc, #20]	; (8012674 <prvCheckForValidListAndQueue+0x60>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	490b      	ldr	r1, [pc, #44]	; (8012690 <prvCheckForValidListAndQueue+0x7c>)
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe fcb6 	bl	8010fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012668:	f000 f994 	bl	8012994 <vPortExitCritical>
}
 801266c:	bf00      	nop
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	24001268 	.word	0x24001268
 8012678:	24001238 	.word	0x24001238
 801267c:	2400124c 	.word	0x2400124c
 8012680:	24001260 	.word	0x24001260
 8012684:	24001264 	.word	0x24001264
 8012688:	24001314 	.word	0x24001314
 801268c:	24001274 	.word	0x24001274
 8012690:	08014228 	.word	0x08014228

08012694 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012694:	b580      	push	{r7, lr}
 8012696:	b08a      	sub	sp, #40	; 0x28
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80126a2:	f06f 0301 	mvn.w	r3, #1
 80126a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80126b4:	4b06      	ldr	r3, [pc, #24]	; (80126d0 <xTimerPendFunctionCallFromISR+0x3c>)
 80126b6:	6818      	ldr	r0, [r3, #0]
 80126b8:	f107 0114 	add.w	r1, r7, #20
 80126bc:	2300      	movs	r3, #0
 80126be:	683a      	ldr	r2, [r7, #0]
 80126c0:	f7fe f940 	bl	8010944 <xQueueGenericSendFromISR>
 80126c4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3728      	adds	r7, #40	; 0x28
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	24001268 	.word	0x24001268

080126d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80126d4:	b480      	push	{r7}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	3b04      	subs	r3, #4
 80126e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80126ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	3b04      	subs	r3, #4
 80126f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	f023 0201 	bic.w	r2, r3, #1
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	3b04      	subs	r3, #4
 8012702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012704:	4a0c      	ldr	r2, [pc, #48]	; (8012738 <pxPortInitialiseStack+0x64>)
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	3b14      	subs	r3, #20
 801270e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	3b04      	subs	r3, #4
 801271a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f06f 0202 	mvn.w	r2, #2
 8012722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	3b20      	subs	r3, #32
 8012728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801272a:	68fb      	ldr	r3, [r7, #12]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr
 8012738:	0801273d 	.word	0x0801273d

0801273c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012742:	2300      	movs	r3, #0
 8012744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012746:	4b12      	ldr	r3, [pc, #72]	; (8012790 <prvTaskExitError+0x54>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801274e:	d00a      	beq.n	8012766 <prvTaskExitError+0x2a>
	__asm volatile
 8012750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012754:	f383 8811 	msr	BASEPRI, r3
 8012758:	f3bf 8f6f 	isb	sy
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	60fb      	str	r3, [r7, #12]
}
 8012762:	bf00      	nop
 8012764:	e7fe      	b.n	8012764 <prvTaskExitError+0x28>
	__asm volatile
 8012766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276a:	f383 8811 	msr	BASEPRI, r3
 801276e:	f3bf 8f6f 	isb	sy
 8012772:	f3bf 8f4f 	dsb	sy
 8012776:	60bb      	str	r3, [r7, #8]
}
 8012778:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801277a:	bf00      	nop
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d0fc      	beq.n	801277c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012782:	bf00      	nop
 8012784:	bf00      	nop
 8012786:	3714      	adds	r7, #20
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	24000010 	.word	0x24000010
	...

080127a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80127a0:	4b07      	ldr	r3, [pc, #28]	; (80127c0 <pxCurrentTCBConst2>)
 80127a2:	6819      	ldr	r1, [r3, #0]
 80127a4:	6808      	ldr	r0, [r1, #0]
 80127a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127aa:	f380 8809 	msr	PSP, r0
 80127ae:	f3bf 8f6f 	isb	sy
 80127b2:	f04f 0000 	mov.w	r0, #0
 80127b6:	f380 8811 	msr	BASEPRI, r0
 80127ba:	4770      	bx	lr
 80127bc:	f3af 8000 	nop.w

080127c0 <pxCurrentTCBConst2>:
 80127c0:	24000d38 	.word	0x24000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80127c4:	bf00      	nop
 80127c6:	bf00      	nop

080127c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80127c8:	4808      	ldr	r0, [pc, #32]	; (80127ec <prvPortStartFirstTask+0x24>)
 80127ca:	6800      	ldr	r0, [r0, #0]
 80127cc:	6800      	ldr	r0, [r0, #0]
 80127ce:	f380 8808 	msr	MSP, r0
 80127d2:	f04f 0000 	mov.w	r0, #0
 80127d6:	f380 8814 	msr	CONTROL, r0
 80127da:	b662      	cpsie	i
 80127dc:	b661      	cpsie	f
 80127de:	f3bf 8f4f 	dsb	sy
 80127e2:	f3bf 8f6f 	isb	sy
 80127e6:	df00      	svc	0
 80127e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80127ea:	bf00      	nop
 80127ec:	e000ed08 	.word	0xe000ed08

080127f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80127f6:	4b46      	ldr	r3, [pc, #280]	; (8012910 <xPortStartScheduler+0x120>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4a46      	ldr	r2, [pc, #280]	; (8012914 <xPortStartScheduler+0x124>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d10a      	bne.n	8012816 <xPortStartScheduler+0x26>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	613b      	str	r3, [r7, #16]
}
 8012812:	bf00      	nop
 8012814:	e7fe      	b.n	8012814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012816:	4b3e      	ldr	r3, [pc, #248]	; (8012910 <xPortStartScheduler+0x120>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a3f      	ldr	r2, [pc, #252]	; (8012918 <xPortStartScheduler+0x128>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d10a      	bne.n	8012836 <xPortStartScheduler+0x46>
	__asm volatile
 8012820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012824:	f383 8811 	msr	BASEPRI, r3
 8012828:	f3bf 8f6f 	isb	sy
 801282c:	f3bf 8f4f 	dsb	sy
 8012830:	60fb      	str	r3, [r7, #12]
}
 8012832:	bf00      	nop
 8012834:	e7fe      	b.n	8012834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012836:	4b39      	ldr	r3, [pc, #228]	; (801291c <xPortStartScheduler+0x12c>)
 8012838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	b2db      	uxtb	r3, r3
 8012840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	22ff      	movs	r2, #255	; 0xff
 8012846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	b2db      	uxtb	r3, r3
 801284e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012850:	78fb      	ldrb	r3, [r7, #3]
 8012852:	b2db      	uxtb	r3, r3
 8012854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012858:	b2da      	uxtb	r2, r3
 801285a:	4b31      	ldr	r3, [pc, #196]	; (8012920 <xPortStartScheduler+0x130>)
 801285c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801285e:	4b31      	ldr	r3, [pc, #196]	; (8012924 <xPortStartScheduler+0x134>)
 8012860:	2207      	movs	r2, #7
 8012862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012864:	e009      	b.n	801287a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012866:	4b2f      	ldr	r3, [pc, #188]	; (8012924 <xPortStartScheduler+0x134>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	3b01      	subs	r3, #1
 801286c:	4a2d      	ldr	r2, [pc, #180]	; (8012924 <xPortStartScheduler+0x134>)
 801286e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012870:	78fb      	ldrb	r3, [r7, #3]
 8012872:	b2db      	uxtb	r3, r3
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	b2db      	uxtb	r3, r3
 8012878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801287a:	78fb      	ldrb	r3, [r7, #3]
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012882:	2b80      	cmp	r3, #128	; 0x80
 8012884:	d0ef      	beq.n	8012866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012886:	4b27      	ldr	r3, [pc, #156]	; (8012924 <xPortStartScheduler+0x134>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f1c3 0307 	rsb	r3, r3, #7
 801288e:	2b04      	cmp	r3, #4
 8012890:	d00a      	beq.n	80128a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012896:	f383 8811 	msr	BASEPRI, r3
 801289a:	f3bf 8f6f 	isb	sy
 801289e:	f3bf 8f4f 	dsb	sy
 80128a2:	60bb      	str	r3, [r7, #8]
}
 80128a4:	bf00      	nop
 80128a6:	e7fe      	b.n	80128a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80128a8:	4b1e      	ldr	r3, [pc, #120]	; (8012924 <xPortStartScheduler+0x134>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	021b      	lsls	r3, r3, #8
 80128ae:	4a1d      	ldr	r2, [pc, #116]	; (8012924 <xPortStartScheduler+0x134>)
 80128b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80128b2:	4b1c      	ldr	r3, [pc, #112]	; (8012924 <xPortStartScheduler+0x134>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80128ba:	4a1a      	ldr	r2, [pc, #104]	; (8012924 <xPortStartScheduler+0x134>)
 80128bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	b2da      	uxtb	r2, r3
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80128c6:	4b18      	ldr	r3, [pc, #96]	; (8012928 <xPortStartScheduler+0x138>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	4a17      	ldr	r2, [pc, #92]	; (8012928 <xPortStartScheduler+0x138>)
 80128cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80128d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80128d2:	4b15      	ldr	r3, [pc, #84]	; (8012928 <xPortStartScheduler+0x138>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4a14      	ldr	r2, [pc, #80]	; (8012928 <xPortStartScheduler+0x138>)
 80128d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80128dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80128de:	f000 f8dd 	bl	8012a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80128e2:	4b12      	ldr	r3, [pc, #72]	; (801292c <xPortStartScheduler+0x13c>)
 80128e4:	2200      	movs	r2, #0
 80128e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80128e8:	f000 f8fc 	bl	8012ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80128ec:	4b10      	ldr	r3, [pc, #64]	; (8012930 <xPortStartScheduler+0x140>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a0f      	ldr	r2, [pc, #60]	; (8012930 <xPortStartScheduler+0x140>)
 80128f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80128f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80128f8:	f7ff ff66 	bl	80127c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80128fc:	f7fe ff7a 	bl	80117f4 <vTaskSwitchContext>
	prvTaskExitError();
 8012900:	f7ff ff1c 	bl	801273c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012904:	2300      	movs	r3, #0
}
 8012906:	4618      	mov	r0, r3
 8012908:	3718      	adds	r7, #24
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	e000ed00 	.word	0xe000ed00
 8012914:	410fc271 	.word	0x410fc271
 8012918:	410fc270 	.word	0x410fc270
 801291c:	e000e400 	.word	0xe000e400
 8012920:	24001364 	.word	0x24001364
 8012924:	24001368 	.word	0x24001368
 8012928:	e000ed20 	.word	0xe000ed20
 801292c:	24000010 	.word	0x24000010
 8012930:	e000ef34 	.word	0xe000ef34

08012934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
	__asm volatile
 801293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293e:	f383 8811 	msr	BASEPRI, r3
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	607b      	str	r3, [r7, #4]
}
 801294c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801294e:	4b0f      	ldr	r3, [pc, #60]	; (801298c <vPortEnterCritical+0x58>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	3301      	adds	r3, #1
 8012954:	4a0d      	ldr	r2, [pc, #52]	; (801298c <vPortEnterCritical+0x58>)
 8012956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012958:	4b0c      	ldr	r3, [pc, #48]	; (801298c <vPortEnterCritical+0x58>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2b01      	cmp	r3, #1
 801295e:	d10f      	bne.n	8012980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012960:	4b0b      	ldr	r3, [pc, #44]	; (8012990 <vPortEnterCritical+0x5c>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	b2db      	uxtb	r3, r3
 8012966:	2b00      	cmp	r3, #0
 8012968:	d00a      	beq.n	8012980 <vPortEnterCritical+0x4c>
	__asm volatile
 801296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296e:	f383 8811 	msr	BASEPRI, r3
 8012972:	f3bf 8f6f 	isb	sy
 8012976:	f3bf 8f4f 	dsb	sy
 801297a:	603b      	str	r3, [r7, #0]
}
 801297c:	bf00      	nop
 801297e:	e7fe      	b.n	801297e <vPortEnterCritical+0x4a>
	}
}
 8012980:	bf00      	nop
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	24000010 	.word	0x24000010
 8012990:	e000ed04 	.word	0xe000ed04

08012994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801299a:	4b12      	ldr	r3, [pc, #72]	; (80129e4 <vPortExitCritical+0x50>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d10a      	bne.n	80129b8 <vPortExitCritical+0x24>
	__asm volatile
 80129a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a6:	f383 8811 	msr	BASEPRI, r3
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	607b      	str	r3, [r7, #4]
}
 80129b4:	bf00      	nop
 80129b6:	e7fe      	b.n	80129b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80129b8:	4b0a      	ldr	r3, [pc, #40]	; (80129e4 <vPortExitCritical+0x50>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	3b01      	subs	r3, #1
 80129be:	4a09      	ldr	r2, [pc, #36]	; (80129e4 <vPortExitCritical+0x50>)
 80129c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80129c2:	4b08      	ldr	r3, [pc, #32]	; (80129e4 <vPortExitCritical+0x50>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d105      	bne.n	80129d6 <vPortExitCritical+0x42>
 80129ca:	2300      	movs	r3, #0
 80129cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	f383 8811 	msr	BASEPRI, r3
}
 80129d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80129d6:	bf00      	nop
 80129d8:	370c      	adds	r7, #12
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	24000010 	.word	0x24000010
	...

080129f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80129f0:	f3ef 8009 	mrs	r0, PSP
 80129f4:	f3bf 8f6f 	isb	sy
 80129f8:	4b15      	ldr	r3, [pc, #84]	; (8012a50 <pxCurrentTCBConst>)
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	f01e 0f10 	tst.w	lr, #16
 8012a00:	bf08      	it	eq
 8012a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0a:	6010      	str	r0, [r2, #0]
 8012a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a14:	f380 8811 	msr	BASEPRI, r0
 8012a18:	f3bf 8f4f 	dsb	sy
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f7fe fee8 	bl	80117f4 <vTaskSwitchContext>
 8012a24:	f04f 0000 	mov.w	r0, #0
 8012a28:	f380 8811 	msr	BASEPRI, r0
 8012a2c:	bc09      	pop	{r0, r3}
 8012a2e:	6819      	ldr	r1, [r3, #0]
 8012a30:	6808      	ldr	r0, [r1, #0]
 8012a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a36:	f01e 0f10 	tst.w	lr, #16
 8012a3a:	bf08      	it	eq
 8012a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a40:	f380 8809 	msr	PSP, r0
 8012a44:	f3bf 8f6f 	isb	sy
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop
 8012a4c:	f3af 8000 	nop.w

08012a50 <pxCurrentTCBConst>:
 8012a50:	24000d38 	.word	0x24000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a54:	bf00      	nop
 8012a56:	bf00      	nop

08012a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	607b      	str	r3, [r7, #4]
}
 8012a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a72:	f7fe fe05 	bl	8011680 <xTaskIncrementTick>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d003      	beq.n	8012a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a7c:	4b06      	ldr	r3, [pc, #24]	; (8012a98 <xPortSysTickHandler+0x40>)
 8012a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	2300      	movs	r3, #0
 8012a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	f383 8811 	msr	BASEPRI, r3
}
 8012a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a90:	bf00      	nop
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	e000ed04 	.word	0xe000ed04

08012a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012aa0:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <vPortSetupTimerInterrupt+0x34>)
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012aa6:	4b0b      	ldr	r3, [pc, #44]	; (8012ad4 <vPortSetupTimerInterrupt+0x38>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012aac:	4b0a      	ldr	r3, [pc, #40]	; (8012ad8 <vPortSetupTimerInterrupt+0x3c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4a0a      	ldr	r2, [pc, #40]	; (8012adc <vPortSetupTimerInterrupt+0x40>)
 8012ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ab6:	099b      	lsrs	r3, r3, #6
 8012ab8:	4a09      	ldr	r2, [pc, #36]	; (8012ae0 <vPortSetupTimerInterrupt+0x44>)
 8012aba:	3b01      	subs	r3, #1
 8012abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012abe:	4b04      	ldr	r3, [pc, #16]	; (8012ad0 <vPortSetupTimerInterrupt+0x34>)
 8012ac0:	2207      	movs	r2, #7
 8012ac2:	601a      	str	r2, [r3, #0]
}
 8012ac4:	bf00      	nop
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	e000e010 	.word	0xe000e010
 8012ad4:	e000e018 	.word	0xe000e018
 8012ad8:	24000000 	.word	0x24000000
 8012adc:	10624dd3 	.word	0x10624dd3
 8012ae0:	e000e014 	.word	0xe000e014

08012ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012af4 <vPortEnableVFP+0x10>
 8012ae8:	6801      	ldr	r1, [r0, #0]
 8012aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012aee:	6001      	str	r1, [r0, #0]
 8012af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012af2:	bf00      	nop
 8012af4:	e000ed88 	.word	0xe000ed88

08012af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012af8:	b480      	push	{r7}
 8012afa:	b085      	sub	sp, #20
 8012afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012afe:	f3ef 8305 	mrs	r3, IPSR
 8012b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2b0f      	cmp	r3, #15
 8012b08:	d914      	bls.n	8012b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b0a:	4a17      	ldr	r2, [pc, #92]	; (8012b68 <vPortValidateInterruptPriority+0x70>)
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	4413      	add	r3, r2
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b14:	4b15      	ldr	r3, [pc, #84]	; (8012b6c <vPortValidateInterruptPriority+0x74>)
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	7afa      	ldrb	r2, [r7, #11]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d20a      	bcs.n	8012b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b22:	f383 8811 	msr	BASEPRI, r3
 8012b26:	f3bf 8f6f 	isb	sy
 8012b2a:	f3bf 8f4f 	dsb	sy
 8012b2e:	607b      	str	r3, [r7, #4]
}
 8012b30:	bf00      	nop
 8012b32:	e7fe      	b.n	8012b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b34:	4b0e      	ldr	r3, [pc, #56]	; (8012b70 <vPortValidateInterruptPriority+0x78>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b3c:	4b0d      	ldr	r3, [pc, #52]	; (8012b74 <vPortValidateInterruptPriority+0x7c>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d90a      	bls.n	8012b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	603b      	str	r3, [r7, #0]
}
 8012b56:	bf00      	nop
 8012b58:	e7fe      	b.n	8012b58 <vPortValidateInterruptPriority+0x60>
	}
 8012b5a:	bf00      	nop
 8012b5c:	3714      	adds	r7, #20
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop
 8012b68:	e000e3f0 	.word	0xe000e3f0
 8012b6c:	24001364 	.word	0x24001364
 8012b70:	e000ed0c 	.word	0xe000ed0c
 8012b74:	24001368 	.word	0x24001368

08012b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b08a      	sub	sp, #40	; 0x28
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b80:	2300      	movs	r3, #0
 8012b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b84:	f7fe fcc0 	bl	8011508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b88:	4b5b      	ldr	r3, [pc, #364]	; (8012cf8 <pvPortMalloc+0x180>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d101      	bne.n	8012b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b90:	f000 f920 	bl	8012dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b94:	4b59      	ldr	r3, [pc, #356]	; (8012cfc <pvPortMalloc+0x184>)
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	4013      	ands	r3, r2
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f040 8093 	bne.w	8012cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d01d      	beq.n	8012be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012ba8:	2208      	movs	r2, #8
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4413      	add	r3, r2
 8012bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f003 0307 	and.w	r3, r3, #7
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d014      	beq.n	8012be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f023 0307 	bic.w	r3, r3, #7
 8012bc0:	3308      	adds	r3, #8
 8012bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f003 0307 	and.w	r3, r3, #7
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00a      	beq.n	8012be4 <pvPortMalloc+0x6c>
	__asm volatile
 8012bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd2:	f383 8811 	msr	BASEPRI, r3
 8012bd6:	f3bf 8f6f 	isb	sy
 8012bda:	f3bf 8f4f 	dsb	sy
 8012bde:	617b      	str	r3, [r7, #20]
}
 8012be0:	bf00      	nop
 8012be2:	e7fe      	b.n	8012be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d06e      	beq.n	8012cc8 <pvPortMalloc+0x150>
 8012bea:	4b45      	ldr	r3, [pc, #276]	; (8012d00 <pvPortMalloc+0x188>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d869      	bhi.n	8012cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012bf4:	4b43      	ldr	r3, [pc, #268]	; (8012d04 <pvPortMalloc+0x18c>)
 8012bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012bf8:	4b42      	ldr	r3, [pc, #264]	; (8012d04 <pvPortMalloc+0x18c>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bfe:	e004      	b.n	8012c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d903      	bls.n	8012c1c <pvPortMalloc+0xa4>
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1f1      	bne.n	8012c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012c1c:	4b36      	ldr	r3, [pc, #216]	; (8012cf8 <pvPortMalloc+0x180>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d050      	beq.n	8012cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c26:	6a3b      	ldr	r3, [r7, #32]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2208      	movs	r2, #8
 8012c2c:	4413      	add	r3, r2
 8012c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	6a3b      	ldr	r3, [r7, #32]
 8012c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	685a      	ldr	r2, [r3, #4]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	1ad2      	subs	r2, r2, r3
 8012c40:	2308      	movs	r3, #8
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d91f      	bls.n	8012c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4413      	add	r3, r2
 8012c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	f003 0307 	and.w	r3, r3, #7
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00a      	beq.n	8012c70 <pvPortMalloc+0xf8>
	__asm volatile
 8012c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5e:	f383 8811 	msr	BASEPRI, r3
 8012c62:	f3bf 8f6f 	isb	sy
 8012c66:	f3bf 8f4f 	dsb	sy
 8012c6a:	613b      	str	r3, [r7, #16]
}
 8012c6c:	bf00      	nop
 8012c6e:	e7fe      	b.n	8012c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	685a      	ldr	r2, [r3, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	1ad2      	subs	r2, r2, r3
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c82:	69b8      	ldr	r0, [r7, #24]
 8012c84:	f000 f908 	bl	8012e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c88:	4b1d      	ldr	r3, [pc, #116]	; (8012d00 <pvPortMalloc+0x188>)
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	1ad3      	subs	r3, r2, r3
 8012c92:	4a1b      	ldr	r2, [pc, #108]	; (8012d00 <pvPortMalloc+0x188>)
 8012c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c96:	4b1a      	ldr	r3, [pc, #104]	; (8012d00 <pvPortMalloc+0x188>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	4b1b      	ldr	r3, [pc, #108]	; (8012d08 <pvPortMalloc+0x190>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d203      	bcs.n	8012caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ca2:	4b17      	ldr	r3, [pc, #92]	; (8012d00 <pvPortMalloc+0x188>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a18      	ldr	r2, [pc, #96]	; (8012d08 <pvPortMalloc+0x190>)
 8012ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	685a      	ldr	r2, [r3, #4]
 8012cae:	4b13      	ldr	r3, [pc, #76]	; (8012cfc <pvPortMalloc+0x184>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	431a      	orrs	r2, r3
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cba:	2200      	movs	r2, #0
 8012cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012cbe:	4b13      	ldr	r3, [pc, #76]	; (8012d0c <pvPortMalloc+0x194>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	4a11      	ldr	r2, [pc, #68]	; (8012d0c <pvPortMalloc+0x194>)
 8012cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012cc8:	f7fe fc2c 	bl	8011524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	f003 0307 	and.w	r3, r3, #7
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00a      	beq.n	8012cec <pvPortMalloc+0x174>
	__asm volatile
 8012cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	60fb      	str	r3, [r7, #12]
}
 8012ce8:	bf00      	nop
 8012cea:	e7fe      	b.n	8012cea <pvPortMalloc+0x172>
	return pvReturn;
 8012cec:	69fb      	ldr	r3, [r7, #28]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3728      	adds	r7, #40	; 0x28
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	24004f74 	.word	0x24004f74
 8012cfc:	24004f88 	.word	0x24004f88
 8012d00:	24004f78 	.word	0x24004f78
 8012d04:	24004f6c 	.word	0x24004f6c
 8012d08:	24004f7c 	.word	0x24004f7c
 8012d0c:	24004f80 	.word	0x24004f80

08012d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d04d      	beq.n	8012dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d22:	2308      	movs	r3, #8
 8012d24:	425b      	negs	r3, r3
 8012d26:	697a      	ldr	r2, [r7, #20]
 8012d28:	4413      	add	r3, r2
 8012d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	4b24      	ldr	r3, [pc, #144]	; (8012dc8 <vPortFree+0xb8>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4013      	ands	r3, r2
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d10a      	bne.n	8012d54 <vPortFree+0x44>
	__asm volatile
 8012d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d42:	f383 8811 	msr	BASEPRI, r3
 8012d46:	f3bf 8f6f 	isb	sy
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	60fb      	str	r3, [r7, #12]
}
 8012d50:	bf00      	nop
 8012d52:	e7fe      	b.n	8012d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00a      	beq.n	8012d72 <vPortFree+0x62>
	__asm volatile
 8012d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d60:	f383 8811 	msr	BASEPRI, r3
 8012d64:	f3bf 8f6f 	isb	sy
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	60bb      	str	r3, [r7, #8]
}
 8012d6e:	bf00      	nop
 8012d70:	e7fe      	b.n	8012d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	685a      	ldr	r2, [r3, #4]
 8012d76:	4b14      	ldr	r3, [pc, #80]	; (8012dc8 <vPortFree+0xb8>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	4013      	ands	r3, r2
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d01e      	beq.n	8012dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d11a      	bne.n	8012dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	685a      	ldr	r2, [r3, #4]
 8012d8c:	4b0e      	ldr	r3, [pc, #56]	; (8012dc8 <vPortFree+0xb8>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	43db      	mvns	r3, r3
 8012d92:	401a      	ands	r2, r3
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d98:	f7fe fbb6 	bl	8011508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	685a      	ldr	r2, [r3, #4]
 8012da0:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <vPortFree+0xbc>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4413      	add	r3, r2
 8012da6:	4a09      	ldr	r2, [pc, #36]	; (8012dcc <vPortFree+0xbc>)
 8012da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012daa:	6938      	ldr	r0, [r7, #16]
 8012dac:	f000 f874 	bl	8012e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012db0:	4b07      	ldr	r3, [pc, #28]	; (8012dd0 <vPortFree+0xc0>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	3301      	adds	r3, #1
 8012db6:	4a06      	ldr	r2, [pc, #24]	; (8012dd0 <vPortFree+0xc0>)
 8012db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012dba:	f7fe fbb3 	bl	8011524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012dbe:	bf00      	nop
 8012dc0:	3718      	adds	r7, #24
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	24004f88 	.word	0x24004f88
 8012dcc:	24004f78 	.word	0x24004f78
 8012dd0:	24004f84 	.word	0x24004f84

08012dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012de0:	4b27      	ldr	r3, [pc, #156]	; (8012e80 <prvHeapInit+0xac>)
 8012de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f003 0307 	and.w	r3, r3, #7
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d00c      	beq.n	8012e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	3307      	adds	r3, #7
 8012df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f023 0307 	bic.w	r3, r3, #7
 8012dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012dfc:	68ba      	ldr	r2, [r7, #8]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	1ad3      	subs	r3, r2, r3
 8012e02:	4a1f      	ldr	r2, [pc, #124]	; (8012e80 <prvHeapInit+0xac>)
 8012e04:	4413      	add	r3, r2
 8012e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e0c:	4a1d      	ldr	r2, [pc, #116]	; (8012e84 <prvHeapInit+0xb0>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012e12:	4b1c      	ldr	r3, [pc, #112]	; (8012e84 <prvHeapInit+0xb0>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012e20:	2208      	movs	r2, #8
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	1a9b      	subs	r3, r3, r2
 8012e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f023 0307 	bic.w	r3, r3, #7
 8012e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	4a15      	ldr	r2, [pc, #84]	; (8012e88 <prvHeapInit+0xb4>)
 8012e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e36:	4b14      	ldr	r3, [pc, #80]	; (8012e88 <prvHeapInit+0xb4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e3e:	4b12      	ldr	r3, [pc, #72]	; (8012e88 <prvHeapInit+0xb4>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2200      	movs	r2, #0
 8012e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	1ad2      	subs	r2, r2, r3
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012e54:	4b0c      	ldr	r3, [pc, #48]	; (8012e88 <prvHeapInit+0xb4>)
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	4a0a      	ldr	r2, [pc, #40]	; (8012e8c <prvHeapInit+0xb8>)
 8012e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	4a09      	ldr	r2, [pc, #36]	; (8012e90 <prvHeapInit+0xbc>)
 8012e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e6c:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <prvHeapInit+0xc0>)
 8012e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e72:	601a      	str	r2, [r3, #0]
}
 8012e74:	bf00      	nop
 8012e76:	3714      	adds	r7, #20
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr
 8012e80:	2400136c 	.word	0x2400136c
 8012e84:	24004f6c 	.word	0x24004f6c
 8012e88:	24004f74 	.word	0x24004f74
 8012e8c:	24004f7c 	.word	0x24004f7c
 8012e90:	24004f78 	.word	0x24004f78
 8012e94:	24004f88 	.word	0x24004f88

08012e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ea0:	4b28      	ldr	r3, [pc, #160]	; (8012f44 <prvInsertBlockIntoFreeList+0xac>)
 8012ea2:	60fb      	str	r3, [r7, #12]
 8012ea4:	e002      	b.n	8012eac <prvInsertBlockIntoFreeList+0x14>
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	60fb      	str	r3, [r7, #12]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d8f7      	bhi.n	8012ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	68ba      	ldr	r2, [r7, #8]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d108      	bne.n	8012eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	685a      	ldr	r2, [r3, #4]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	441a      	add	r2, r3
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	441a      	add	r2, r3
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d118      	bne.n	8012f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	4b15      	ldr	r3, [pc, #84]	; (8012f48 <prvInsertBlockIntoFreeList+0xb0>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d00d      	beq.n	8012f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	685a      	ldr	r2, [r3, #4]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	441a      	add	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	681a      	ldr	r2, [r3, #0]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	601a      	str	r2, [r3, #0]
 8012f14:	e008      	b.n	8012f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f16:	4b0c      	ldr	r3, [pc, #48]	; (8012f48 <prvInsertBlockIntoFreeList+0xb0>)
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	e003      	b.n	8012f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f28:	68fa      	ldr	r2, [r7, #12]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d002      	beq.n	8012f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f36:	bf00      	nop
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	24004f6c 	.word	0x24004f6c
 8012f48:	24004f74 	.word	0x24004f74

08012f4c <__errno>:
 8012f4c:	4b01      	ldr	r3, [pc, #4]	; (8012f54 <__errno+0x8>)
 8012f4e:	6818      	ldr	r0, [r3, #0]
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	24000014 	.word	0x24000014

08012f58 <__libc_init_array>:
 8012f58:	b570      	push	{r4, r5, r6, lr}
 8012f5a:	4d0d      	ldr	r5, [pc, #52]	; (8012f90 <__libc_init_array+0x38>)
 8012f5c:	4c0d      	ldr	r4, [pc, #52]	; (8012f94 <__libc_init_array+0x3c>)
 8012f5e:	1b64      	subs	r4, r4, r5
 8012f60:	10a4      	asrs	r4, r4, #2
 8012f62:	2600      	movs	r6, #0
 8012f64:	42a6      	cmp	r6, r4
 8012f66:	d109      	bne.n	8012f7c <__libc_init_array+0x24>
 8012f68:	4d0b      	ldr	r5, [pc, #44]	; (8012f98 <__libc_init_array+0x40>)
 8012f6a:	4c0c      	ldr	r4, [pc, #48]	; (8012f9c <__libc_init_array+0x44>)
 8012f6c:	f001 f842 	bl	8013ff4 <_init>
 8012f70:	1b64      	subs	r4, r4, r5
 8012f72:	10a4      	asrs	r4, r4, #2
 8012f74:	2600      	movs	r6, #0
 8012f76:	42a6      	cmp	r6, r4
 8012f78:	d105      	bne.n	8012f86 <__libc_init_array+0x2e>
 8012f7a:	bd70      	pop	{r4, r5, r6, pc}
 8012f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f80:	4798      	blx	r3
 8012f82:	3601      	adds	r6, #1
 8012f84:	e7ee      	b.n	8012f64 <__libc_init_array+0xc>
 8012f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f8a:	4798      	blx	r3
 8012f8c:	3601      	adds	r6, #1
 8012f8e:	e7f2      	b.n	8012f76 <__libc_init_array+0x1e>
 8012f90:	080143c4 	.word	0x080143c4
 8012f94:	080143c4 	.word	0x080143c4
 8012f98:	080143c4 	.word	0x080143c4
 8012f9c:	080143c8 	.word	0x080143c8

08012fa0 <malloc>:
 8012fa0:	4b02      	ldr	r3, [pc, #8]	; (8012fac <malloc+0xc>)
 8012fa2:	4601      	mov	r1, r0
 8012fa4:	6818      	ldr	r0, [r3, #0]
 8012fa6:	f000 b88d 	b.w	80130c4 <_malloc_r>
 8012faa:	bf00      	nop
 8012fac:	24000014 	.word	0x24000014

08012fb0 <free>:
 8012fb0:	4b02      	ldr	r3, [pc, #8]	; (8012fbc <free+0xc>)
 8012fb2:	4601      	mov	r1, r0
 8012fb4:	6818      	ldr	r0, [r3, #0]
 8012fb6:	f000 b819 	b.w	8012fec <_free_r>
 8012fba:	bf00      	nop
 8012fbc:	24000014 	.word	0x24000014

08012fc0 <memcpy>:
 8012fc0:	440a      	add	r2, r1
 8012fc2:	4291      	cmp	r1, r2
 8012fc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012fc8:	d100      	bne.n	8012fcc <memcpy+0xc>
 8012fca:	4770      	bx	lr
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fd6:	4291      	cmp	r1, r2
 8012fd8:	d1f9      	bne.n	8012fce <memcpy+0xe>
 8012fda:	bd10      	pop	{r4, pc}

08012fdc <memset>:
 8012fdc:	4402      	add	r2, r0
 8012fde:	4603      	mov	r3, r0
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d100      	bne.n	8012fe6 <memset+0xa>
 8012fe4:	4770      	bx	lr
 8012fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8012fea:	e7f9      	b.n	8012fe0 <memset+0x4>

08012fec <_free_r>:
 8012fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fee:	2900      	cmp	r1, #0
 8012ff0:	d044      	beq.n	801307c <_free_r+0x90>
 8012ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ff6:	9001      	str	r0, [sp, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8012ffe:	bfb8      	it	lt
 8013000:	18e4      	addlt	r4, r4, r3
 8013002:	f000 fc51 	bl	80138a8 <__malloc_lock>
 8013006:	4a1e      	ldr	r2, [pc, #120]	; (8013080 <_free_r+0x94>)
 8013008:	9801      	ldr	r0, [sp, #4]
 801300a:	6813      	ldr	r3, [r2, #0]
 801300c:	b933      	cbnz	r3, 801301c <_free_r+0x30>
 801300e:	6063      	str	r3, [r4, #4]
 8013010:	6014      	str	r4, [r2, #0]
 8013012:	b003      	add	sp, #12
 8013014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013018:	f000 bc4c 	b.w	80138b4 <__malloc_unlock>
 801301c:	42a3      	cmp	r3, r4
 801301e:	d908      	bls.n	8013032 <_free_r+0x46>
 8013020:	6825      	ldr	r5, [r4, #0]
 8013022:	1961      	adds	r1, r4, r5
 8013024:	428b      	cmp	r3, r1
 8013026:	bf01      	itttt	eq
 8013028:	6819      	ldreq	r1, [r3, #0]
 801302a:	685b      	ldreq	r3, [r3, #4]
 801302c:	1949      	addeq	r1, r1, r5
 801302e:	6021      	streq	r1, [r4, #0]
 8013030:	e7ed      	b.n	801300e <_free_r+0x22>
 8013032:	461a      	mov	r2, r3
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	b10b      	cbz	r3, 801303c <_free_r+0x50>
 8013038:	42a3      	cmp	r3, r4
 801303a:	d9fa      	bls.n	8013032 <_free_r+0x46>
 801303c:	6811      	ldr	r1, [r2, #0]
 801303e:	1855      	adds	r5, r2, r1
 8013040:	42a5      	cmp	r5, r4
 8013042:	d10b      	bne.n	801305c <_free_r+0x70>
 8013044:	6824      	ldr	r4, [r4, #0]
 8013046:	4421      	add	r1, r4
 8013048:	1854      	adds	r4, r2, r1
 801304a:	42a3      	cmp	r3, r4
 801304c:	6011      	str	r1, [r2, #0]
 801304e:	d1e0      	bne.n	8013012 <_free_r+0x26>
 8013050:	681c      	ldr	r4, [r3, #0]
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	6053      	str	r3, [r2, #4]
 8013056:	4421      	add	r1, r4
 8013058:	6011      	str	r1, [r2, #0]
 801305a:	e7da      	b.n	8013012 <_free_r+0x26>
 801305c:	d902      	bls.n	8013064 <_free_r+0x78>
 801305e:	230c      	movs	r3, #12
 8013060:	6003      	str	r3, [r0, #0]
 8013062:	e7d6      	b.n	8013012 <_free_r+0x26>
 8013064:	6825      	ldr	r5, [r4, #0]
 8013066:	1961      	adds	r1, r4, r5
 8013068:	428b      	cmp	r3, r1
 801306a:	bf04      	itt	eq
 801306c:	6819      	ldreq	r1, [r3, #0]
 801306e:	685b      	ldreq	r3, [r3, #4]
 8013070:	6063      	str	r3, [r4, #4]
 8013072:	bf04      	itt	eq
 8013074:	1949      	addeq	r1, r1, r5
 8013076:	6021      	streq	r1, [r4, #0]
 8013078:	6054      	str	r4, [r2, #4]
 801307a:	e7ca      	b.n	8013012 <_free_r+0x26>
 801307c:	b003      	add	sp, #12
 801307e:	bd30      	pop	{r4, r5, pc}
 8013080:	24004f8c 	.word	0x24004f8c

08013084 <sbrk_aligned>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	4e0e      	ldr	r6, [pc, #56]	; (80130c0 <sbrk_aligned+0x3c>)
 8013088:	460c      	mov	r4, r1
 801308a:	6831      	ldr	r1, [r6, #0]
 801308c:	4605      	mov	r5, r0
 801308e:	b911      	cbnz	r1, 8013096 <sbrk_aligned+0x12>
 8013090:	f000 f91a 	bl	80132c8 <_sbrk_r>
 8013094:	6030      	str	r0, [r6, #0]
 8013096:	4621      	mov	r1, r4
 8013098:	4628      	mov	r0, r5
 801309a:	f000 f915 	bl	80132c8 <_sbrk_r>
 801309e:	1c43      	adds	r3, r0, #1
 80130a0:	d00a      	beq.n	80130b8 <sbrk_aligned+0x34>
 80130a2:	1cc4      	adds	r4, r0, #3
 80130a4:	f024 0403 	bic.w	r4, r4, #3
 80130a8:	42a0      	cmp	r0, r4
 80130aa:	d007      	beq.n	80130bc <sbrk_aligned+0x38>
 80130ac:	1a21      	subs	r1, r4, r0
 80130ae:	4628      	mov	r0, r5
 80130b0:	f000 f90a 	bl	80132c8 <_sbrk_r>
 80130b4:	3001      	adds	r0, #1
 80130b6:	d101      	bne.n	80130bc <sbrk_aligned+0x38>
 80130b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80130bc:	4620      	mov	r0, r4
 80130be:	bd70      	pop	{r4, r5, r6, pc}
 80130c0:	24004f90 	.word	0x24004f90

080130c4 <_malloc_r>:
 80130c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c8:	1ccd      	adds	r5, r1, #3
 80130ca:	f025 0503 	bic.w	r5, r5, #3
 80130ce:	3508      	adds	r5, #8
 80130d0:	2d0c      	cmp	r5, #12
 80130d2:	bf38      	it	cc
 80130d4:	250c      	movcc	r5, #12
 80130d6:	2d00      	cmp	r5, #0
 80130d8:	4607      	mov	r7, r0
 80130da:	db01      	blt.n	80130e0 <_malloc_r+0x1c>
 80130dc:	42a9      	cmp	r1, r5
 80130de:	d905      	bls.n	80130ec <_malloc_r+0x28>
 80130e0:	230c      	movs	r3, #12
 80130e2:	603b      	str	r3, [r7, #0]
 80130e4:	2600      	movs	r6, #0
 80130e6:	4630      	mov	r0, r6
 80130e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ec:	4e2e      	ldr	r6, [pc, #184]	; (80131a8 <_malloc_r+0xe4>)
 80130ee:	f000 fbdb 	bl	80138a8 <__malloc_lock>
 80130f2:	6833      	ldr	r3, [r6, #0]
 80130f4:	461c      	mov	r4, r3
 80130f6:	bb34      	cbnz	r4, 8013146 <_malloc_r+0x82>
 80130f8:	4629      	mov	r1, r5
 80130fa:	4638      	mov	r0, r7
 80130fc:	f7ff ffc2 	bl	8013084 <sbrk_aligned>
 8013100:	1c43      	adds	r3, r0, #1
 8013102:	4604      	mov	r4, r0
 8013104:	d14d      	bne.n	80131a2 <_malloc_r+0xde>
 8013106:	6834      	ldr	r4, [r6, #0]
 8013108:	4626      	mov	r6, r4
 801310a:	2e00      	cmp	r6, #0
 801310c:	d140      	bne.n	8013190 <_malloc_r+0xcc>
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	4631      	mov	r1, r6
 8013112:	4638      	mov	r0, r7
 8013114:	eb04 0803 	add.w	r8, r4, r3
 8013118:	f000 f8d6 	bl	80132c8 <_sbrk_r>
 801311c:	4580      	cmp	r8, r0
 801311e:	d13a      	bne.n	8013196 <_malloc_r+0xd2>
 8013120:	6821      	ldr	r1, [r4, #0]
 8013122:	3503      	adds	r5, #3
 8013124:	1a6d      	subs	r5, r5, r1
 8013126:	f025 0503 	bic.w	r5, r5, #3
 801312a:	3508      	adds	r5, #8
 801312c:	2d0c      	cmp	r5, #12
 801312e:	bf38      	it	cc
 8013130:	250c      	movcc	r5, #12
 8013132:	4629      	mov	r1, r5
 8013134:	4638      	mov	r0, r7
 8013136:	f7ff ffa5 	bl	8013084 <sbrk_aligned>
 801313a:	3001      	adds	r0, #1
 801313c:	d02b      	beq.n	8013196 <_malloc_r+0xd2>
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	442b      	add	r3, r5
 8013142:	6023      	str	r3, [r4, #0]
 8013144:	e00e      	b.n	8013164 <_malloc_r+0xa0>
 8013146:	6822      	ldr	r2, [r4, #0]
 8013148:	1b52      	subs	r2, r2, r5
 801314a:	d41e      	bmi.n	801318a <_malloc_r+0xc6>
 801314c:	2a0b      	cmp	r2, #11
 801314e:	d916      	bls.n	801317e <_malloc_r+0xba>
 8013150:	1961      	adds	r1, r4, r5
 8013152:	42a3      	cmp	r3, r4
 8013154:	6025      	str	r5, [r4, #0]
 8013156:	bf18      	it	ne
 8013158:	6059      	strne	r1, [r3, #4]
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	bf08      	it	eq
 801315e:	6031      	streq	r1, [r6, #0]
 8013160:	5162      	str	r2, [r4, r5]
 8013162:	604b      	str	r3, [r1, #4]
 8013164:	4638      	mov	r0, r7
 8013166:	f104 060b 	add.w	r6, r4, #11
 801316a:	f000 fba3 	bl	80138b4 <__malloc_unlock>
 801316e:	f026 0607 	bic.w	r6, r6, #7
 8013172:	1d23      	adds	r3, r4, #4
 8013174:	1af2      	subs	r2, r6, r3
 8013176:	d0b6      	beq.n	80130e6 <_malloc_r+0x22>
 8013178:	1b9b      	subs	r3, r3, r6
 801317a:	50a3      	str	r3, [r4, r2]
 801317c:	e7b3      	b.n	80130e6 <_malloc_r+0x22>
 801317e:	6862      	ldr	r2, [r4, #4]
 8013180:	42a3      	cmp	r3, r4
 8013182:	bf0c      	ite	eq
 8013184:	6032      	streq	r2, [r6, #0]
 8013186:	605a      	strne	r2, [r3, #4]
 8013188:	e7ec      	b.n	8013164 <_malloc_r+0xa0>
 801318a:	4623      	mov	r3, r4
 801318c:	6864      	ldr	r4, [r4, #4]
 801318e:	e7b2      	b.n	80130f6 <_malloc_r+0x32>
 8013190:	4634      	mov	r4, r6
 8013192:	6876      	ldr	r6, [r6, #4]
 8013194:	e7b9      	b.n	801310a <_malloc_r+0x46>
 8013196:	230c      	movs	r3, #12
 8013198:	603b      	str	r3, [r7, #0]
 801319a:	4638      	mov	r0, r7
 801319c:	f000 fb8a 	bl	80138b4 <__malloc_unlock>
 80131a0:	e7a1      	b.n	80130e6 <_malloc_r+0x22>
 80131a2:	6025      	str	r5, [r4, #0]
 80131a4:	e7de      	b.n	8013164 <_malloc_r+0xa0>
 80131a6:	bf00      	nop
 80131a8:	24004f8c 	.word	0x24004f8c

080131ac <iprintf>:
 80131ac:	b40f      	push	{r0, r1, r2, r3}
 80131ae:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <iprintf+0x2c>)
 80131b0:	b513      	push	{r0, r1, r4, lr}
 80131b2:	681c      	ldr	r4, [r3, #0]
 80131b4:	b124      	cbz	r4, 80131c0 <iprintf+0x14>
 80131b6:	69a3      	ldr	r3, [r4, #24]
 80131b8:	b913      	cbnz	r3, 80131c0 <iprintf+0x14>
 80131ba:	4620      	mov	r0, r4
 80131bc:	f000 fa6e 	bl	801369c <__sinit>
 80131c0:	ab05      	add	r3, sp, #20
 80131c2:	9a04      	ldr	r2, [sp, #16]
 80131c4:	68a1      	ldr	r1, [r4, #8]
 80131c6:	9301      	str	r3, [sp, #4]
 80131c8:	4620      	mov	r0, r4
 80131ca:	f000 fba3 	bl	8013914 <_vfiprintf_r>
 80131ce:	b002      	add	sp, #8
 80131d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131d4:	b004      	add	sp, #16
 80131d6:	4770      	bx	lr
 80131d8:	24000014 	.word	0x24000014

080131dc <_puts_r>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	460e      	mov	r6, r1
 80131e0:	4605      	mov	r5, r0
 80131e2:	b118      	cbz	r0, 80131ec <_puts_r+0x10>
 80131e4:	6983      	ldr	r3, [r0, #24]
 80131e6:	b90b      	cbnz	r3, 80131ec <_puts_r+0x10>
 80131e8:	f000 fa58 	bl	801369c <__sinit>
 80131ec:	69ab      	ldr	r3, [r5, #24]
 80131ee:	68ac      	ldr	r4, [r5, #8]
 80131f0:	b913      	cbnz	r3, 80131f8 <_puts_r+0x1c>
 80131f2:	4628      	mov	r0, r5
 80131f4:	f000 fa52 	bl	801369c <__sinit>
 80131f8:	4b2c      	ldr	r3, [pc, #176]	; (80132ac <_puts_r+0xd0>)
 80131fa:	429c      	cmp	r4, r3
 80131fc:	d120      	bne.n	8013240 <_puts_r+0x64>
 80131fe:	686c      	ldr	r4, [r5, #4]
 8013200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013202:	07db      	lsls	r3, r3, #31
 8013204:	d405      	bmi.n	8013212 <_puts_r+0x36>
 8013206:	89a3      	ldrh	r3, [r4, #12]
 8013208:	0598      	lsls	r0, r3, #22
 801320a:	d402      	bmi.n	8013212 <_puts_r+0x36>
 801320c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801320e:	f000 fae3 	bl	80137d8 <__retarget_lock_acquire_recursive>
 8013212:	89a3      	ldrh	r3, [r4, #12]
 8013214:	0719      	lsls	r1, r3, #28
 8013216:	d51d      	bpl.n	8013254 <_puts_r+0x78>
 8013218:	6923      	ldr	r3, [r4, #16]
 801321a:	b1db      	cbz	r3, 8013254 <_puts_r+0x78>
 801321c:	3e01      	subs	r6, #1
 801321e:	68a3      	ldr	r3, [r4, #8]
 8013220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013224:	3b01      	subs	r3, #1
 8013226:	60a3      	str	r3, [r4, #8]
 8013228:	bb39      	cbnz	r1, 801327a <_puts_r+0x9e>
 801322a:	2b00      	cmp	r3, #0
 801322c:	da38      	bge.n	80132a0 <_puts_r+0xc4>
 801322e:	4622      	mov	r2, r4
 8013230:	210a      	movs	r1, #10
 8013232:	4628      	mov	r0, r5
 8013234:	f000 f858 	bl	80132e8 <__swbuf_r>
 8013238:	3001      	adds	r0, #1
 801323a:	d011      	beq.n	8013260 <_puts_r+0x84>
 801323c:	250a      	movs	r5, #10
 801323e:	e011      	b.n	8013264 <_puts_r+0x88>
 8013240:	4b1b      	ldr	r3, [pc, #108]	; (80132b0 <_puts_r+0xd4>)
 8013242:	429c      	cmp	r4, r3
 8013244:	d101      	bne.n	801324a <_puts_r+0x6e>
 8013246:	68ac      	ldr	r4, [r5, #8]
 8013248:	e7da      	b.n	8013200 <_puts_r+0x24>
 801324a:	4b1a      	ldr	r3, [pc, #104]	; (80132b4 <_puts_r+0xd8>)
 801324c:	429c      	cmp	r4, r3
 801324e:	bf08      	it	eq
 8013250:	68ec      	ldreq	r4, [r5, #12]
 8013252:	e7d5      	b.n	8013200 <_puts_r+0x24>
 8013254:	4621      	mov	r1, r4
 8013256:	4628      	mov	r0, r5
 8013258:	f000 f898 	bl	801338c <__swsetup_r>
 801325c:	2800      	cmp	r0, #0
 801325e:	d0dd      	beq.n	801321c <_puts_r+0x40>
 8013260:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013266:	07da      	lsls	r2, r3, #31
 8013268:	d405      	bmi.n	8013276 <_puts_r+0x9a>
 801326a:	89a3      	ldrh	r3, [r4, #12]
 801326c:	059b      	lsls	r3, r3, #22
 801326e:	d402      	bmi.n	8013276 <_puts_r+0x9a>
 8013270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013272:	f000 fab2 	bl	80137da <__retarget_lock_release_recursive>
 8013276:	4628      	mov	r0, r5
 8013278:	bd70      	pop	{r4, r5, r6, pc}
 801327a:	2b00      	cmp	r3, #0
 801327c:	da04      	bge.n	8013288 <_puts_r+0xac>
 801327e:	69a2      	ldr	r2, [r4, #24]
 8013280:	429a      	cmp	r2, r3
 8013282:	dc06      	bgt.n	8013292 <_puts_r+0xb6>
 8013284:	290a      	cmp	r1, #10
 8013286:	d004      	beq.n	8013292 <_puts_r+0xb6>
 8013288:	6823      	ldr	r3, [r4, #0]
 801328a:	1c5a      	adds	r2, r3, #1
 801328c:	6022      	str	r2, [r4, #0]
 801328e:	7019      	strb	r1, [r3, #0]
 8013290:	e7c5      	b.n	801321e <_puts_r+0x42>
 8013292:	4622      	mov	r2, r4
 8013294:	4628      	mov	r0, r5
 8013296:	f000 f827 	bl	80132e8 <__swbuf_r>
 801329a:	3001      	adds	r0, #1
 801329c:	d1bf      	bne.n	801321e <_puts_r+0x42>
 801329e:	e7df      	b.n	8013260 <_puts_r+0x84>
 80132a0:	6823      	ldr	r3, [r4, #0]
 80132a2:	250a      	movs	r5, #10
 80132a4:	1c5a      	adds	r2, r3, #1
 80132a6:	6022      	str	r2, [r4, #0]
 80132a8:	701d      	strb	r5, [r3, #0]
 80132aa:	e7db      	b.n	8013264 <_puts_r+0x88>
 80132ac:	08014348 	.word	0x08014348
 80132b0:	08014368 	.word	0x08014368
 80132b4:	08014328 	.word	0x08014328

080132b8 <puts>:
 80132b8:	4b02      	ldr	r3, [pc, #8]	; (80132c4 <puts+0xc>)
 80132ba:	4601      	mov	r1, r0
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f7ff bf8d 	b.w	80131dc <_puts_r>
 80132c2:	bf00      	nop
 80132c4:	24000014 	.word	0x24000014

080132c8 <_sbrk_r>:
 80132c8:	b538      	push	{r3, r4, r5, lr}
 80132ca:	4d06      	ldr	r5, [pc, #24]	; (80132e4 <_sbrk_r+0x1c>)
 80132cc:	2300      	movs	r3, #0
 80132ce:	4604      	mov	r4, r0
 80132d0:	4608      	mov	r0, r1
 80132d2:	602b      	str	r3, [r5, #0]
 80132d4:	f7ef fa2a 	bl	800272c <_sbrk>
 80132d8:	1c43      	adds	r3, r0, #1
 80132da:	d102      	bne.n	80132e2 <_sbrk_r+0x1a>
 80132dc:	682b      	ldr	r3, [r5, #0]
 80132de:	b103      	cbz	r3, 80132e2 <_sbrk_r+0x1a>
 80132e0:	6023      	str	r3, [r4, #0]
 80132e2:	bd38      	pop	{r3, r4, r5, pc}
 80132e4:	24004f98 	.word	0x24004f98

080132e8 <__swbuf_r>:
 80132e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ea:	460e      	mov	r6, r1
 80132ec:	4614      	mov	r4, r2
 80132ee:	4605      	mov	r5, r0
 80132f0:	b118      	cbz	r0, 80132fa <__swbuf_r+0x12>
 80132f2:	6983      	ldr	r3, [r0, #24]
 80132f4:	b90b      	cbnz	r3, 80132fa <__swbuf_r+0x12>
 80132f6:	f000 f9d1 	bl	801369c <__sinit>
 80132fa:	4b21      	ldr	r3, [pc, #132]	; (8013380 <__swbuf_r+0x98>)
 80132fc:	429c      	cmp	r4, r3
 80132fe:	d12b      	bne.n	8013358 <__swbuf_r+0x70>
 8013300:	686c      	ldr	r4, [r5, #4]
 8013302:	69a3      	ldr	r3, [r4, #24]
 8013304:	60a3      	str	r3, [r4, #8]
 8013306:	89a3      	ldrh	r3, [r4, #12]
 8013308:	071a      	lsls	r2, r3, #28
 801330a:	d52f      	bpl.n	801336c <__swbuf_r+0x84>
 801330c:	6923      	ldr	r3, [r4, #16]
 801330e:	b36b      	cbz	r3, 801336c <__swbuf_r+0x84>
 8013310:	6923      	ldr	r3, [r4, #16]
 8013312:	6820      	ldr	r0, [r4, #0]
 8013314:	1ac0      	subs	r0, r0, r3
 8013316:	6963      	ldr	r3, [r4, #20]
 8013318:	b2f6      	uxtb	r6, r6
 801331a:	4283      	cmp	r3, r0
 801331c:	4637      	mov	r7, r6
 801331e:	dc04      	bgt.n	801332a <__swbuf_r+0x42>
 8013320:	4621      	mov	r1, r4
 8013322:	4628      	mov	r0, r5
 8013324:	f000 f926 	bl	8013574 <_fflush_r>
 8013328:	bb30      	cbnz	r0, 8013378 <__swbuf_r+0x90>
 801332a:	68a3      	ldr	r3, [r4, #8]
 801332c:	3b01      	subs	r3, #1
 801332e:	60a3      	str	r3, [r4, #8]
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	6022      	str	r2, [r4, #0]
 8013336:	701e      	strb	r6, [r3, #0]
 8013338:	6963      	ldr	r3, [r4, #20]
 801333a:	3001      	adds	r0, #1
 801333c:	4283      	cmp	r3, r0
 801333e:	d004      	beq.n	801334a <__swbuf_r+0x62>
 8013340:	89a3      	ldrh	r3, [r4, #12]
 8013342:	07db      	lsls	r3, r3, #31
 8013344:	d506      	bpl.n	8013354 <__swbuf_r+0x6c>
 8013346:	2e0a      	cmp	r6, #10
 8013348:	d104      	bne.n	8013354 <__swbuf_r+0x6c>
 801334a:	4621      	mov	r1, r4
 801334c:	4628      	mov	r0, r5
 801334e:	f000 f911 	bl	8013574 <_fflush_r>
 8013352:	b988      	cbnz	r0, 8013378 <__swbuf_r+0x90>
 8013354:	4638      	mov	r0, r7
 8013356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013358:	4b0a      	ldr	r3, [pc, #40]	; (8013384 <__swbuf_r+0x9c>)
 801335a:	429c      	cmp	r4, r3
 801335c:	d101      	bne.n	8013362 <__swbuf_r+0x7a>
 801335e:	68ac      	ldr	r4, [r5, #8]
 8013360:	e7cf      	b.n	8013302 <__swbuf_r+0x1a>
 8013362:	4b09      	ldr	r3, [pc, #36]	; (8013388 <__swbuf_r+0xa0>)
 8013364:	429c      	cmp	r4, r3
 8013366:	bf08      	it	eq
 8013368:	68ec      	ldreq	r4, [r5, #12]
 801336a:	e7ca      	b.n	8013302 <__swbuf_r+0x1a>
 801336c:	4621      	mov	r1, r4
 801336e:	4628      	mov	r0, r5
 8013370:	f000 f80c 	bl	801338c <__swsetup_r>
 8013374:	2800      	cmp	r0, #0
 8013376:	d0cb      	beq.n	8013310 <__swbuf_r+0x28>
 8013378:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801337c:	e7ea      	b.n	8013354 <__swbuf_r+0x6c>
 801337e:	bf00      	nop
 8013380:	08014348 	.word	0x08014348
 8013384:	08014368 	.word	0x08014368
 8013388:	08014328 	.word	0x08014328

0801338c <__swsetup_r>:
 801338c:	4b32      	ldr	r3, [pc, #200]	; (8013458 <__swsetup_r+0xcc>)
 801338e:	b570      	push	{r4, r5, r6, lr}
 8013390:	681d      	ldr	r5, [r3, #0]
 8013392:	4606      	mov	r6, r0
 8013394:	460c      	mov	r4, r1
 8013396:	b125      	cbz	r5, 80133a2 <__swsetup_r+0x16>
 8013398:	69ab      	ldr	r3, [r5, #24]
 801339a:	b913      	cbnz	r3, 80133a2 <__swsetup_r+0x16>
 801339c:	4628      	mov	r0, r5
 801339e:	f000 f97d 	bl	801369c <__sinit>
 80133a2:	4b2e      	ldr	r3, [pc, #184]	; (801345c <__swsetup_r+0xd0>)
 80133a4:	429c      	cmp	r4, r3
 80133a6:	d10f      	bne.n	80133c8 <__swsetup_r+0x3c>
 80133a8:	686c      	ldr	r4, [r5, #4]
 80133aa:	89a3      	ldrh	r3, [r4, #12]
 80133ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133b0:	0719      	lsls	r1, r3, #28
 80133b2:	d42c      	bmi.n	801340e <__swsetup_r+0x82>
 80133b4:	06dd      	lsls	r5, r3, #27
 80133b6:	d411      	bmi.n	80133dc <__swsetup_r+0x50>
 80133b8:	2309      	movs	r3, #9
 80133ba:	6033      	str	r3, [r6, #0]
 80133bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80133c0:	81a3      	strh	r3, [r4, #12]
 80133c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133c6:	e03e      	b.n	8013446 <__swsetup_r+0xba>
 80133c8:	4b25      	ldr	r3, [pc, #148]	; (8013460 <__swsetup_r+0xd4>)
 80133ca:	429c      	cmp	r4, r3
 80133cc:	d101      	bne.n	80133d2 <__swsetup_r+0x46>
 80133ce:	68ac      	ldr	r4, [r5, #8]
 80133d0:	e7eb      	b.n	80133aa <__swsetup_r+0x1e>
 80133d2:	4b24      	ldr	r3, [pc, #144]	; (8013464 <__swsetup_r+0xd8>)
 80133d4:	429c      	cmp	r4, r3
 80133d6:	bf08      	it	eq
 80133d8:	68ec      	ldreq	r4, [r5, #12]
 80133da:	e7e6      	b.n	80133aa <__swsetup_r+0x1e>
 80133dc:	0758      	lsls	r0, r3, #29
 80133de:	d512      	bpl.n	8013406 <__swsetup_r+0x7a>
 80133e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133e2:	b141      	cbz	r1, 80133f6 <__swsetup_r+0x6a>
 80133e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133e8:	4299      	cmp	r1, r3
 80133ea:	d002      	beq.n	80133f2 <__swsetup_r+0x66>
 80133ec:	4630      	mov	r0, r6
 80133ee:	f7ff fdfd 	bl	8012fec <_free_r>
 80133f2:	2300      	movs	r3, #0
 80133f4:	6363      	str	r3, [r4, #52]	; 0x34
 80133f6:	89a3      	ldrh	r3, [r4, #12]
 80133f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133fc:	81a3      	strh	r3, [r4, #12]
 80133fe:	2300      	movs	r3, #0
 8013400:	6063      	str	r3, [r4, #4]
 8013402:	6923      	ldr	r3, [r4, #16]
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	89a3      	ldrh	r3, [r4, #12]
 8013408:	f043 0308 	orr.w	r3, r3, #8
 801340c:	81a3      	strh	r3, [r4, #12]
 801340e:	6923      	ldr	r3, [r4, #16]
 8013410:	b94b      	cbnz	r3, 8013426 <__swsetup_r+0x9a>
 8013412:	89a3      	ldrh	r3, [r4, #12]
 8013414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801341c:	d003      	beq.n	8013426 <__swsetup_r+0x9a>
 801341e:	4621      	mov	r1, r4
 8013420:	4630      	mov	r0, r6
 8013422:	f000 fa01 	bl	8013828 <__smakebuf_r>
 8013426:	89a0      	ldrh	r0, [r4, #12]
 8013428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801342c:	f010 0301 	ands.w	r3, r0, #1
 8013430:	d00a      	beq.n	8013448 <__swsetup_r+0xbc>
 8013432:	2300      	movs	r3, #0
 8013434:	60a3      	str	r3, [r4, #8]
 8013436:	6963      	ldr	r3, [r4, #20]
 8013438:	425b      	negs	r3, r3
 801343a:	61a3      	str	r3, [r4, #24]
 801343c:	6923      	ldr	r3, [r4, #16]
 801343e:	b943      	cbnz	r3, 8013452 <__swsetup_r+0xc6>
 8013440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013444:	d1ba      	bne.n	80133bc <__swsetup_r+0x30>
 8013446:	bd70      	pop	{r4, r5, r6, pc}
 8013448:	0781      	lsls	r1, r0, #30
 801344a:	bf58      	it	pl
 801344c:	6963      	ldrpl	r3, [r4, #20]
 801344e:	60a3      	str	r3, [r4, #8]
 8013450:	e7f4      	b.n	801343c <__swsetup_r+0xb0>
 8013452:	2000      	movs	r0, #0
 8013454:	e7f7      	b.n	8013446 <__swsetup_r+0xba>
 8013456:	bf00      	nop
 8013458:	24000014 	.word	0x24000014
 801345c:	08014348 	.word	0x08014348
 8013460:	08014368 	.word	0x08014368
 8013464:	08014328 	.word	0x08014328

08013468 <__sflush_r>:
 8013468:	898a      	ldrh	r2, [r1, #12]
 801346a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801346e:	4605      	mov	r5, r0
 8013470:	0710      	lsls	r0, r2, #28
 8013472:	460c      	mov	r4, r1
 8013474:	d458      	bmi.n	8013528 <__sflush_r+0xc0>
 8013476:	684b      	ldr	r3, [r1, #4]
 8013478:	2b00      	cmp	r3, #0
 801347a:	dc05      	bgt.n	8013488 <__sflush_r+0x20>
 801347c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801347e:	2b00      	cmp	r3, #0
 8013480:	dc02      	bgt.n	8013488 <__sflush_r+0x20>
 8013482:	2000      	movs	r0, #0
 8013484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801348a:	2e00      	cmp	r6, #0
 801348c:	d0f9      	beq.n	8013482 <__sflush_r+0x1a>
 801348e:	2300      	movs	r3, #0
 8013490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013494:	682f      	ldr	r7, [r5, #0]
 8013496:	602b      	str	r3, [r5, #0]
 8013498:	d032      	beq.n	8013500 <__sflush_r+0x98>
 801349a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801349c:	89a3      	ldrh	r3, [r4, #12]
 801349e:	075a      	lsls	r2, r3, #29
 80134a0:	d505      	bpl.n	80134ae <__sflush_r+0x46>
 80134a2:	6863      	ldr	r3, [r4, #4]
 80134a4:	1ac0      	subs	r0, r0, r3
 80134a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134a8:	b10b      	cbz	r3, 80134ae <__sflush_r+0x46>
 80134aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134ac:	1ac0      	subs	r0, r0, r3
 80134ae:	2300      	movs	r3, #0
 80134b0:	4602      	mov	r2, r0
 80134b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134b4:	6a21      	ldr	r1, [r4, #32]
 80134b6:	4628      	mov	r0, r5
 80134b8:	47b0      	blx	r6
 80134ba:	1c43      	adds	r3, r0, #1
 80134bc:	89a3      	ldrh	r3, [r4, #12]
 80134be:	d106      	bne.n	80134ce <__sflush_r+0x66>
 80134c0:	6829      	ldr	r1, [r5, #0]
 80134c2:	291d      	cmp	r1, #29
 80134c4:	d82c      	bhi.n	8013520 <__sflush_r+0xb8>
 80134c6:	4a2a      	ldr	r2, [pc, #168]	; (8013570 <__sflush_r+0x108>)
 80134c8:	40ca      	lsrs	r2, r1
 80134ca:	07d6      	lsls	r6, r2, #31
 80134cc:	d528      	bpl.n	8013520 <__sflush_r+0xb8>
 80134ce:	2200      	movs	r2, #0
 80134d0:	6062      	str	r2, [r4, #4]
 80134d2:	04d9      	lsls	r1, r3, #19
 80134d4:	6922      	ldr	r2, [r4, #16]
 80134d6:	6022      	str	r2, [r4, #0]
 80134d8:	d504      	bpl.n	80134e4 <__sflush_r+0x7c>
 80134da:	1c42      	adds	r2, r0, #1
 80134dc:	d101      	bne.n	80134e2 <__sflush_r+0x7a>
 80134de:	682b      	ldr	r3, [r5, #0]
 80134e0:	b903      	cbnz	r3, 80134e4 <__sflush_r+0x7c>
 80134e2:	6560      	str	r0, [r4, #84]	; 0x54
 80134e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134e6:	602f      	str	r7, [r5, #0]
 80134e8:	2900      	cmp	r1, #0
 80134ea:	d0ca      	beq.n	8013482 <__sflush_r+0x1a>
 80134ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134f0:	4299      	cmp	r1, r3
 80134f2:	d002      	beq.n	80134fa <__sflush_r+0x92>
 80134f4:	4628      	mov	r0, r5
 80134f6:	f7ff fd79 	bl	8012fec <_free_r>
 80134fa:	2000      	movs	r0, #0
 80134fc:	6360      	str	r0, [r4, #52]	; 0x34
 80134fe:	e7c1      	b.n	8013484 <__sflush_r+0x1c>
 8013500:	6a21      	ldr	r1, [r4, #32]
 8013502:	2301      	movs	r3, #1
 8013504:	4628      	mov	r0, r5
 8013506:	47b0      	blx	r6
 8013508:	1c41      	adds	r1, r0, #1
 801350a:	d1c7      	bne.n	801349c <__sflush_r+0x34>
 801350c:	682b      	ldr	r3, [r5, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d0c4      	beq.n	801349c <__sflush_r+0x34>
 8013512:	2b1d      	cmp	r3, #29
 8013514:	d001      	beq.n	801351a <__sflush_r+0xb2>
 8013516:	2b16      	cmp	r3, #22
 8013518:	d101      	bne.n	801351e <__sflush_r+0xb6>
 801351a:	602f      	str	r7, [r5, #0]
 801351c:	e7b1      	b.n	8013482 <__sflush_r+0x1a>
 801351e:	89a3      	ldrh	r3, [r4, #12]
 8013520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013524:	81a3      	strh	r3, [r4, #12]
 8013526:	e7ad      	b.n	8013484 <__sflush_r+0x1c>
 8013528:	690f      	ldr	r7, [r1, #16]
 801352a:	2f00      	cmp	r7, #0
 801352c:	d0a9      	beq.n	8013482 <__sflush_r+0x1a>
 801352e:	0793      	lsls	r3, r2, #30
 8013530:	680e      	ldr	r6, [r1, #0]
 8013532:	bf08      	it	eq
 8013534:	694b      	ldreq	r3, [r1, #20]
 8013536:	600f      	str	r7, [r1, #0]
 8013538:	bf18      	it	ne
 801353a:	2300      	movne	r3, #0
 801353c:	eba6 0807 	sub.w	r8, r6, r7
 8013540:	608b      	str	r3, [r1, #8]
 8013542:	f1b8 0f00 	cmp.w	r8, #0
 8013546:	dd9c      	ble.n	8013482 <__sflush_r+0x1a>
 8013548:	6a21      	ldr	r1, [r4, #32]
 801354a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801354c:	4643      	mov	r3, r8
 801354e:	463a      	mov	r2, r7
 8013550:	4628      	mov	r0, r5
 8013552:	47b0      	blx	r6
 8013554:	2800      	cmp	r0, #0
 8013556:	dc06      	bgt.n	8013566 <__sflush_r+0xfe>
 8013558:	89a3      	ldrh	r3, [r4, #12]
 801355a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801355e:	81a3      	strh	r3, [r4, #12]
 8013560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013564:	e78e      	b.n	8013484 <__sflush_r+0x1c>
 8013566:	4407      	add	r7, r0
 8013568:	eba8 0800 	sub.w	r8, r8, r0
 801356c:	e7e9      	b.n	8013542 <__sflush_r+0xda>
 801356e:	bf00      	nop
 8013570:	20400001 	.word	0x20400001

08013574 <_fflush_r>:
 8013574:	b538      	push	{r3, r4, r5, lr}
 8013576:	690b      	ldr	r3, [r1, #16]
 8013578:	4605      	mov	r5, r0
 801357a:	460c      	mov	r4, r1
 801357c:	b913      	cbnz	r3, 8013584 <_fflush_r+0x10>
 801357e:	2500      	movs	r5, #0
 8013580:	4628      	mov	r0, r5
 8013582:	bd38      	pop	{r3, r4, r5, pc}
 8013584:	b118      	cbz	r0, 801358e <_fflush_r+0x1a>
 8013586:	6983      	ldr	r3, [r0, #24]
 8013588:	b90b      	cbnz	r3, 801358e <_fflush_r+0x1a>
 801358a:	f000 f887 	bl	801369c <__sinit>
 801358e:	4b14      	ldr	r3, [pc, #80]	; (80135e0 <_fflush_r+0x6c>)
 8013590:	429c      	cmp	r4, r3
 8013592:	d11b      	bne.n	80135cc <_fflush_r+0x58>
 8013594:	686c      	ldr	r4, [r5, #4]
 8013596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d0ef      	beq.n	801357e <_fflush_r+0xa>
 801359e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135a0:	07d0      	lsls	r0, r2, #31
 80135a2:	d404      	bmi.n	80135ae <_fflush_r+0x3a>
 80135a4:	0599      	lsls	r1, r3, #22
 80135a6:	d402      	bmi.n	80135ae <_fflush_r+0x3a>
 80135a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135aa:	f000 f915 	bl	80137d8 <__retarget_lock_acquire_recursive>
 80135ae:	4628      	mov	r0, r5
 80135b0:	4621      	mov	r1, r4
 80135b2:	f7ff ff59 	bl	8013468 <__sflush_r>
 80135b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135b8:	07da      	lsls	r2, r3, #31
 80135ba:	4605      	mov	r5, r0
 80135bc:	d4e0      	bmi.n	8013580 <_fflush_r+0xc>
 80135be:	89a3      	ldrh	r3, [r4, #12]
 80135c0:	059b      	lsls	r3, r3, #22
 80135c2:	d4dd      	bmi.n	8013580 <_fflush_r+0xc>
 80135c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135c6:	f000 f908 	bl	80137da <__retarget_lock_release_recursive>
 80135ca:	e7d9      	b.n	8013580 <_fflush_r+0xc>
 80135cc:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <_fflush_r+0x70>)
 80135ce:	429c      	cmp	r4, r3
 80135d0:	d101      	bne.n	80135d6 <_fflush_r+0x62>
 80135d2:	68ac      	ldr	r4, [r5, #8]
 80135d4:	e7df      	b.n	8013596 <_fflush_r+0x22>
 80135d6:	4b04      	ldr	r3, [pc, #16]	; (80135e8 <_fflush_r+0x74>)
 80135d8:	429c      	cmp	r4, r3
 80135da:	bf08      	it	eq
 80135dc:	68ec      	ldreq	r4, [r5, #12]
 80135de:	e7da      	b.n	8013596 <_fflush_r+0x22>
 80135e0:	08014348 	.word	0x08014348
 80135e4:	08014368 	.word	0x08014368
 80135e8:	08014328 	.word	0x08014328

080135ec <std>:
 80135ec:	2300      	movs	r3, #0
 80135ee:	b510      	push	{r4, lr}
 80135f0:	4604      	mov	r4, r0
 80135f2:	e9c0 3300 	strd	r3, r3, [r0]
 80135f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135fa:	6083      	str	r3, [r0, #8]
 80135fc:	8181      	strh	r1, [r0, #12]
 80135fe:	6643      	str	r3, [r0, #100]	; 0x64
 8013600:	81c2      	strh	r2, [r0, #14]
 8013602:	6183      	str	r3, [r0, #24]
 8013604:	4619      	mov	r1, r3
 8013606:	2208      	movs	r2, #8
 8013608:	305c      	adds	r0, #92	; 0x5c
 801360a:	f7ff fce7 	bl	8012fdc <memset>
 801360e:	4b05      	ldr	r3, [pc, #20]	; (8013624 <std+0x38>)
 8013610:	6263      	str	r3, [r4, #36]	; 0x24
 8013612:	4b05      	ldr	r3, [pc, #20]	; (8013628 <std+0x3c>)
 8013614:	62a3      	str	r3, [r4, #40]	; 0x28
 8013616:	4b05      	ldr	r3, [pc, #20]	; (801362c <std+0x40>)
 8013618:	62e3      	str	r3, [r4, #44]	; 0x2c
 801361a:	4b05      	ldr	r3, [pc, #20]	; (8013630 <std+0x44>)
 801361c:	6224      	str	r4, [r4, #32]
 801361e:	6323      	str	r3, [r4, #48]	; 0x30
 8013620:	bd10      	pop	{r4, pc}
 8013622:	bf00      	nop
 8013624:	08013e9d 	.word	0x08013e9d
 8013628:	08013ebf 	.word	0x08013ebf
 801362c:	08013ef7 	.word	0x08013ef7
 8013630:	08013f1b 	.word	0x08013f1b

08013634 <_cleanup_r>:
 8013634:	4901      	ldr	r1, [pc, #4]	; (801363c <_cleanup_r+0x8>)
 8013636:	f000 b8af 	b.w	8013798 <_fwalk_reent>
 801363a:	bf00      	nop
 801363c:	08013575 	.word	0x08013575

08013640 <__sfmoreglue>:
 8013640:	b570      	push	{r4, r5, r6, lr}
 8013642:	2268      	movs	r2, #104	; 0x68
 8013644:	1e4d      	subs	r5, r1, #1
 8013646:	4355      	muls	r5, r2
 8013648:	460e      	mov	r6, r1
 801364a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801364e:	f7ff fd39 	bl	80130c4 <_malloc_r>
 8013652:	4604      	mov	r4, r0
 8013654:	b140      	cbz	r0, 8013668 <__sfmoreglue+0x28>
 8013656:	2100      	movs	r1, #0
 8013658:	e9c0 1600 	strd	r1, r6, [r0]
 801365c:	300c      	adds	r0, #12
 801365e:	60a0      	str	r0, [r4, #8]
 8013660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013664:	f7ff fcba 	bl	8012fdc <memset>
 8013668:	4620      	mov	r0, r4
 801366a:	bd70      	pop	{r4, r5, r6, pc}

0801366c <__sfp_lock_acquire>:
 801366c:	4801      	ldr	r0, [pc, #4]	; (8013674 <__sfp_lock_acquire+0x8>)
 801366e:	f000 b8b3 	b.w	80137d8 <__retarget_lock_acquire_recursive>
 8013672:	bf00      	nop
 8013674:	24004f95 	.word	0x24004f95

08013678 <__sfp_lock_release>:
 8013678:	4801      	ldr	r0, [pc, #4]	; (8013680 <__sfp_lock_release+0x8>)
 801367a:	f000 b8ae 	b.w	80137da <__retarget_lock_release_recursive>
 801367e:	bf00      	nop
 8013680:	24004f95 	.word	0x24004f95

08013684 <__sinit_lock_acquire>:
 8013684:	4801      	ldr	r0, [pc, #4]	; (801368c <__sinit_lock_acquire+0x8>)
 8013686:	f000 b8a7 	b.w	80137d8 <__retarget_lock_acquire_recursive>
 801368a:	bf00      	nop
 801368c:	24004f96 	.word	0x24004f96

08013690 <__sinit_lock_release>:
 8013690:	4801      	ldr	r0, [pc, #4]	; (8013698 <__sinit_lock_release+0x8>)
 8013692:	f000 b8a2 	b.w	80137da <__retarget_lock_release_recursive>
 8013696:	bf00      	nop
 8013698:	24004f96 	.word	0x24004f96

0801369c <__sinit>:
 801369c:	b510      	push	{r4, lr}
 801369e:	4604      	mov	r4, r0
 80136a0:	f7ff fff0 	bl	8013684 <__sinit_lock_acquire>
 80136a4:	69a3      	ldr	r3, [r4, #24]
 80136a6:	b11b      	cbz	r3, 80136b0 <__sinit+0x14>
 80136a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136ac:	f7ff bff0 	b.w	8013690 <__sinit_lock_release>
 80136b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136b4:	6523      	str	r3, [r4, #80]	; 0x50
 80136b6:	4b13      	ldr	r3, [pc, #76]	; (8013704 <__sinit+0x68>)
 80136b8:	4a13      	ldr	r2, [pc, #76]	; (8013708 <__sinit+0x6c>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80136be:	42a3      	cmp	r3, r4
 80136c0:	bf04      	itt	eq
 80136c2:	2301      	moveq	r3, #1
 80136c4:	61a3      	streq	r3, [r4, #24]
 80136c6:	4620      	mov	r0, r4
 80136c8:	f000 f820 	bl	801370c <__sfp>
 80136cc:	6060      	str	r0, [r4, #4]
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 f81c 	bl	801370c <__sfp>
 80136d4:	60a0      	str	r0, [r4, #8]
 80136d6:	4620      	mov	r0, r4
 80136d8:	f000 f818 	bl	801370c <__sfp>
 80136dc:	2200      	movs	r2, #0
 80136de:	60e0      	str	r0, [r4, #12]
 80136e0:	2104      	movs	r1, #4
 80136e2:	6860      	ldr	r0, [r4, #4]
 80136e4:	f7ff ff82 	bl	80135ec <std>
 80136e8:	68a0      	ldr	r0, [r4, #8]
 80136ea:	2201      	movs	r2, #1
 80136ec:	2109      	movs	r1, #9
 80136ee:	f7ff ff7d 	bl	80135ec <std>
 80136f2:	68e0      	ldr	r0, [r4, #12]
 80136f4:	2202      	movs	r2, #2
 80136f6:	2112      	movs	r1, #18
 80136f8:	f7ff ff78 	bl	80135ec <std>
 80136fc:	2301      	movs	r3, #1
 80136fe:	61a3      	str	r3, [r4, #24]
 8013700:	e7d2      	b.n	80136a8 <__sinit+0xc>
 8013702:	bf00      	nop
 8013704:	08014324 	.word	0x08014324
 8013708:	08013635 	.word	0x08013635

0801370c <__sfp>:
 801370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370e:	4607      	mov	r7, r0
 8013710:	f7ff ffac 	bl	801366c <__sfp_lock_acquire>
 8013714:	4b1e      	ldr	r3, [pc, #120]	; (8013790 <__sfp+0x84>)
 8013716:	681e      	ldr	r6, [r3, #0]
 8013718:	69b3      	ldr	r3, [r6, #24]
 801371a:	b913      	cbnz	r3, 8013722 <__sfp+0x16>
 801371c:	4630      	mov	r0, r6
 801371e:	f7ff ffbd 	bl	801369c <__sinit>
 8013722:	3648      	adds	r6, #72	; 0x48
 8013724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013728:	3b01      	subs	r3, #1
 801372a:	d503      	bpl.n	8013734 <__sfp+0x28>
 801372c:	6833      	ldr	r3, [r6, #0]
 801372e:	b30b      	cbz	r3, 8013774 <__sfp+0x68>
 8013730:	6836      	ldr	r6, [r6, #0]
 8013732:	e7f7      	b.n	8013724 <__sfp+0x18>
 8013734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013738:	b9d5      	cbnz	r5, 8013770 <__sfp+0x64>
 801373a:	4b16      	ldr	r3, [pc, #88]	; (8013794 <__sfp+0x88>)
 801373c:	60e3      	str	r3, [r4, #12]
 801373e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013742:	6665      	str	r5, [r4, #100]	; 0x64
 8013744:	f000 f847 	bl	80137d6 <__retarget_lock_init_recursive>
 8013748:	f7ff ff96 	bl	8013678 <__sfp_lock_release>
 801374c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013754:	6025      	str	r5, [r4, #0]
 8013756:	61a5      	str	r5, [r4, #24]
 8013758:	2208      	movs	r2, #8
 801375a:	4629      	mov	r1, r5
 801375c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013760:	f7ff fc3c 	bl	8012fdc <memset>
 8013764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801376c:	4620      	mov	r0, r4
 801376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013770:	3468      	adds	r4, #104	; 0x68
 8013772:	e7d9      	b.n	8013728 <__sfp+0x1c>
 8013774:	2104      	movs	r1, #4
 8013776:	4638      	mov	r0, r7
 8013778:	f7ff ff62 	bl	8013640 <__sfmoreglue>
 801377c:	4604      	mov	r4, r0
 801377e:	6030      	str	r0, [r6, #0]
 8013780:	2800      	cmp	r0, #0
 8013782:	d1d5      	bne.n	8013730 <__sfp+0x24>
 8013784:	f7ff ff78 	bl	8013678 <__sfp_lock_release>
 8013788:	230c      	movs	r3, #12
 801378a:	603b      	str	r3, [r7, #0]
 801378c:	e7ee      	b.n	801376c <__sfp+0x60>
 801378e:	bf00      	nop
 8013790:	08014324 	.word	0x08014324
 8013794:	ffff0001 	.word	0xffff0001

08013798 <_fwalk_reent>:
 8013798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801379c:	4606      	mov	r6, r0
 801379e:	4688      	mov	r8, r1
 80137a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137a4:	2700      	movs	r7, #0
 80137a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137aa:	f1b9 0901 	subs.w	r9, r9, #1
 80137ae:	d505      	bpl.n	80137bc <_fwalk_reent+0x24>
 80137b0:	6824      	ldr	r4, [r4, #0]
 80137b2:	2c00      	cmp	r4, #0
 80137b4:	d1f7      	bne.n	80137a6 <_fwalk_reent+0xe>
 80137b6:	4638      	mov	r0, r7
 80137b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137bc:	89ab      	ldrh	r3, [r5, #12]
 80137be:	2b01      	cmp	r3, #1
 80137c0:	d907      	bls.n	80137d2 <_fwalk_reent+0x3a>
 80137c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137c6:	3301      	adds	r3, #1
 80137c8:	d003      	beq.n	80137d2 <_fwalk_reent+0x3a>
 80137ca:	4629      	mov	r1, r5
 80137cc:	4630      	mov	r0, r6
 80137ce:	47c0      	blx	r8
 80137d0:	4307      	orrs	r7, r0
 80137d2:	3568      	adds	r5, #104	; 0x68
 80137d4:	e7e9      	b.n	80137aa <_fwalk_reent+0x12>

080137d6 <__retarget_lock_init_recursive>:
 80137d6:	4770      	bx	lr

080137d8 <__retarget_lock_acquire_recursive>:
 80137d8:	4770      	bx	lr

080137da <__retarget_lock_release_recursive>:
 80137da:	4770      	bx	lr

080137dc <__swhatbuf_r>:
 80137dc:	b570      	push	{r4, r5, r6, lr}
 80137de:	460e      	mov	r6, r1
 80137e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137e4:	2900      	cmp	r1, #0
 80137e6:	b096      	sub	sp, #88	; 0x58
 80137e8:	4614      	mov	r4, r2
 80137ea:	461d      	mov	r5, r3
 80137ec:	da08      	bge.n	8013800 <__swhatbuf_r+0x24>
 80137ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80137f2:	2200      	movs	r2, #0
 80137f4:	602a      	str	r2, [r5, #0]
 80137f6:	061a      	lsls	r2, r3, #24
 80137f8:	d410      	bmi.n	801381c <__swhatbuf_r+0x40>
 80137fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137fe:	e00e      	b.n	801381e <__swhatbuf_r+0x42>
 8013800:	466a      	mov	r2, sp
 8013802:	f000 fbb1 	bl	8013f68 <_fstat_r>
 8013806:	2800      	cmp	r0, #0
 8013808:	dbf1      	blt.n	80137ee <__swhatbuf_r+0x12>
 801380a:	9a01      	ldr	r2, [sp, #4]
 801380c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013810:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013814:	425a      	negs	r2, r3
 8013816:	415a      	adcs	r2, r3
 8013818:	602a      	str	r2, [r5, #0]
 801381a:	e7ee      	b.n	80137fa <__swhatbuf_r+0x1e>
 801381c:	2340      	movs	r3, #64	; 0x40
 801381e:	2000      	movs	r0, #0
 8013820:	6023      	str	r3, [r4, #0]
 8013822:	b016      	add	sp, #88	; 0x58
 8013824:	bd70      	pop	{r4, r5, r6, pc}
	...

08013828 <__smakebuf_r>:
 8013828:	898b      	ldrh	r3, [r1, #12]
 801382a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801382c:	079d      	lsls	r5, r3, #30
 801382e:	4606      	mov	r6, r0
 8013830:	460c      	mov	r4, r1
 8013832:	d507      	bpl.n	8013844 <__smakebuf_r+0x1c>
 8013834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013838:	6023      	str	r3, [r4, #0]
 801383a:	6123      	str	r3, [r4, #16]
 801383c:	2301      	movs	r3, #1
 801383e:	6163      	str	r3, [r4, #20]
 8013840:	b002      	add	sp, #8
 8013842:	bd70      	pop	{r4, r5, r6, pc}
 8013844:	ab01      	add	r3, sp, #4
 8013846:	466a      	mov	r2, sp
 8013848:	f7ff ffc8 	bl	80137dc <__swhatbuf_r>
 801384c:	9900      	ldr	r1, [sp, #0]
 801384e:	4605      	mov	r5, r0
 8013850:	4630      	mov	r0, r6
 8013852:	f7ff fc37 	bl	80130c4 <_malloc_r>
 8013856:	b948      	cbnz	r0, 801386c <__smakebuf_r+0x44>
 8013858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801385c:	059a      	lsls	r2, r3, #22
 801385e:	d4ef      	bmi.n	8013840 <__smakebuf_r+0x18>
 8013860:	f023 0303 	bic.w	r3, r3, #3
 8013864:	f043 0302 	orr.w	r3, r3, #2
 8013868:	81a3      	strh	r3, [r4, #12]
 801386a:	e7e3      	b.n	8013834 <__smakebuf_r+0xc>
 801386c:	4b0d      	ldr	r3, [pc, #52]	; (80138a4 <__smakebuf_r+0x7c>)
 801386e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013870:	89a3      	ldrh	r3, [r4, #12]
 8013872:	6020      	str	r0, [r4, #0]
 8013874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013878:	81a3      	strh	r3, [r4, #12]
 801387a:	9b00      	ldr	r3, [sp, #0]
 801387c:	6163      	str	r3, [r4, #20]
 801387e:	9b01      	ldr	r3, [sp, #4]
 8013880:	6120      	str	r0, [r4, #16]
 8013882:	b15b      	cbz	r3, 801389c <__smakebuf_r+0x74>
 8013884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013888:	4630      	mov	r0, r6
 801388a:	f000 fb7f 	bl	8013f8c <_isatty_r>
 801388e:	b128      	cbz	r0, 801389c <__smakebuf_r+0x74>
 8013890:	89a3      	ldrh	r3, [r4, #12]
 8013892:	f023 0303 	bic.w	r3, r3, #3
 8013896:	f043 0301 	orr.w	r3, r3, #1
 801389a:	81a3      	strh	r3, [r4, #12]
 801389c:	89a0      	ldrh	r0, [r4, #12]
 801389e:	4305      	orrs	r5, r0
 80138a0:	81a5      	strh	r5, [r4, #12]
 80138a2:	e7cd      	b.n	8013840 <__smakebuf_r+0x18>
 80138a4:	08013635 	.word	0x08013635

080138a8 <__malloc_lock>:
 80138a8:	4801      	ldr	r0, [pc, #4]	; (80138b0 <__malloc_lock+0x8>)
 80138aa:	f7ff bf95 	b.w	80137d8 <__retarget_lock_acquire_recursive>
 80138ae:	bf00      	nop
 80138b0:	24004f94 	.word	0x24004f94

080138b4 <__malloc_unlock>:
 80138b4:	4801      	ldr	r0, [pc, #4]	; (80138bc <__malloc_unlock+0x8>)
 80138b6:	f7ff bf90 	b.w	80137da <__retarget_lock_release_recursive>
 80138ba:	bf00      	nop
 80138bc:	24004f94 	.word	0x24004f94

080138c0 <__sfputc_r>:
 80138c0:	6893      	ldr	r3, [r2, #8]
 80138c2:	3b01      	subs	r3, #1
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	b410      	push	{r4}
 80138c8:	6093      	str	r3, [r2, #8]
 80138ca:	da08      	bge.n	80138de <__sfputc_r+0x1e>
 80138cc:	6994      	ldr	r4, [r2, #24]
 80138ce:	42a3      	cmp	r3, r4
 80138d0:	db01      	blt.n	80138d6 <__sfputc_r+0x16>
 80138d2:	290a      	cmp	r1, #10
 80138d4:	d103      	bne.n	80138de <__sfputc_r+0x1e>
 80138d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138da:	f7ff bd05 	b.w	80132e8 <__swbuf_r>
 80138de:	6813      	ldr	r3, [r2, #0]
 80138e0:	1c58      	adds	r0, r3, #1
 80138e2:	6010      	str	r0, [r2, #0]
 80138e4:	7019      	strb	r1, [r3, #0]
 80138e6:	4608      	mov	r0, r1
 80138e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138ec:	4770      	bx	lr

080138ee <__sfputs_r>:
 80138ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138f0:	4606      	mov	r6, r0
 80138f2:	460f      	mov	r7, r1
 80138f4:	4614      	mov	r4, r2
 80138f6:	18d5      	adds	r5, r2, r3
 80138f8:	42ac      	cmp	r4, r5
 80138fa:	d101      	bne.n	8013900 <__sfputs_r+0x12>
 80138fc:	2000      	movs	r0, #0
 80138fe:	e007      	b.n	8013910 <__sfputs_r+0x22>
 8013900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013904:	463a      	mov	r2, r7
 8013906:	4630      	mov	r0, r6
 8013908:	f7ff ffda 	bl	80138c0 <__sfputc_r>
 801390c:	1c43      	adds	r3, r0, #1
 801390e:	d1f3      	bne.n	80138f8 <__sfputs_r+0xa>
 8013910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013914 <_vfiprintf_r>:
 8013914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	460d      	mov	r5, r1
 801391a:	b09d      	sub	sp, #116	; 0x74
 801391c:	4614      	mov	r4, r2
 801391e:	4698      	mov	r8, r3
 8013920:	4606      	mov	r6, r0
 8013922:	b118      	cbz	r0, 801392c <_vfiprintf_r+0x18>
 8013924:	6983      	ldr	r3, [r0, #24]
 8013926:	b90b      	cbnz	r3, 801392c <_vfiprintf_r+0x18>
 8013928:	f7ff feb8 	bl	801369c <__sinit>
 801392c:	4b89      	ldr	r3, [pc, #548]	; (8013b54 <_vfiprintf_r+0x240>)
 801392e:	429d      	cmp	r5, r3
 8013930:	d11b      	bne.n	801396a <_vfiprintf_r+0x56>
 8013932:	6875      	ldr	r5, [r6, #4]
 8013934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013936:	07d9      	lsls	r1, r3, #31
 8013938:	d405      	bmi.n	8013946 <_vfiprintf_r+0x32>
 801393a:	89ab      	ldrh	r3, [r5, #12]
 801393c:	059a      	lsls	r2, r3, #22
 801393e:	d402      	bmi.n	8013946 <_vfiprintf_r+0x32>
 8013940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013942:	f7ff ff49 	bl	80137d8 <__retarget_lock_acquire_recursive>
 8013946:	89ab      	ldrh	r3, [r5, #12]
 8013948:	071b      	lsls	r3, r3, #28
 801394a:	d501      	bpl.n	8013950 <_vfiprintf_r+0x3c>
 801394c:	692b      	ldr	r3, [r5, #16]
 801394e:	b9eb      	cbnz	r3, 801398c <_vfiprintf_r+0x78>
 8013950:	4629      	mov	r1, r5
 8013952:	4630      	mov	r0, r6
 8013954:	f7ff fd1a 	bl	801338c <__swsetup_r>
 8013958:	b1c0      	cbz	r0, 801398c <_vfiprintf_r+0x78>
 801395a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801395c:	07dc      	lsls	r4, r3, #31
 801395e:	d50e      	bpl.n	801397e <_vfiprintf_r+0x6a>
 8013960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013964:	b01d      	add	sp, #116	; 0x74
 8013966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396a:	4b7b      	ldr	r3, [pc, #492]	; (8013b58 <_vfiprintf_r+0x244>)
 801396c:	429d      	cmp	r5, r3
 801396e:	d101      	bne.n	8013974 <_vfiprintf_r+0x60>
 8013970:	68b5      	ldr	r5, [r6, #8]
 8013972:	e7df      	b.n	8013934 <_vfiprintf_r+0x20>
 8013974:	4b79      	ldr	r3, [pc, #484]	; (8013b5c <_vfiprintf_r+0x248>)
 8013976:	429d      	cmp	r5, r3
 8013978:	bf08      	it	eq
 801397a:	68f5      	ldreq	r5, [r6, #12]
 801397c:	e7da      	b.n	8013934 <_vfiprintf_r+0x20>
 801397e:	89ab      	ldrh	r3, [r5, #12]
 8013980:	0598      	lsls	r0, r3, #22
 8013982:	d4ed      	bmi.n	8013960 <_vfiprintf_r+0x4c>
 8013984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013986:	f7ff ff28 	bl	80137da <__retarget_lock_release_recursive>
 801398a:	e7e9      	b.n	8013960 <_vfiprintf_r+0x4c>
 801398c:	2300      	movs	r3, #0
 801398e:	9309      	str	r3, [sp, #36]	; 0x24
 8013990:	2320      	movs	r3, #32
 8013992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013996:	f8cd 800c 	str.w	r8, [sp, #12]
 801399a:	2330      	movs	r3, #48	; 0x30
 801399c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b60 <_vfiprintf_r+0x24c>
 80139a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139a4:	f04f 0901 	mov.w	r9, #1
 80139a8:	4623      	mov	r3, r4
 80139aa:	469a      	mov	sl, r3
 80139ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139b0:	b10a      	cbz	r2, 80139b6 <_vfiprintf_r+0xa2>
 80139b2:	2a25      	cmp	r2, #37	; 0x25
 80139b4:	d1f9      	bne.n	80139aa <_vfiprintf_r+0x96>
 80139b6:	ebba 0b04 	subs.w	fp, sl, r4
 80139ba:	d00b      	beq.n	80139d4 <_vfiprintf_r+0xc0>
 80139bc:	465b      	mov	r3, fp
 80139be:	4622      	mov	r2, r4
 80139c0:	4629      	mov	r1, r5
 80139c2:	4630      	mov	r0, r6
 80139c4:	f7ff ff93 	bl	80138ee <__sfputs_r>
 80139c8:	3001      	adds	r0, #1
 80139ca:	f000 80aa 	beq.w	8013b22 <_vfiprintf_r+0x20e>
 80139ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139d0:	445a      	add	r2, fp
 80139d2:	9209      	str	r2, [sp, #36]	; 0x24
 80139d4:	f89a 3000 	ldrb.w	r3, [sl]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	f000 80a2 	beq.w	8013b22 <_vfiprintf_r+0x20e>
 80139de:	2300      	movs	r3, #0
 80139e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139e8:	f10a 0a01 	add.w	sl, sl, #1
 80139ec:	9304      	str	r3, [sp, #16]
 80139ee:	9307      	str	r3, [sp, #28]
 80139f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139f4:	931a      	str	r3, [sp, #104]	; 0x68
 80139f6:	4654      	mov	r4, sl
 80139f8:	2205      	movs	r2, #5
 80139fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139fe:	4858      	ldr	r0, [pc, #352]	; (8013b60 <_vfiprintf_r+0x24c>)
 8013a00:	f7ec fc6e 	bl	80002e0 <memchr>
 8013a04:	9a04      	ldr	r2, [sp, #16]
 8013a06:	b9d8      	cbnz	r0, 8013a40 <_vfiprintf_r+0x12c>
 8013a08:	06d1      	lsls	r1, r2, #27
 8013a0a:	bf44      	itt	mi
 8013a0c:	2320      	movmi	r3, #32
 8013a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a12:	0713      	lsls	r3, r2, #28
 8013a14:	bf44      	itt	mi
 8013a16:	232b      	movmi	r3, #43	; 0x2b
 8013a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a20:	2b2a      	cmp	r3, #42	; 0x2a
 8013a22:	d015      	beq.n	8013a50 <_vfiprintf_r+0x13c>
 8013a24:	9a07      	ldr	r2, [sp, #28]
 8013a26:	4654      	mov	r4, sl
 8013a28:	2000      	movs	r0, #0
 8013a2a:	f04f 0c0a 	mov.w	ip, #10
 8013a2e:	4621      	mov	r1, r4
 8013a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a34:	3b30      	subs	r3, #48	; 0x30
 8013a36:	2b09      	cmp	r3, #9
 8013a38:	d94e      	bls.n	8013ad8 <_vfiprintf_r+0x1c4>
 8013a3a:	b1b0      	cbz	r0, 8013a6a <_vfiprintf_r+0x156>
 8013a3c:	9207      	str	r2, [sp, #28]
 8013a3e:	e014      	b.n	8013a6a <_vfiprintf_r+0x156>
 8013a40:	eba0 0308 	sub.w	r3, r0, r8
 8013a44:	fa09 f303 	lsl.w	r3, r9, r3
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	9304      	str	r3, [sp, #16]
 8013a4c:	46a2      	mov	sl, r4
 8013a4e:	e7d2      	b.n	80139f6 <_vfiprintf_r+0xe2>
 8013a50:	9b03      	ldr	r3, [sp, #12]
 8013a52:	1d19      	adds	r1, r3, #4
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	9103      	str	r1, [sp, #12]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	bfbb      	ittet	lt
 8013a5c:	425b      	neglt	r3, r3
 8013a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8013a62:	9307      	strge	r3, [sp, #28]
 8013a64:	9307      	strlt	r3, [sp, #28]
 8013a66:	bfb8      	it	lt
 8013a68:	9204      	strlt	r2, [sp, #16]
 8013a6a:	7823      	ldrb	r3, [r4, #0]
 8013a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8013a6e:	d10c      	bne.n	8013a8a <_vfiprintf_r+0x176>
 8013a70:	7863      	ldrb	r3, [r4, #1]
 8013a72:	2b2a      	cmp	r3, #42	; 0x2a
 8013a74:	d135      	bne.n	8013ae2 <_vfiprintf_r+0x1ce>
 8013a76:	9b03      	ldr	r3, [sp, #12]
 8013a78:	1d1a      	adds	r2, r3, #4
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	9203      	str	r2, [sp, #12]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	bfb8      	it	lt
 8013a82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a86:	3402      	adds	r4, #2
 8013a88:	9305      	str	r3, [sp, #20]
 8013a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b70 <_vfiprintf_r+0x25c>
 8013a8e:	7821      	ldrb	r1, [r4, #0]
 8013a90:	2203      	movs	r2, #3
 8013a92:	4650      	mov	r0, sl
 8013a94:	f7ec fc24 	bl	80002e0 <memchr>
 8013a98:	b140      	cbz	r0, 8013aac <_vfiprintf_r+0x198>
 8013a9a:	2340      	movs	r3, #64	; 0x40
 8013a9c:	eba0 000a 	sub.w	r0, r0, sl
 8013aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8013aa4:	9b04      	ldr	r3, [sp, #16]
 8013aa6:	4303      	orrs	r3, r0
 8013aa8:	3401      	adds	r4, #1
 8013aaa:	9304      	str	r3, [sp, #16]
 8013aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ab0:	482c      	ldr	r0, [pc, #176]	; (8013b64 <_vfiprintf_r+0x250>)
 8013ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ab6:	2206      	movs	r2, #6
 8013ab8:	f7ec fc12 	bl	80002e0 <memchr>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d03f      	beq.n	8013b40 <_vfiprintf_r+0x22c>
 8013ac0:	4b29      	ldr	r3, [pc, #164]	; (8013b68 <_vfiprintf_r+0x254>)
 8013ac2:	bb1b      	cbnz	r3, 8013b0c <_vfiprintf_r+0x1f8>
 8013ac4:	9b03      	ldr	r3, [sp, #12]
 8013ac6:	3307      	adds	r3, #7
 8013ac8:	f023 0307 	bic.w	r3, r3, #7
 8013acc:	3308      	adds	r3, #8
 8013ace:	9303      	str	r3, [sp, #12]
 8013ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ad2:	443b      	add	r3, r7
 8013ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ad6:	e767      	b.n	80139a8 <_vfiprintf_r+0x94>
 8013ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013adc:	460c      	mov	r4, r1
 8013ade:	2001      	movs	r0, #1
 8013ae0:	e7a5      	b.n	8013a2e <_vfiprintf_r+0x11a>
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	3401      	adds	r4, #1
 8013ae6:	9305      	str	r3, [sp, #20]
 8013ae8:	4619      	mov	r1, r3
 8013aea:	f04f 0c0a 	mov.w	ip, #10
 8013aee:	4620      	mov	r0, r4
 8013af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013af4:	3a30      	subs	r2, #48	; 0x30
 8013af6:	2a09      	cmp	r2, #9
 8013af8:	d903      	bls.n	8013b02 <_vfiprintf_r+0x1ee>
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d0c5      	beq.n	8013a8a <_vfiprintf_r+0x176>
 8013afe:	9105      	str	r1, [sp, #20]
 8013b00:	e7c3      	b.n	8013a8a <_vfiprintf_r+0x176>
 8013b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b06:	4604      	mov	r4, r0
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e7f0      	b.n	8013aee <_vfiprintf_r+0x1da>
 8013b0c:	ab03      	add	r3, sp, #12
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	462a      	mov	r2, r5
 8013b12:	4b16      	ldr	r3, [pc, #88]	; (8013b6c <_vfiprintf_r+0x258>)
 8013b14:	a904      	add	r1, sp, #16
 8013b16:	4630      	mov	r0, r6
 8013b18:	f3af 8000 	nop.w
 8013b1c:	4607      	mov	r7, r0
 8013b1e:	1c78      	adds	r0, r7, #1
 8013b20:	d1d6      	bne.n	8013ad0 <_vfiprintf_r+0x1bc>
 8013b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b24:	07d9      	lsls	r1, r3, #31
 8013b26:	d405      	bmi.n	8013b34 <_vfiprintf_r+0x220>
 8013b28:	89ab      	ldrh	r3, [r5, #12]
 8013b2a:	059a      	lsls	r2, r3, #22
 8013b2c:	d402      	bmi.n	8013b34 <_vfiprintf_r+0x220>
 8013b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b30:	f7ff fe53 	bl	80137da <__retarget_lock_release_recursive>
 8013b34:	89ab      	ldrh	r3, [r5, #12]
 8013b36:	065b      	lsls	r3, r3, #25
 8013b38:	f53f af12 	bmi.w	8013960 <_vfiprintf_r+0x4c>
 8013b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b3e:	e711      	b.n	8013964 <_vfiprintf_r+0x50>
 8013b40:	ab03      	add	r3, sp, #12
 8013b42:	9300      	str	r3, [sp, #0]
 8013b44:	462a      	mov	r2, r5
 8013b46:	4b09      	ldr	r3, [pc, #36]	; (8013b6c <_vfiprintf_r+0x258>)
 8013b48:	a904      	add	r1, sp, #16
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	f000 f880 	bl	8013c50 <_printf_i>
 8013b50:	e7e4      	b.n	8013b1c <_vfiprintf_r+0x208>
 8013b52:	bf00      	nop
 8013b54:	08014348 	.word	0x08014348
 8013b58:	08014368 	.word	0x08014368
 8013b5c:	08014328 	.word	0x08014328
 8013b60:	08014388 	.word	0x08014388
 8013b64:	08014392 	.word	0x08014392
 8013b68:	00000000 	.word	0x00000000
 8013b6c:	080138ef 	.word	0x080138ef
 8013b70:	0801438e 	.word	0x0801438e

08013b74 <_printf_common>:
 8013b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b78:	4616      	mov	r6, r2
 8013b7a:	4699      	mov	r9, r3
 8013b7c:	688a      	ldr	r2, [r1, #8]
 8013b7e:	690b      	ldr	r3, [r1, #16]
 8013b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b84:	4293      	cmp	r3, r2
 8013b86:	bfb8      	it	lt
 8013b88:	4613      	movlt	r3, r2
 8013b8a:	6033      	str	r3, [r6, #0]
 8013b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b90:	4607      	mov	r7, r0
 8013b92:	460c      	mov	r4, r1
 8013b94:	b10a      	cbz	r2, 8013b9a <_printf_common+0x26>
 8013b96:	3301      	adds	r3, #1
 8013b98:	6033      	str	r3, [r6, #0]
 8013b9a:	6823      	ldr	r3, [r4, #0]
 8013b9c:	0699      	lsls	r1, r3, #26
 8013b9e:	bf42      	ittt	mi
 8013ba0:	6833      	ldrmi	r3, [r6, #0]
 8013ba2:	3302      	addmi	r3, #2
 8013ba4:	6033      	strmi	r3, [r6, #0]
 8013ba6:	6825      	ldr	r5, [r4, #0]
 8013ba8:	f015 0506 	ands.w	r5, r5, #6
 8013bac:	d106      	bne.n	8013bbc <_printf_common+0x48>
 8013bae:	f104 0a19 	add.w	sl, r4, #25
 8013bb2:	68e3      	ldr	r3, [r4, #12]
 8013bb4:	6832      	ldr	r2, [r6, #0]
 8013bb6:	1a9b      	subs	r3, r3, r2
 8013bb8:	42ab      	cmp	r3, r5
 8013bba:	dc26      	bgt.n	8013c0a <_printf_common+0x96>
 8013bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013bc0:	1e13      	subs	r3, r2, #0
 8013bc2:	6822      	ldr	r2, [r4, #0]
 8013bc4:	bf18      	it	ne
 8013bc6:	2301      	movne	r3, #1
 8013bc8:	0692      	lsls	r2, r2, #26
 8013bca:	d42b      	bmi.n	8013c24 <_printf_common+0xb0>
 8013bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	4638      	mov	r0, r7
 8013bd4:	47c0      	blx	r8
 8013bd6:	3001      	adds	r0, #1
 8013bd8:	d01e      	beq.n	8013c18 <_printf_common+0xa4>
 8013bda:	6823      	ldr	r3, [r4, #0]
 8013bdc:	68e5      	ldr	r5, [r4, #12]
 8013bde:	6832      	ldr	r2, [r6, #0]
 8013be0:	f003 0306 	and.w	r3, r3, #6
 8013be4:	2b04      	cmp	r3, #4
 8013be6:	bf08      	it	eq
 8013be8:	1aad      	subeq	r5, r5, r2
 8013bea:	68a3      	ldr	r3, [r4, #8]
 8013bec:	6922      	ldr	r2, [r4, #16]
 8013bee:	bf0c      	ite	eq
 8013bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bf4:	2500      	movne	r5, #0
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	bfc4      	itt	gt
 8013bfa:	1a9b      	subgt	r3, r3, r2
 8013bfc:	18ed      	addgt	r5, r5, r3
 8013bfe:	2600      	movs	r6, #0
 8013c00:	341a      	adds	r4, #26
 8013c02:	42b5      	cmp	r5, r6
 8013c04:	d11a      	bne.n	8013c3c <_printf_common+0xc8>
 8013c06:	2000      	movs	r0, #0
 8013c08:	e008      	b.n	8013c1c <_printf_common+0xa8>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	4652      	mov	r2, sl
 8013c0e:	4649      	mov	r1, r9
 8013c10:	4638      	mov	r0, r7
 8013c12:	47c0      	blx	r8
 8013c14:	3001      	adds	r0, #1
 8013c16:	d103      	bne.n	8013c20 <_printf_common+0xac>
 8013c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c20:	3501      	adds	r5, #1
 8013c22:	e7c6      	b.n	8013bb2 <_printf_common+0x3e>
 8013c24:	18e1      	adds	r1, r4, r3
 8013c26:	1c5a      	adds	r2, r3, #1
 8013c28:	2030      	movs	r0, #48	; 0x30
 8013c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c2e:	4422      	add	r2, r4
 8013c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c38:	3302      	adds	r3, #2
 8013c3a:	e7c7      	b.n	8013bcc <_printf_common+0x58>
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	4622      	mov	r2, r4
 8013c40:	4649      	mov	r1, r9
 8013c42:	4638      	mov	r0, r7
 8013c44:	47c0      	blx	r8
 8013c46:	3001      	adds	r0, #1
 8013c48:	d0e6      	beq.n	8013c18 <_printf_common+0xa4>
 8013c4a:	3601      	adds	r6, #1
 8013c4c:	e7d9      	b.n	8013c02 <_printf_common+0x8e>
	...

08013c50 <_printf_i>:
 8013c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c54:	7e0f      	ldrb	r7, [r1, #24]
 8013c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c58:	2f78      	cmp	r7, #120	; 0x78
 8013c5a:	4691      	mov	r9, r2
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	460c      	mov	r4, r1
 8013c60:	469a      	mov	sl, r3
 8013c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c66:	d807      	bhi.n	8013c78 <_printf_i+0x28>
 8013c68:	2f62      	cmp	r7, #98	; 0x62
 8013c6a:	d80a      	bhi.n	8013c82 <_printf_i+0x32>
 8013c6c:	2f00      	cmp	r7, #0
 8013c6e:	f000 80d8 	beq.w	8013e22 <_printf_i+0x1d2>
 8013c72:	2f58      	cmp	r7, #88	; 0x58
 8013c74:	f000 80a3 	beq.w	8013dbe <_printf_i+0x16e>
 8013c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c80:	e03a      	b.n	8013cf8 <_printf_i+0xa8>
 8013c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c86:	2b15      	cmp	r3, #21
 8013c88:	d8f6      	bhi.n	8013c78 <_printf_i+0x28>
 8013c8a:	a101      	add	r1, pc, #4	; (adr r1, 8013c90 <_printf_i+0x40>)
 8013c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c90:	08013ce9 	.word	0x08013ce9
 8013c94:	08013cfd 	.word	0x08013cfd
 8013c98:	08013c79 	.word	0x08013c79
 8013c9c:	08013c79 	.word	0x08013c79
 8013ca0:	08013c79 	.word	0x08013c79
 8013ca4:	08013c79 	.word	0x08013c79
 8013ca8:	08013cfd 	.word	0x08013cfd
 8013cac:	08013c79 	.word	0x08013c79
 8013cb0:	08013c79 	.word	0x08013c79
 8013cb4:	08013c79 	.word	0x08013c79
 8013cb8:	08013c79 	.word	0x08013c79
 8013cbc:	08013e09 	.word	0x08013e09
 8013cc0:	08013d2d 	.word	0x08013d2d
 8013cc4:	08013deb 	.word	0x08013deb
 8013cc8:	08013c79 	.word	0x08013c79
 8013ccc:	08013c79 	.word	0x08013c79
 8013cd0:	08013e2b 	.word	0x08013e2b
 8013cd4:	08013c79 	.word	0x08013c79
 8013cd8:	08013d2d 	.word	0x08013d2d
 8013cdc:	08013c79 	.word	0x08013c79
 8013ce0:	08013c79 	.word	0x08013c79
 8013ce4:	08013df3 	.word	0x08013df3
 8013ce8:	682b      	ldr	r3, [r5, #0]
 8013cea:	1d1a      	adds	r2, r3, #4
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	602a      	str	r2, [r5, #0]
 8013cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e0a3      	b.n	8013e44 <_printf_i+0x1f4>
 8013cfc:	6820      	ldr	r0, [r4, #0]
 8013cfe:	6829      	ldr	r1, [r5, #0]
 8013d00:	0606      	lsls	r6, r0, #24
 8013d02:	f101 0304 	add.w	r3, r1, #4
 8013d06:	d50a      	bpl.n	8013d1e <_printf_i+0xce>
 8013d08:	680e      	ldr	r6, [r1, #0]
 8013d0a:	602b      	str	r3, [r5, #0]
 8013d0c:	2e00      	cmp	r6, #0
 8013d0e:	da03      	bge.n	8013d18 <_printf_i+0xc8>
 8013d10:	232d      	movs	r3, #45	; 0x2d
 8013d12:	4276      	negs	r6, r6
 8013d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d18:	485e      	ldr	r0, [pc, #376]	; (8013e94 <_printf_i+0x244>)
 8013d1a:	230a      	movs	r3, #10
 8013d1c:	e019      	b.n	8013d52 <_printf_i+0x102>
 8013d1e:	680e      	ldr	r6, [r1, #0]
 8013d20:	602b      	str	r3, [r5, #0]
 8013d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d26:	bf18      	it	ne
 8013d28:	b236      	sxthne	r6, r6
 8013d2a:	e7ef      	b.n	8013d0c <_printf_i+0xbc>
 8013d2c:	682b      	ldr	r3, [r5, #0]
 8013d2e:	6820      	ldr	r0, [r4, #0]
 8013d30:	1d19      	adds	r1, r3, #4
 8013d32:	6029      	str	r1, [r5, #0]
 8013d34:	0601      	lsls	r1, r0, #24
 8013d36:	d501      	bpl.n	8013d3c <_printf_i+0xec>
 8013d38:	681e      	ldr	r6, [r3, #0]
 8013d3a:	e002      	b.n	8013d42 <_printf_i+0xf2>
 8013d3c:	0646      	lsls	r6, r0, #25
 8013d3e:	d5fb      	bpl.n	8013d38 <_printf_i+0xe8>
 8013d40:	881e      	ldrh	r6, [r3, #0]
 8013d42:	4854      	ldr	r0, [pc, #336]	; (8013e94 <_printf_i+0x244>)
 8013d44:	2f6f      	cmp	r7, #111	; 0x6f
 8013d46:	bf0c      	ite	eq
 8013d48:	2308      	moveq	r3, #8
 8013d4a:	230a      	movne	r3, #10
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d52:	6865      	ldr	r5, [r4, #4]
 8013d54:	60a5      	str	r5, [r4, #8]
 8013d56:	2d00      	cmp	r5, #0
 8013d58:	bfa2      	ittt	ge
 8013d5a:	6821      	ldrge	r1, [r4, #0]
 8013d5c:	f021 0104 	bicge.w	r1, r1, #4
 8013d60:	6021      	strge	r1, [r4, #0]
 8013d62:	b90e      	cbnz	r6, 8013d68 <_printf_i+0x118>
 8013d64:	2d00      	cmp	r5, #0
 8013d66:	d04d      	beq.n	8013e04 <_printf_i+0x1b4>
 8013d68:	4615      	mov	r5, r2
 8013d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8013d72:	5dc7      	ldrb	r7, [r0, r7]
 8013d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d78:	4637      	mov	r7, r6
 8013d7a:	42bb      	cmp	r3, r7
 8013d7c:	460e      	mov	r6, r1
 8013d7e:	d9f4      	bls.n	8013d6a <_printf_i+0x11a>
 8013d80:	2b08      	cmp	r3, #8
 8013d82:	d10b      	bne.n	8013d9c <_printf_i+0x14c>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	07de      	lsls	r6, r3, #31
 8013d88:	d508      	bpl.n	8013d9c <_printf_i+0x14c>
 8013d8a:	6923      	ldr	r3, [r4, #16]
 8013d8c:	6861      	ldr	r1, [r4, #4]
 8013d8e:	4299      	cmp	r1, r3
 8013d90:	bfde      	ittt	le
 8013d92:	2330      	movle	r3, #48	; 0x30
 8013d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013d9c:	1b52      	subs	r2, r2, r5
 8013d9e:	6122      	str	r2, [r4, #16]
 8013da0:	f8cd a000 	str.w	sl, [sp]
 8013da4:	464b      	mov	r3, r9
 8013da6:	aa03      	add	r2, sp, #12
 8013da8:	4621      	mov	r1, r4
 8013daa:	4640      	mov	r0, r8
 8013dac:	f7ff fee2 	bl	8013b74 <_printf_common>
 8013db0:	3001      	adds	r0, #1
 8013db2:	d14c      	bne.n	8013e4e <_printf_i+0x1fe>
 8013db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013db8:	b004      	add	sp, #16
 8013dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dbe:	4835      	ldr	r0, [pc, #212]	; (8013e94 <_printf_i+0x244>)
 8013dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013dc4:	6829      	ldr	r1, [r5, #0]
 8013dc6:	6823      	ldr	r3, [r4, #0]
 8013dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8013dcc:	6029      	str	r1, [r5, #0]
 8013dce:	061d      	lsls	r5, r3, #24
 8013dd0:	d514      	bpl.n	8013dfc <_printf_i+0x1ac>
 8013dd2:	07df      	lsls	r7, r3, #31
 8013dd4:	bf44      	itt	mi
 8013dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8013dda:	6023      	strmi	r3, [r4, #0]
 8013ddc:	b91e      	cbnz	r6, 8013de6 <_printf_i+0x196>
 8013dde:	6823      	ldr	r3, [r4, #0]
 8013de0:	f023 0320 	bic.w	r3, r3, #32
 8013de4:	6023      	str	r3, [r4, #0]
 8013de6:	2310      	movs	r3, #16
 8013de8:	e7b0      	b.n	8013d4c <_printf_i+0xfc>
 8013dea:	6823      	ldr	r3, [r4, #0]
 8013dec:	f043 0320 	orr.w	r3, r3, #32
 8013df0:	6023      	str	r3, [r4, #0]
 8013df2:	2378      	movs	r3, #120	; 0x78
 8013df4:	4828      	ldr	r0, [pc, #160]	; (8013e98 <_printf_i+0x248>)
 8013df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013dfa:	e7e3      	b.n	8013dc4 <_printf_i+0x174>
 8013dfc:	0659      	lsls	r1, r3, #25
 8013dfe:	bf48      	it	mi
 8013e00:	b2b6      	uxthmi	r6, r6
 8013e02:	e7e6      	b.n	8013dd2 <_printf_i+0x182>
 8013e04:	4615      	mov	r5, r2
 8013e06:	e7bb      	b.n	8013d80 <_printf_i+0x130>
 8013e08:	682b      	ldr	r3, [r5, #0]
 8013e0a:	6826      	ldr	r6, [r4, #0]
 8013e0c:	6961      	ldr	r1, [r4, #20]
 8013e0e:	1d18      	adds	r0, r3, #4
 8013e10:	6028      	str	r0, [r5, #0]
 8013e12:	0635      	lsls	r5, r6, #24
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	d501      	bpl.n	8013e1c <_printf_i+0x1cc>
 8013e18:	6019      	str	r1, [r3, #0]
 8013e1a:	e002      	b.n	8013e22 <_printf_i+0x1d2>
 8013e1c:	0670      	lsls	r0, r6, #25
 8013e1e:	d5fb      	bpl.n	8013e18 <_printf_i+0x1c8>
 8013e20:	8019      	strh	r1, [r3, #0]
 8013e22:	2300      	movs	r3, #0
 8013e24:	6123      	str	r3, [r4, #16]
 8013e26:	4615      	mov	r5, r2
 8013e28:	e7ba      	b.n	8013da0 <_printf_i+0x150>
 8013e2a:	682b      	ldr	r3, [r5, #0]
 8013e2c:	1d1a      	adds	r2, r3, #4
 8013e2e:	602a      	str	r2, [r5, #0]
 8013e30:	681d      	ldr	r5, [r3, #0]
 8013e32:	6862      	ldr	r2, [r4, #4]
 8013e34:	2100      	movs	r1, #0
 8013e36:	4628      	mov	r0, r5
 8013e38:	f7ec fa52 	bl	80002e0 <memchr>
 8013e3c:	b108      	cbz	r0, 8013e42 <_printf_i+0x1f2>
 8013e3e:	1b40      	subs	r0, r0, r5
 8013e40:	6060      	str	r0, [r4, #4]
 8013e42:	6863      	ldr	r3, [r4, #4]
 8013e44:	6123      	str	r3, [r4, #16]
 8013e46:	2300      	movs	r3, #0
 8013e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e4c:	e7a8      	b.n	8013da0 <_printf_i+0x150>
 8013e4e:	6923      	ldr	r3, [r4, #16]
 8013e50:	462a      	mov	r2, r5
 8013e52:	4649      	mov	r1, r9
 8013e54:	4640      	mov	r0, r8
 8013e56:	47d0      	blx	sl
 8013e58:	3001      	adds	r0, #1
 8013e5a:	d0ab      	beq.n	8013db4 <_printf_i+0x164>
 8013e5c:	6823      	ldr	r3, [r4, #0]
 8013e5e:	079b      	lsls	r3, r3, #30
 8013e60:	d413      	bmi.n	8013e8a <_printf_i+0x23a>
 8013e62:	68e0      	ldr	r0, [r4, #12]
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	4298      	cmp	r0, r3
 8013e68:	bfb8      	it	lt
 8013e6a:	4618      	movlt	r0, r3
 8013e6c:	e7a4      	b.n	8013db8 <_printf_i+0x168>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	4632      	mov	r2, r6
 8013e72:	4649      	mov	r1, r9
 8013e74:	4640      	mov	r0, r8
 8013e76:	47d0      	blx	sl
 8013e78:	3001      	adds	r0, #1
 8013e7a:	d09b      	beq.n	8013db4 <_printf_i+0x164>
 8013e7c:	3501      	adds	r5, #1
 8013e7e:	68e3      	ldr	r3, [r4, #12]
 8013e80:	9903      	ldr	r1, [sp, #12]
 8013e82:	1a5b      	subs	r3, r3, r1
 8013e84:	42ab      	cmp	r3, r5
 8013e86:	dcf2      	bgt.n	8013e6e <_printf_i+0x21e>
 8013e88:	e7eb      	b.n	8013e62 <_printf_i+0x212>
 8013e8a:	2500      	movs	r5, #0
 8013e8c:	f104 0619 	add.w	r6, r4, #25
 8013e90:	e7f5      	b.n	8013e7e <_printf_i+0x22e>
 8013e92:	bf00      	nop
 8013e94:	08014399 	.word	0x08014399
 8013e98:	080143aa 	.word	0x080143aa

08013e9c <__sread>:
 8013e9c:	b510      	push	{r4, lr}
 8013e9e:	460c      	mov	r4, r1
 8013ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ea4:	f000 f894 	bl	8013fd0 <_read_r>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	bfab      	itete	ge
 8013eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013eae:	89a3      	ldrhlt	r3, [r4, #12]
 8013eb0:	181b      	addge	r3, r3, r0
 8013eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013eb6:	bfac      	ite	ge
 8013eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013eba:	81a3      	strhlt	r3, [r4, #12]
 8013ebc:	bd10      	pop	{r4, pc}

08013ebe <__swrite>:
 8013ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ec2:	461f      	mov	r7, r3
 8013ec4:	898b      	ldrh	r3, [r1, #12]
 8013ec6:	05db      	lsls	r3, r3, #23
 8013ec8:	4605      	mov	r5, r0
 8013eca:	460c      	mov	r4, r1
 8013ecc:	4616      	mov	r6, r2
 8013ece:	d505      	bpl.n	8013edc <__swrite+0x1e>
 8013ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ed4:	2302      	movs	r3, #2
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	f000 f868 	bl	8013fac <_lseek_r>
 8013edc:	89a3      	ldrh	r3, [r4, #12]
 8013ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ee6:	81a3      	strh	r3, [r4, #12]
 8013ee8:	4632      	mov	r2, r6
 8013eea:	463b      	mov	r3, r7
 8013eec:	4628      	mov	r0, r5
 8013eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef2:	f000 b817 	b.w	8013f24 <_write_r>

08013ef6 <__sseek>:
 8013ef6:	b510      	push	{r4, lr}
 8013ef8:	460c      	mov	r4, r1
 8013efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013efe:	f000 f855 	bl	8013fac <_lseek_r>
 8013f02:	1c43      	adds	r3, r0, #1
 8013f04:	89a3      	ldrh	r3, [r4, #12]
 8013f06:	bf15      	itete	ne
 8013f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f12:	81a3      	strheq	r3, [r4, #12]
 8013f14:	bf18      	it	ne
 8013f16:	81a3      	strhne	r3, [r4, #12]
 8013f18:	bd10      	pop	{r4, pc}

08013f1a <__sclose>:
 8013f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f1e:	f000 b813 	b.w	8013f48 <_close_r>
	...

08013f24 <_write_r>:
 8013f24:	b538      	push	{r3, r4, r5, lr}
 8013f26:	4d07      	ldr	r5, [pc, #28]	; (8013f44 <_write_r+0x20>)
 8013f28:	4604      	mov	r4, r0
 8013f2a:	4608      	mov	r0, r1
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	2200      	movs	r2, #0
 8013f30:	602a      	str	r2, [r5, #0]
 8013f32:	461a      	mov	r2, r3
 8013f34:	f7ee fba9 	bl	800268a <_write>
 8013f38:	1c43      	adds	r3, r0, #1
 8013f3a:	d102      	bne.n	8013f42 <_write_r+0x1e>
 8013f3c:	682b      	ldr	r3, [r5, #0]
 8013f3e:	b103      	cbz	r3, 8013f42 <_write_r+0x1e>
 8013f40:	6023      	str	r3, [r4, #0]
 8013f42:	bd38      	pop	{r3, r4, r5, pc}
 8013f44:	24004f98 	.word	0x24004f98

08013f48 <_close_r>:
 8013f48:	b538      	push	{r3, r4, r5, lr}
 8013f4a:	4d06      	ldr	r5, [pc, #24]	; (8013f64 <_close_r+0x1c>)
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4608      	mov	r0, r1
 8013f52:	602b      	str	r3, [r5, #0]
 8013f54:	f7ee fbb5 	bl	80026c2 <_close>
 8013f58:	1c43      	adds	r3, r0, #1
 8013f5a:	d102      	bne.n	8013f62 <_close_r+0x1a>
 8013f5c:	682b      	ldr	r3, [r5, #0]
 8013f5e:	b103      	cbz	r3, 8013f62 <_close_r+0x1a>
 8013f60:	6023      	str	r3, [r4, #0]
 8013f62:	bd38      	pop	{r3, r4, r5, pc}
 8013f64:	24004f98 	.word	0x24004f98

08013f68 <_fstat_r>:
 8013f68:	b538      	push	{r3, r4, r5, lr}
 8013f6a:	4d07      	ldr	r5, [pc, #28]	; (8013f88 <_fstat_r+0x20>)
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	4604      	mov	r4, r0
 8013f70:	4608      	mov	r0, r1
 8013f72:	4611      	mov	r1, r2
 8013f74:	602b      	str	r3, [r5, #0]
 8013f76:	f7ee fbb0 	bl	80026da <_fstat>
 8013f7a:	1c43      	adds	r3, r0, #1
 8013f7c:	d102      	bne.n	8013f84 <_fstat_r+0x1c>
 8013f7e:	682b      	ldr	r3, [r5, #0]
 8013f80:	b103      	cbz	r3, 8013f84 <_fstat_r+0x1c>
 8013f82:	6023      	str	r3, [r4, #0]
 8013f84:	bd38      	pop	{r3, r4, r5, pc}
 8013f86:	bf00      	nop
 8013f88:	24004f98 	.word	0x24004f98

08013f8c <_isatty_r>:
 8013f8c:	b538      	push	{r3, r4, r5, lr}
 8013f8e:	4d06      	ldr	r5, [pc, #24]	; (8013fa8 <_isatty_r+0x1c>)
 8013f90:	2300      	movs	r3, #0
 8013f92:	4604      	mov	r4, r0
 8013f94:	4608      	mov	r0, r1
 8013f96:	602b      	str	r3, [r5, #0]
 8013f98:	f7ee fbaf 	bl	80026fa <_isatty>
 8013f9c:	1c43      	adds	r3, r0, #1
 8013f9e:	d102      	bne.n	8013fa6 <_isatty_r+0x1a>
 8013fa0:	682b      	ldr	r3, [r5, #0]
 8013fa2:	b103      	cbz	r3, 8013fa6 <_isatty_r+0x1a>
 8013fa4:	6023      	str	r3, [r4, #0]
 8013fa6:	bd38      	pop	{r3, r4, r5, pc}
 8013fa8:	24004f98 	.word	0x24004f98

08013fac <_lseek_r>:
 8013fac:	b538      	push	{r3, r4, r5, lr}
 8013fae:	4d07      	ldr	r5, [pc, #28]	; (8013fcc <_lseek_r+0x20>)
 8013fb0:	4604      	mov	r4, r0
 8013fb2:	4608      	mov	r0, r1
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	602a      	str	r2, [r5, #0]
 8013fba:	461a      	mov	r2, r3
 8013fbc:	f7ee fba8 	bl	8002710 <_lseek>
 8013fc0:	1c43      	adds	r3, r0, #1
 8013fc2:	d102      	bne.n	8013fca <_lseek_r+0x1e>
 8013fc4:	682b      	ldr	r3, [r5, #0]
 8013fc6:	b103      	cbz	r3, 8013fca <_lseek_r+0x1e>
 8013fc8:	6023      	str	r3, [r4, #0]
 8013fca:	bd38      	pop	{r3, r4, r5, pc}
 8013fcc:	24004f98 	.word	0x24004f98

08013fd0 <_read_r>:
 8013fd0:	b538      	push	{r3, r4, r5, lr}
 8013fd2:	4d07      	ldr	r5, [pc, #28]	; (8013ff0 <_read_r+0x20>)
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	4608      	mov	r0, r1
 8013fd8:	4611      	mov	r1, r2
 8013fda:	2200      	movs	r2, #0
 8013fdc:	602a      	str	r2, [r5, #0]
 8013fde:	461a      	mov	r2, r3
 8013fe0:	f7ee fb36 	bl	8002650 <_read>
 8013fe4:	1c43      	adds	r3, r0, #1
 8013fe6:	d102      	bne.n	8013fee <_read_r+0x1e>
 8013fe8:	682b      	ldr	r3, [r5, #0]
 8013fea:	b103      	cbz	r3, 8013fee <_read_r+0x1e>
 8013fec:	6023      	str	r3, [r4, #0]
 8013fee:	bd38      	pop	{r3, r4, r5, pc}
 8013ff0:	24004f98 	.word	0x24004f98

08013ff4 <_init>:
 8013ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ff6:	bf00      	nop
 8013ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ffa:	bc08      	pop	{r3}
 8013ffc:	469e      	mov	lr, r3
 8013ffe:	4770      	bx	lr

08014000 <_fini>:
 8014000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014002:	bf00      	nop
 8014004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014006:	bc08      	pop	{r3}
 8014008:	469e      	mov	lr, r3
 801400a:	4770      	bx	lr
